<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello-world</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>摘要内容……</p>
<span id="more"></span>
<p>以下为隐藏内容</p>
<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>一个函数秒杀 2Sum 3Sum 4Sum 问题</title>
    <url>/posts/2df4ba17/</url>
    <content><![CDATA[<h1 id="一个函数秒杀-2Sum-3Sum-4Sum-问题"><a href="#一个函数秒杀-2Sum-3Sum-4Sum-问题" class="headerlink" title="一个函数秒杀 2Sum 3Sum 4Sum 问题"></a>一个函数秒杀 2Sum 3Sum 4Sum 问题</h1><p>经常刷 LeetCode 的读者肯定知道鼎鼎有名的 <code>twoSum</code> 问题，我们的旧文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484474&idx=1&sn=dfbadbe6e17d695a1907e2adcd9f0d3c&chksm=9bd7fa32aca0732406829a6d1de34b7e3144af239cc25e014f5349d73cea952d5f2b0473345a&scene=21#wechat_redirect">Two Sum 问题的核心思想</a> 对 <code>twoSum</code> 的几个变种做了解析。</p>
<p>但是除了 <code>twoSum</code> 问题，LeetCode 上面还有 <code>3Sum</code>，<code>4Sum</code> 问题，我估计以后出个 <code>5Sum</code>，<code>6Sum</code> 也不是不可能。</p>
<p>那么，对于这种问题有没有什么好办法用套路解决呢？本文就由浅入深，层层推进，用一个函数来解决所有 <code>nSum</code> 类型的问题。</p>
<h2 id="一、twoSum-问题"><a href="#一、twoSum-问题" class="headerlink" title="一、twoSum 问题"></a>一、twoSum 问题</h2><p>[leetcode1](<a href="https://leetcode-cn.com/problems/two-sum/">1. 两数之和 - 力扣（LeetCode） (leetcode-cn.com)</a>)</p>
<p>力扣上的 twoSum 问题，题目要求返回的是索引，这里我来编一道 twoSum 题目，不要返回索引，返回元素的值：</p>
<p>如果假设输入一个数组 <code>nums</code> 和一个目标和 <code>target</code>，<strong>请你返回 <code>nums</code> 中能够凑出 <code>target</code> 的两个元素的值</strong>，比如输入 <code>nums = [5,3,1,6], target = 9</code>，那么算法返回两个元素 <code>[3,6]</code>。可以假设只有且仅有一对儿元素可以凑出 <code>target</code>。</p>
<p>我们可以先对 <code>nums</code> 排序，然后利用前文「<a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484505&idx=1&sn=0e9517f7c4021df0e6146c6b2b0c4aba&chksm=9bd7fa51aca07347009c591c403b3228f41617806429e738165bd58d60220bf8f15f92ff8a2e&scene=21#wechat_redirect">双指针技巧汇总</a>」写过的左右双指针技巧，从两端相向而行就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; <span class="title function_">twoSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 先对数组排序</span></span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="comment">// 左右指针</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">        <span class="comment">// 根据 sum 和 target 的比较，移动左右指针</span></span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            lo++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            hi--;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;nums[lo], nums[hi]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以解决这个问题，不过我们要继续魔改题目，把这个题目变得更泛化，更困难一点：</p>
<p><strong><code>nums</code> 中可能有多对儿元素之和都等于 <code>target</code>，请你的算法返回所有和为 <code>target</code> 的元素对儿，其中不能出现重复</strong>。</p>
<p>函数签名如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">twoSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span>;</span><br></pre></td></tr></table></figure>

<p>比如说输入为 <code>nums = [1,3,1,2,2,3], target = 4</code>，那么算法返回的结果就是：<code>[[1,3],[2,2]]</code>。</p>
<p>对于修改后的问题，关键难点是现在可能有多个和为 <code>target</code> 的数对儿，还不能重复，比如上述例子中 <code>[1,3]</code> 和 <code>[3,1]</code> 就算重复，只能算一次。</p>
<p>首先，基本思路肯定还是排序加双指针：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">twoSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target &#123;</span></span><br><span class="line"><span class="params">    // 先对数组排序</span></span><br><span class="line"><span class="params">    sort(nums.begin()</span>, nums.end());</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = nums.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">        <span class="comment">// 根据 sum 和 target 的比较，移动左右指针</span></span><br><span class="line">        <span class="keyword">if</span>      (sum &lt; target) lo++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) hi--;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push_back(&#123;lo, hi&#125;);</span><br><span class="line">            lo++; hi--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，这样实现会造成重复的结果，比如说 <code>nums = [1,1,1,2,2,3,3], target = 4</code>，得到的结果中 <code>[1,3]</code> 肯定会重复。</p>
<p>出问题的地方在于 <code>sum == target</code> 条件的 if 分支，当给 <code>res</code> 加入一次结果后，<code>lo</code> 和 <code>hi</code> 不应该改变 1 的同时，还应该跳过所有重复的元素：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/EQzz7o_20210427105202.png" alt="图片"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">    <span class="comment">// 记录索引 lo 和 hi 最初对应的值</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> nums[lo], right = nums[hi];</span><br><span class="line">    <span class="keyword">if</span> (sum &lt; target)      lo++;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) hi--;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        res.push_back(&#123;left, right&#125;);</span><br><span class="line">        <span class="comment">// 跳过所有重复的元素</span></span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以保证一个答案只被添加一次，重复的结果都会被跳过，可以得到正确的答案。不过，受这个思路的启发，其实前两个 if 分支也是可以做一点效率优化，跳过相同的元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">twoSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// nums 数组必须有序</span></span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">0</span>, hi = nums.size() - <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> nums[lo], right = nums[hi];</span><br><span class="line">        <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push_back(&#123;left, right&#125;);</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">            <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，一个通用化的 <code>twoSum</code> 函数就写出来了，请确保你理解了该算法的逻辑，我们后面解决 <code>3Sum</code> 和 <code>4Sum</code> 的时候会复用这个函数。</p>
<p>这个函数的时间复杂度非常容易看出来，双指针操作的部分虽然有那么多 while 循环，但是时间复杂度还是 <code>O(N)</code>，而排序的时间复杂度是 <code>O(NlogN)</code>，所以这个函数的时间复杂度是 <code>O(NlogN)</code>。</p>
<h3 id="二、3Sum-问题"><a href="#二、3Sum-问题" class="headerlink" title="二、3Sum 问题"></a>二、3Sum 问题</h3><p><a href="https://leetcode-cn.com/problems/3sum/">Leetcode15</a></p>
<p>这是力扣第 15 题「三数之和」：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/MUV5CJ_20210427105255.png" alt="图片"></p>
<p>题目就是让我们找 <code>nums</code> 中和为 0 的三个元素，返回所有可能的三元组（triple），函数签名如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">threeSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span>;</span><br></pre></td></tr></table></figure>

<p>这样，我们再泛化一下题目，不要光和为 0 的三元组了，计算和为 <code>target</code> 的三元组吧，同上面的 <code>twoSum</code> 一样，也不允许重复的结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">threeSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 求和为 0 的三元组</span></span><br><span class="line">    <span class="keyword">return</span> threeSumTarget(nums, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">threeSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 输入数组 nums，返回所有和为 target 的三元组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个问题怎么解决呢？<strong>很简单，穷举呗</strong>。现在我们想找和为 <code>target</code> 的三个数字，那么对于第一个数字，可能是什么？<code>nums</code> 中的每一个元素 <code>nums[i]</code> 都有可能！</p>
<p>那么，确定了第一个数字之后，剩下的两个数字可以是什么呢？其实就是和为 <code>target - nums[i]</code> 的两个数字呗，那不就是 <code>twoSum</code> 函数解决的问题么🤔</p>
<p>可以直接写代码了，需要把 <code>twoSum</code> 函数稍作修改即可复用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 从 nums[start] 开始，计算有序数组</span></span><br><span class="line"><span class="comment"> * nums 中所有和为 target 的二元组 */</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">twoSumTarget</span><span class="params">(</span></span><br><span class="line"><span class="params">    vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 左指针改为从 start 开始，其他不变</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> start, hi = nums.size() - <span class="number">1</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 计算数组 nums 中所有和为 target 的三元组 */</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">threeSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 数组得排个序</span></span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="comment">// 穷举 threeSum 的第一个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 对 target - nums[i] 计算 twoSum</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; </span><br><span class="line">            tuples = twoSumTarget(nums, i + <span class="number">1</span>, target - nums[i]);</span><br><span class="line">        <span class="comment">// 如果存在满足条件的二元组，再加上 nums[i] 就是结果三元组</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;&amp; tuple : tuples) &#123;</span><br><span class="line">            tuple.push_back(nums[i]);</span><br><span class="line">            res.push_back(tuple);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 跳过第一个数字重复的情况，否则会出现重复结果</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，类似 <code>twoSum</code>，<code>3Sum</code> 的结果也可能重复，比如输入是 <code>nums = [1,1,1,2,3], target = 6</code>，结果就会重复。</p>
<p><strong>关键点在于，不能让第一个数重复，至于后面的两个数，我们复用的 <code>twoSum</code> 函数会保证它们不重复</strong>。所以代码中必须用一个 while 循环来保证 <code>3Sum</code> 中第一个元素不重复。</p>
<p>至此，<code>3Sum</code> 问题就解决了，时间复杂度不难算，排序的复杂度为 <code>O(NlogN)</code>，<code>twoSumTarget</code> 函数中的双指针操作为 <code>O(N)</code>，<code>threeSumTarget</code> 函数在 for 循环中调用 <code>twoSumTarget</code> 所以总的时间复杂度就是 <code>O(NlogN + N^2) = O(N^2)</code>。</p>
<h3 id="三、4Sum-问题"><a href="#三、4Sum-问题" class="headerlink" title="三、4Sum 问题"></a>三、4Sum 问题</h3><p><a href="https://leetcode-cn.com/problems/4sum/">Leetcode18</a></p>
<p>这是力扣第 18 题「四数之和」：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/GjaUGB_20210427105438.png" alt="图片"></p>
<p>函数签名如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">fourSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span>;</span><br></pre></td></tr></table></figure>

<p>都到这份上了，<code>4Sum</code> 完全就可以用相同的思路：穷举第一个数字，然后调用 <code>3Sum</code> 函数计算剩下三个数，最后组合出和为 <code>target</code> 的四元组。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">fourSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 数组需要排序</span></span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="comment">// 穷举 fourSum 的第一个数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="comment">// 对 target - nums[i] 计算 threeSum</span></span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; </span><br><span class="line">            triples = threeSumTarget(nums, i + <span class="number">1</span>, target - nums[i]);</span><br><span class="line">        <span class="comment">// 如果存在满足条件的三元组，再加上 nums[i] 就是结果四元组</span></span><br><span class="line">        <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;&amp; triple : triples) &#123;</span><br><span class="line">            triple.push_back(nums[i]);</span><br><span class="line">            res.push_back(triple);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// fourSum 的第一个数不能重复</span></span><br><span class="line">        <span class="keyword">while</span> (i &lt; n - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 从 nums[start] 开始，计算有序数组</span></span><br><span class="line"><span class="comment"> * nums 中所有和为 target 的三元组 */</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; </span><br><span class="line">    <span class="title function_">threeSumTarget</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.size();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">        <span class="comment">// i 从 start 开始穷举，其他都不变</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; n; i++) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>

<p>这样，按照相同的套路，<code>4Sum</code> 问题就解决了，时间复杂度的分析和之前类似，for 循环中调用了 <code>threeSumTarget</code> 函数，所以总的时间复杂度就是 <code>O(N^3)</code>。</p>
<h3 id="四、100Sum-问题？"><a href="#四、100Sum-问题？" class="headerlink" title="四、100Sum 问题？"></a>四、100Sum 问题？</h3><p>在 LeetCode 上，<code>4Sum</code> 就到头了，<strong>但是回想刚才写 <code>3Sum</code> 和 <code>4Sum</code> 的过程，实际上是遵循相同的模式的</strong>。我相信你只要稍微修改一下 <code>4Sum</code> 的函数就可以复用并解决 <code>5Sum</code> 问题，然后解决 <code>6Sum</code> 问题……</p>
<p>那么，如果我让你求 <code>100Sum</code> 问题，怎么办呢？其实我们可以观察上面这些解法，统一出一个 <code>nSum</code> 函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注意：调用这个函数之前一定要先给 nums 排序 */</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">nSumTarget</span><span class="params">(</span></span><br><span class="line"><span class="params">    vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> n, <span class="type">int</span> start, <span class="type">int</span> target)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> nums.size();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    <span class="comment">// 至少是 2Sum，且数组大小不应该小于 n</span></span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">2</span> || sz &lt; n) <span class="keyword">return</span> res;</span><br><span class="line">    <span class="comment">// 2Sum 是 base case</span></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="comment">// 双指针那一套操作</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> start, hi = sz - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[lo] + nums[hi];</span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> nums[lo], right = nums[hi];</span><br><span class="line">            <span class="keyword">if</span> (sum &lt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;</span><br><span class="line">                <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.push_back(&#123;left, right&#125;);</span><br><span class="line">                <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[lo] == left) lo++;</span><br><span class="line">                <span class="keyword">while</span> (lo &lt; hi &amp;&amp; nums[hi] == right) hi--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// n &gt; 2 时，递归计算 (n-1)Sum 的结果</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; sz; i++) &#123;</span><br><span class="line">            vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; </span><br><span class="line">                sub = nSumTarget(nums, n - <span class="number">1</span>, i + <span class="number">1</span>, target - nums[i]);</span><br><span class="line">            <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;&amp; arr : sub) &#123;</span><br><span class="line">                <span class="comment">// (n-1)Sum 加上 nums[i] 就是 nSum</span></span><br><span class="line">                arr.push_back(nums[i]);</span><br><span class="line">                res.push_back(arr);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; sz - <span class="number">1</span> &amp;&amp; nums[i] == nums[i + <span class="number">1</span>]) i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>嗯，看起来很长，实际上就是把之前的题目解法合并起来了，<code>n == 2</code> 时是 <code>twoSum</code> 的双指针解法，<code>n &gt; 2</code> 时就是穷举第一个数字，然后递归调用计算 <code>(n-1)Sum</code>，组装答案。</p>
<p><strong>需要注意的是，调用这个 <code>nSum</code> 函数之前一定要先给 <code>nums</code> 数组排序</strong>，因为 <code>nSum</code> 是一个递归函数，如果在 <code>nSum</code> 函数里调用排序函数，那么每次递归都会进行没有必要的排序，效率会非常低。</p>
<p>比如说现在我们写 LeetCode 上的 <code>4Sum</code> 问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">fourSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="comment">// n 为 4，从 nums[0] 开始计算和为 target 的四元组</span></span><br><span class="line">    <span class="keyword">return</span> nSumTarget(nums, <span class="number">4</span>, <span class="number">0</span>, target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再比如 LeetCode 的 <code>3Sum</code> 问题，找 <code>target == 0</code> 的三元组：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">threeSum</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    sort(nums.begin(), nums.end());</span><br><span class="line">    <span class="comment">// n 为 3，从 nums[0] 开始计算和为 0 的三元组</span></span><br><span class="line">    <span class="keyword">return</span> nSumTarget(nums, <span class="number">3</span>, <span class="number">0</span>, <span class="number">0</span>);        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么，如果让你计算 <code>100Sum</code> 问题，直接调用这个函数就完事儿了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>glance内存分析工具使用</title>
    <url>/posts/b7702d4/</url>
    <content><![CDATA[<h1 id="glance内存分析工具使用"><a href="#glance内存分析工具使用" class="headerlink" title="glance内存分析工具使用"></a>glance内存分析工具使用</h1><p><a href="http://www.ttlsa.com/html/1952.html">glances </a>是一款用于 <a href="http://www.ttlsa.com/linux/">Linux</a>、BSD 的开源命令行系统监视工具，它使用 <a href="http://www.ttlsa.com/python/">Python</a> 语言开发，能够监视 CPU、负载、内存、磁盘 I&#x2F;O、网络流量、文件系统、系统温度等信息。本文介绍 glances 的使用方法和技巧，帮助 Linux 系统管理员了解掌握服务器性能。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>glances 可以为 Unix 和 Linux 性能专家提供监视和分析性能数据的功能，其中包括：</p>
<ul>
<li>CPU 使用率</li>
<li>内存使用情况</li>
<li>内核统计信息和运行队列信息</li>
<li>磁盘 I&#x2F;O 速度、传输和读&#x2F;写比率</li>
<li>文件系统中的可用空间</li>
<li>磁盘适配器</li>
<li>网络 I&#x2F;O 速度、传输和读&#x2F;写比率</li>
<li>页面空间和页面速度</li>
<li>消耗资源最多的进程</li>
<li>计算机信息和系统资源</li>
</ul>
<p>glances 工具可以在用户的终端上实时显示重要的系统信息，并动态地对其进行更新。这个高效的工具可以工作于任何终端屏幕。另外它并不会消耗大量的 CPU 资源，通常低于百分之二。glances 在屏幕上对数据进行显示，并且每隔两秒钟对其进行更新。您也可以自己将这个时间间隔更改为更长或更短的数值。glances 工具还可以将相同的数据捕获到一个文件，便于以后对报告进行分析和绘制图形。输出文件可以是电子表格的格式 (.csv) 或者 html 格式。</p>
<h2 id="两种方法安装-glances"><a href="#两种方法安装-glances" class="headerlink" title="两种方法安装 glances"></a>两种方法安装 glances</h2><p>通 常可以有两种方法安装 glances。第一种是通过编译源代码的方式，这种方法比较复杂另外可能会遇到软件包依赖性问题。还有一种是使用特定的软件包管理工具来安装 glances，这种方法比较简单。本文使用后者，需要说明的是在 CentOS 特定的软件包管理工具来安装。glances 要首先配置 EPEL repo，然后使用 pip 工具安装 glances。</p>
<h3 id="pip-软件包简介"><a href="#pip-软件包简介" class="headerlink" title="pip 软件包简介"></a>pip 软件包简介</h3><p>通 常 Linux 系统管理员有两种方式来安装一个 Python 的软件包：一种是通过系统的包管理工具（如 apt-get）从系统的软件仓库里安装，一种是通过 Python 自己的包管理工具（如 easy_install 或者 pip）从 Python Cheese Shop 中下载安装。笔者推荐使用 pip。pip 是一个可以代替 easy_install 的安装和管理 Python 软件包的工具，是一个安装 Python 库很方便的工具，功能类似 YUM。注意 CentOS 和 Fedora 下安装 Python-pip 后，关键字不是 pip 而是 pip-Python。</p>
<h3 id="首先配置-EPEL-repo"><a href="#首先配置-EPEL-repo" class="headerlink" title="首先配置 EPEL repo"></a>首先配置 EPEL repo</h3><p>如 果既想获得 RHEL 的高质量、高性能、高可靠性，又需要方便易用（关键是免费）的软件包更新功能，那么 Fedora Project 推出的 EPEL（Extra Packages for Enterprise Linux ，<a href="http://fedoraproject.org/wiki/EPEL%EF%BC%89%E6%AD%A3%E5%A5%BD%E9%80%82%E5%90%88%E4%BD%A0%E3%80%82%E5%AE%83%E6%98%AF%E7%94%B1">http://fedoraproject.org/wiki/EPEL）正好适合你。它是由</a> Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS、Scientific Linux 等提供高质量软件包的项目。装上了 EPEL，就像在 Fedora 上一样，可以通过 yum install package-name，随意安装软件。安装使用 EPEL 非常简单：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#wget http://ftp.riken.jp/Linux/fedora/epel/RPM-GPG-KEY-EPEL-6</span></span><br><span class="line"><span class="comment">#rpm --import RPM-GPG-KEY-EPEL-6</span></span><br><span class="line"><span class="comment">#rm -f RPM-GPG-KEY-EPEL-6</span></span><br><span class="line"><span class="comment">#vi /etc/yum.repos.d/epel.repo</span></span><br><span class="line"><span class="comment"># create new</span></span><br><span class="line">[epel]</span><br><span class="line">name=EPEL RPM Repository <span class="keyword">for</span> Red Hat Enterprise Linux</span><br><span class="line">baseurl=http://ftp.riken.jp/Linux/fedora/epel/6/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br></pre></td></tr></table></figure>

<h3 id="使用-pip-安装-glances"><a href="#使用-pip-安装-glances" class="headerlink" title="使用 pip 安装 glances"></a>使用 pip 安装 glances</h3><p>这里介绍一下安装过程：首先使用 YUM 安装 pip 工具，然后使用 pip 工具安装 glances 和用来显示系统温度的相关软件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum --enablerepo=epel install Python Python-pip Python-devel gcc</span></span><br><span class="line"><span class="comment"># pip-Python install glances</span></span><br></pre></td></tr></table></figure>

<h3 id="安装-lm-sensors-软件"><a href="#安装-lm-sensors-软件" class="headerlink" title="安装 lm_sensors 软件"></a>安装 lm_sensors 软件</h3><p>lm_sensors 的软件可以帮助我们来监控主板、CPU 的工作电压、风扇转速、温度等数据。这些数据我们通常在主板的 BIOS 也可以看到。当我们可以在机器运行的时候通过 lm_sensors 随时来监测着 CPU 的温度变化，可以预防呵保护因为 CPU 过热而会烧掉。lm_sensors 软件监测到的数据可以被 glances 调用并且显示 。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum install lm_sensor</span></span><br><span class="line"><span class="comment"># pip-Python install PySensors</span></span><br></pre></td></tr></table></figure>

<h2 id="glances-使用方法"><a href="#glances-使用方法" class="headerlink" title="glances 使用方法"></a>glances 使用方法</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">glances 是一个命令行工具包括如下命令选项：</span><br><span class="line">-b：显示网络连接速度 Byte/ 秒</span><br><span class="line">-B @IP|host ：绑定服务器端 IP 地址或者主机名称</span><br><span class="line">-c @IP|host：连接 glances 服务器端</span><br><span class="line">-C file：设置配置文件默认是 /etc/glances/glances.conf</span><br><span class="line">-d：关闭磁盘 I/O 模块</span><br><span class="line">-e：显示传感器温度</span><br><span class="line">-f file：设置输出文件（格式是 HTML 或者 CSV）</span><br><span class="line">-m：关闭挂载的磁盘模块</span><br><span class="line">-n：关闭网络模块</span><br><span class="line">-p PORT：设置运行端口默认是 61209</span><br><span class="line">-P password：设置客户端 / 服务器密码</span><br><span class="line">-s：设置 glances 运行模式为服务器</span><br><span class="line">-t sec：设置屏幕刷新的时间间隔，单位为秒，默认值为 2 秒，数值许可范围：1~32767</span><br><span class="line">-h : 显示帮助信息</span><br><span class="line">-v : 显示版本信息</span><br></pre></td></tr></table></figure>

<p>glances 工作界面如图 1<br><strong>图 1.glances 工作界面</strong></p>
<p><a href="http://www.ttlsa.com/wp-content/uploads/2013/08/1.jpg"><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/21/SqJsHc.png" alt="glances"></a></p>
<h3 id="glances-工作界面的说明"><a href="#glances-工作界面的说明" class="headerlink" title="glances 工作界面的说明 :"></a>glances 工作界面的说明 :</h3><p>在图 1 的上部是 CPU 、Load（负载）、Mem（内存使用）、 Swap（交换分区）的使用情况。在图 1 的中上部是网络接口、Processes（进程）的使用情况。通常包括如下字段：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">VIRT: 虚拟内存大小</span><br><span class="line">RES: 进程占用的物理内存值</span><br><span class="line">%CPU：该进程占用的 CPU 使用率</span><br><span class="line"></span><br><span class="line">%MEM：该进程占用的物理内存和总内存的百分比</span><br><span class="line"></span><br><span class="line">PID: 进程 ID 号</span><br><span class="line">USER: 进程所有者的用户名</span><br><span class="line">TIME+: 该进程启动后占用的总的 CPU 时间</span><br><span class="line">IO_R 和 IO_W: 进程的读写 I/O 速率</span><br><span class="line">NAME: 进程名称</span><br><span class="line">NI: 进程优先级</span><br><span class="line">S: 进程状态，其中 S 表示休眠，R 表示正在运行，Z 表示僵死状态。</span><br></pre></td></tr></table></figure>

<p>在图 1 的中下部是传感器检测到的 CPU 温度。 在图 1 的下部是磁盘 I&#x2F;O 的使用情况。 另外 glances 可以使用交互式的方式运行该工具，用户可以使用如下快捷键：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">h ： 显示帮助信息</span><br><span class="line">q ： 离开程序退出</span><br><span class="line">c ：按照 CPU 实时负载对系统进程进行排序</span><br><span class="line">m ：按照内存使用状况对系统进程排序</span><br><span class="line">i：按照 I/O 使用状况对系统进程排序</span><br><span class="line">p： 按照进程名称排序</span><br><span class="line">d ： 显示磁盘读写状况</span><br><span class="line">w ： 删除日志文件</span><br><span class="line">l ：显示日志</span><br><span class="line">s： 显示传感器信息</span><br><span class="line">f ： 显示系统信息</span><br><span class="line">1 ：轮流显示每个 CPU 内核的使用情况（次选项仅仅使用在多核 CPU 系统）</span><br></pre></td></tr></table></figure>

<h2 id="glances-的高级应用"><a href="#glances-的高级应用" class="headerlink" title="glances 的高级应用"></a>glances 的高级应用</h2><h3 id="glances-的结果输出方法"><a href="#glances-的结果输出方法" class="headerlink" title="glances 的结果输出方法"></a>glances 的结果输出方法</h3><p>让 glances 输出 HTML 格式文件，首先安装相关软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pip-Python install Jinja2</span></span><br><span class="line"><span class="comment"># glances -o HTML -f /var/www/html</span></span><br></pre></td></tr></table></figure>

<p>下面可以使用 Firefox 浏览器输入网址: <a href="http://localhost/glances.html%EF%BC%8C%E7%BB%93%E6%9E%9C%E5%A6%82%E5%9B%BE">http://localhost/glances.html，结果如图</a> 2。<br>图 2.输出 HTML 格式文件</p>
<p>[<img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/21/avd6Oo.png" alt="glances"></p>
<p>输出 csv 格式</p>
<p>该文件采用逗号分隔值（CSV）的格式，并且可以将其直接导入到电子表格中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># glances -o CSV -f /home/cjh/glances.csv</span></span><br></pre></td></tr></table></figure>

<p>下面使用 libreoffice 的 calc 工具打开 csv 格式文件（如图 3）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#libreoffice --calc %U /tmp/glances.csv</span></span><br></pre></td></tr></table></figure>

<p>图 3.使用 libreoffice 的 calc 工具打开 csv 格式文件</p>
<p><a href="http://www.ttlsa.com/wp-content/uploads/2013/08/3.jpg"><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/21/BQpsTJ.png" alt="glances"></a></p>
<h3 id="glances-服务器-x2F-客户端工作方式"><a href="#glances-服务器-x2F-客户端工作方式" class="headerlink" title="glances 服务器 &#x2F; 客户端工作方式"></a>glances 服务器 &#x2F; 客户端工作方式</h3><p>glances 支持服务器&#x2F;客户端工作方式，可以实现远程监控。首先假设</p>
<p>服务器 IP 地址：10.0.2.14</p>
<p>客户端 IP 地址：10.0.2.15</p>
<p>确保二者都已经安装好 glances 软件包。</p>
<p>首先在服务器端启动；</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># glances -s -B 10.0.2.15</span></span><br><span class="line">glances server is running on 10.0.2.15:61209</span><br></pre></td></tr></table></figure>

<p>可以看到 glances 使用的端口号是 61209，所以用户需要确保防火墙打开这个端口。</p>
<p>下面在客户端使用如下命令连接服务器如图 4：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># glances -c 10.0.2.15</span></span><br></pre></td></tr></table></figure>

<p>图 4.客户端连接服务器</p>
<p>[<img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/21/bCppDU.png" alt="glances"></p>
<p>注意图 4 的左下角显示“Connected to 10.0.2.15”&gt;表示客户端已经连接服务器成功。</p>
<p>通过 glances 输出颜色了解系统性能<br>图 5.是 glances 的一个输出界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/21/rd5V5J.png" alt="glances"></p>
<p>绿色表示性能良好，无需做任何额外工作；（此时 CPU 使用率、磁盘空间使用率和内存使用率低于 50%，系统负载低于 0.7）。</p>
<p>蓝色表示系统性能有一些小问题，用户应当开始关注系统性能；（此时 CPU 使用率、磁盘空间使用率和内存使用率在 50%-70% 之间，系统负载在 0.7-1 之间）。</p>
<p>品红表示性能报警，应当采取措施比如备份数据；（此时 CPU 使用率、磁盘空间使用率和内存使用率在 70%-90% 之间，，系统负载在 1-5 之间）。</p>
<p>红色表示性能问题严重，可能宕机；（此时 CPU 使用率、磁盘空间使用率和内存使用率在大于 90%，系统负载大于 5）。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>终端</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行的艺术</title>
    <url>/posts/6aa1f673/</url>
    <content><![CDATA[<h1 id="命令行的艺术"><a href="#命令行的艺术" class="headerlink" title="命令行的艺术"></a>命令行的艺术</h1><p><a href="https://gitter.im/jlevy/the-art-of-command-line?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/jlevy/the-art-of-command-line"></a></p>
<ul>
<li><a href="#%E5%89%8D%E8%A8%80">前言</a></li>
<li><a href="#%E5%9F%BA%E7%A1%80">基础</a></li>
<li><a href="#%E6%97%A5%E5%B8%B8%E4%BD%BF%E7%94%A8">日常使用</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E5%8F%8A%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86">文件及数据处理</a></li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E8%B0%83%E8%AF%95">系统调试</a></li>
<li><a href="#%E5%8D%95%E8%A1%8C%E8%84%9A%E6%9C%AC">单行脚本</a></li>
<li><a href="#%E5%86%B7%E9%97%A8%E4%BD%86%E6%9C%89%E7%94%A8">冷门但有用</a></li>
<li><a href="#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F">仅限 OS X 系统</a></li>
<li><a href="#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F">仅限 Windows 系统</a></li>
<li><a href="#%E6%9B%B4%E5%A4%9A%E8%B5%84%E6%BA%90">更多资源</a></li>
<li><a href="#%E5%85%8D%E8%B4%A3%E5%A3%B0%E6%98%8E">免责声明</a></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/04/15/8AbFix.png"></p>
<p>熟练使用命令行是一种常常被忽视，或被认为难以掌握的技能，但实际上，它会提高你作为工程师的灵活性以及生产力。本文是一份我在 Linux 上工作时，发现的一些命令行使用技巧的摘要。有些技巧非常基础，而另一些则相当复杂，甚至晦涩难懂。这篇文章并不长，但当你能够熟练掌握这里列出的所有技巧时，你就学会了很多关于命令行的东西了。</p>
<p>这篇文章是<a href="AUTHORS.md">许多作者和译者</a>共同的成果。这里的部分内容<a href="http://www.quora.com/What-are-some-lesser-known-but-useful-Unix-commands">首次</a><a href="http://www.quora.com/What-are-the-most-useful-Swiss-army-knife-one-liners-on-Unix">出现</a>于 <a href="http://www.quora.com/What-are-some-time-saving-tips-that-every-Linux-user-should-know">Quora</a>，但已经迁移到了 Github，并由众多高手做出了许多改进。如果你在本文中发现了错误或者存在可以改善的地方，请<a href="/CONTRIBUTING.md"><strong>贡献你的一份力量</strong></a>。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>涵盖范围：</p>
<ul>
<li>这篇文章不仅能帮助刚接触命令行的新手，而且对具有经验的人也大有裨益。本文致力于做到<em>覆盖面广</em>（涉及所有重要的内容），<em>具体</em>（给出具体的最常用的例子），以及<em>简洁</em>（避免冗余的内容，或是可以在其他地方轻松查到的细枝末节）。在特定应用场景下，本文的内容属于基本功或者能帮助您节约大量的时间。</li>
<li>本文主要为 Linux 所写，但在<a href="#%E4%BB%85%E9%99%90-os-x-%E7%B3%BB%E7%BB%9F">仅限 OS X 系统</a>章节和<a href="#%E4%BB%85%E9%99%90-windows-%E7%B3%BB%E7%BB%9F">仅限 Windows 系统</a>章节中也包含有对应操作系统的内容。除去这两个章节外，其它的内容大部分均可在其他类 Unix 系统或 OS X，甚至 Cygwin 中得到应用。</li>
<li>本文主要关注于交互式 Bash，但也有很多技巧可以应用于其他 shell 和 Bash 脚本当中。</li>
<li>除去“标准的”Unix 命令，本文还包括了一些依赖于特定软件包的命令（前提是它们具有足够的价值）。</li>
</ul>
<p>注意事项：</p>
<ul>
<li>为了能在一页内展示尽量多的东西，一些具体的信息可以在引用的页面中找到。我们相信机智的你知道如何使用 Google 或者其他搜索引擎来查阅到更多的详细信息。文中部分命令需要您使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code>，<code>pacman</code>，<code>pip</code> 或 <code>brew</code>（以及其它合适的包管理器）来安装依赖的程序。</li>
<li>遇到问题的话，请尝试使用 <a href="http://explainshell.com/">Explainshell</a> 去获取相关命令、参数、管道等内容的解释。</li>
</ul>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li><p>学习 Bash 的基础知识。具体地，在命令行中输入 <code>man bash</code> 并至少全文浏览一遍; 它理解起来很简单并且不冗长。其他的 shell 可能很好用，但 Bash 的功能已经足够强大并且到几乎总是可用的（ 如果你<em>只</em>学习 zsh，fish 或其他的 shell 的话，在你自己的设备上会显得很方便，但过度依赖这些功能会给您带来不便，例如当你需要在服务器上工作时）。</p>
</li>
<li><p>熟悉至少一个基于文本的编辑器。通常而言 Vim （<code>vi</code>） 会是你最好的选择，毕竟在终端中编辑文本时 Vim 是最好用的工具（甚至大部分情况下 Vim 要比 Emacs、大型 IDE 或是炫酷的编辑器更好用）。</p>
</li>
<li><p>学会如何使用 <code>man</code> 命令去阅读文档。学会使用 <code>apropos</code> 去查找文档。知道有些命令并不对应可执行文件，而是在 Bash 内置好的，此时可以使用 <code>help</code> 和 <code>help -d</code> 命令获取帮助信息。你可以用 <code>type 命令</code> 来判断这个命令到底是可执行文件、shell 内置命令还是别名。</p>
</li>
<li><p>学会使用 <code>&gt;</code> 和 <code>&lt;</code> 来重定向输出和输入，学会使用 <code>|</code> 来重定向管道。明白 <code>&gt;</code> 会覆盖了输出文件而 <code>&gt;&gt;</code> 是在文件末添加。了解标准输出 stdout 和标准错误 stderr。</p>
</li>
<li><p>学会使用通配符 <code>*</code> （或许再算上 <code>?</code> 和 <code>[</code>…<code>]</code>） 和引用以及引用中 <code>&#39;</code> 和 <code>&quot;</code> 的区别（后文中有一些具体的例子）。</p>
</li>
<li><p>熟悉 Bash 中的任务管理工具：<code>&amp;</code>，<strong>ctrl-z</strong>，<strong>ctrl-c</strong>，<code>jobs</code>，<code>fg</code>，<code>bg</code>，<code>kill</code> 等。</p>
</li>
<li><p>学会使用 <code>ssh</code> 进行远程命令行登录，最好知道如何使用 <code>ssh-agent</code>，<code>ssh-add</code> 等命令来实现基础的无密码认证登录。</p>
</li>
<li><p>学会基本的文件管理工具：<code>ls</code> 和 <code>ls -l</code> （了解 <code>ls -l</code> 中每一列代表的意义），<code>less</code>，<code>head</code>，<code>tail</code> 和 <code>tail -f</code> （甚至 <code>less +F</code>），<code>ln</code> 和 <code>ln -s</code> （了解硬链接与软链接的区别），<code>chown</code>，<code>chmod</code>，<code>du</code> （硬盘使用情况概述：<code>du -hs *</code>）。 关于文件系统的管理，学习 <code>df</code>，<code>mount</code>，<code>fdisk</code>，<code>mkfs</code>，<code>lsblk</code>。知道 inode 是什么（与 <code>ls -i</code> 和 <code>df -i</code> 等命令相关）。</p>
</li>
<li><p>学习基本的网络管理工具：<code>ip</code> 或 <code>ifconfig</code>，<code>dig</code>。</p>
</li>
<li><p>学习并使用一种版本控制管理系统，例如 <code>git</code>。</p>
</li>
<li><p>熟悉正则表达式，学会使用 <code>grep</code>／<code>egrep</code>，它们的参数中 <code>-i</code>，<code>-o</code>，<code>-v</code>，<code>-A</code>，<code>-B</code> 和 <code>-C</code> 这些是很常用并值得认真学习的。</p>
</li>
<li><p>学会使用 <code>apt-get</code>，<code>yum</code>，<code>dnf</code> 或 <code>pacman</code> （具体使用哪个取决于你使用的 Linux 发行版）来查找和安装软件包。并确保你的环境中有 <code>pip</code> 来安装基于 Python 的命令行工具 （接下来提到的部分程序使用 <code>pip</code> 来安装会很方便）。</p>
</li>
</ul>
<h2 id="日常使用"><a href="#日常使用" class="headerlink" title="日常使用"></a>日常使用</h2><ul>
<li><p>在 Bash 中，可以通过按 <strong>Tab</strong> 键实现自动补全参数，使用 <strong>ctrl-r</strong> 搜索命令行历史记录（按下按键之后，输入关键字便可以搜索，重复按下 <strong>ctrl-r</strong> 会向后查找匹配项，按下 <strong>Enter</strong> 键会执行当前匹配的命令，而按下右方向键会将匹配项放入当前行中，不会直接执行，以便做出修改）。</p>
</li>
<li><p>在 Bash 中，可以按下 <strong>ctrl-w</strong> 删除你键入的最后一个单词，<strong>ctrl-u</strong> 可以删除行内光标所在位置之前的内容，<strong>alt-b</strong> 和 <strong>alt-f</strong> 可以以单词为单位移动光标，<strong>ctrl-a</strong> 可以将光标移至行首，<strong>ctrl-e</strong> 可以将光标移至行尾，<strong>ctrl-k</strong> 可以删除光标至行尾的所有内容，<strong>ctrl-l</strong> 可以清屏。键入 <code>man readline</code> 可以查看 Bash 中的默认快捷键。内容有很多，例如 <strong>alt-.</strong> 循环地移向前一个参数，而 <strong>alt-</strong>* 可以展开通配符。</p>
</li>
<li><p>你喜欢的话，可以执行 <code>set -o vi</code> 来使用 vi 风格的快捷键，而执行 <code>set -o emacs</code> 可以把它改回来。</p>
</li>
<li><p>为了便于编辑长命令，在设置你的默认编辑器后（例如 <code>export EDITOR=vim</code>），<strong>ctrl-x</strong> <strong>ctrl-e</strong> 会打开一个编辑器来编辑当前输入的命令。在 vi 风格下快捷键则是 <strong>escape-v</strong>。</p>
</li>
<li><p>键入 <code>history</code> 查看命令行历史记录，再用 <code>!n</code>（<code>n</code> 是命令编号）就可以再次执行。其中有许多缩写，最有用的大概就是 <code>!$</code>， 它用于指代上次键入的参数，而 <code>!!</code> 可以指代上次键入的命令了（参考 man 页面中的“HISTORY EXPANSION”）。不过这些功能，你也可以通过快捷键 <strong>ctrl-r</strong> 和 <strong>alt-.</strong> 来实现。</p>
</li>
<li><p><code>cd</code> 命令可以切换工作路径，输入 <code>cd ~</code> 可以进入 home 目录。要访问你的 home 目录中的文件，可以使用前缀 <code>~</code>（例如 <code>~/.bashrc</code>）。在 <code>sh</code> 脚本里则用环境变量 <code>$HOME</code> 指代 home 目录的路径。</p>
</li>
<li><p>回到前一个工作路径：<code>cd -</code>。</p>
</li>
<li><p>如果你输入命令的时候中途改了主意，按下 <strong>alt-#</strong> 在行首添加 <code>#</code> 把它当做注释再按下回车执行（或者依次按下 <strong>ctrl-a</strong>， **#**， <strong>enter</strong>）。这样做的话，之后借助命令行历史记录，你可以很方便恢复你刚才输入到一半的命令。</p>
</li>
<li><p>使用 <code>xargs</code> （ 或 <code>parallel</code>）。他们非常给力。注意到你可以控制每行参数个数（<code>-L</code>）和最大并行数（<code>-P</code>）。如果你不确定它们是否会按你想的那样工作，先使用 <code>xargs echo</code> 查看一下。此外，使用 <code>-I&#123;&#125;</code> 会很方便。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find . -name <span class="string">&#x27;*.py&#x27;</span> | xargs grep some_function</span><br><span class="line"><span class="built_in">cat</span> hosts | xargs -I&#123;&#125; ssh root@&#123;&#125; hostname</span><br></pre></td></tr></table></figure>

</li>
<li><p><code>pstree -p</code> 以一种优雅的方式展示进程树。</p>
</li>
<li><p>使用 <code>pgrep</code> 和 <code>pkill</code> 根据名字查找进程或发送信号（<code>-f</code> 参数通常有用）。</p>
</li>
<li><p>了解你可以发往进程的信号的种类。比如，使用 <code>kill -STOP [pid]</code> 停止一个进程。使用 <code>man 7 signal</code> 查看详细列表。</p>
</li>
<li><p>使用 <code>nohup</code> 或 <code>disown</code> 使一个后台进程持续运行。</p>
</li>
<li><p>使用 <code>netstat -lntp</code> 或 <code>ss -plat</code> 检查哪些进程在监听端口（默认是检查 TCP 端口; 添加参数 <code>-u</code> 则检查 UDP 端口）或者 <code>lsof -iTCP -sTCP:LISTEN -P -n</code> (这也可以在 OS X 上运行)。</p>
</li>
<li><p><code>lsof</code> 来查看开启的套接字和文件。</p>
</li>
<li><p>使用 <code>uptime</code> 或 <code>w</code> 来查看系统已经运行多长时间。</p>
</li>
<li><p>使用 <code>alias</code> 来创建常用命令的快捷形式。例如：<code>alias ll=&#39;ls -latr&#39;</code> 创建了一个新的命令别名 <code>ll</code>。</p>
</li>
<li><p>可以把别名、shell 选项和常用函数保存在 <code>~/.bashrc</code>，具体看下这篇<a href="http://superuser.com/a/183980/7106">文章</a>。这样做的话你就可以在所有 shell 会话中使用你的设定。</p>
</li>
<li><p>把环境变量的设定以及登陆时要执行的命令保存在 <code>~/.bash_profile</code>。而对于从图形界面启动的 shell 和 <code>cron</code> 启动的 shell，则需要单独配置文件。</p>
</li>
<li><p>要想在几台电脑中同步你的配置文件（例如 <code>.bashrc</code> 和 <code>.bash_profile</code>），可以借助 Git。</p>
</li>
<li><p>当变量和文件名中包含空格的时候要格外小心。Bash 变量要用引号括起来，比如 <code>&quot;$FOO&quot;</code>。尽量使用 <code>-0</code> 或 <code>-print0</code> 选项以便用 NULL 来分隔文件名，例如 <code>locate -0 pattern | xargs -0 ls -al</code> 或 <code>find / -print0 -type d | xargs -0 ls -al</code>。如果 for 循环中循环访问的文件名含有空字符（空格、tab 等字符），只需用 <code>IFS=$&#39;\n&#39;</code> 把内部字段分隔符设为换行符。</p>
</li>
<li><p>在 Bash 脚本中，使用 <code>set -x</code> 去调试输出（或者使用它的变体 <code>set -v</code>，它会记录原始输入，包括多余的参数和注释）。尽可能地使用严格模式：使用 <code>set -e</code> 令脚本在发生错误时退出而不是继续运行；使用 <code>set -u</code> 来检查是否使用了未赋值的变量；试试 <code>set -o pipefail</code>，它可以监测管道中的错误。当牵扯到很多脚本时，使用 <code>trap</code> 来检测 ERR 和 EXIT。一个好的习惯是在脚本文件开头这样写，这会使它能够检测一些错误，并在错误发生时中断程序并输出信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> -euo pipefail</span><br><span class="line"><span class="built_in">trap</span> <span class="string">&quot;echo &#x27;error: Script failed: see failed command above&#x27;&quot;</span> ERR</span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Bash 脚本中，子 shell（使用括号 <code>(...)</code>）是一种组织参数的便捷方式。一个常见的例子是临时地移动工作路径，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># do something in current dir</span></span><br><span class="line">(<span class="built_in">cd</span> /some/other/dir &amp;&amp; other-command)</span><br><span class="line"><span class="comment"># continue in original dir</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 Bash 中，变量有许多的扩展方式。<code>$&#123;name:?error message&#125;</code> 用于检查变量是否存在。此外，当 Bash 脚本只需要一个参数时，可以使用这样的代码 <code>input_file=$&#123;1:?usage: $0 input_file&#125;</code>。在变量为空时使用默认值：<code>$&#123;name:-default&#125;</code>。如果你要在之前的例子中再加一个（可选的）参数，可以使用类似这样的代码 <code>output_file=$&#123;2:-logfile&#125;</code>，如果省略了 $2，它的值就为空，于是 <code>output_file</code> 就会被设为 <code>logfile</code>。数学表达式：<code>i=$(( (i + 1) % 5 ))</code>。序列：<code>&#123;1..10&#125;</code>。截断字符串：<code>$&#123;var%suffix&#125;</code> 和 <code>$&#123;var#prefix&#125;</code>。例如，假设 <code>var=foo.pdf</code>，那么 <code>echo $&#123;var%.pdf&#125;.txt</code> 将输出 <code>foo.txt</code>。</p>
</li>
<li><p>使用括号扩展（<code>&#123;</code>…<code>&#125;</code>）来减少输入相似文本，并自动化文本组合。这在某些情况下会很有用，例如 <code>mv foo.&#123;txt,pdf&#125; some-dir</code>（同时移动两个文件），<code>cp somefile&#123;,.bak&#125;</code>（会被扩展成 <code>cp somefile somefile.bak</code>）或者 <code>mkdir -p test-&#123;a,b,c&#125;/subtest-&#123;1,2,3&#125;</code>（会被扩展成所有可能的组合，并创建一个目录树）。</p>
</li>
<li><p>通过使用 <code>&lt;(some command)</code> 可以将输出视为文件。例如，对比本地文件 <code>/etc/hosts</code> 和一个远程文件：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">diff /etc/hosts &lt;(ssh somehost <span class="built_in">cat</span> /etc/hosts)</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写脚本时，你可能会想要把代码都放在大括号里。缺少右括号的话，代码就会因为语法错误而无法执行。如果你的脚本是要放在网上分享供他人使用的，这样的写法就体现出它的好处了，因为这样可以防止下载不完全代码被执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">      <span class="comment"># 在这里写代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>了解 Bash 中的“here documents”，例如 <code>cat &lt;&lt;EOF ...</code>。</p>
</li>
<li><p>在 Bash 中，同时重定向标准输出和标准错误：<code>some-command &gt;logfile 2&gt;&amp;1</code> 或者 <code>some-command &amp;&gt;logfile</code>。通常，为了保证命令不会在标准输入里残留一个未关闭的文件句柄捆绑在你当前所在的终端上，在命令后添加 <code>&lt;/dev/null</code> 是一个好习惯。</p>
</li>
<li><p>使用 <code>man ascii</code> 查看具有十六进制和十进制值的ASCII表。<code>man unicode</code>，<code>man utf-8</code>，以及 <code>man latin1</code> 有助于你去了解通用的编码信息。</p>
</li>
<li><p>使用 <code>screen</code> 或 <a href="https://tmux.github.io/"><code>tmux</code></a> 来使用多份屏幕，当你在使用 ssh 时（保存 session 信息）将尤为有用。而 <code>byobu</code> 可以为它们提供更多的信息和易用的管理工具。另一个轻量级的 session 持久化解决方案是 <a href="https://github.com/bogner/dtach"><code>dtach</code></a>。</p>
</li>
<li><p>ssh 中，了解如何使用 <code>-L</code> 或 <code>-D</code>（偶尔需要用 <code>-R</code>）开启隧道是非常有用的，比如当你需要从一台远程服务器上访问 web 页面。</p>
</li>
<li><p>对 ssh 设置做一些小优化可能是很有用的，例如这个 <code>~/.ssh/config</code> 文件包含了防止特定网络环境下连接断开、压缩数据、多通道等选项：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="attribute">TCPKeepAlive</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attribute">ServerAliveInterval</span>=15</span><br><span class="line"><span class="attribute">ServerAliveCountMax</span>=6</span><br><span class="line"><span class="attribute">Compression</span>=<span class="literal">yes</span></span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath /tmp/%r@%h:%p</span><br><span class="line">ControlPersist <span class="literal">yes</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一些其他的关于 ssh 的选项是与安全相关的，应当小心翼翼的使用。例如你应当只能在可信任的网络中启用 <code>StrictHostKeyChecking=no</code>，<code>ForwardAgent=yes</code>。</p>
</li>
<li><p>考虑使用 <a href="https://mosh.mit.edu/"><code>mosh</code></a> 作为 ssh 的替代品，它使用 UDP 协议。它可以避免连接被中断并且对带宽需求更小，但它需要在服务端做相应的配置。</p>
</li>
<li><p>获取八进制形式的文件访问权限（修改系统设置时通常需要，但 <code>ls</code> 的功能不那么好用并且通常会搞砸），可以使用类似如下的代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">stat</span> -c <span class="string">&#x27;%A %a %n&#x27;</span> /etc/timezone</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <a href="https://github.com/mooz/percol"><code>percol</code></a> 或者 <a href="https://github.com/junegunn/fzf"><code>fzf</code></a> 可以交互式地从另一个命令输出中选取值。</p>
</li>
<li><p>使用 <code>fpp</code>（<a href="https://github.com/facebook/PathPicker">PathPicker</a>）可以与基于另一个命令(例如 <code>git</code>）输出的文件交互。</p>
</li>
<li><p>将 web 服务器上当前目录下所有的文件（以及子目录）暴露给你所处网络的所有用户，使用：<br><code>python -m SimpleHTTPServer 7777</code> （使用端口 7777 和 Python 2）或<code>python -m http.server 7777</code> （使用端口 7777 和 Python 3）。</p>
</li>
<li><p>以其他用户的身份执行命令，使用 <code>sudo</code>。默认以 root 用户的身份执行；使用 <code>-u</code> 来指定其他用户。使用 <code>-i</code> 来以该用户登录（需要输入_你自己的_密码）。</p>
</li>
<li><p>将 shell 切换为其他用户，使用 <code>su username</code> 或者 <code>sudo - username</code>。加入 <code>-</code> 会使得切换后的环境与使用该用户登录后的环境相同。省略用户名则默认为 root。切换到哪个用户，就需要输入_哪个用户的_密码。</p>
</li>
<li><p>了解命令行的 <a href="https://wiki.debian.org/CommonErrorMessages/ArgumentListTooLong">128K 限制</a>。使用通配符匹配大量文件名时，常会遇到“Argument list too long”的错误信息。（这种情况下换用 <code>find</code> 或 <code>xargs</code> 通常可以解决。）</p>
</li>
<li><p>当你需要一个基本的计算器时，可以使用 <code>python</code> 解释器（当然你要用 python 的时候也是这样）。例如：</p>
<figure class="highlight python-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt;</span> <span class="language-python"><span class="number">2</span>+<span class="number">3</span></span></span><br><span class="line">5</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="文件及数据处理"><a href="#文件及数据处理" class="headerlink" title="文件及数据处理"></a>文件及数据处理</h2><ul>
<li><p>在当前目录下通过文件名查找一个文件，使用类似于这样的命令：<code>find . -iname &#39;*something*&#39;</code>。在所有路径下通过文件名查找文件，使用 <code>locate something</code> （但注意到 <code>updatedb</code> 可能没有对最近新建的文件建立索引，所以你可能无法定位到这些未被索引的文件）。</p>
</li>
<li><p>使用 <a href="https://github.com/ggreer/the_silver_searcher"><code>ag</code></a> 在源代码或数据文件里检索（<code>grep -r</code> 同样可以做到，但相比之下 <code>ag</code> 更加先进）。</p>
</li>
<li><p>将 HTML 转为文本：<code>lynx -dump -stdin</code>。</p>
</li>
<li><p>Markdown，HTML，以及所有文档格式之间的转换，试试 <a href="http://pandoc.org/"><code>pandoc</code></a>。</p>
</li>
<li><p>当你要处理棘手的 XML 时候，<code>xmlstarlet</code> 算是上古时代流传下来的神器。</p>
</li>
<li><p>使用 <a href="http://stedolan.github.io/jq/"><code>jq</code></a> 处理 JSON。</p>
</li>
<li><p>使用 <a href="https://github.com/0k/shyaml"><code>shyaml</code></a> 处理 YAML。</p>
</li>
<li><p>要处理 Excel 或 CSV 文件的话，<a href="https://github.com/onyxfish/csvkit">csvkit</a> 提供了 <code>in2csv</code>，<code>csvcut</code>，<code>csvjoin</code>，<code>csvgrep</code> 等方便易用的工具。</p>
</li>
<li><p>当你要处理 Amazon S3 相关的工作的时候，<a href="https://github.com/s3tools/s3cmd"><code>s3cmd</code></a> 是一个很方便的工具而 <a href="https://github.com/bloomreach/s4cmd"><code>s4cmd</code></a> 的效率更高。Amazon 官方提供的 <a href="https://github.com/aws/aws-cli"><code>aws</code></a> 以及  <a href="https://github.com/donnemartin/saws"><code>saws</code></a> 是其他 AWS 相关工作的基础，值得学习。</p>
</li>
<li><p>了解如何使用 <code>sort</code> 和 <code>uniq</code>，包括 uniq 的 <code>-u</code> 参数和 <code>-d</code> 参数，具体内容在后文单行脚本节中。另外可以了解一下 <code>comm</code>。</p>
</li>
<li><p>了解如何使用 <code>cut</code>，<code>paste</code> 和 <code>join</code> 来更改文件。很多人都会使用 <code>cut</code>，但遗忘了 <code>join</code>。</p>
</li>
<li><p>了解如何运用 <code>wc</code> 去计算新行数（<code>-l</code>），字符数（<code>-m</code>），单词数（<code>-w</code>）以及字节数（<code>-c</code>）。</p>
</li>
<li><p>了解如何使用 <code>tee</code> 将标准输入复制到文件甚至标准输出，例如 <code>ls -al | tee file.txt</code>。</p>
</li>
<li><p>要进行一些复杂的计算，比如分组、逆序和一些其他的统计分析，可以考虑使用 <a href="https://www.gnu.org/software/datamash/"><code>datamash</code></a>。</p>
</li>
<li><p>注意到语言设置（中文或英文等）对许多命令行工具有一些微妙的影响，比如排序的顺序和性能。大多数 Linux 的安装过程会将 <code>LANG</code> 或其他有关的变量设置为符合本地的设置。要意识到当你改变语言设置时，排序的结果可能会改变。明白国际化可能会使 sort 或其他命令运行效率下降<em>许多倍</em>。某些情况下（例如集合运算）你可以放心的使用 <code>export LC_ALL=C</code> 来忽略掉国际化并按照字节来判断顺序。</p>
</li>
<li><p>你可以单独指定某一条命令的环境，只需在调用时把环境变量设定放在命令的前面，例如 <code>TZ=Pacific/Fiji date</code> 可以获取斐济的时间。</p>
</li>
<li><p>了解如何使用 <code>awk</code> 和 <code>sed</code> 来进行简单的数据处理。 参阅 <a href="#one-liners">One-liners</a> 获取示例。</p>
</li>
<li><p>替换一个或多个文件中出现的字符串：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">perl -pi.bak -e <span class="string">&#x27;s/old-string/new-string/g&#x27;</span> my-files-*.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <a href="https://github.com/jlevy/repren"><code>repren</code></a> 来批量重命名文件，或是在多个文件中搜索替换内容。（有些时候 <code>rename</code> 命令也可以批量重命名，但要注意，它在不同 Linux 发行版中的功能并不完全一样。）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将文件、目录和内容全部重命名 foo -&gt; bar:</span></span><br><span class="line">repren --full --preserve-case --from foo --to bar .</span><br><span class="line"><span class="comment"># 还原所有备份文件 whatever.bak -&gt; whatever:</span></span><br><span class="line">repren --renames --from <span class="string">&#x27;(.*)\.bak&#x27;</span> --to <span class="string">&#x27;\1&#x27;</span> *.bak</span><br><span class="line"><span class="comment"># 用 rename 实现上述功能（若可用）:</span></span><br><span class="line">rename <span class="string">&#x27;s/\.bak$//&#x27;</span> *.bak</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据 man 页面的描述，<code>rsync</code> 是一个快速且非常灵活的文件复制工具。它闻名于设备之间的文件同步，但其实它在本地情况下也同样有用。在安全设置允许下，用 <code>rsync</code> 代替 <code>scp</code> 可以实现文件续传，而不用重新从头开始。它同时也是删除大量文件的<a href="https://web.archive.org/web/20130929001850/http://linuxnote.net/jianingy/en/linux/a-fast-way-to-remove-huge-number-of-files.html">最快方法</a>之一：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> empty &amp;&amp; rsync -r --delete empty/ some-dir &amp;&amp; <span class="built_in">rmdir</span> some-dir</span><br></pre></td></tr></table></figure>
</li>
<li><p>若要在复制文件时获取当前进度，可使用 <code>pv</code>，<a href="https://github.com/dmerejkowsky/pycp"><code>pycp</code></a>，<a href="https://github.com/Xfennec/progress"><code>progress</code></a>，<code>rsync --progress</code>。若所执行的复制为block块拷贝，可以使用 <code>dd status=progress</code>。</p>
</li>
<li><p>使用 <code>shuf</code> 可以以行为单位来打乱文件的内容或从一个文件中随机选取多行。</p>
</li>
<li><p>了解 <code>sort</code> 的参数。显示数字时，使用 <code>-n</code> 或者 <code>-h</code> 来显示更易读的数（例如 <code>du -h</code> 的输出）。明白排序时关键字的工作原理（<code>-t</code> 和 <code>-k</code>）。例如，注意到你需要 <code>-k1，1</code> 来仅按第一个域来排序，而 <code>-k1</code> 意味着按整行排序。稳定排序（<code>sort -s</code>）在某些情况下很有用。例如，以第二个域为主关键字，第一个域为次关键字进行排序，你可以使用 <code>sort -k1，1 | sort -s -k2，2</code>。</p>
</li>
<li><p>如果你想在 Bash 命令行中写 tab 制表符，按下 <strong>ctrl-v</strong> <strong>[Tab]</strong> 或键入 <code>$&#39;\t&#39;</code> （后者可能更好，因为你可以复制粘贴它）。</p>
</li>
<li><p>标准的源代码对比及合并工具是 <code>diff</code> 和 <code>patch</code>。使用 <code>diffstat</code> 查看变更总览数据。注意到 <code>diff -r</code> 对整个文件夹有效。使用 <code>diff -r tree1 tree2 | diffstat</code> 查看变更的统计数据。<code>vimdiff</code> 用于比对并编辑文件。</p>
</li>
<li><p>对于二进制文件，使用 <code>hd</code>，<code>hexdump</code> 或者 <code>xxd</code> 使其以十六进制显示，使用 <code>bvi</code>，<code>hexedit</code> 或者 <code>biew</code> 来进行二进制编辑。</p>
</li>
<li><p>同样对于二进制文件，<code>strings</code>（包括 <code>grep</code> 等工具）可以帮助在二进制文件中查找特定比特。</p>
</li>
<li><p>制作二进制差分文件（Delta 压缩），使用 <code>xdelta3</code>。</p>
</li>
<li><p>使用 <code>iconv</code> 更改文本编码。需要更高级的功能，可以使用 <code>uconv</code>，它支持一些高级的 Unicode 功能。例如，这条命令移除了所有重音符号：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">uconv -f utf-8 -t utf-8 -x <span class="string">&#x27;::Any-Lower; ::Any-NFD; [:Nonspacing Mark:] &gt;; ::Any-NFC; &#x27;</span> &lt; input.txt &gt; output.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>拆分文件可以使用 <code>split</code>（按大小拆分）和 <code>csplit</code>（按模式拆分）。</p>
</li>
<li><p>操作日期和时间表达式，可以用 <a href="http://www.fresse.org/dateutils/"><code>dateutils</code></a> 中的 <code>dateadd</code>、<code>datediff</code>、<code>strptime</code> 等工具。</p>
</li>
<li><p>使用 <code>zless</code>、<code>zmore</code>、<code>zcat</code> 和 <code>zgrep</code> 对压缩过的文件进行操作。</p>
</li>
<li><p>文件属性可以通过 <code>chattr</code> 进行设置，它比文件权限更加底层。例如，为了保护文件不被意外删除，可以使用不可修改标记：<code>sudo chattr +i /critical/directory/or/file</code></p>
</li>
<li><p>使用 <code>getfacl</code> 和 <code>setfacl</code> 以保存和恢复文件权限。例如：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">getfacl -R /some/path &gt; permissions.txt</span><br><span class="line">setfacl --restore=permissions.txt</span><br></pre></td></tr></table></figure>
</li>
<li><p>为了高效地创建空文件，请使用 <code>truncate</code>（创建<a href="https://zh.wikipedia.org/wiki/%E7%A8%80%E7%96%8F%E6%96%87%E4%BB%B6">稀疏文件</a>），<code>fallocate</code>（用于 ext4，xfs，btrf 和 ocfs2 文件系统），<code>xfs_mkfile</code>（适用于几乎所有的文件系统，包含在 xfsprogs 包中），<code>mkfile</code>（用于类 Unix 操作系统，比如 Solaris 和 Mac OS）。</p>
</li>
</ul>
<h2 id="系统调试"><a href="#系统调试" class="headerlink" title="系统调试"></a>系统调试</h2><ul>
<li><p><code>curl</code> 和 <code>curl -I</code> 可以被轻松地应用于 web 调试中，它们的好兄弟 <code>wget</code> 也是如此，或者也可以试试更潮的 <a href="https://github.com/jkbrzt/httpie"><code>httpie</code></a>。</p>
</li>
<li><p>获取 CPU 和硬盘的使用状态，通常使用使用 <code>top</code>（<code>htop</code> 更佳），<code>iostat</code> 和 <code>iotop</code>。而 <code>iostat -mxz 15</code> 可以让你获悉 CPU 和每个硬盘分区的基本信息和性能表现。</p>
</li>
<li><p>使用 <code>netstat</code> 和 <code>ss</code> 查看网络连接的细节。</p>
</li>
<li><p><code>dstat</code> 在你想要对系统的现状有一个粗略的认识时是非常有用的。然而若要对系统有一个深度的总体认识，使用 <a href="https://github.com/nicolargo/glances"><code>glances</code></a>，它会在一个终端窗口中向你提供一些系统级的数据。</p>
</li>
<li><p>若要了解内存状态，运行并理解 <code>free</code> 和 <code>vmstat</code> 的输出。值得留意的是“cached”的值，它指的是 Linux 内核用来作为文件缓存的内存大小，而与空闲内存无关。</p>
</li>
<li><p>Java 系统调试则是一件截然不同的事，一个可以用于 Oracle 的 JVM 或其他 JVM 上的调试的技巧是你可以运行 <code>kill -3 &lt;pid&gt;</code> 同时一个完整的栈轨迹和堆概述（包括 GC 的细节）会被保存到标准错误或是日志文件。JDK 中的 <code>jps</code>，<code>jstat</code>，<code>jstack</code>，<code>jmap</code> 很有用。<a href="https://github.com/aragozin/jvm-tools">SJK tools</a> 更高级。</p>
</li>
<li><p>使用 <a href="http://www.bitwizard.nl/mtr/"><code>mtr</code></a> 去跟踪路由，用于确定网络问题。</p>
</li>
<li><p>用 <a href="https://dev.yorhel.nl/ncdu"><code>ncdu</code></a> 来查看磁盘使用情况，它比寻常的命令，如 <code>du -sh *</code>，更节省时间。</p>
</li>
<li><p>查找正在使用带宽的套接字连接或进程，使用 <a href="http://www.ex-parrot.com/~pdw/iftop/"><code>iftop</code></a> 或 <a href="https://github.com/raboof/nethogs"><code>nethogs</code></a>。</p>
</li>
<li><p><code>ab</code> 工具（Apache 中自带）可以简单粗暴地检查 web 服务器的性能。对于更复杂的负载测试，使用 <code>siege</code>。</p>
</li>
<li><p><a href="https://wireshark.org/"><code>wireshark</code></a>，<a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html"><code>tshark</code></a> 和 <a href="http://ngrep.sourceforge.net/"><code>ngrep</code></a> 可用于复杂的网络调试。</p>
</li>
<li><p>了解 <code>strace</code> 和 <code>ltrace</code>。这俩工具在你的程序运行失败、挂起甚至崩溃，而你却不知道为什么或你想对性能有个总体的认识的时候是非常有用的。注意 profile 参数（<code>-c</code>）和附加到一个运行的进程参数 （<code>-p</code>）。</p>
</li>
<li><p>了解使用 <code>ldd</code> 来检查共享库。但是<a href="http://www.catonmat.net/blog/ldd-arbitrary-code-execution/">永远不要在不信任的文件上运行</a>。</p>
</li>
<li><p>了解如何运用 <code>gdb</code> 连接到一个运行着的进程并获取它的堆栈轨迹。</p>
</li>
<li><p>学会使用 <code>/proc</code>。它在调试正在出现的问题的时候有时会效果惊人。比如：<code>/proc/cpuinfo</code>，<code>/proc/meminfo</code>，<code>/proc/cmdline</code>，<code>/proc/xxx/cwd</code>，<code>/proc/xxx/exe</code>，<code>/proc/xxx/fd/</code>，<code>/proc/xxx/smaps</code>（这里的 <code>xxx</code> 表示进程的 id 或 pid）。</p>
</li>
<li><p>当调试一些之前出现的问题的时候，<a href="http://sebastien.godard.pagesperso-orange.fr/"><code>sar</code></a> 非常有用。它展示了 cpu、内存以及网络等的历史数据。</p>
</li>
<li><p>关于更深层次的系统分析以及性能分析，看看 <code>stap</code>（<a href="https://sourceware.org/systemtap/wiki">SystemTap</a>），<a href="https://en.wikipedia.org/wiki/Perf_(Linux)"><code>perf</code></a>，以及<a href="https://github.com/draios/sysdig"><code>sysdig</code></a>。</p>
</li>
<li><p>查看你当前使用的系统，使用 <code>uname</code>，<code>uname -a</code>（Unix／kernel 信息）或者 <code>lsb_release -a</code>（Linux 发行版信息）。</p>
</li>
<li><p>无论什么东西工作得很欢乐（可能是硬件或驱动问题）时可以试试 <code>dmesg</code>。</p>
</li>
<li><p>如果你删除了一个文件，但通过 <code>du</code> 发现没有释放预期的磁盘空间，请检查文件是否被进程占用：<br><code>lsof | grep deleted | grep &quot;filename-of-my-big-file&quot;</code></p>
</li>
</ul>
<h2 id="单行脚本"><a href="#单行脚本" class="headerlink" title="单行脚本"></a>单行脚本</h2><p>一些命令组合的例子：</p>
<ul>
<li><p>当你需要对文本文件做集合交、并、差运算时，<code>sort</code> 和 <code>uniq</code> 会是你的好帮手。具体例子请参照代码后面的，此处假设 <code>a</code> 与 <code>b</code> 是两内容不同的文件。这种方式效率很高，并且在小文件和上 G 的文件上都能运用（注意尽管在 <code>/tmp</code> 在一个小的根分区上时你可能需要 <code>-T</code> 参数，但是实际上 <code>sort</code> 并不被内存大小约束），参阅前文中关于 <code>LC_ALL</code> 和 <code>sort</code> 的 <code>-u</code> 参数的部分。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span> a b | <span class="built_in">uniq</span> &gt; c   <span class="comment"># c 是 a 并 b</span></span><br><span class="line"><span class="built_in">sort</span> a b | <span class="built_in">uniq</span> -d &gt; c   <span class="comment"># c 是 a 交 b</span></span><br><span class="line"><span class="built_in">sort</span> a b b | <span class="built_in">uniq</span> -u &gt; c   <span class="comment"># c 是 a - b</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>使用 <code>grep . *</code>（每行都会附上文件名）或者 <code>head -100 *</code>（每个文件有一个标题）来阅读检查目录下所有文件的内容。这在检查一个充满配置文件的目录（如 <code>/sys</code>、<code>/proc</code>、<code>/etc</code>）时特别好用。</p>
</li>
<li><p>计算文本文件第三列中所有数的和（可能比同等作用的 Python 代码快三倍且代码量少三倍）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">awk <span class="string">&#x27;&#123; x += $3 &#125; END &#123; print x &#125;&#x27;</span> myfile</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果你想在文件树上查看大小&#x2F;日期，这可能看起来像递归版的 <code>ls -l</code> 但比 <code>ls -lR</code> 更易于理解：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">find . -<span class="built_in">type</span> f -<span class="built_in">ls</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>假设你有一个类似于 web 服务器日志文件的文本文件，并且一个确定的值只会出现在某些行上，假设一个 <code>acct_id</code> 参数在 URI 中。如果你想计算出每个 <code>acct_id</code> 值有多少次请求，使用如下代码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">egrep -o <span class="string">&#x27;acct_id=[0-9]+&#x27;</span> access.log | <span class="built_in">cut</span> -d= -f2 | <span class="built_in">sort</span> | <span class="built_in">uniq</span> -c | <span class="built_in">sort</span> -rn</span><br></pre></td></tr></table></figure>
</li>
<li><p>要持续监测文件改动，可以使用 <code>watch</code>，例如检查某个文件夹中文件的改变，可以用 <code>watch -d -n 2 &#39;ls -rtlh | tail&#39;</code>；或者在排查 WiFi 设置故障时要监测网络设置的更改，可以用 <code>watch -d -n 2 ifconfig</code>。</p>
</li>
<li><p>运行这个函数从这篇文档中随机获取一条技巧（解析 Markdown 文件并抽取项目）：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">taocl</span></span>() &#123;</span><br><span class="line">  curl -s https://raw.githubusercontent.com/jlevy/the-art-of-command-line/master/README-zh.md|</span><br><span class="line">    pandoc -f markdown -t html |</span><br><span class="line">    iconv -f <span class="string">&#x27;utf-8&#x27;</span> -t <span class="string">&#x27;unicode&#x27;</span> |</span><br><span class="line">    xmlstarlet fo --html --dropdtd |</span><br><span class="line">    xmlstarlet sel -t -v <span class="string">&quot;(html/body/ul/li[count(p)&gt;0])[<span class="variable">$RANDOM</span> mod last()+1]&quot;</span> |</span><br><span class="line">    xmlstarlet unesc | <span class="built_in">fmt</span> -80</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="冷门但有用"><a href="#冷门但有用" class="headerlink" title="冷门但有用"></a>冷门但有用</h2><ul>
<li><p><code>expr</code>：计算表达式或正则匹配</p>
</li>
<li><p><code>m4</code>：简单的宏处理器</p>
</li>
<li><p><code>yes</code>：多次打印字符串</p>
</li>
<li><p><code>cal</code>：漂亮的日历</p>
</li>
<li><p><code>env</code>：执行一个命令（脚本文件中很有用）</p>
</li>
<li><p><code>printenv</code>：打印环境变量（调试时或在写脚本文件时很有用）</p>
</li>
<li><p><code>look</code>：查找以特定字符串开头的单词或行</p>
</li>
<li><p><code>cut</code>，<code>paste</code> 和 <code>join</code>：数据修改</p>
</li>
<li><p><code>fmt</code>：格式化文本段落</p>
</li>
<li><p><code>pr</code>：将文本格式化成页／列形式</p>
</li>
<li><p><code>fold</code>：包裹文本中的几行</p>
</li>
<li><p><code>column</code>：将文本格式化成多个对齐、定宽的列或表格</p>
</li>
<li><p><code>expand</code> 和 <code>unexpand</code>：制表符与空格之间转换</p>
</li>
<li><p><code>nl</code>：添加行号</p>
</li>
<li><p><code>seq</code>：打印数字</p>
</li>
<li><p><code>bc</code>：计算器</p>
</li>
<li><p><code>factor</code>：分解因数</p>
</li>
<li><p><a href="https://gnupg.org/"><code>gpg</code></a>：加密并签名文件</p>
</li>
<li><p><code>toe</code>：terminfo 入口列表</p>
</li>
<li><p><code>nc</code>：网络调试及数据传输</p>
</li>
<li><p><code>socat</code>：套接字代理，与 <code>netcat</code> 类似</p>
</li>
<li><p><a href="https://github.com/mattthias/slurm"><code>slurm</code></a>：网络流量可视化</p>
</li>
<li><p><code>dd</code>：文件或设备间传输数据</p>
</li>
<li><p><code>file</code>：确定文件类型</p>
</li>
<li><p><code>tree</code>：以树的形式显示路径和文件，类似于递归的 <code>ls</code></p>
</li>
<li><p><code>stat</code>：文件信息</p>
</li>
<li><p><code>time</code>：执行命令，并计算执行时间</p>
</li>
<li><p><code>timeout</code>：在指定时长范围内执行命令，并在规定时间结束后停止进程</p>
</li>
<li><p><code>lockfile</code>：使文件只能通过 <code>rm -f</code> 移除</p>
</li>
<li><p><code>logrotate</code>： 切换、压缩以及发送日志文件</p>
</li>
<li><p><code>watch</code>：重复运行同一个命令，展示结果并／或高亮有更改的部分</p>
</li>
<li><p><a href="https://github.com/joh/when-changed"><code>when-changed</code></a>：当检测到文件更改时执行指定命令。参阅 <code>inotifywait</code> 和 <code>entr</code>。</p>
</li>
<li><p><code>tac</code>：反向输出文件</p>
</li>
<li><p><code>shuf</code>：文件中随机选取几行</p>
</li>
<li><p><code>comm</code>：一行一行的比较排序过的文件</p>
</li>
<li><p><code>strings</code>：从二进制文件中抽取文本</p>
</li>
<li><p><code>tr</code>：转换字母</p>
</li>
<li><p><code>iconv</code> 或 <code>uconv</code>：文本编码转换</p>
</li>
<li><p><code>split</code> 和 <code>csplit</code>：分割文件</p>
</li>
<li><p><code>sponge</code>：在写入前读取所有输入，在读取文件后再向同一文件写入时比较有用，例如 <code>grep -v something some-file | sponge some-file</code></p>
</li>
<li><p><code>units</code>：将一种计量单位转换为另一种等效的计量单位（参阅 <code>/usr/share/units/definitions.units</code>）</p>
</li>
<li><p><code>apg</code>：随机生成密码</p>
</li>
<li><p><code>xz</code>：高比例的文件压缩</p>
</li>
<li><p><code>ldd</code>：动态库信息</p>
</li>
<li><p><code>nm</code>：提取 obj 文件中的符号</p>
</li>
<li><p><code>ab</code> 或 <a href="https://github.com/wg/wrk"><code>wrk</code></a>：web 服务器性能分析</p>
</li>
<li><p><code>strace</code>：调试系统调用</p>
</li>
<li><p><a href="http://www.bitwizard.nl/mtr/"><code>mtr</code></a>：更好的网络调试跟踪工具</p>
</li>
<li><p><code>cssh</code>：可视化的并发 shell</p>
</li>
<li><p><code>rsync</code>：通过 ssh 或本地文件系统同步文件和文件夹</p>
</li>
<li><p><a href="https://wireshark.org/"><code>wireshark</code></a> 和 <a href="https://www.wireshark.org/docs/wsug_html_chunked/AppToolstshark.html"><code>tshark</code></a>：抓包和网络调试工具</p>
</li>
<li><p><a href="http://ngrep.sourceforge.net/"><code>ngrep</code></a>：网络层的 grep</p>
</li>
<li><p><code>host</code> 和 <code>dig</code>：DNS 查找</p>
</li>
<li><p><code>lsof</code>：列出当前系统打开文件的工具以及查看端口信息</p>
</li>
<li><p><code>dstat</code>：系统状态查看</p>
</li>
<li><p><a href="https://github.com/nicolargo/glances"><code>glances</code></a>：高层次的多子系统总览</p>
</li>
<li><p><code>iostat</code>：硬盘使用状态</p>
</li>
<li><p><code>mpstat</code>： CPU 使用状态</p>
</li>
<li><p><code>vmstat</code>： 内存使用状态</p>
</li>
<li><p><code>htop</code>：top 的加强版</p>
</li>
<li><p><code>last</code>：登入记录</p>
</li>
<li><p><code>w</code>：查看处于登录状态的用户</p>
</li>
<li><p><code>id</code>：用户&#x2F;组 ID 信息</p>
</li>
<li><p><a href="http://sebastien.godard.pagesperso-orange.fr/"><code>sar</code></a>：系统历史数据</p>
</li>
<li><p><a href="http://www.ex-parrot.com/~pdw/iftop/"><code>iftop</code></a> 或 <a href="https://github.com/raboof/nethogs"><code>nethogs</code></a>：套接字及进程的网络利用情况</p>
</li>
<li><p><code>ss</code>：套接字数据</p>
</li>
<li><p><code>dmesg</code>：引导及系统错误信息</p>
</li>
<li><p><code>sysctl</code>： 在内核运行时动态地查看和修改内核的运行参数</p>
</li>
<li><p><code>hdparm</code>：SATA&#x2F;ATA 磁盘更改及性能分析</p>
</li>
<li><p><code>lsblk</code>：列出块设备信息：以树形展示你的磁盘以及磁盘分区信息</p>
</li>
<li><p><code>lshw</code>，<code>lscpu</code>，<code>lspci</code>，<code>lsusb</code> 和 <code>dmidecode</code>：查看硬件信息，包括 CPU、BIOS、RAID、显卡、USB设备等</p>
</li>
<li><p><code>lsmod</code> 和 <code>modinfo</code>：列出内核模块，并显示其细节</p>
</li>
<li><p><code>fortune</code>，<code>ddate</code> 和 <code>sl</code>：额，这主要取决于你是否认为蒸汽火车和莫名其妙的名人名言是否“有用”</p>
</li>
</ul>
<h2 id="仅限-OS-X-系统"><a href="#仅限-OS-X-系统" class="headerlink" title="仅限 OS X 系统"></a>仅限 OS X 系统</h2><p>以下是<em>仅限于</em> OS X 系统的技巧。</p>
<ul>
<li><p>用 <code>brew</code> （Homebrew）或者 <code>port</code> （MacPorts）进行包管理。这些可以用来在 OS X 系统上安装以上的大多数命令。</p>
</li>
<li><p>用 <code>pbcopy</code> 复制任何命令的输出到桌面应用，用 <code>pbpaste</code> 粘贴输入。</p>
</li>
<li><p>若要在 OS X 终端中将 Option 键视为 alt 键（例如在上面介绍的 <strong>alt-b</strong>、<strong>alt-f</strong> 等命令中用到），打开 偏好设置 -&gt; 描述文件 -&gt; 键盘 并勾选“使用 Option 键作为 Meta 键”。</p>
</li>
<li><p>用 <code>open</code> 或者 <code>open -a /Applications/Whatever.app</code> 使用桌面应用打开文件。</p>
</li>
<li><p>Spotlight：用 <code>mdfind</code> 搜索文件，用 <code>mdls</code> 列出元数据（例如照片的 EXIF 信息）。</p>
</li>
<li><p>注意 OS X 系统是基于 BSD UNIX 的，许多命令（例如 <code>ps</code>，<code>ls</code>，<code>tail</code>，<code>awk</code>，<code>sed</code>）都和 Linux 中有微妙的不同（ Linux 很大程度上受到了 System V-style Unix 和 GNU 工具影响）。你可以通过标题为 “BSD General Commands Manual” 的 man 页面发现这些不同。在有些情况下 GNU 版本的命令也可能被安装（例如 <code>gawk</code> 和 <code>gsed</code> 对应 GNU 中的 awk 和 sed ）。如果要写跨平台的 Bash 脚本，避免使用这些命令（例如，考虑 Python 或者 <code>perl</code> ）或者经过仔细的测试。</p>
</li>
<li><p>用 <code>sw_vers</code> 获取 OS X 的版本信息。</p>
</li>
</ul>
<h2 id="仅限-Windows-系统"><a href="#仅限-Windows-系统" class="headerlink" title="仅限 Windows 系统"></a>仅限 Windows 系统</h2><p>以下是<em>仅限于</em> Windows 系统的技巧。</p>
<h3 id="在-Winodws-下获取-Unix-工具"><a href="#在-Winodws-下获取-Unix-工具" class="headerlink" title="在 Winodws 下获取 Unix 工具"></a>在 Winodws 下获取 Unix 工具</h3><ul>
<li><p>可以安装 <a href="https://cygwin.com/">Cygwin</a> 允许你在 Microsoft Windows 中体验 Unix shell 的威力。这样的话，本文中介绍的大多数内容都将适用。</p>
</li>
<li><p>在 Windows 10 上，你可以使用 <a href="https://msdn.microsoft.com/commandline/wsl/about">Bash on Ubuntu on Windows</a>，它提供了一个熟悉的 Bash 环境，包含了不少 Unix 命令行工具。好处是它允许 Linux 上编写的程序在 Windows 上运行，而另一方面，Windows 上编写的程序却无法在 Bash 命令行中运行。</p>
</li>
<li><p>如果你在 Windows 上主要想用 GNU 开发者工具（例如 GCC），可以考虑 <a href="http://www.mingw.org/">MinGW</a> 以及它的 <a href="http://www.mingw.org/wiki/msys">MSYS</a> 包，这个包提供了例如 bash，gawk，make 和 grep 的工具。MSYS 并不包含所有可以与 Cygwin 媲美的特性。当制作 Unix 工具的原生 Windows 端口时 MinGW 将特别地有用。</p>
</li>
<li><p>另一个在 Windows 下实现接近 Unix 环境外观效果的选项是 <a href="https://github.com/dthree/cash">Cash</a>。注意在此环境下只有很少的 Unix 命令和命令行可用。</p>
</li>
</ul>
<h3 id="实用-Windows-命令行工具"><a href="#实用-Windows-命令行工具" class="headerlink" title="实用 Windows 命令行工具"></a>实用 Windows 命令行工具</h3><ul>
<li><p>可以使用 <code>wmic</code> 在命令行环境下给大部分 Windows 系统管理任务编写脚本以及执行这些任务。</p>
</li>
<li><p>Windows 实用的原生命令行网络工具包括 <code>ping</code>，<code>ipconfig</code>，<code>tracert</code>，和 <code>netstat</code>。</p>
</li>
<li><p>可以使用 <code>Rundll32</code> 命令来实现<a href="http://www.thewindowsclub.com/rundll32-shortcut-commands-windows">许多有用的 Windows 任务</a> 。</p>
</li>
</ul>
<h3 id="Cygwin-技巧"><a href="#Cygwin-技巧" class="headerlink" title="Cygwin 技巧"></a>Cygwin 技巧</h3><ul>
<li><p>通过 Cygwin 的包管理器来安装额外的 Unix 程序。</p>
</li>
<li><p>使用 <code>mintty</code> 作为你的命令行窗口。</p>
</li>
<li><p>要访问 Windows 剪贴板，可以通过 <code>/dev/clipboard</code>。</p>
</li>
<li><p>运行 <code>cygstart</code> 以通过默认程序打开一个文件。</p>
</li>
<li><p>要访问 Windows 注册表，可以使用 <code>regtool</code>。</p>
</li>
<li><p>注意 Windows 驱动器路径 <code>C:\</code> 在 Cygwin 中用 <code>/cygdrive/c</code> 代表，而 Cygwin 的 <code>/</code> 代表 Windows 中的 <code>C:\cygwin</code>。要转换 Cygwin 和 Windows 风格的路径可以用 <code>cygpath</code>。这在需要调用 Windows 程序的脚本里很有用。</p>
</li>
<li><p>学会使用 <code>wmic</code>，你就可以从命令行执行大多数 Windows 系统管理任务，并编成脚本。</p>
</li>
<li><p>要在 Windows 下获得 Unix 的界面和体验，另一个办法是使用 <a href="https://github.com/dthree/cash">Cash</a>。需要注意的是，这个环境支持的 Unix 命令和命令行参数非常少。</p>
</li>
<li><p>要在 Windows 上获取 GNU 开发者工具（比如 GCC）的另一个办法是使用 <a href="http://www.mingw.org/">MinGW</a> 以及它的 <a href="http://www.mingw.org/wiki/msys">MSYS</a> 软件包，该软件包提供了 bash、gawk、make、grep 等工具。然而 MSYS 提供的功能没有 Cygwin 完善。MinGW 在创建 Unix 工具的 Windows 原生移植方面非常有用。</p>
</li>
</ul>
<h2 id="更多资源"><a href="#更多资源" class="headerlink" title="更多资源"></a>更多资源</h2><ul>
<li><a href="https://github.com/alebcay/awesome-shell">awesome-shell</a>：一份精心组织的命令行工具及资源的列表。</li>
<li><a href="https://github.com/herrbischoff/awesome-osx-command-line">awesome-osx-command-line</a>：一份针对 OS X 命令行的更深入的指南。</li>
<li><a href="http://redsymbol.net/articles/unofficial-bash-strict-mode/">Strict mode</a>：为了编写更好的脚本文件。</li>
<li><a href="https://github.com/koalaman/shellcheck">shellcheck</a>：一个静态 shell 脚本分析工具，本质上是 bash／sh／zsh 的 lint。</li>
<li><a href="http://www.dwheeler.com/essays/filenames-in-shell.html">Filenames and Pathnames in Shell</a>：有关如何在 shell 脚本里正确处理文件名的细枝末节。</li>
<li><a href="http://datascienceatthecommandline.com/#tools">Data Science at the Command Line</a>：用于数据科学的一些命令和工具，摘自同名书籍。</li>
</ul>
<h2 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h2><p>除去特别小的工作，你编写的代码应当方便他人阅读。能力往往伴随着责任，你 <em>有能力</em> 在 Bash 中玩一些奇技淫巧并不意味着你应该去做！;)</p>
<h2 id="授权条款"><a href="#授权条款" class="headerlink" title="授权条款"></a>授权条款</h2><p><a href="http://creativecommons.org/licenses/by-sa/4.0/"><img src="https://i.creativecommons.org/l/by-sa/4.0/88x31.png" alt="Creative Commons License"></a></p>
<p>本文使用授权协议 <a href="http://creativecommons.org/licenses/by-sa/4.0/">Creative Commons Attribution-ShareAlike 4.0 International License</a>。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title>手把手教你黑白群晖NAS安装破解版ROON音乐播放器1.6</title>
    <url>/posts/a70bb1ff/</url>
    <content><![CDATA[<h1 id="手把手教你黑白群晖NAS安装破解版ROON音乐播放器1-6"><a href="#手把手教你黑白群晖NAS安装破解版ROON音乐播放器1-6" class="headerlink" title="手把手教你黑白群晖NAS安装破解版ROON音乐播放器1.6"></a>手把手教你黑白群晖NAS安装破解版ROON音乐播放器1.6</h1><h2 id="什么是Roon？"><a href="#什么是Roon？" class="headerlink" title="什么是Roon？"></a>什么是Roon？</h2><p>roon不能说是一个播放软件，它是一个系统，由Roon Server为核心构建的，Roon Server本身不存储任何音乐文件，你也不需要把任何的音乐文件存储到它里面，他可以读取你本地的任何共享文件夹里的音乐文件，然后从他庞大的数据库中，帮你归类音乐文件，只要是信息齐全的，它没什么不认识的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330161552.png"></p>
<p>然后，重点来了。他可以通过IPAD、手机、PC这些设备，来控制你的其他设备播放你本地的别的设备里的音乐，并且可以接入你的家庭智能系统。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330162528.png"></p>
<p>然后你可以通过手机APP，平板电脑和普通电脑去管理你的Roon，并且输出到任何接入这个Roon平台的音频设备，也就是说他可以实现局域网内多平台操控和多房间系统播放。</p>
<p>硬件要求：<br>1：有一台群晖<br>2：CPU最好是I5或者I7级别，官方这么说的，因为有的计算需要CPU强劲一些，实测呢，蜗牛也能跑，如果你不搞升频什么的。<br>3：一块SSD，Roon安装在这块SSD里，比较好。速度真的快很多，要不恶心死你。我用的一块240还是256的INTEL的SSD，而且计划这块SSD只跑Roon。<br>当然，你也可以装在你的机械硬盘里，如果你不太在乎速度，或者你没那么多DSD音乐的话，实测这也不是必须的。</p>
<p>安装准备：<br>1：群晖开启Root权限（怎么开启我就不介绍了，网上教程太多了）<br>2：Winscp<br>3：最好有梯子，否则安装的你想哭</p>
<h2 id="安装1-7版本的Roon官方套件"><a href="#安装1-7版本的Roon官方套件" class="headerlink" title="安装1.7版本的Roon官方套件"></a>安装1.7版本的Roon官方套件</h2><p>我们在群晖安装Roon Server时，由于涉及到程序自启动以及环境变量的配置问题，一般都选择运行官方的安装脚本方式进行安装。<br>roon官方的有关于群晖安装的链接：<a href="https://roononnas.org/de/roon-auf-nas/">https://roononnas.org/de/roon-auf-nas/</a><br>按照链接下载安装文件：RoonServer_Synology_x86_64_2018-03-07.spk<br>然后到群晖后台去手动安装插件!</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163010.png"></p>
<p>这里会有第一个坑。因为即使本地安装，他也需要连接服务器，不知道为什么，如果你没梯子，速度因地方而异了。我是开了梯子，顺利安装，非常快。这里打开你的梯子，并且让群晖可以走梯子。你有耐心慢慢等也是可以的，有人慢慢等也装上了。</p>
<p>到这里。第一部分结束，安装好了最新的1.7的Roon Server，但是现在老毛子只破解了1.6的，我们现在得替换文件。</p>
<h2 id="版本文件替换"><a href="#版本文件替换" class="headerlink" title="版本文件替换"></a>版本文件替换</h2><p>1.6文件下载：</p>
<p>链接: <a href="https://pan.baidu.com/s/1NiRZCHdrHXisZyE2wTLKBA">https://pan.baidu.com/s/1NiRZCHdrHXisZyE2wTLKBA</a> 密码: j05p</p>
<p>1：进入套件中心，停用，上面绿色的已启动会变成停用。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163241.png"></p>
<p>2：打开你的群晖的SSH那些，控制面板–终端机和SNMP1，两个打钩。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163323.png"></p>
<p>3：解压缩你刚才下载的RoonServer那个压缩包。</p>
<p>4：运行WINSCP。第一个是SCP模式，然后HOSTNAME填写你的群晖的IP。端口如果你没改的话是22，usernama填root，后面password，就是你的root账号的密码了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163450.png"></p>
<p>5：连接进去以后，找到你的RoonServer套件所在的位置。<br>我的是&#x2F;volume7&#x2F;@appstore&#x2F;RoonServer&#x2F;RoonServer。找到这个目录，然后左边本地找到你刚才解压缩的那个roonserver1.6下面的roonserver文件夹。你会发现左右两边的文件是一样的。这个时候我们覆盖他就好了。<br>怎么覆盖？左边的一起框柱，然后往右边啦过去。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163532.png"></p>
<p>这里会问你是不是要overwrite，就是问你是不是覆盖，选yes to all 就是是的全部。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163557.png"></p>
<p>自此覆盖全部结束，到这还没全结束，我们只是降级了，现在我们要破解了。</p>
<h2 id="破解服务器端"><a href="#破解服务器端" class="headerlink" title="破解服务器端"></a>破解服务器端</h2><p>相关文件：</p>
<p>链接: <a href="https://pan.baidu.com/s/1f5Kg2XSi4sAF9ygmu07pSA">https://pan.baidu.com/s/1f5Kg2XSi4sAF9ygmu07pSA</a> 密码: uw01</p>
<p>1：修改群晖的HOST文件<br>SSH修改方式很好，但是怕有的同学不会，咱们弄点简单的。打开刚才那个WINSCP软件，进入根目录下，找ETC目录，然后往下翻，找到hosts文件，拖到左边去，下载下来，软件不要关。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163644.png"></p>
<p>2：找到下载下来的hosts文件，双击，用写字板打开，当然用notepod更好。<br>最后加上两行</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> accounts5.roonlabs.com</span><br><span class="line"><span class="number">127.0.0.1</span> updates.roonlabs.com</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163802.png"></p>
<p>保存，然后从WINSCP软件里面，找到修改好的文件，再拖会群晖里面就好了。会提示你是不是覆盖，覆盖掉就好了。这样RoonServer就没办法升级和验证了。</p>
<p>3：修改电脑的HOSTS文件</p>
<p>进入 <code>C:/Windows/System32/drivers/etc</code>目录</p>
<p>把hosts文件COPY到桌面，然后记事本打开，加两行：</p>
<figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0.0.1</span> accounts5.roonlabs.com</span><br><span class="line"><span class="number">127.0.0.1</span> updates.roonlabs.com</span><br></pre></td></tr></table></figure>

<p>保存，然后覆盖回 <code>C:/Windows/System32/drivers/etc</code>目录。会提示你拒绝访问，要管理员权限，继续。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163854.png"></p>
<p>覆盖完成，准备工作就好了。</p>
<p>4：开始正式破解<br>这里面我们需要找一个注册文件<br>所以我们需要安装RoonServer服务器端的PC版，找到roon.rar文件，解压缩，得到一个文件夹和两个文件，我为了方便，新建了一个ROON目录，在C盘，把文件都放进去了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163920.png"></p>
<p>RoonKeyMaker是破解文件，RoonInstaller64是播放软件，我们现在要用的是RoonServerInstaller64.exe，双击运行RoonServerInstaller64.exe。这里没什么讲究的，反正你一会会卸载他，如图按顺序即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330163956.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164019.png"></p>
<p>然后你要注意你电脑的右下角，多了一个图标，是ROONSERVER的。显示是ROON。这个就是服务器端开始运行了。不用管他了。<br>运行CMD，调出命令行。</p>
<p>进入里的ROON破解文件的目录，如果你跟我的一样，按顺序输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>\</span><br><span class="line"><span class="built_in">cd</span> roon\RoonKeyMaker\rkm_win</span><br></pre></td></tr></table></figure>

<p>进入目录(注意不要输入错，你可以直接复制我上面的命令运行）</p>
<p>然后输入</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">rkm_win -<span class="selector-tag">i</span> rs</span><br></pre></td></tr></table></figure>

<p>会跳出Enter your name,包括后面的。你可以随便输，不过这个后面你运行软件的时候会这么显示。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164358.png"></p>
<p>看到successfully我们知道成功了。（如果是PC端安装server的同学，这里你就破解成功了。右下角那个下图标，右键，quit，关闭一下，然后桌边的roonserver,重新启动一下就好了）<br>然后我们去找KEY去吧。看下面的图，找到如图文件，复制出来。<br><code>C:/Users/用户名/AppData/Local/RoonServer/Database/Core</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164448.png"></p>
<p>还是得用WINSCP，把文件复制过来即可。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164542.png"></p>
<p>这里有一个提示，开始我们找的那个目录是APPSTONE下满这个目录不一样了，是你最早新建的那个目录，我的目录是 <code>/volume7/RoonServer/RoonServer/Database/Core</code>，你不是一定是volume7，根据你自己的情况，把文件拖过去，自此，RoonServer,安装破解成功。</p>
<h2 id="安装播放控制端"><a href="#安装播放控制端" class="headerlink" title="安装播放控制端"></a>安装播放控制端</h2><p>找到开始那个roon压缩包的解压缩文件夹。<br>1：运行RoonInstaller64.exe安装播放控制端。安装没什么好说的了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164631.png"></p>
<p>2：ROON就运行了。这时候我们什么都不要动。不管他，也别关软件，一定不要关软件，一定不要关软件，一定不要关软件，一定不要关软件，一定不要关软件，一定不要关软件。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164708.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164751.png"></p>
<p>3：破解PC的播放端<br>首先运行CMD，调出命令行<br>然后依次输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> \</span><br><span class="line"><span class="built_in">cd</span> roon\RoonKeyMaker\rkm_win</span><br><span class="line">rkm_win -i r</span><br></pre></td></tr></table></figure>

<p>看清楚了。这次是r不是rs了,这两个命令一个是破解服务器端，一个是破解播放端的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164838.png"></p>
<p>4：关闭电脑上的Roon软件，然后重新运行。因为破解了啊。要重新运行一下。这个时候再重开软件哦<br>然后左下角选择语言。</p>
<p>选择你喜欢的语言，比如马来语什么的，然后会提示你语言改了。现在重启。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330164906.png"></p>
<p>5：这边，因为破解了。说一堆什么的，不管他，但是我们还是要谢谢一下。选择不，谢谢！</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330165002.png"></p>
<p>然后，这边我同意！</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330165036.png"></p>
<p>6：连接你的服务器吧</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/30/20220330165119.png"></p>
<p>自此安装全部完成。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>emby-server媒体库硬链接</title>
    <url>/posts/61fc1c97/</url>
    <content><![CDATA[<h1 id="emby-server媒体库硬链接-md"><a href="#emby-server媒体库硬链接-md" class="headerlink" title="emby-server媒体库硬链接.md"></a>emby-server媒体库硬链接.md</h1><p>现在emby和plex等媒体ggi库对于刮削的命名要求很高，而PT下载后我们却很难将下载的媒体资源添加到影音库中，因为要保持源文件名进行保种，而复制一份文件的话，又很占硬盘空间，造成浪费。<br>在这种情况下，使用Linux连接就能便捷得一石二鸟。</p>
<h2 id="软链接和硬链接"><a href="#软链接和硬链接" class="headerlink" title="软链接和硬链接"></a>软链接和硬链接</h2><p>软连接可以便捷地创立整个文件夹的连接，但软连接类似快捷方式，删除源文件后，连接就会失效。<br>这种情况下，如果你删除PT保种的文件，在媒体库中整理好的资源也会失效。<br>相比起来，硬链接更加方便，在创立连接后，即便删除了源文件，只要没有删除所有的硬链接文件，硬链接仍然有效。<br>但Linux的硬链接却有一个小小的缺点：为了避免递归问题，硬链接只能创建单个文件的连接，而无法连接整个文件夹。</p>
<h2 id="linux硬链接脚本"><a href="#linux硬链接脚本" class="headerlink" title="linux硬链接脚本"></a>linux硬链接脚本</h2><p>Windows下有一些好用的硬链接工具，但在Linux系统下，却没有找到类似的工具，于是我就就从零搞起，网上东抄抄西抄抄，自己写了个简单的批量硬链接脚本，进行对文件夹的硬链接，在我的openmediavault系统(基于debian)下测试了几周，还没出过问题。<br>还没有在别的系统上测试过，但理论上适用于所有Linux系统，包括群晖、铁骑马、威联通、openmediavault、unas等等。</p>
<h2 id="使用教程"><a href="#使用教程" class="headerlink" title="使用教程"></a>使用教程</h2><ol>
<li>编辑两个bash脚本文件hardlink.bash和2.bash，复制到Linux下的&#x2F;usr&#x2F;local&#x2F;bin&#x2F;文件夹中。</li>
<li>使用cd命令切换到想要让硬链接文件存在的文件夹，如test。</li>
<li>以root账户或具有root权限的账户执行：sudo bash hardlink.bash [你的PT下载影音资源所在的目录]</li>
</ol>
<p>** 注：root权限下不再需要输入sudo，链接文件和源文件必须处于同一个硬盘之下，不能跨硬盘执行硬链接操作。**<br>如此一来，在test这个文件夹下，就出现了你想要硬链接的文件夹下的所有子文件夹和文件。<br>对链接文件进行修改文件名，删除操作，均不会影响源文件，仍然能pt保种，但修改链接文件内容，会造成源文件内容改变，同时，对于大部分的程序来说，硬链接文件和源文件是相同的。<br>如果感觉每次都需要输入很烦，可以创建一个计划任务，可以让系统自动创建硬链接。</p>
<p><code>hardlink.bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PRE_IFS=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">distdir=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$distdir</span></span><br><span class="line">newdir=`<span class="built_in">basename</span> <span class="variable">$distdir</span>`</span><br><span class="line"><span class="built_in">mkdir</span> <span class="variable">$newdir</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$newdir</span></span><br><span class="line">filename=$(<span class="built_in">ls</span> <span class="variable">$distdir</span>)</span><br><span class="line">currentdir=`<span class="built_in">pwd</span>`</span><br><span class="line">mod=<span class="variable">$currentdir</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$currentdir</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filename</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$distdir</span>/<span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ln</span> <span class="variable">$distdir</span>/<span class="variable">$file</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$distdir</span>/<span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$currentdir</span></span><br><span class="line">        <span class="built_in">mkdir</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">        bash /usr/local/bin/2.bash <span class="variable">$distdir</span>/<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 任务执行完毕，把IFS还原回默认值</span></span><br><span class="line"><span class="built_in">chmod</span> -R 777 <span class="variable">$mod</span></span><br><span class="line">IFS=<span class="variable">$PRE_IFS</span></span><br></pre></td></tr></table></figure>

<p><code>2.bash</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PRE_IFS=<span class="variable">$IFS</span></span><br><span class="line">IFS=$<span class="string">&#x27;\n&#x27;</span></span><br><span class="line">currentdir=`<span class="built_in">pwd</span>`</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$currentdir</span></span><br><span class="line">distdir=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$distdir</span></span><br><span class="line">filename=$(<span class="built_in">ls</span> <span class="variable">$distdir</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> <span class="variable">$filename</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$file</span></span><br><span class="line">    <span class="keyword">if</span> [ -f <span class="variable">$distdir</span>/<span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">ln</span> <span class="variable">$distdir</span>/<span class="variable">$file</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="variable">$distdir</span>/<span class="variable">$file</span> ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$currentdir</span></span><br><span class="line">        <span class="built_in">mkdir</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">        <span class="built_in">cd</span> <span class="variable">$currentdir</span>/<span class="variable">$file</span></span><br><span class="line">        bash /usr/local/bin/<span class="variable">$&#123;0##*/&#125;</span> <span class="variable">$distdir</span>/<span class="variable">$file</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="comment"># 任务执行完毕，把IFS还原回默认值</span></span><br><span class="line">IFS=<span class="variable">$PRE_IFS</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot 2.0 集成 redis</title>
    <url>/posts/55ff28b4/</url>
    <content><![CDATA[<p>从 <strong>Spring Boot 2.x</strong> 开始 <strong>Lettuce</strong> 已取代 Jedis 成为首选 Redis 的客户端。当然 Spring Boot 2.x 仍然支持 Jedis，并且你可以任意切换客户端。</p>
<h2 id="Lettuce"><a href="#Lettuce" class="headerlink" title="Lettuce"></a>Lettuce</h2><p><strong>Lettuce</strong> 是一个可伸缩的线程安全的 Redis 客户端，支持同步、异步和响应式模式。多个线程可以共享一个连接实例，而不必担心多线程并发问题。它基于优秀 Netty NIO 框架构建，支持 Redis 的高级功能，如 Sentinel、集群、流水线、自动重新连接和 Redis 数据模型</p>
<p>Jedis 实现通过直接连接的 <strong>redis server</strong>，如果在多线程环境下是非线程安全的，这个时候只有使用连接池，为每个 Jedis 实例增加物理连接。</p>
<p>Lettuce 的连接是基于 Netty 的，连接实例 (StatefulRedisConnection) 可以在多个线程间并发访问，因为 StatefulRedisConnection 是线程安全的，所以一个连接实例  (StatefulRedisConnection) 就可以满足多线程环境下的并发访问，当然这个也是可伸缩的设计，一个连接实例不够的情况也可以按需增加连接实例。 　　　　　　　</p>
<h2 id="Spring-Boot-2-0-集成-redis"><a href="#Spring-Boot-2-0-集成-redis" class="headerlink" title="Spring Boot 2.0 集成 redis"></a>Spring Boot 2.0 集成 redis</h2><p>一般需要4步</p>
<ol>
<li>引入依赖</li>
<li>配置 redis</li>
<li>自定义 RedisTemplate (推荐)</li>
<li>自定义 redis 操作类 (推荐)</li>
</ol>
<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- lettuce pool 缓存连接池 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--jackson--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.67<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果用的是 lettuce 客户端，需要引入 commons-pool2 连接池。</li>
<li>如果想用 json 序列化 redis 的 value 值，需要引入 jackson</li>
</ul>
<h3 id="配置-redis"><a href="#配置-redis" class="headerlink" title="配置 redis"></a>配置 redis</h3><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment"># redis 服务端相关配置</span></span><br><span class="line"><span class="comment"># 服务器地址</span></span><br><span class="line">spring.redis.<span class="attribute">host</span>=localhost</span><br><span class="line"><span class="comment"># 端口号</span></span><br><span class="line">spring.redis.<span class="attribute">port</span>=6379</span><br><span class="line"><span class="comment"># 密码，默认为 null</span></span><br><span class="line">spring.redis.password=</span><br><span class="line"><span class="comment"># 使用的数据库，默认选择下标为0的数据库</span></span><br><span class="line">spring.redis.<span class="attribute">database</span>=0</span><br><span class="line"><span class="comment"># 客户端超时时间,默认是2000ms</span></span><br><span class="line">spring.redis.<span class="attribute">timeout</span>=2000ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## jedis 客户端配置(从 Spring Boot 2.x 开始，不再推荐使用 jedis 客户端)</span></span><br><span class="line"><span class="comment">## 建立连接最大等待时间，默认1ms，超出该时间会抛异常。设为-1表示无限等待，直到分配成功。</span></span><br><span class="line"><span class="comment">#spring.redis.jedis.pool.max-wait=1ms</span></span><br><span class="line"><span class="comment">## 最大连连接数，默认为8，负值表示没有限制</span></span><br><span class="line"><span class="comment">#spring.redis.jedis.pool.max-active=8</span></span><br><span class="line"><span class="comment">## 最大空闲连接数,默认8。负值表示没有限制</span></span><br><span class="line"><span class="comment">#spring.redis.jedis.pool.max-idle=8</span></span><br><span class="line"><span class="comment">## 最小空闲连接数,默认0。</span></span><br><span class="line"><span class="comment">#spring.redis.jedis.pool.min-idle=0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># lettuce 客户端配置(从 Spring Boot 2.x 开始，推荐使用 lettuce 客户端)</span></span><br><span class="line"><span class="comment"># 建立连接最大等待时间，默认1ms，超出该时间会抛异常。设为-1表示无限等待，直到分配成功。</span></span><br><span class="line">spring.redis.lettuce.pool.<span class="attribute">max-wait</span>=1ms</span><br><span class="line"><span class="comment"># 最大连连接数，默认为8，负值表示没有限制</span></span><br><span class="line">spring.redis.lettuce.pool.<span class="attribute">max-active</span>=8</span><br><span class="line"><span class="comment"># 最大空闲连接数,默认8。负值表示没有限制</span></span><br><span class="line">spring.redis.lettuce.pool.<span class="attribute">max-idle</span>=8</span><br><span class="line"><span class="comment"># 最小空闲连接数,默认0。</span></span><br><span class="line">spring.redis.lettuce.pool.<span class="attribute">min-idle</span>=0</span><br><span class="line"><span class="comment"># 设置关闭连接的超时时间</span></span><br><span class="line">spring.redis.lettuce.<span class="attribute">shutdown-timeout</span>=100ms</span><br></pre></td></tr></table></figure>

<h3 id="自定义-RedisTemplate"><a href="#自定义-RedisTemplate" class="headerlink" title="自定义 RedisTemplate"></a>自定义 RedisTemplate</h3><p>RedisTemplate 是 spring 为我们提供的 redis 操作类，通过它我们可以完成大部分 redis 操作。</p>
<p>只要我们引入了 redis 依赖，并将 redis 的连接信息配置正确，springboot 就会根据我们的配置会给我们生成默认 RedisTemplate。</p>
<p>但是默认生成的 RedisTemplate 有两个地方不是很符合日常开发中的使用习惯</p>
<ol>
<li>默认生成的 <code>RedisTemplate&lt;K, V&gt;</code>  接收的<code>key</code>和<code>value</code>为泛型，经常需要类型转换，直接使用不是很方便</li>
<li>默认生成的 RedisTemplate 序列化时，使用的是 <strong>JdkSerializationRedisSerializer</strong> ，存储到 redis 中后，内容为二进制字节，不利于查看原始内容</li>
</ol>
<p>对于第一个问题，一般习惯将 <code>RedisTemplate&lt;K, V&gt;</code> 改为 <code>RedisTemplate&lt;String, Object&gt;</code>，即接收的 <code>key</code> 为 <strong>String</strong> 类型,接收的 <code>value</code> 为 <strong>Object</strong> 类型 对于第二个问题,一般会把数据序列化为 <strong>json</strong> 格式，然后存储到 <strong>redis</strong> 中，序列化成 <strong>json</strong> 格式还有一个好处就是跨语言，其他语言也可以读取你存储在 <strong>redis</strong> 中的内容</p>
<p>为了实现上面两个目的，我们需要自定义自己的 <strong>RedisTemplate</strong>。</p>
<p>如下，创建一个 config 类，在里面配置 自定义的 <strong>RedisTemplate</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/16/AYJSRD.png" alt="image.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jdk8.Jdk8Module;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.<span class="keyword">module</span>.paramnames.ParameterNamesModule;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 配置 json 序列化器 - Jackson2JsonRedisSerializer</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jacksonSerializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>()</span><br><span class="line">                <span class="comment">// 扩展序列化器，增加对 java.time.* 包中时间类的序列化、反序列化支持</span></span><br><span class="line">                .registerModule(<span class="keyword">new</span> <span class="title class_">ParameterNamesModule</span>())</span><br><span class="line">                .registerModule(<span class="keyword">new</span> <span class="title class_">Jdk8Module</span>())</span><br><span class="line">                .registerModule(<span class="keyword">new</span> <span class="title class_">JavaTimeModule</span>());</span><br><span class="line">        jacksonSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建并配置自定义 RedisTemplateRedisOperator</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 将 key 序列化成字符串</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 将 hash 的 key 序列化成字符串</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        <span class="comment">// 将 value 序列化成 json</span></span><br><span class="line">        template.setValueSerializer(jacksonSerializer);</span><br><span class="line">        <span class="comment">// 将 hash 的 value 序列化成 json</span></span><br><span class="line">        template.setHashValueSerializer(jacksonSerializer);</span><br><span class="line">        <span class="comment">// 设置连接器</span></span><br><span class="line">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HashOperations&lt;String, String, Object&gt; <span class="title function_">hashOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ValueOperations&lt;String, Object&gt; <span class="title function_">valueOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ListOperations&lt;String, Object&gt; <span class="title function_">listOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SetOperations&lt;String, Object&gt; <span class="title function_">setOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ZSetOperations&lt;String, Object&gt; <span class="title function_">zSetOperations</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForZSet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-Redis-操作类"><a href="#自定义-Redis-操作类" class="headerlink" title="自定义 Redis 操作类"></a>自定义 Redis 操作类</h3><p>虽然 <strong>RedisTemplate</strong> 已经对 redis 的操作进行了一定程度的封装，但是直接使用还是有些不方便，实际开发中，一般会对 <strong>RedisTemplate</strong> 做近一步封装，形成一个简单、方便使用的Redis 操作类。</p>
<blockquote>
<p>当然你也可以选择不封装，看个人喜好。</p>
</blockquote>
<p>具体的封装类参考<a href="https://juejin.cn/post/6844903999406096398">基于 RedisTemplate 自定义 Redis 操作类</a>。</p>
<h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>Spring Cache 是 Spring 为缓存场景提供的一套解决方案。通过使用 <code>@CachePut</code>、<code>@CacheEvict</code>、<code>@Cacheable</code>等注解实现对缓存的，存储、查询、删除等操作</p>
<p>当我们引入了 <code>spring-boot-starter-data-redis</code> 后，只要在带有<code>@Configuration</code>类上使用 <code>@EnableCaching</code> 注解 <strong>Spring Cache</strong> 就会被“激活”。</p>
<p>Spring Cache 会为我们配置默认的<strong>缓存管理器</strong>和<strong>key生成器</strong>，但是缓存管理器对缓存的序列化和key生成器生成的key，不易阅读。建议自定义<strong>缓存管理器</strong>和<strong>key生成器</strong></p>
<blockquote>
<p>如果用不上 Spring Cache ，可以不用管。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意：Spring Cache 并不是只能使用 Redis 作为缓存容器，其他例如 MemCache 等缓存中间件，都支持。</span><br></pre></td></tr></table></figure>

<h3 id="配置-Spring-Cache"><a href="#配置-Spring-Cache" class="headerlink" title="配置 Spring Cache"></a>配置 Spring Cache</h3><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/16/2hX29r.png" alt="img"></p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment">## spring cache 配置</span></span><br><span class="line"><span class="comment"># 使用的缓存的类型</span></span><br><span class="line"><span class="attr">spring.cache.type</span>=redis</span><br><span class="line"><span class="comment"># 通过 spring cache 注解添加的缓存 的到期时间，单位秒(这是一个自定义属性)</span></span><br><span class="line"><span class="attr">cache.expireTime</span>=<span class="number">60</span></span><br></pre></td></tr></table></figure>

<p>最重要的就是指定使用的缓存的类型<br> 另外是一个自定义的变量，后面配置<strong>缓存管理器</strong>会用到</p>
<h3 id="配置缓存管理器和-key-生成器"><a href="#配置缓存管理器和-key-生成器" class="headerlink" title="配置缓存管理器和 key 生成器"></a>配置缓存管理器和 key 生成器</h3><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/16/FiVfuP.png" alt="img"></p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.<span class="keyword">annotation</span>.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.<span class="keyword">annotation</span>.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.<span class="keyword">annotation</span>.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.<span class="keyword">annotation</span>.CachingConfigurerSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.<span class="keyword">annotation</span>.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.interceptor.KeyGenerator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.<span class="keyword">annotation</span>.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.<span class="keyword">data</span>.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 开启 Spring Cache</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CacheConfig</span> <span class="title">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(<span class="string">&quot;<span class="subst">$&#123;cache.expireTime&#125;</span>&quot;</span>)</span></span><br><span class="line">    <span class="comment">// 缓存超时时间</span></span><br><span class="line">    <span class="keyword">private</span> int cacheExpireTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置<span class="doctag">@Cacheable</span>、<span class="doctag">@CacheEvict</span>等注解在没有指定Key的情况下，key生成策略</span></span><br><span class="line"><span class="comment">     * 该配置作用于缓存管理器管理的所有缓存</span></span><br><span class="line"><span class="comment">     * 最终生成的key 为 cache类注解指定的cacheNames::类名:方法名#参数值1,参数值2...</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> KeyGenerator keyGenerator() &#123;</span><br><span class="line">        <span class="keyword">return</span> new KeyGenerator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object generate(Object target, Method method, Object... params) &#123;</span><br><span class="line">                StringBuffer sb = new StringBuffer();</span><br><span class="line">                sb.append(target.getClass().getName());</span><br><span class="line">                sb.append(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                sb.append(method.getName());</span><br><span class="line">                sb.append(<span class="string">&quot;#&quot;</span>);</span><br><span class="line">                <span class="keyword">for</span> (Object obj : params) &#123;</span><br><span class="line">                    sb.append(obj.toString());</span><br><span class="line">                    sb.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> sb.substring(<span class="number">0</span>, sb.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置缓存管理器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager cacheManager(RedisConnectionFactory factory) &#123;</span><br><span class="line">        <span class="comment">// 配置 json 序列化器 - Jackson2JsonRedisSerializer</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jacksonSerializer = new Jackson2JsonRedisSerializer&lt;&gt;(Object.<span class="keyword">class</span>);</span><br><span class="line">        ObjectMapper objectMapper = new ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jacksonSerializer.setObjectMapper(objectMapper);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关键点，spring cache 的注解使用的序列化都从这来，没有这个配置的话使用的jdk自己的序列化，实际上不影响使用，只是打印出来不适合人眼识别</span></span><br><span class="line">        RedisCacheConfiguration cacheConfig = RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                <span class="comment">// 将 key 序列化成字符串</span></span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(new StringRedisSerializer()))</span><br><span class="line">                <span class="comment">// 将 value 序列化成 json</span></span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jacksonSerializer))<span class="comment">//value序列化方式</span></span><br><span class="line">                <span class="comment">// 设置缓存过期时间，单位秒</span></span><br><span class="line">                .entryTtl(Duration.ofSeconds(cacheExpireTime))</span><br><span class="line">                <span class="comment">// 不缓存空值</span></span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(cacheConfig)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>网上 Spring Boot 集成 redis 的教程大多都是，将 redis 和 spring cache 一块配置，很容易让人产生误解。</p>
<p>其实 redis 和 spring cache 是两个不同的东西，所以，上面的教程我特意分为了两个配置文件。</p>
<blockquote>
<p>你可以只使用 redis 而不使用 spring cache，也可以反过来。</p>
</blockquote>
<p>那为什么两者经常放在一起去讨论呢？<br> 原因在于两者也有一定的联系</p>
<p>站在 reids 的角度看，spring cache 提供了一种便捷的操作 reids 的途径，为缓存场景提供了优秀的解决方案。</p>
<p>站在 spring cache 的角度看， reids 提供了一种缓存容器，可以把缓存放在 reids 中。</p>
<blockquote>
<p>缓存管理器对 reids 的操作也是通过 redisTemplate 实现的。</p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>renren-fast开发文档3.0最新版</title>
    <url>/posts/55ff28b4/</url>
    <content><![CDATA[<h1 id="renren-fast开发文档3-0最新版"><a href="#renren-fast开发文档3-0最新版" class="headerlink" title="renren-fast开发文档3.0最新版"></a>renren-fast开发文档3.0最新版</h1><h1 id="版权说明"><a href="#版权说明" class="headerlink" title="版权说明"></a>版权说明</h1><blockquote>
<p>本文档为付费文档，版权归人人开源（renren.io）所有，并保留一切权利，本文档及其描述的内容受有关法律的版权保护，对本文档以任何形式的非法复制、泄露或散布到网络提供下载，都将导致相应的法律责任。</p>
</blockquote>
<h1 id="免责声明"><a href="#免责声明" class="headerlink" title="免责声明"></a>免责声明</h1><blockquote>
<p>本文档仅提供阶段性信息，所含内容可根据项目的实际情况随时更新，以人人开源社区公告为准。如因文档使用不当造成的直接或间接损失，人人开源不承担任何责任。</p>
</blockquote>
<h1 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h1><blockquote>
<p>本文档由人人开源于 2019 年 03 月 01 日最后修订。</p>
</blockquote>
<h1 id="第-1-章-项目介绍"><a href="#第-1-章-项目介绍" class="headerlink" title="第 1 章 项目介绍"></a>第 1 章 项目介绍</h1><blockquote>
<p>人人权限系统是一套轻量级的权限系统，主要包括用户管理、角色管理、部门管理、菜单管理、定时任务、 参数管理、字典管理、文件上传、登录日志、操作日志、异常日志、文章管理、APP模块等功能。其中，还拥有多数据源、数据权限、国际化支持、Redis缓存动态开启与关闭、统一异常处理等技术特点。</p>
</blockquote>
<h2 id="1-1-项目描述"><a href="#1-1-项目描述" class="headerlink" title="1.1 项目描述"></a>1.1 项目描述</h2><h2 id="1-2-项目特点"><a href="#1-2-项目特点" class="headerlink" title="1.2 项目特点"></a>1.2 项目特点</h2><h2 id="1-3-数据交互"><a href="#1-3-数据交互" class="headerlink" title="1.3 数据交互"></a>1.3 数据交互</h2><h2 id="1-4-开发环境搭建"><a href="#1-4-开发环境搭建" class="headerlink" title="1.4 开发环境搭建"></a>1.4 开发环境搭建</h2><h2 id="1-5-获取帮助"><a href="#1-5-获取帮助" class="headerlink" title="1.5 获取帮助"></a>1.5 获取帮助</h2><h2 id="1-1-项目描述-1"><a href="#1-1-项目描述-1" class="headerlink" title="1.1 项目描述"></a>1.1 项目描述</h2><p>renren-fast是一套轻量级的权限系统，主要包括用户管理、角色管理、菜单管理、定时任务、文件上传、系 统日志、APP模块等功能。其中，还拥有多数据源、Redis缓存动态开启与关闭、统一异常处理等技术特 点。</p>
<h2 id="1-2-项目特点-1"><a href="#1-2-项目特点-1" class="headerlink" title="1.2 项目特点"></a>1.2 项目特点</h2><ul>
<li><a href="https://gitee.com/renrenio/renren-fast">renren-fast</a>采用SpringBoot 2.1、MyBatis、Shiro框架，开发的一套权限系统，极低门槛，拿来即用。设<br>计之初，就非常注重安全性，为企业系统保驾护航，让一切都变得如此简单。</li>
<li>灵活的权限控制，可控制到页面或按钮，满足绝大部分的权限需求</li>
<li>完善的 XSS 防范及脚本过滤，彻底杜绝 XSS 攻击</li>
<li>支持MySQL、Oracle、SQL Server、PostgreSQL等主流数据库</li>
<li></li>
</ul>
<p>推荐使用阿里云服务器部署项目，免费领取阿里云优惠券，请点击<a href="https://www.aliyun.com/minisite/goods?userCode=y93lfwbg&productCode=dmspre&utm_source=y93lfwbg">【免费领取】</a></p>
<h2 id="1-3-数据交互-1"><a href="#1-3-数据交互-1" class="headerlink" title="1.3 数据交互"></a>1.3 数据交互</h2><ul>
<li>一般情况下，web项目都是通过session进行认证，每次请求数据时，都会把jsessionid放在cookie中，以便与服务端保持会话</li>
<li>本项目是前后端分离的，通过token进行认证（登录时，生成唯一的token凭证），每次请求数据时，都会把token放在header中，服务端解析token，并确定用户身份及用户权限，数据通过json交互</li>
<li>数据交互流程，如下所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/7nZ7nU.png"></p>
<h2 id="1-4-开发环境搭建-1"><a href="#1-4-开发环境搭建-1" class="headerlink" title="1.4 开发环境搭建"></a>1.4 开发环境搭建</h2><h3 id="1-4-1-软件需求"><a href="#1-4-1-软件需求" class="headerlink" title="1.4.1 软件需求"></a>1.4.1 软件需求</h3><ul>
<li>JDK 1.8+</li>
<li>Maven 3.0+</li>
<li>MySQL 5.5+</li>
<li>Oracle 11g+</li>
<li>SQL Server 2012+</li>
<li>PostgreSQL 9.4+</li>
</ul>
<h3 id="1-4-2-下载源码"><a href="#1-4-2-下载源码" class="headerlink" title="1.4.2 下载源码"></a>1.4.2 下载源码</h3><ul>
<li>通过 git ，下载renren-fast源码，如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitee.com/renrenio/renren-fast.git</span><br></pre></td></tr></table></figure>

<h3 id="1-4-3-IDEA-开发工具"><a href="#1-4-3-IDEA-开发工具" class="headerlink" title="1.4.3 IDEA 开发工具"></a>1.4.3 IDEA 开发工具</h3><ul>
<li>IDEA打开项目， File -&gt; Open 如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/EVCSoB.png"></p>
<h3 id="1-4-4-Eclipse-开发工具"><a href="#1-4-4-Eclipse-开发工具" class="headerlink" title="1.4.4 Eclipse 开发工具"></a>1.4.4 Eclipse 开发工具</h3><ul>
<li>Eclipse导入项目，如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/C4IoHO.png"></p>
<h3 id="1-4-5-创建数据库"><a href="#1-4-5-创建数据库" class="headerlink" title="1.4.5 创建数据库"></a>1.4.5 创建数据库</h3><ul>
<li>创建数据库 renren_fast ，数据库编码为<code>UTF-8</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span></span><br><span class="line">DATABASE renren_fast <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci;</span><br></pre></td></tr></table></figure>

<ul>
<li>执行 db&#x2F;mysql.sql 文件，初始化数据（默认支持MySQL）</li>
</ul>
<h3 id="1-4-6-修改配置文件"><a href="#1-4-6-修改配置文件" class="headerlink" title="1.4.6 修改配置文件"></a>1.4.6 修改配置文件</h3><ul>
<li>修改 <code>application-dev.yml</code> ，更新MySQL账号和密码</li>
<li>运行 io.renren.RenrenApplication.java 的 main 方法，则可启动项目</li>
<li>Swagger路径：<a href="http://localhost:8080/renren-fast/swagger/index.html">http://localhost:8080/renren-fast/swagger/index.html</a></li>
<li>Swagger注解路径：<a href="http://localhost:8080/renren-fast/swagger-ui.html">http://localhost:8080/renren-fast/swagger-ui.html</a></li>
</ul>
<h3 id="1-4-7-前端部署"><a href="#1-4-7-前端部署" class="headerlink" title="1.4.7 前端部署"></a>1.4.7 前端部署</h3><blockquote>
<p>renren-fast-vue基于vue、element-ui构建开发，实现renren-fast后台管理前端功能，提供一套更优的前端解决方案。 欢迎star或fork前端Git库，方便日后寻找，及二次开发</p>
</blockquote>
<ul>
<li>开发环境，需要安装node8.x最新版</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 克隆项目</span></span><br><span class="line">git <span class="built_in">clone</span> https://gitee.com/renrenio/renren-fast-vue.git</span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install --registry=https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 启动服务</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<ul>
<li>生产环境，打包并把dist目录文件，部署到Nginx里</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#构建生产环境(默认)</span></span><br><span class="line">npm run build</span><br><span class="line"><span class="comment"># 构建测试环境</span></span><br><span class="line">npm run build --qa</span><br><span class="line"><span class="comment"># 构建验收环境</span></span><br><span class="line">npm run build --uat</span><br><span class="line"><span class="comment"># 构建生产环境</span></span><br><span class="line">npm run build --prod</span><br><span class="line"><span class="comment"># 安装Nginx，并配置Nginx</span></span><br><span class="line">server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name localhost;</span><br><span class="line">		location / &#123;</span><br><span class="line">				root E:\\renren-fast-vue;</span><br><span class="line">				index index.html index.htm;</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 启动Nginx后，访问如下路径即可</span></span><br><span class="line">http://localhost</span><br></pre></td></tr></table></figure>

<ul>
<li>登录的账号密码：admin&#x2F;admin</li>
</ul>
<h2 id="1-5-获取帮助-1"><a href="#1-5-获取帮助-1" class="headerlink" title="1.5 获取帮助"></a>1.5 获取帮助</h2><ul>
<li><p>后端地址：<a href="https://gitee.com/renrenio/renren-fast">https://gitee.com/renrenio/renren-fast</a></p>
</li>
<li><p>前端地址：<a href="https://github.com/renrenio/renren-fast-vue">https://github.com/renrenio/renren-fast-vue</a></p>
</li>
<li><p>代码生成器：<a href="https://gitee.com/renrenio/renren-generator">https://gitee.com/renrenio/renren-generator</a></p>
</li>
<li><p>官方社区：<a href="https://www.renren.io/community">https://www.renren.io/community</a></p>
</li>
<li><p>如需寻求帮助、项目建议、技术讨论等，请移步到官方社区，我会在第一时间进行解答或回复 如需关注项目最新动态，请Watch、Star项目，同时也是对项目最好的支持</p>
</li>
</ul>
<h1 id="第-2-章-数据库支持"><a href="#第-2-章-数据库支持" class="headerlink" title="第 2 章 数据库支持"></a>第 2 章 数据库支持</h1><h2 id="2-1-MySQL-数据库支持"><a href="#2-1-MySQL-数据库支持" class="headerlink" title="2.1 MySQL 数据库支持"></a>2.1 MySQL 数据库支持</h2><h2 id="2-2-Oracle-数据库支持"><a href="#2-2-Oracle-数据库支持" class="headerlink" title="2.2 Oracle 数据库支持"></a>2.2 Oracle 数据库支持</h2><h2 id="2-3-SQL-Server-数据库支持"><a href="#2-3-SQL-Server-数据库支持" class="headerlink" title="2.3 SQL Server 数据库支持"></a>2.3 SQL Server 数据库支持</h2><h2 id="2-4-PostgreSQL-数据库支持"><a href="#2-4-PostgreSQL-数据库支持" class="headerlink" title="2.4 PostgreSQL 数据库支持"></a>2.4 PostgreSQL 数据库支持</h2><h2 id="2-1-MySQL-数据库支持-1"><a href="#2-1-MySQL-数据库支持-1" class="headerlink" title="2.1 MySQL 数据库支持"></a>2.1 MySQL 数据库支持</h2><ol>
<li>修改数据库配置信息，开发环境的配置文件在application-dev.yml，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/renren_fast?allowMultiQueries=true&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行db&#x2F;mysql.sql，创建表及初始化数据，再启动项目即可</li>
</ol>
<h2 id="2-2-Oracle-数据库支持-1"><a href="#2-2-Oracle-数据库支持-1" class="headerlink" title="2.2 Oracle 数据库支持"></a>2.2 Oracle 数据库支持</h2><ol>
<li>修改数据库配置信息，开发环境的配置文件在application-dev.yml，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">oracle.jdbc.OracleDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:oracle:thin:@192.168.10.10:1521:renren</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">renren_fast</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行db&#x2F;oracle.sql，创建表及初始化数据，再启动项目即可</li>
</ol>
<h2 id="2-3-SQL-Server-数据库支持-1"><a href="#2-3-SQL-Server-数据库支持-1" class="headerlink" title="2.3 SQL Server 数据库支持"></a>2.3 SQL Server 数据库支持</h2><ol>
<li>修改数据库配置信息，开发环境的配置文件在application-dev.yml，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>执行db&#x2F;sqlserver.sql，创建表及初始化数据，再启动项目即可</li>
</ol>
<h2 id="2-4-PostgreSQL-数据库支持-1"><a href="#2-4-PostgreSQL-数据库支持-1" class="headerlink" title="2.4 PostgreSQL 数据库支持"></a>2.4 PostgreSQL 数据库支持</h2><ol>
<li>修改数据库配置信息，开发环境的配置文件在application-dev.yml，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://192.168.10.10:5432/renren_fast</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">renren</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修改quartz配置信息，quartz配置文件 ScheduleConfig.java ，打开注释，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">//PostgreSQL数据库，需要打开此注释</span></span><br><span class="line"><span class="string">prop.put(&quot;org.quartz.jobStore.driverDelegateClass&quot;,</span> <span class="string">&quot;org.quartz.impl.jdbcjobstore.PostgreSQLD</span></span><br><span class="line"><span class="string">elegate&quot;</span><span class="string">);</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>执行db&#x2F;postgresql.sql，创建表及初始化数据，再启动项目即可</li>
</ol>
<h1 id="第-3-章-多数据源支持"><a href="#第-3-章-多数据源支持" class="headerlink" title="第 3 章 多数据源支持"></a>第 3 章 多数据源支持</h1><h2 id="3-1-多数据源配置"><a href="#3-1-多数据源配置" class="headerlink" title="3.1 多数据源配置"></a>3.1 多数据源配置</h2><h2 id="3-2-多数据源使用"><a href="#3-2-多数据源使用" class="headerlink" title="3.2 多数据源使用"></a>3.2 多数据源使用</h2><h2 id="3-3-源码讲解"><a href="#3-3-源码讲解" class="headerlink" title="3.3 源码讲解"></a>3.3 源码讲解</h2><h2 id="3-1-多数据源配置-1"><a href="#3-1-多数据源配置-1" class="headerlink" title="3.1 多数据源配置"></a>3.1 多数据源配置</h2><blockquote>
<p>多数据源的应用场景，主要针对跨多个数据库实例的情况，如果是同实例中的多个数据库，则没必要使用多数据源。</p>
</blockquote>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="meta">#下面演示单实例，多数据库的使用情况</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> db.table;</span><br><span class="line"><span class="meta">#其中，db为数据库名，table为数据库表名</span></span><br></pre></td></tr></table></figure>

<ul>
<li>配置多数据源，如果是开发环境，则修改 application-dev.xml ，如下所示</li>
</ul>
<h2 id="多数据源的配置"><a href="#多数据源的配置" class="headerlink" title="多数据源的配置"></a>多数据源的配置</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dynamic:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">slave2:</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:postgresql://192.168.10.10:5432/renren_fast</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">postgres</span></span><br><span class="line">        <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h2 id="3-2-多数据源使用-1"><a href="#3-2-多数据源使用-1" class="headerlink" title="3.2 多数据源使用"></a>3.2 多数据源使用</h2><blockquote>
<p>多数据源的使用，只需在Service类、方法上添加@DataSource(“”)注解即可，比如在类上添加了 @DataSource(“userDB”)注解，则表示该Service方法里的所有CURD，都会在 userDB 数据源里执行。</p>
</blockquote>
<ol>
<li>多数据源注解使用规则<ul>
<li>支持在Service类或方法上，添加多数据源的注解@DataSource</li>
<li>在Service类上添加了@DataSource注解，则该类下的所有方法，都会使用@DataSource标注的数据源</li>
<li>在Service类、方法上都添加了@DataSource注解，则方法上的注解会覆盖Service类上的注解</li>
</ul>
</li>
<li>编写DynamicDataSourceTestService.java，测试多数据源及事物</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.renren.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.annotation.DataSource;</span><br><span class="line"><span class="keyword">import</span> io.renren.dao.SysUserDao;</span><br><span class="line"><span class="keyword">import</span> io.renren.entity.SysUserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试多数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">//@DataSource(&quot;slave1&quot;) 多数据源全局配置</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceTestService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysUserDao sysUserDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUserEntity</span>();</span><br><span class="line">        user.setUserId(id);</span><br><span class="line">        user.setMobile(<span class="string">&quot;13500000000&quot;</span>);</span><br><span class="line">        sysUserDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="meta">@DataSource(&quot;slave1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserBySlave1</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUserEntity</span>();</span><br><span class="line">        user.setUserId(id);</span><br><span class="line">        user.setMobile(<span class="string">&quot;13500000001&quot;</span>);</span><br><span class="line">        sysUserDao.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DataSource(&quot;slave2&quot;)</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserBySlave2</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysUserEntity</span>();</span><br><span class="line">        user.setUserId(id);</span><br><span class="line">        user.setMobile(<span class="string">&quot;13500000002&quot;</span>);</span><br><span class="line">        sysUserDao.updateById(user);</span><br><span class="line">        <span class="comment">//测试事物</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行测试类DynamicDataSourceTest.java，即可测试多数据源及事物是生效的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> io.renren.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicDataSourceTestService dynamicDataSourceTestService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">        dynamicDataSourceTestService.updateUser(id);</span><br><span class="line">        dynamicDataSourceTestService.updateUserBySlave1(id);</span><br><span class="line">        dynamicDataSourceTestService.updateUserBySlave2(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>其中， @DataSource(“slave1”) 、 @DataSource(“slave2”) 里的 slave1 、 slave2 值，是在application- dev.xml里配置的，如下所示：</li>
</ol>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">dynamic:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">slave1:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:sqlserver://localhost:1433;DatabaseName=renren_security</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">slave2:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:postgresql://localhost:5432/renren_security</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">renren</span></span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure>

<h2 id="3-3-源码讲解-1"><a href="#3-3-源码讲解-1" class="headerlink" title="3.3 源码讲解"></a>3.3 源码讲解</h2><ol>
<li>定义多数据源注解类@DataSource，使用多数据源时，只需在Service方法上添加@DataSource注解即可</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DataSource &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>定义读取多数据源配置文件的类，如下所示：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Druid默认参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">initialSize</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxActive</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">minIdle</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">maxWait</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">timeBetweenEvictionRunsMillis</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">minEvictableIdleTimeMillis</span> <span class="operator">=</span> <span class="number">1000L</span> * <span class="number">60L</span> * <span class="number">30L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">maxEvictableIdleTimeMillis</span> <span class="operator">=</span> <span class="number">1000L</span> * <span class="number">60L</span> * <span class="number">60L</span> * <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">validationQuery</span> <span class="operator">=</span> <span class="string">&quot;select 1&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">validationQueryTimeout</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">testOnBorrow</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">testOnReturn</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">testWhileIdle</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">poolPreparedStatements</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">maxOpenPreparedStatements</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">sharePreparedStatements</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">filters</span> <span class="operator">=</span> <span class="string">&quot;stat,wall&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDriverClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDriverClassName</span><span class="params">(String driverClassName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.driverClassName = driverClassName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUrl</span><span class="params">(String url)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getInitialSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInitialSize</span><span class="params">(<span class="type">int</span> initialSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.initialSize = initialSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxActive</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxActive</span><span class="params">(<span class="type">int</span> maxActive)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxActive = maxActive;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMinIdle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMinIdle</span><span class="params">(<span class="type">int</span> minIdle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minIdle = minIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMaxWait</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxWait</span><span class="params">(<span class="type">long</span> maxWait)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxWait = maxWait;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTimeBetweenEvictionRunsMillis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> timeBetweenEvictionRunsMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTimeBetweenEvictionRunsMillis</span><span class="params">(<span class="type">long</span> timeBetweenEvictionRunsMillis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.timeBetweenEvictionRunsMillis =</span><br><span class="line">                timeBetweenEvictionRunsMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMinEvictableIdleTimeMillis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> minEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMinEvictableIdleTimeMillis</span><span class="params">(<span class="type">long</span> minEvictableIdleTimeMillis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.minEvictableIdleTimeMillis =</span><br><span class="line">                minEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getMaxEvictableIdleTimeMillis</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxEvictableIdleTimeMillis</span><span class="params">(<span class="type">long</span> maxEvictableIdleTimeMillis)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxEvictableIdleTimeMillis =</span><br><span class="line">                maxEvictableIdleTimeMillis;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getValidationQuery</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> validationQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValidationQuery</span><span class="params">(String validationQuery)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.validationQuery = validationQuery;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValidationQueryTimeout</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> validationQueryTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValidationQueryTimeout</span><span class="params">(<span class="type">int</span> validationQueryTimeout)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.validationQueryTimeout =</span><br><span class="line">                validationQueryTimeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTestOnBorrow</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestOnBorrow</span><span class="params">(<span class="type">boolean</span> testOnBorrow)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testOnBorrow = testOnBorrow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTestOnReturn</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testOnReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestOnReturn</span><span class="params">(<span class="type">boolean</span> testOnReturn)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testOnReturn = testOnReturn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTestWhileIdle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> testWhileIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTestWhileIdle</span><span class="params">(<span class="type">boolean</span> testWhileIdle)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.testWhileIdle = testWhileIdle;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isPoolPreparedStatements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> poolPreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPoolPreparedStatements</span><span class="params">(<span class="type">boolean</span> poolPreparedStatements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.poolPreparedStatements =</span><br><span class="line">                poolPreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaxOpenPreparedStatements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> maxOpenPreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMaxOpenPreparedStatements</span><span class="params">(<span class="type">int</span> maxOpenPreparedStatements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.maxOpenPreparedStatements =</span><br><span class="line">                maxOpenPreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSharePreparedStatements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sharePreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSharePreparedStatements</span><span class="params">(<span class="type">boolean</span> sharePreparedStatements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sharePreparedStatements =</span><br><span class="line">                sharePreparedStatements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFilters</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFilters</span><span class="params">(String filters)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filters = filters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源属性</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;dynamic&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, DataSourceProperties&gt; datasource = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, DataSourceProperties&gt; <span class="title function_">getDatasource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> datasource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDatasource</span><span class="params">(Map&lt;String, DataSourceProperties&gt; datasource)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.datasource = datasource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>扩展Spring的AbstractRoutingDataSource抽象类，<br>AbstractRoutingDataSource中的抽象方法determineCurrentLookupKey是实现多数据源的核心，并对该方法进行Override，如下所示：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title class_">AbstractRoutingDataSource</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Object <span class="title function_">determineCurrentLookupKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DynamicContextHolder.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>数据源上下</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源上下文</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicContextHolder</span> &#123;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Deque&lt;String&gt;&gt; CONTEXT_HOLDER = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">protected</span> Object <span class="title function_">initialValue</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayDeque</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得当前线程数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 数据源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">peek</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> CONTEXT_HOLDER.get().peek();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前线程数据源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource 数据源名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(String dataSource)</span> &#123;</span><br><span class="line">        CONTEXT_HOLDER.get().push(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 清空当前线程数据源</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">poll</span><span class="params">()</span> &#123;</span><br><span class="line">        Deque&lt;String&gt; deque = CONTEXT_HOLDER.get();</span><br><span class="line">        deque.poll();</span><br><span class="line">        <span class="keyword">if</span> (deque.isEmpty()) &#123;</span><br><span class="line">            CONTEXT_HOLDER.remove();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>配置多数据源，如下所示：</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> druidDataSource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>@DataSource注解的切面处理类，动态切换的核心代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.properties.DataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.properties.DynamicDataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.EnableConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置多数据源</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(DynamicDataSourceProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DynamicDataSourceProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource.druid&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceProperties <span class="title function_">dataSourceProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceProperties</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//因为DynamicDataSource是继承与AbstractRoutingDataSource，而AbstractRoutingDataSource又是继</span></span><br><span class="line">    承于AbstractDataSource，AbstractDataSource实现了统一的DataSource接口，</span><br><span class="line">    所以DynamicDataSource也可</span><br><span class="line">            以当做DataSource使用</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DynamicDataSource <span class="title function_">dynamicDataSource</span><span class="params">(DataSourceProperties dataSourceProperties)</span> &#123;</span><br><span class="line">        <span class="type">DynamicDataSource</span> <span class="variable">dynamicDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DynamicDataSource</span>();</span><br><span class="line">        dynamicDataSource.setTargetDataSources(getDynamicDataSource());</span><br><span class="line">        <span class="comment">//默认数据源</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">defaultDataSource</span> <span class="operator">=</span> DynamicDataSourceFactory.buildDruidDataSource(dat</span><br><span class="line">                aSourceProperties);</span><br><span class="line">        dynamicDataSource.setDefaultTargetDataSource(defaultDataSource);</span><br><span class="line">        <span class="keyword">return</span> dynamicDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;Object, Object&gt; <span class="title function_">getDynamicDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;Object, Object&gt; targetDataSources = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        properties.getDatasource().forEach((k, v) -&gt; &#123;</span><br><span class="line">            <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> DynamicDataSourceFactory.buildDruidDataSource(v</span><br><span class="line">            );</span><br><span class="line">            targetDataSources.put(k, druidDataSource);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> targetDataSources;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.properties.DataSourceProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * DruidDataSource</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DynamicDataSourceFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DruidDataSource <span class="title function_">buildDruidDataSource</span><span class="params">(DataSourceProperties properties)</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(properties.getDriverClassName());</span><br><span class="line">        druidDataSource.setUrl(properties.getUrl());</span><br><span class="line">        druidDataSource.setUsername(properties.getUsername());</span><br><span class="line">        druidDataSource.setPassword(properties.getPassword());</span><br><span class="line">        druidDataSource.setInitialSize(properties.getInitialSize());</span><br><span class="line">        druidDataSource.setMaxActive(properties.getMaxActive());</span><br><span class="line">        druidDataSource.setMinIdle(properties.getMinIdle());</span><br><span class="line">        druidDataSource.setMaxWait(properties.getMaxWait());</span><br><span class="line">        druidDataSource.setTimeBetweenEvictionRunsMillis(properties.getTimeBetweenEvictionRun</span><br><span class="line">                <span class="title function_">sMillis</span><span class="params">()</span>);</span><br><span class="line">        druidDataSource.setMinEvictableIdleTimeMillis(properties.getMinEvictableIdleTimeMilli</span><br><span class="line">                <span class="title function_">s</span><span class="params">()</span>);</span><br><span class="line">        druidDataSource.setMaxEvictableIdleTimeMillis(properties.getMaxEvictableIdleTimeMilli</span><br><span class="line">                <span class="title function_">s</span><span class="params">()</span>);</span><br><span class="line">        druidDataSource.setValidationQuery(properties.getValidationQuery());</span><br><span class="line">        druidDataSource.setValidationQueryTimeout(properties.getValidationQueryTimeout());</span><br><span class="line">        druidDataSource.setTestOnBorrow(properties.isTestOnBorrow());</span><br><span class="line">        druidDataSource.setTestOnReturn(properties.isTestOnReturn());</span><br><span class="line">        druidDataSource.setPoolPreparedStatements(properties.isPoolPreparedStatements());</span><br><span class="line">        druidDataSource.setMaxOpenPreparedStatements(properties.getMaxOpenPreparedStatements(</span><br><span class="line">        ));</span><br><span class="line">        druidDataSource.setSharePreparedStatements(properties.isSharePreparedStatements());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            druidDataSource.setFilters(properties.getFilters());</span><br><span class="line">            druidDataSource.init();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>@DataSource注解的切面处理类，动态切换的核心代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.annotation.DataSource;</span><br><span class="line"><span class="keyword">import</span> io.renren.commons.dynamic.datasource.config.DynamicContextHolder;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.reflect.MethodSignature;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.Ordered;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.Order;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多数据源，切面处理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceAspect</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(io.renren.commons.dynamic.datasource.annotation.DataSource) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;|| @within(io.renren.commons.dynamic.datasource.annotation.DataSource)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dataSourcePointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;dataSourcePointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) point.getSignature();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">targetClass</span> <span class="operator">=</span> point.getTarget().getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">targetDataSource</span> <span class="operator">=</span> (DataSource) targetClass.getAnnotation(DataSource.class);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">methodDataSource</span> <span class="operator">=</span> method.getAnnotation(DataSource.class);</span><br><span class="line">        <span class="keyword">if</span> (targetDataSource != <span class="literal">null</span> || methodDataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">            String value;</span><br><span class="line">            <span class="keyword">if</span> (methodDataSource != <span class="literal">null</span>) &#123;</span><br><span class="line">                value = methodDataSource.value();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = targetDataSource.value();</span><br><span class="line">            &#125;</span><br><span class="line">            DynamicContextHolder.push(value);</span><br><span class="line">            logger.debug(<span class="string">&quot;set datasource is &#123;&#125;&quot;</span>, value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> point.proceed();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            DynamicContextHolder.poll();</span><br><span class="line">            logger.debug(<span class="string">&quot;clean datasource&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第-4-章-基础知识讲解"><a href="#第-4-章-基础知识讲解" class="headerlink" title="第 4 章 基础知识讲解"></a>第 4 章 基础知识讲解</h1><h2 id="4-1-Spring-MVC-使用"><a href="#4-1-Spring-MVC-使用" class="headerlink" title="4.1 Spring MVC 使用"></a>4.1 Spring MVC 使用</h2><h2 id="4-2-Swagger-使用"><a href="#4-2-Swagger-使用" class="headerlink" title="4.2 Swagger 使用"></a>4.2 Swagger 使用</h2><h2 id="4-3-Mybatis-plus-使用"><a href="#4-3-Mybatis-plus-使用" class="headerlink" title="4.3 Mybatis-plus 使用"></a>4.3 Mybatis-plus 使用</h2><h2 id="4-1-Spring-MVC-使用-1"><a href="#4-1-Spring-MVC-使用-1" class="headerlink" title="4.1 Spring MVC 使用"></a>4.1 Spring MVC 使用</h2><blockquote>
<p>对Spring MVC不太熟悉的，需要理解Spring MVC常用的注解，也方便日后排查问题，常用的注解如下所示：</p>
</blockquote>
<h3 id="4-1-1-Controller-注解"><a href="#4-1-1-Controller-注解" class="headerlink" title="4.1.1 @Controller 注解"></a>4.1.1 @Controller 注解</h3><p>@Controller注解表明了一个类是作为控制器的角色而存在的。Spring不要求你去继承任何控制器基类，也不要求你去实现Servlet的那套API。当然，如果你需要的话也可以去使用任何与Servlet相关的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-2-RequestMapping-注解"><a href="#4-1-2-RequestMapping-注解" class="headerlink" title="4.1.2 @RequestMapping 注解"></a>4.1.2 @RequestMapping 注解</h3><p>你可以使用@RequestMapping注解来将请求URL，如&#x2F;user等，映射到整个类上或某个特定的处理器方法上。<br>一般来说，类级别的注解负责将一个特定（或符合某种模式）的请求路径映射到一个控制器上，同时通过方法级别的注解来细化映射，即根据特定的HTTP请求方法（GET、POST方法等）、HTTP请求中是否携带特 定参数等条件，将请求映射到匹配的方法上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码没有指定请求必须是GET方法还是PUT&#x2F;POST或其他方法，@RequestMapping注解默认会映射所有 的HTTP请求方法。如果仅想接收某种请求方法，请在注解中指定之@RequestMapping(path &#x3D; “&#x2F;user”, method &#x3D; RequestMethod.GET)以缩小范围。</p>
<h3 id="4-1-3-PathVariable-注解"><a href="#4-1-3-PathVariable-注解" class="headerlink" title="4.1.3 @PathVariable 注解"></a>4.1.3 @PathVariable 注解</h3><p>在Spring MVC中你可以在方法参数上使用@PathVariable注解，将其与URI模板中的参数绑定起来，如下所 示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(path = &quot;/user/&#123;userId&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userCenter</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> String userId,Model model)</span>&#123;</span><br><span class="line">        UserDTO user=userService.get(userId);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">        <span class="keyword">return</span><span class="string">&quot;userCenter&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>URI模板”&#x2F;user&#x2F;{userId}”指定了一个变量名为userId。当控制器处理这个请求的时候，userId的值就会被URI模 板中对应部分的值所填充。比如说，如果请求的URI是&#x2F;userId&#x2F;1，此时变量userId的值就是 1 。</p>
<h3 id="4-1-4-GetMapping-注解"><a href="#4-1-4-GetMapping-注解" class="headerlink" title="4.1.4 @GetMapping 注解"></a>4.1.4 @GetMapping 注解</h3><p>@GetMapping是一个组合注解，是@RequestMapping(method &#x3D; RequestMethod.GET)的缩写。该注解将HTTP GET映射到特定的处理方法上。可以使用@GetMapping(“&#x2F;user”)来代替@RequestMapping(path&#x3D;”&#x2F;user”,method&#x3D;RequestMethod.GET)。还有@PostMapping、@PutMapping、 @DeleteMapping等同理。</p>
<h3 id="4-1-5-RequestBody-注解"><a href="#4-1-5-RequestBody-注解" class="headerlink" title="4.1.5 @RequestBody 注解"></a>4.1.5 @RequestBody 注解</h3><p>该注解用于读取Request请求的body部分数据，使用系统默认配置的HttpMessageConverter进行解析，然后把相应的数据绑定到要返回的对象上，再把HttpMessageConverter返回的对象数据绑定到Controller中方法的参数上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">user</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-6-ResponseBody-注解"><a href="#4-1-6-ResponseBody-注解" class="headerlink" title="4.1.6 @ResponseBody 注解"></a>4.1.6 @ResponseBody 注解</h3><p>该注解用于将Controller的方法返回的对象，通过适当的HttpMessageConverter转换为指定格式后，写入到Response对象的body数据区。比如获取JSON数据，加上@ResponseBody后，会直接返回JSON数据，而不会被解析为视图。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/&#123;userId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">info</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> String userId)</span> &#123;</span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">user</span> <span class="operator">=</span> userService.get(userId);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-1-7-RestController-注解"><a href="#4-1-7-RestController-注解" class="headerlink" title="4.1.7 @RestController 注解"></a>4.1.7 @RestController 注解</h3><p>@RestController是一个组合注解，即@Controller + @ResponseBody的组合注解，请求完后，会返回JSON数据。</p>
<h2 id="4-2-Swagger-使用-1"><a href="#4-2-Swagger-使用-1" class="headerlink" title="4.2 Swagger 使用"></a>4.2 Swagger 使用</h2><blockquote>
<p>Swagger是一个根据Swagger注解，即可生成接口文档的服务。</p>
</blockquote>
<h3 id="4-2-1-搭建-Swagger-环境"><a href="#4-2-1-搭建-Swagger-环境" class="headerlink" title="4.2.1 搭建 Swagger 环境"></a>4.2.1 搭建 Swagger 环境</h3><ul>
<li>在pom.xml文件中添加swagger相关依赖，如下所示：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springfox-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;springfox-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写Swagger的Configuration配置文件，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.swagger.annotations.ApiOperation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiKey;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.google.common.collect.Lists.newArrayList;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">createRestApi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//加了ApiOperation注解的类，才生成接口文档</span></span><br><span class="line">                .apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class))</span><br><span class="line">                <span class="comment">//io.renren.controller包下的类，才生成接口文档</span></span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.basePackage(&quot;io.renren.controller&quot;))</span></span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build()</span><br><span class="line">                .directModelSubstitute(java.util.Date.class, String.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;人人开源&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;人人开源接口文档&quot;</span>)</span><br><span class="line">                .termsOfServiceUrl(<span class="string">&quot;https://www.renren.io/community&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-2-2-Swagger-常用注解"><a href="#4-2-2-Swagger-常用注解" class="headerlink" title="4.2.2 Swagger 常用注解"></a>4.2.2 Swagger 常用注解</h3><ul>
<li>@Api注解用在类上，说明该类的作用。可以标记一个Controller类做为swagger文档资源，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@ApiOperation注解用在方法上，说明该方法的作用，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;列表&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;UserDTO&gt; <span class="title function_">list</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;UserDTO&gt; list = userService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@ApiParam注解用在方法参数上，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Api(tags = &quot;用户管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;列表&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List <span class="title function_">list</span><span class="params">(<span class="meta">@ApiParam(value = &quot;用户名&quot;, required = true)</span> String username)</span> &#123;</span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> userService.list();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>@ApiImplicitParams注解用在方法上，主要用于一组参数说明</p>
</li>
<li><p>@ApiImplicitParam注解用在@ApiImplicitParams注解中，指定一个请求参数的信息，如下所示：</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页&quot;)</span></span><br><span class="line"><span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;page&quot;, value = &quot;当前页码，从 1 开始&quot;, paramType = &quot;query&quot;, requ ired=true, dataType = &quot;int&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;limit&quot;, value = &quot;每页显示记录数&quot;, paramType = &quot;query&quot;, requir ed=true, dataType = &quot;int&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;order_field&quot;, value = &quot;排序字段&quot;, paramType = &quot;query&quot;, dataT ype=&quot;String&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;order&quot;, value = &quot;排序方式，可选值(asc、desc)&quot;, paramType = &quot;q uery&quot;, dataType = &quot;String&quot;),</span></span><br><span class="line"><span class="meta">        @ApiImplicitParam(name = &quot;username&quot;, value = &quot;用户名&quot;, paramType = &quot;query&quot;, dataType = &quot;String&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageData&gt; <span class="title function_">page</span><span class="params">(<span class="meta">@ApiIgnore</span> <span class="meta">@RequestParam</span> Map&lt;String, Object&gt; par ams)</span>&#123;</span><br><span class="line">        PageData page=sysUserService.page(params);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>&lt;PageData&gt;().ok(page);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>@ApiIgnore注解，可用于类、方法或参数上，表示生成Swagger接口文档时，忽略类、方法或参数。</li>
</ul>
<h2 id="4-3-Mybatis-plus-使用-1"><a href="#4-3-Mybatis-plus-使用-1" class="headerlink" title="4.3 Mybatis-plus 使用"></a>4.3 Mybatis-plus 使用</h2><p>在项目的pom.xml里引入依赖，如下所示：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatisplus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在yml配置文件里，配置mybatis-plus，如下所示：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="comment">#实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">io.renren.modules.*.entity</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment">#数据库相关配置</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">    <span class="comment">#主键类型 AUTO:&quot;数据库ID自增&quot;, INPUT:&quot;用户输入ID&quot;, ID_WORKER:&quot;全局唯一ID (数字类型唯一ID)&quot;</span></span><br><span class="line">    <span class="string">,</span> <span class="string">UUID:&quot;全局唯一ID</span> <span class="string">UUID&quot;;</span></span><br><span class="line">    <span class="attr">id-type:</span> <span class="string">AUTO</span></span><br><span class="line">    <span class="comment">#字段策略 IGNORED:&quot;忽略判断&quot;,NOT_NULL:&quot;非 NULL 判断&quot;),NOT_EMPTY:&quot;非空判断&quot;</span></span><br><span class="line">    <span class="attr">field-strategy:</span> <span class="string">NOT_NULL</span></span><br><span class="line">    <span class="comment">#驼峰下划线转换</span></span><br><span class="line">    <span class="attr">column-underline:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">logic-delete-value:</span> <span class="number">-1</span></span><br><span class="line">    <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#原生配置</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">cache-enabled:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">call-setters-on-nulls:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">jdbc-type-for-null:</span> <span class="string">&#x27;null&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="第-5-章-项目实战"><a href="#第-5-章-项目实战" class="headerlink" title="第 5 章 项目实战"></a>第 5 章 项目实战</h1><h2 id="5-1-需求说明"><a href="#5-1-需求说明" class="headerlink" title="5.1 需求说明"></a>5.1 需求说明</h2><h2 id="5-2-代码生成器"><a href="#5-2-代码生成器" class="headerlink" title="5.2 代码生成器"></a>5.2 代码生成器</h2><h2 id="5-1-需求说明-1"><a href="#5-1-需求说明-1" class="headerlink" title="5.1 需求说明"></a>5.1 需求说明</h2><blockquote>
<p>我们来完成一个商品的列表、添加、修改、删除功能，熟悉如何快速开发自己的业务功能模块。</p>
</blockquote>
<ul>
<li>我们先建一个商品表tb_goods，表结构如下所示：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tb_goods`</span><br><span class="line">(</span><br><span class="line">    `goods_id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品ID&#x27;</span>,</span><br><span class="line">    `name`     <span class="type">varchar</span>(<span class="number">50</span>) COMMENT <span class="string">&#x27;商品名&#x27;</span>,</span><br><span class="line">    `intro`    <span class="type">varchar</span>(<span class="number">500</span>) COMMENT <span class="string">&#x27;介绍&#x27;</span>,</span><br><span class="line">    `price`    <span class="type">decimal</span>(<span class="number">10</span>, <span class="number">2</span>) COMMENT <span class="string">&#x27;价格&#x27;</span>,</span><br><span class="line">    `num`      <span class="type">int</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`goods_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 COMMENT<span class="operator">=</span><span class="string">&#x27;商品管理&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="5-1-代码生成器"><a href="#5-1-代码生成器" class="headerlink" title="5.1 代码生成器"></a>5.1 代码生成器</h2><ul>
<li>使用代码生成器前，我们先来看下代码生成器的配置，看看那些是可配置的，打开renren-generator模块 的配置文件generator.properties，如下所示：</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#代码生成器，配置信息</span></span><br><span class="line"><span class="attr">mainPath</span>=<span class="string">io.renren</span></span><br><span class="line"><span class="comment">#包名</span></span><br><span class="line"><span class="attr">package</span>=<span class="string">io.renren.modules</span></span><br><span class="line"><span class="attr">moduleName</span>=<span class="string">generator</span></span><br><span class="line"><span class="comment">#作者</span></span><br><span class="line"><span class="attr">author</span>=<span class="string">Mark</span></span><br><span class="line"><span class="comment">#Email</span></span><br><span class="line"><span class="attr">email</span>=<span class="string">sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment">#表前缀(类名不会包含表前缀)</span></span><br><span class="line"><span class="attr">tablePrefix</span>=<span class="string">tb_</span></span><br><span class="line"><span class="comment">#类型转换，配置信息</span></span><br><span class="line"><span class="attr">tinyint</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">smallint</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">mediumint</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">int</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">integer</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">bigint</span>=<span class="string">Long</span></span><br><span class="line"><span class="attr">float</span>=<span class="string">Float</span></span><br><span class="line"><span class="attr">double</span>=<span class="string">Double</span></span><br><span class="line"><span class="attr">decimal</span>=<span class="string">BigDecimal</span></span><br><span class="line"><span class="attr">bit</span>=<span class="string">Boolean</span></span><br><span class="line"><span class="attr">char</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">varchar</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">tinytext</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">text</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">mediumtext</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">longtext</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">date</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">datetime</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">timestamp</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">NUMBER</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">INT</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">INTEGER</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">BINARY_INTEGER</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">LONG</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">FLOAT</span>=<span class="string">Float</span></span><br><span class="line"><span class="attr">BINARY_FLOAT</span>=<span class="string">Float</span></span><br><span class="line"><span class="attr">DOUBLE</span>=<span class="string">Double</span></span><br><span class="line"><span class="attr">BINARY_DOUBLE</span>=<span class="string">Double</span></span><br><span class="line"><span class="attr">DECIMAL</span>=<span class="string">BigDecimal</span></span><br><span class="line"><span class="attr">CHAR</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">VARCHAR</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">VARCHAR2</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">NVARCHAR</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">NVARCHAR2</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">CLOB</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">BLOB</span>=<span class="string">String</span></span><br><span class="line"><span class="attr">DATE</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">DATETIME</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">TIMESTAMP</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">TIMESTAMP(6)</span>=<span class="string">Date</span></span><br><span class="line"><span class="attr">int8</span>=<span class="string">Long</span></span><br><span class="line"><span class="attr">int4</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">int2</span>=<span class="string">Integer</span></span><br><span class="line"><span class="attr">numeric</span>=<span class="string">BigDecimal</span></span><br></pre></td></tr></table></figure>

<p>上面的配置文件，可以配置包名、作者信息、表前缀、模块名称、类型转换等信息。其中，类型转换是指， MySQL中的类型与JavaBean中的类型，是怎么一个对应关系。如果有缺少的类型，可自行在generator.properties文件中补充。</p>
<ul>
<li>再看看renren-generator模块的application.yml配置文件，我们只要修改数据库名、账号、密码，就可以 了。其中，数据库名是指待生成的表，所在的数据库。</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#MySQL配置</span></span><br><span class="line">    <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/renren_fast?useUnicode=true&amp;characterEncoding=UTF-8&amp;useS</span></span><br><span class="line">    <span class="string">SL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">renren</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">#oracle配置</span></span><br><span class="line">    <span class="comment"># driverClassName: oracle.jdbc.OracleDriver</span></span><br><span class="line">    <span class="comment"># url: jdbc:oracle:thin:@47.100.206.162:1521:xe</span></span><br><span class="line">    <span class="comment"># username: renren</span></span><br><span class="line">    <span class="comment"># password: 123456</span></span><br><span class="line">    <span class="comment">#SQLServer配置</span></span><br><span class="line">    <span class="comment"># driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver</span></span><br><span class="line">    <span class="comment"># url: jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast</span></span><br><span class="line">    <span class="comment"># username: sa</span></span><br><span class="line">    <span class="comment"># password: 123456</span></span><br><span class="line">    <span class="comment">#PostgreSQL配置</span></span><br><span class="line">    <span class="comment"># driverClassName: org.postgresql.Driver</span></span><br><span class="line">    <span class="comment"># url: jdbc:postgresql://192.168.10.10:5432/renren_fast</span></span><br><span class="line">    <span class="comment"># username: postgres</span></span><br><span class="line">    <span class="comment"># password: 123456</span></span><br><span class="line">    <span class="attr">jackson:</span></span><br><span class="line">      <span class="attr">time-zone:</span> <span class="string">GMT+8</span> <span class="attr">date-format: yyyy-MM-dd HH:mm:ss resources:</span></span><br><span class="line">      <span class="attr">static-locations:</span> <span class="string">classpath:/static/,classpath:/views/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath:mapper/**/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pagehelper:</span></span><br><span class="line">  <span class="attr">reasonable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">supportMethodsArguments:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">params:</span> <span class="string">count=countSql</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定数据库，可选值有【mysql、oracle、sqlserver、postgresql】 </span></span><br><span class="line"><span class="attr">renren:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在数据库renren_fast中，执行建表语句，创建tb_goods表，再启动renren-generator项目(运行 RenrenApplication.java的main方法即可)，如下所示：</p>
</li>
<li><p>在浏览器里输入项目地址(<a href="http://localhost)，如下所示：">http://localhost)，如下所示：</a></p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/HWqMVn.png"></p>
<ul>
<li>我们只需勾选tb_goods，点击【生成代码】按钮，则可生成相应代码，如下所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/Pli3sp.png"></p>
<ul>
<li>我们来看下生成的代码结构，如下所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/BhpLFE.png"></p>
<ul>
<li>生成好代码后，我们只需在数据库renren_fast中，执行goods_menu.sql语句，这个SQL是生成菜单的， SQL语句如下所示：</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># <span class="comment">-- 菜单SQL</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu` (`parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;商品管理&#x27;</span>, <span class="string">&#x27;generator/goods&#x27;</span>, <span class="keyword">NULL</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;6&#x27;</span>);</span><br><span class="line"></span><br><span class="line"># <span class="comment">-- 按钮父菜单ID</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> <span class="variable">@parentId</span> <span class="operator">=</span> @<span class="variable">@identity</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 菜单对应按钮SQL INSERT INTO `sys_menu` (`parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`)</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parentId</span>,</span><br><span class="line">       <span class="string">&#x27;查看&#x27;</span>,</span><br><span class="line">       <span class="keyword">null</span>,</span><br><span class="line">       <span class="string">&#x27;generator:goods:list,generator:goods:info&#x27;</span>,</span><br><span class="line">       <span class="string">&#x27;2&#x27;</span>,</span><br><span class="line">       <span class="keyword">null</span>,</span><br><span class="line">       <span class="string">&#x27;6</span></span><br><span class="line"><span class="string">      &#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu` (`parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parentId</span>, <span class="string">&#x27;新增&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;generator:goods:save&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu` (`parent_id`, `name`, `url`, `perms`, `type`, `icon`, `order_num`)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parentId</span>, <span class="string">&#x27;修改&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;generator:goods:update&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;6&#x27;</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `sys_menu` ( `parent_id`, `name`</span><br><span class="line">                       , `url`, `perms`, `type`, `icon`, `order_num`)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parentId</span>, <span class="string">&#x27;删除&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;generator:goods:delete&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="keyword">null</span>, <span class="string">&#x27;6&#x27;</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>接下来，再把刚生成的后端代码，添加到项目renren-fast里，前端vue代码，添加到前端项目renren-fast- vue里，在启动renren-fast项目，如下所示：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/hHJj2Z.png"></p>
<ul>
<li>现在，我们就可以新增、修改、删除等操作</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/iAj5t1.png"></p>
<h1 id="第-6-章-后端源码分析"><a href="#第-6-章-后端源码分析" class="headerlink" title="第 6 章 后端源码分析"></a>第 6 章 后端源码分析</h1><h2 id="6-1-前后端分离"><a href="#6-1-前后端分离" class="headerlink" title="6.1 前后端分离"></a>6.1 前后端分离</h2><h2 id="6-2-权限设计思路"><a href="#6-2-权限设计思路" class="headerlink" title="6.2 权限设计思路"></a>6.2 权限设计思路</h2><h2 id="6-3-XSS-脚本过滤"><a href="#6-3-XSS-脚本过滤" class="headerlink" title="6.3 XSS 脚本过滤"></a>6.3 XSS 脚本过滤</h2><h2 id="6-4-SQL-注入"><a href="#6-4-SQL-注入" class="headerlink" title="6.4 SQL 注入"></a>6.4 SQL 注入</h2><h2 id="6-5-Redis-缓存"><a href="#6-5-Redis-缓存" class="headerlink" title="6.5 Redis 缓存"></a>6.5 Redis 缓存</h2><h2 id="6-6-异常处理机制"><a href="#6-6-异常处理机制" class="headerlink" title="6.6 异常处理机制"></a>6.6 异常处理机制</h2><h2 id="6-7-后端效验机制"><a href="#6-7-后端效验机制" class="headerlink" title="6.7 后端效验机制"></a>6.7 后端效验机制</h2><h2 id="6-8-系统日志"><a href="#6-8-系统日志" class="headerlink" title="6.8 系统日志"></a>6.8 系统日志</h2><h2 id="6-9-添加菜单"><a href="#6-9-添加菜单" class="headerlink" title="6.9 添加菜单"></a>6.9 添加菜单</h2><h2 id="6-10-添加角色"><a href="#6-10-添加角色" class="headerlink" title="6.10 添加角色"></a>6.10 添加角色</h2><h2 id="6-11-添加管理员"><a href="#6-11-添加管理员" class="headerlink" title="6.11 添加管理员"></a>6.11 添加管理员</h2><h2 id="6-12-定时任务模块"><a href="#6-12-定时任务模块" class="headerlink" title="6.12 定时任务模块"></a>6.12 定时任务模块</h2><h2 id="6-13-云存储模块"><a href="#6-13-云存储模块" class="headerlink" title="6.13 云存储模块"></a>6.13 云存储模块</h2><h2 id="6-14-APP-模块"><a href="#6-14-APP-模块" class="headerlink" title="6.14 APP 模块"></a>6.14 APP 模块</h2><h2 id="6-1-前后端分离-1"><a href="#6-1-前后端分离-1" class="headerlink" title="6.1 前后端分离"></a>6.1 前后端分离</h2><blockquote>
<p>要实现前后端分离，需要考虑以下 2 个问题：</p>
<pre><code>1. 项目不再基于session了，如何知道访问者是谁？
1. 如何确认访问者的权限？
3. 前后端分离
</code></pre>
</blockquote>
<ul>
<li>一般都是通过token实现，本项目也是一样；用户登录时，生成token及token过期时间，token与用户是一一对应关系，调用接口的时候，把token放到header或请求参数中，服务端就知道是谁在调用接口，登录如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;captcha.jpg&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">captcha</span><span class="params">(HttpServletResponse response, String uuid)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">    response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-store, no-cache&quot;</span>);</span><br><span class="line">    response.setContentType(<span class="string">&quot;image/jpeg&quot;</span>);</span><br><span class="line">    <span class="comment">//获取图片验证码</span></span><br><span class="line">    <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> sysCaptchaService.getCaptcha(uuid);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    ImageIO.write(image, <span class="string">&quot;jpg&quot;</span>, out);</span><br><span class="line">    IOUtils.closeQuietly(out);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/sys/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> SysLoginForm form)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">captcha</span> <span class="operator">=</span> sysCaptchaService.validate(form.getUuid(), form.getCaptcha());</span><br><span class="line">    <span class="keyword">if</span> (!captcha) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;验证码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户信息</span></span><br><span class="line">    <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> sysUserService.queryByUserName(form.getUsername());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//账号不存在、密码错误</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span> || !user.getPassword().equals(<span class="keyword">new</span> <span class="title class_">Sha256Hash</span>(form.getPassword(), user.get</span><br><span class="line">            <span class="title function_">Salt</span><span class="params">()</span>).toHex())) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号或密码不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//账号锁定</span></span><br><span class="line">    <span class="keyword">if</span> (user.getStatus() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;账号已被锁定,请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成token，并保存到数据库</span></span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> sysUserTokenService.createToken(user.getUserId());</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//生产token</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">createToken</span><span class="params">(<span class="type">long</span> userId)</span> &#123;</span><br><span class="line">    <span class="comment">//生成一个token，可以是uuid</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> TokenGenerator.generateValue();</span><br><span class="line">    <span class="comment">//当前时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">    <span class="comment">//过期时间</span></span><br><span class="line">    <span class="type">Date</span> <span class="variable">expireTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(now.getTime() + EXPIRE * <span class="number">1000</span>);</span><br><span class="line">    <span class="comment">//判断是否生成过token</span></span><br><span class="line">    <span class="type">SysUserTokenEntity</span> <span class="variable">tokenEntity</span> <span class="operator">=</span> queryByUserId(userId);</span><br><span class="line">    <span class="keyword">if</span> (tokenEntity == <span class="literal">null</span>) &#123;</span><br><span class="line">        tokenEntity = <span class="keyword">new</span> <span class="title class_">SysUserTokenEntity</span>();</span><br><span class="line">        tokenEntity.setUserId(userId);</span><br><span class="line">        tokenEntity.setToken(token);</span><br><span class="line">        tokenEntity.setUpdateTime(now);</span><br><span class="line">        tokenEntity.setExpireTime(expireTime);</span><br><span class="line">        <span class="comment">//保存token</span></span><br><span class="line">        save(tokenEntity);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        tokenEntity.setToken(token);</span><br><span class="line">        tokenEntity.setUpdateTime(now);</span><br><span class="line">        tokenEntity.setExpireTime(expireTime);</span><br><span class="line">        <span class="comment">//更新token</span></span><br><span class="line">        update(tokenEntity);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> R.ok().put(<span class="string">&quot;token&quot;</span>, token).put(<span class="string">&quot;expire&quot;</span>, EXPIRE);</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，下面的这行代码，是加盐操作；可能有人不理解为何要加盐，其目的是防止被拖库后，黑客轻易的 （通过密码库对比），就能拿到你的密码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="constructor">Sha256Hash(<span class="params">password</span>, <span class="params">user</span>.<span class="params">getSalt</span>()</span>).<span class="keyword">to</span><span class="constructor">Hex()</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>调用接口时，接受传过来的token后，如何保证token有效及用户权限呢？其实，shiro提供了 AuthenticatingFilter抽象类，继承AuthenticatingFilter抽象类即可。</li>
</ul>
<p>步骤 1 ，所有请求全部拒绝访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">isAccessAllowed</span><span class="params">(ServletRequest request, ServletResponse response, Object mappedValue)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 2 ，拒绝访问的请求，会调用onAccessDenied方法，onAccessDenied方法先获取token，再调用 executeLogin方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onAccessDenied</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//获取请求token，如果token不存在，直接返回 401</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> getRequestToken((HttpServletRequest) request);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(R.error(HttpStatus.SC_UNAUTHORIZED, <span class="string">&quot;invalid token&quot;</span>));</span><br><span class="line">        httpResponse.getWriter().print(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executeLogin(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取请求的token</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String <span class="title function_">getRequestToken</span><span class="params">(HttpServletRequest httpRequest)</span> &#123;</span><br><span class="line">    <span class="comment">//从header中获取token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> httpRequest.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="comment">//如果header中不存在token，则从参数中获取token</span></span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">        token = httpRequest.getParameter(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 3 ，阅读AuthenticatingFilter抽象类中executeLogin方法，我们发现调用了 subject.login(token) ，这是shiro的登录方法，且需要token参数，我们自定义OAuth2Token类，只要实现AuthenticationToken接口，就可以了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//AuthenticatingFilter类中的方法</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">executeLogin</span><span class="params">(ServletRequest request,ServletResponse response)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    AuthenticationToken token=createToken(request,response);</span><br><span class="line">    <span class="keyword">if</span>(token==<span class="literal">null</span>)&#123;</span><br><span class="line">        String msg=<span class="string">&quot;createToken method implementation returned null. A valid non-null A</span></span><br><span class="line"><span class="string">        uthenticationToken&quot;</span> +</span><br><span class="line">        <span class="string">&quot;must be created in order to execute a login attempt.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        Subject subject=getSubject(request,response);</span><br><span class="line">        subject.login(token);</span><br><span class="line">        <span class="keyword">return</span> onLoginSuccess(token,subject,request,response);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(AuthenticationException e)&#123;</span><br><span class="line">        <span class="keyword">return</span> onLoginFailure(token,e,request,response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">//subject.login(token)中的token对象，需要实现AuthenticationToken接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OAuth2Token</span> <span class="keyword">implements</span> <span class="title class_">AuthenticationToken</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OAuth2Token</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrincipal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getCredentials</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 4 ，定义OAuth2Realm类，并继承AuthorizingRealm抽象类，调用 subject.login(token) 时，则会调用doGetAuthenticationInfo方法，进行登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * authentication身份认证(登录时调用)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 9. 前面被authc拦截后，需要认证，SecurityBean会调用这里进行认证</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">accessToken</span> <span class="operator">=</span> (String) token.getPrincipal();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据accessToken，查询用户信息</span></span><br><span class="line">    <span class="type">SysUserTokenEntity</span> <span class="variable">tokenEntity</span> <span class="operator">=</span> shiroService.queryByToken(accessToken);</span><br><span class="line">    <span class="comment">//token失效</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(tokenEntity == <span class="literal">null</span> || tokenEntity.getExpireTime().getTime() &lt; System.currentTimeMillis())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncorrectCredentialsException</span>(<span class="string">&quot;token失效，请重新登录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 9.1. token生效才能登录</span></span><br><span class="line">    <span class="comment">//查询用户信息</span></span><br><span class="line">    <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> shiroService.queryUser(tokenEntity.getUserId());</span><br><span class="line">    <span class="comment">//账号锁定</span></span><br><span class="line">    <span class="keyword">if</span>(user.getStatus() == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LockedAccountException</span>(<span class="string">&quot;账号已被锁定,请联系管理员&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleAuthenticationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(user, accessToken, getName());</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 5 ，登录失败后，则调用onLoginFailure，进行失败处理，整个流程结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">onLoginFailure</span><span class="params">(AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response)</span> &#123;</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">httpResponse</span> <span class="operator">=</span> (HttpServletResponse) response;</span><br><span class="line">    httpResponse.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//处理登录失败的异常</span></span><br><span class="line">        <span class="type">Throwable</span> <span class="variable">throwable</span> <span class="operator">=</span> e.getCause() == <span class="literal">null</span> ? e : e.getCause();</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> R.error(HttpStatus.SC_UNAUTHORIZED, throwable.getMessage());</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(r);</span><br><span class="line">        httpResponse.getWriter().print(json);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e1) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>步骤 6 ，登录成功后，则调用doGetAuthorizationInfo方法，查询用户的权限，再调用具体的接口，整个流程 结束</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * authorization授权(验证权限时调用)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 10. 前面被roles拦截后，需要授权才能登录，SecurityManager需要调用这里进行权限查询</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">    <span class="type">SysUserEntity</span> <span class="variable">user</span> <span class="operator">=</span> (SysUserEntity)principals.getPrimaryPrincipal();</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> user.getUserId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户权限列表</span></span><br><span class="line">    Set&lt;String&gt; permsSet = shiroService.getUserPermissions(userId);</span><br><span class="line"></span><br><span class="line">    <span class="type">SimpleAuthorizationInfo</span> <span class="variable">info</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthorizationInfo</span>();</span><br><span class="line">    info.setStringPermissions(permsSet);</span><br><span class="line">    <span class="keyword">return</span> info;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-2-权限设计思路-1"><a href="#6-2-权限设计思路-1" class="headerlink" title="6.2 权限设计思路"></a>6.2 权限设计思路</h2><p>权限相关的表结构，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/np520W.png"></p>
<ol>
<li>sys_user[用户]表，保存用户相关数据，通过sys_user_role[用户与角色关联]表，与sys_role[角色]表关联；sys_menu[菜单]表通过sys_role_menu[菜单与角色关联]表，与sys_role[角色]表关联</li>
<li>sys_menu表，保存菜单相关数据，并在perms字段里，保存了shiro的权限标识，也就是说，拥有此菜单，就拥有perms字段里的所有权限，比如，某用户拥有的菜单权限标识 sys:user:info ，就可以访问下面的方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/info/&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="meta">@RequiresPermissions(&quot;sys:user:info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">info</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long userId)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在shiro配置代码里，配置为 anon 的，表示不经过shiro处理，配置为 oauth2 的，表示经过 OAuth2Filter 处理，前后端分离的接口，都会交给 OAuth2Filter处理，这样就保证，没有权限的请求，拒绝访问</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Shiro配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  Shiro自带的过滤器，可以在这里配置拦截页面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilter</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 初始化一个ShiroFilter工程类</span></span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">// 2. 我们知道Shiro是通过SecurityManager来管理整个认证和授权流程的，这个SecurityManager可以在下面初始化</span></span><br><span class="line">        shiroFilter.setSecurityManager(securityManager);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义Oauth2Filter过滤器</span></span><br><span class="line">        Map&lt;String, Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        filters.put(<span class="string">&quot;oauth2&quot;</span>, <span class="keyword">new</span> <span class="title class_">OAuth2Filter</span>());</span><br><span class="line">        shiroFilter.setFilters(filters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 上面我们讲过，有的页面不需登录任何人可以直接访问，有的需要登录才能访问，有的不仅要登录还需要相关权限才能访问</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. Shiro过滤器常用的有如下几种</span></span><br><span class="line">        <span class="comment">// 4.1. anon 任何人都能访问，如登录页面</span></span><br><span class="line">        <span class="comment">// 4.2. authc 需要登录才能访问，如系统内的全体通知页面</span></span><br><span class="line">        <span class="comment">// 4.3. roles 需要相应的角色才能访问</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/webjars/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/druid/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/app/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/sys/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/v2/api-docs&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger-ui.html&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/swagger-resources/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/captcha.jpg&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/aaa.txt&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;oauth2&quot;</span>);</span><br><span class="line">        <span class="comment">// 5. 让ShiroFilter按这个规则拦截</span></span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. 用户没登录被拦截后，当然需要调转到登录页了，这里配置登录页</span></span><br><span class="line">        <span class="comment">//shiroFilterFactoryBean.setLoginUrl(&quot;/api/user/login&quot;);</span></span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">(OAuth2Realm oAuth2Realm)</span> &#123;</span><br><span class="line">        <span class="comment">// 7. 新建一个SecurityManager供ShiroFilterFactoryBean使用</span></span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">// 8. SecurityManager既然管理认证等信息，那他就需要一个类来帮他查数据库吧。这就是Realm类</span></span><br><span class="line">        securityManager.setRealm(oAuth2Realm);</span><br><span class="line">        securityManager.setRememberMeManager(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;lifecycleBeanPostProcessor&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> LifecycleBeanPostProcessor <span class="title function_">lifecycleBeanPostProcessor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LifecycleBeanPostProcessor</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">advisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">        advisor.setSecurityManager(securityManager);</span><br><span class="line">        <span class="keyword">return</span> advisor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-3-XSS-脚本过滤-1"><a href="#6-3-XSS-脚本过滤-1" class="headerlink" title="6.3 XSS 脚本过滤"></a>6.3 XSS 脚本过滤</h2><blockquote>
<p>XSS跨站脚本攻击的基本原理和SQL注入攻击类似，都是利用系统执行了未经过滤的危险代码，不同点 在于XSS是一种基于网页脚本的注入方式，也就是将脚本攻击载荷写入网页执行以达到对网页客户端访问用户攻击的目的，属于客户端攻击。程序员往往不太关心安全这块，这就给有心之人，提供了机会，本系统针对XSS攻击，提供了过滤功能，可以有效防止XSS攻击，代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig config)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span><br><span class="line">            <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">XssHttpServletRequestWrapper</span> <span class="variable">xssRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XssHttpServletRequestWrapper</span>(</span><br><span class="line">                (HttpServletRequest) request);</span><br><span class="line">        chain.doFilter(xssRequest, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean <span class="title function_">xssFilterRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">FilterRegistrationBean</span> <span class="variable">registration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>();</span><br><span class="line">        registration.setDispatcherTypes(DispatcherType.REQUEST);</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">XssFilter</span>());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        registration.setName(<span class="string">&quot;xssFilter&quot;</span>);</span><br><span class="line">        registration.setOrder(Integer.MAX_VALUE);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义XssFilter过滤器，用来过滤所有请求，具体过滤还是在XssHttpServletRequestWrapper里实现的， 如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XssHttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line">    <span class="comment">//没被包装过的HttpServletRequest（特殊场景，需要自己过滤）</span></span><br><span class="line">    HttpServletRequest orgRequest;</span><br><span class="line">    <span class="comment">//html过滤</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">HTMLFilter</span> <span class="variable">htmlFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HTMLFilter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XssHttpServletRequestWrapper</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(request);</span><br><span class="line">        orgRequest = request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ServletInputStream <span class="title function_">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"><span class="comment">//非json类型，直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (!MediaType.APPLICATION_JSON_VALUE.equalsIgnoreCase(<span class="built_in">super</span>.getHeader(HttpHeaders.CON</span><br><span class="line">                TENT_TYPE))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getInputStream();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//为空，直接返回</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> IOUtils.toString(<span class="built_in">super</span>.getInputStream(), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">super</span>.getInputStream();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//xss过滤</span></span><br><span class="line">        json = xssEncode(json);</span><br><span class="line">        <span class="keyword">final</span> <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(json.getBytes(<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletInputStream</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFinished</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReady</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setReadListener</span><span class="params">(ReadListener readListener)</span> &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                <span class="keyword">return</span> bis.read();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getParameter(xssEncode(name));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">            value = xssEncode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">        String[] parameters = <span class="built_in">super</span>.getParameterValues(name);</span><br><span class="line">        <span class="keyword">if</span> (parameters == <span class="literal">null</span> || parameters.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameters.length; i++) &#123;</span><br><span class="line">            parameters[i] = xssEncode(parameters[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> parameters;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String[]&gt; getParameterMap() &#123;</span><br><span class="line">        Map&lt;String, String[]&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        Map&lt;String, String[]&gt; parameters = <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">        <span class="keyword">for</span> (String key : parameters.keySet()) &#123;</span><br><span class="line">            String[] values = parameters.get(key);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                values[i] = xssEncode(values[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            map.put(key, values);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> <span class="built_in">super</span>.getHeader(xssEncode(name));</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(value)) &#123;</span><br><span class="line">            value = xssEncode(value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">xssEncode</span><span class="params">(String input)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> htmlFilter.filter(input);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最原始的request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> HttpServletRequest <span class="title function_">getOrgRequest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orgRequest;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取最原始的request</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> HttpServletRequest <span class="title function_">getOrgRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> XssHttpServletRequestWrapper) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((XssHttpServletRequestWrapper) request).getOrgRequest();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要处理富文本数据，可以通过 XssHttpServletRequestWrapper.getOrgRequest(request) ，拿到原始 的 request 对象后，再自行处理富文本数据，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">        HttpServletRequest orgRequest=XssHttpServletRequestWrapper.getOrgRequest(request);</span><br><span class="line">        String content=orgRequest.getParameter(<span class="string">&quot;content&quot;</span>);</span><br><span class="line">        <span class="comment">//富文本数据</span></span><br><span class="line">        System.out.println(content);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-4-SQL-注入-1"><a href="#6-4-SQL-注入-1" class="headerlink" title="6.4 SQL 注入"></a>6.4 SQL 注入</h2><blockquote>
<p>本系统使用的是Mybatis，如果使用${}拼接SQL，则存在SQL注入风险，可以对参数进行过滤，避免 SQL注入，如下:</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SQLFilter</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * SQL注入过滤</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str 待验证的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">sqlInject</span><span class="params">(String str)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(str)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去掉&#x27;|&quot;|;|\字符</span></span><br><span class="line">        str = StringUtils.replace(str, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str = StringUtils.replace(str, <span class="string">&quot;\&quot;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str = StringUtils.replace(str, <span class="string">&quot;;&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        str = StringUtils.replace(str, <span class="string">&quot;\\&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//转换成小写\</span></span><br><span class="line">        str = str.toLowerCase();</span><br><span class="line">        <span class="comment">//非法字符</span></span><br><span class="line">        String[] keywords = &#123;<span class="string">&quot;master&quot;</span>, <span class="string">&quot;truncate&quot;</span>, <span class="string">&quot;insert&quot;</span>, <span class="string">&quot;select&quot;</span>, <span class="string">&quot;delete&quot;</span>, <span class="string">&quot;update&quot;</span>, <span class="string">&quot;declare&quot;</span>, <span class="string">&quot;alter&quot;</span>, <span class="string">&quot;drop&quot;</span>&#125;;</span><br><span class="line">        <span class="comment">//判断是否包含非法字符</span></span><br><span class="line">        <span class="keyword">for</span> (String keyword : keywords) &#123;</span><br><span class="line">            <span class="keyword">if</span> (str.indexOf(keyword) != -<span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;包含非法字符&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像查询列表，涉及排序问题，排序字段是从前台传过来的，则存在SQL注入风险，需经如下处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Query</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> IPage&lt;T&gt; <span class="title function_">getPage</span><span class="params">(Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.getPage(params, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;T&gt; <span class="title function_">getPage</span><span class="params">(Map&lt;String, Object&gt; params, String defaultOrderField, <span class="type">boolean</span> isAsc)</span> &#123;</span><br><span class="line">        <span class="comment">//分页参数</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">curPage</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">long</span> <span class="variable">limit</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">if</span> (params.get(Constant.PAGE) != <span class="literal">null</span>) &#123;</span><br><span class="line">            curPage = Long.parseLong((String) params.get(Constant.PAGE));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (params.get(Constant.LIMIT) != <span class="literal">null</span>) &#123;</span><br><span class="line">            limit = Long.parseLong((String) params.get(Constant.LIMIT));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分页对象</span></span><br><span class="line">        Page&lt;T&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(curPage, limit);</span><br><span class="line">        <span class="comment">//分页参数 </span></span><br><span class="line">        params.put(Constant.PAGE, page);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//排序字段 </span></span><br><span class="line">        <span class="comment">//防止SQL注入（因为sidx、order是通过拼接SQL实现排序的，会有SQL注入风险）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderField</span> <span class="operator">=</span> SQLFilter.sqlInject((String) params.get(Constant.ORDER_FIELD));</span><br><span class="line">        <span class="type">String</span> <span class="variable">order</span> <span class="operator">=</span> (String) params.get(Constant.ORDER);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//前端字段排序</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(orderField) &amp;&amp; StringUtils.isNotEmpty(order)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Constant.ASC.equalsIgnoreCase(order)) &#123;</span><br><span class="line">                <span class="keyword">return</span> page.setAsc(orderField);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> page.setDesc(orderField);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//默认排序</span></span><br><span class="line">        <span class="keyword">if</span> (isAsc) &#123;</span><br><span class="line">            page.setAsc(defaultOrderField);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            page.setDesc(defaultOrderField);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-5-Redis-缓存-1"><a href="#6-5-Redis-缓存-1" class="headerlink" title="6.5 Redis 缓存"></a>6.5 Redis 缓存</h2><blockquote>
<p>缓存大家都很熟悉，但能否灵活运用，就不一定了。一般设计缓存架构时，我们需要考虑如下几个问 题：</p>
</blockquote>
<ol>
<li><p>查询数据的时候，尽量减少DB查询，DB主要负责写数据</p>
</li>
<li><p>尽量不使用 LEFT JOIN 等关联查询，缓存命中率不高，还浪费内存</p>
</li>
<li><p>多使用单表查询，缓存命中率最高</p>
</li>
<li><p>数据库 insert 、 update 、 delete 时，同步更新缓存数据</p>
</li>
<li><p>合理运用Redis数据结构，也许有质的飞跃</p>
</li>
<li><p>对于访问量不大的项目，使用缓存只会增加项目的复杂度</p>
</li>
</ol>
<p>本系统采用Redis作为缓存，并可配置是否开启redis缓存，主要还是通过Spring AOP实现的，配置如下所示：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">password:</span> <span class="comment"># 密码（默认为空）</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="string">6000ms</span> <span class="comment"># 连接超时时长（毫秒）</span></span><br><span class="line">  <span class="attr">jedis:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">1000</span> <span class="comment"># 连接池最大连接数（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间（使用负值表示没有限制）</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">10</span> <span class="comment"># 连接池中的最大空闲连接</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span> <span class="comment"># 连接池中的最小空闲连接</span></span><br><span class="line"><span class="attr">renren:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">  	<span class="attr">open:</span> <span class="literal">false</span> <span class="comment">#是否开启redis缓存 true开启 false关闭</span></span><br></pre></td></tr></table></figure>

<p>本项目中，使用Redis服务的代码，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysConfigServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SysConfigService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysConfigDao sysConfigDao;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysConfigRedis sysConfigRedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(SysConfigEntity config)</span> &#123;</span><br><span class="line">        sysConfigDao.save(config);</span><br><span class="line">        sysConfigRedis.saveOrUpdate(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SysConfigEntity config)</span> &#123;</span><br><span class="line">        sysConfigDao.update(config);</span><br><span class="line">        sysConfigRedis.saveOrUpdate(config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateValueByKey</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        sysConfigDao.updateValueByKey(key, value);</span><br><span class="line">        sysConfigRedis.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(Long[] ids)</span> &#123;</span><br><span class="line">        sysConfigDao.deleteBatch(ids);</span><br><span class="line">        <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">            <span class="type">SysConfigEntity</span> <span class="variable">config</span> <span class="operator">=</span> queryObject(id);</span><br><span class="line">            sysConfigRedis.delete(config.getKey());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysConfigRedis</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtils redisUtils;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveOrUpdate</span><span class="params">(SysConfigEntity config)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (config == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisKeys.getSysConfigKey(config.getKey());</span><br><span class="line">        redisUtils.set(key, config);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String configKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisKeys.getSysConfigKey(configKey);</span><br><span class="line">        redisUtils.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SysConfigEntity <span class="title function_">get</span><span class="params">(String configKey)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisKeys.getSysConfigKey(configKey);</span><br><span class="line">        <span class="keyword">return</span> redisUtils.get(key, SysConfigEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String, String&gt; valueOperations;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HashOperations&lt;String, String, Object&gt; hashOperations;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ListOperations&lt;String, Object&gt; listOperations;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetOperations&lt;String, Object&gt; setOperations;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ZSetOperations&lt;String, Object&gt; zSetOperations;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认过期时长，单位：秒</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">DEFAULT_EXPIRE</span> <span class="operator">=</span> <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不设置过期时长</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">long</span> <span class="variable">NOT_EXPIRE</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> expire)</span> &#123;</span><br><span class="line">        valueOperations.set(key, toJson(value));</span><br><span class="line">        <span class="keyword">if</span> (expire != NOT_EXPIRE) &#123;</span><br><span class="line">            redisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        set(key, value, DEFAULT_EXPIRE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String key, Class&lt;T&gt; clazz, <span class="type">long</span> expire)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> valueOperations.get(key);</span><br><span class="line">        <span class="keyword">if</span> (expire != NOT_EXPIRE) &#123;</span><br><span class="line">            redisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">return</span> <span class="variable">value</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : fromJson(value, clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">get</span><span class="params">(String key, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(key, clazz, NOT_EXPIRE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key, <span class="type">long</span> expire)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> valueOperations.get(key);</span><br><span class="line">        <span class="keyword">if</span> (expire != NOT_EXPIRE) &#123;</span><br><span class="line">            redisTemplate.expire(key, expire, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> get(key, NOT_EXPIRE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Object转成JSON数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">toJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> Integer || object <span class="keyword">instanceof</span> Long || object <span class="keyword">instanceof</span> Float ||</span><br><span class="line">                object <span class="keyword">instanceof</span> Double || object <span class="keyword">instanceof</span> Boolean || object <span class="keyword">instanceof</span> St</span><br><span class="line">                ring) &#123;</span><br><span class="line">            <span class="keyword">return</span> String.valueOf(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> gson.toJson(object);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * JSON数据，转成Object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">fromJson</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> gson.fromJson(json, clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家可能会有疑问，认为这个项目必须要配置Redis缓存，不然会报错，因为有操作Redis的代码，其实不 然，通过Spring AOP，我们可以控制，是否真的使用Redis，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisAspect</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否开启redis缓存 true开启 false关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;renren.redis.open: false&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> open;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* io.renren.common.utils.RedisUtils.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (open) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = point.proceed();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;redis error&quot;</span>, e);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;Redis服务异常&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-6-异常处理机制-1"><a href="#6-6-异常处理机制-1" class="headerlink" title="6.6 异常处理机制"></a>6.6 异常处理机制</h2><blockquote>
<p>本项目通过RRException异常类，抛出自定义异常，RRException继承RuntimeException，不能继承 Exception，如果继承Exception，则Spring事务不会回滚。</p>
</blockquote>
<p>RRException代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RRException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg, e);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, <span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RRException</span><span class="params">(String msg, <span class="type">int</span> code, Throwable e)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(msg, e);</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMsg</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMsg</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如何处理抛出的异常呢，我们定义了RRExceptionHandler类，并加上注解@RestControllerAdvice，就可以处理所有抛出的异常，并返回JSON数据。@RestControllerAdvice是由@ControllerAdvice、@ResponseBody注解组合而来的，可以查找@ControllerAdvice相关的资料，理解@ControllerAdvice注解 的使用。</p>
</blockquote>
<p>RRExceptionHandler代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RRExceptionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理自定义异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(RRException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleRRException</span><span class="params">(RRException e)</span> &#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.put(<span class="string">&quot;code&quot;</span>, e.getCode());</span><br><span class="line">        r.put(<span class="string">&quot;msg&quot;</span>, e.getMessage());</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(DuplicateKeyException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleDuplicateKeyException</span><span class="params">(DuplicateKeyException e)</span> &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;数据库中已存在该记录&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AuthorizationException.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleAuthorizationException</span><span class="params">(AuthorizationException e)</span> &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="string">&quot;没有权限，请联系管理员授权&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">handleException</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        logger.error(e.getMessage(), e);</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-7-后端效验机制-1"><a href="#6-7-后端效验机制-1" class="headerlink" title="6.7 后端效验机制"></a>6.7 后端效验机制</h2><blockquote>
<p>本项目，后端效验使用的是Hibernate Validator校验框架，且自定义ValidatorUtils工具类，用来效验数 据。</p>
</blockquote>
<p>Hibernate Validator官方文档： <a href="http://docs.jboss.org/hibernate/validator/5.4/reference/en-US/html_single/">http://docs.jboss.org/hibernate/validator/5.4/reference/en-US/html_single/</a><br>ValidatorUtils代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidatorUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        validator = Validation.buildDefaultValidatorFactory().getValidator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 待校验的组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RRException 校验不通过，则报RRException异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">validateEntity</span><span class="params">(Object object, Class&lt;?&gt;... groups)</span> <span class="keyword">throws</span> RRException &#123;</span><br><span class="line">        Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);</span><br><span class="line">        <span class="keyword">if</span> (!constraintViolations.isEmpty()) &#123;</span><br><span class="line">            ConstraintViolation&lt;Object&gt; constraint = (ConstraintViolation&lt;Object&gt;) constraintV</span><br><span class="line">            iolations.iterator().next();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(constraint.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sys/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SysLog(&quot;保存用户&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:user:save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SysUserEntity user)</span> &#123;</span><br><span class="line"><span class="comment">//保存用户时，效验SysUserEntity里，带有AddGroup注解的属性</span></span><br><span class="line">        ValidatorUtils.validateEntity(user, AddGroup.class);</span><br><span class="line">        user.setCreateUserId(getUserId());</span><br><span class="line">        sysUserService.save(user);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SysLog(&quot;修改用户&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:user:update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SysUserEntity user)</span> &#123;</span><br><span class="line"><span class="comment">//修改用户时，效验SysUserEntity里，带有UpdateGroup注解的属性</span></span><br><span class="line">        ValidatorUtils.validateEntity(user, UpdateGroup.class);</span><br><span class="line">        user.setCreateUserId(getUserId());</span><br><span class="line">        sysUserService.update(user);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserEntity</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;用户名不能为空&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;密码不能为空&quot;, groups = AddGroup.class)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盐</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String salt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;邮箱不能为空&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;, groups = &#123;AddGroup.class, UpdateGroup.class&#125;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String mobile;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态</span></span><br><span class="line"><span class="comment">     0：禁用</span></span><br><span class="line"><span class="comment">     1：正常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 角色ID列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; roleIdList;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建者ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Long createUserId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过分析上面的代码，我们来理解Hibernate Validator校验框架的使用。 其中，username属性，表示保存或修改用户时，都会效验username属性；而password属性，表示只有保存用户时，才会效验password属性，也就是说，修改用户时，password可以不填写，允许为空。</p>
<p>如果不指定属性的groups，则默认属于javax.validation.groups.Default.class分组，可以通过ValidatorUtils.validateEntity(user)进行效验。</p>
<h2 id="6-8-系统日志-1"><a href="#6-8-系统日志-1" class="headerlink" title="6.8 系统日志"></a>6.8 系统日志</h2><p>系统日志是通过Spring AOP实现的，我们自定义了注解 @SysLog ，且只能在方法上使用，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SysLog &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面是自定义注解 @SysLog 的使用方式，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sys/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysUserController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span> &#123;</span><br><span class="line">    <span class="meta">@SysLog(&quot;保存用户&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:user:save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SysUserEntity user)</span> &#123;</span><br><span class="line">        ValidatorUtils.validateEntity(user, AddGroup.class);</span><br><span class="line">        user.setCreateUserId(getUserId());</span><br><span class="line">        sysUserService.save(user);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，只需要在保存日志的请求方法上，加上 @SysLog 注解，就可以把日志保存到数据库里了。 具体是在哪里把数据保存到数据库里的呢，我们定义了 SysLogAspect 处理类，就是来干这事的，如下所 示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 系统日志，切面处理类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysLogAspect</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysLogService sysLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@annotation(io.renren.common.annotation.SysLog)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">logPointCut</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;logPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint point)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">beginTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"><span class="comment">//执行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> point.proceed();</span><br><span class="line"><span class="comment">//执行时长(毫秒)</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - beginTime;</span><br><span class="line"><span class="comment">//保存日志</span></span><br><span class="line">        saveSysLog(point, time);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">saveSysLog</span><span class="params">(ProceedingJoinPoint joinPoint, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> signature.getMethod();</span><br><span class="line">        <span class="type">SysLogEntity</span> <span class="variable">sysLog</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SysLogEntity</span>();</span><br><span class="line">        <span class="type">SysLog</span> <span class="variable">syslog</span> <span class="operator">=</span> method.getAnnotation(SysLog.class);</span><br><span class="line">        <span class="keyword">if</span> (syslog != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//注解上的描述</span></span><br><span class="line">            sysLog.setOperation(syslog.value());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//请求的方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> joinPoint.getTarget().getClass().getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        sysLog.setMethod(className + <span class="string">&quot;.&quot;</span> + methodName + <span class="string">&quot;()&quot;</span>);</span><br><span class="line"><span class="comment">//请求的参数</span></span><br><span class="line">        Object[] args = joinPoint.getArgs();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">params</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(args[<span class="number">0</span>]);</span><br><span class="line">            sysLog.setParams(params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//获取request</span></span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> HttpContextUtils.getHttpServletRequest();</span><br><span class="line"><span class="comment">//设置IP地址</span></span><br><span class="line">        sysLog.setIp(IPUtils.getIpAddr(request));</span><br><span class="line"><span class="comment">//用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> ((SysUserEntity) SecurityUtils.getSubject().getPrincipal()).getUser</span><br><span class="line">        <span class="title function_">name</span><span class="params">()</span>;</span><br><span class="line">        sysLog.setUsername(username);</span><br><span class="line">        sysLog.setTime(time);</span><br><span class="line">        sysLog.setCreateDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"><span class="comment">//保存系统日志</span></span><br><span class="line">        sysLogService.save(sysLog);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SysLogAspect 类定义了一个切入点，请求 @SysLog 注解的方法时，会进入 around方法，把系统日志保存到数据库中。</p>
<h2 id="6-9-添加菜单-1"><a href="#6-9-添加菜单-1" class="headerlink" title="6.9 添加菜单"></a>6.9 添加菜单</h2><blockquote>
<p>菜单管理，主要是对【目录、菜单、按钮】进行动态的新增、修改、删除等操作，方便开发者管理菜单。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/G7kxHE.png"></p>
<p>上图是拿现有的菜单进行讲解。其中，授权标识与shiro中的注解@RequiresPermissions，定义的授权标识是 一一对应的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sys/config&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SysConfigController</span> <span class="keyword">extends</span> <span class="title class_">AbstractController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:config:list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">(<span class="meta">@RequestParam</span> Map&lt;String, Object&gt; params)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/info/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:config:info&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">info</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:config:save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SysConfigEntity config)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:config:update&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SysConfigEntity config)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="meta">@RequiresPermissions(&quot;sys:config:delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestBody</span> Long[] ids)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-10-添加角色-1"><a href="#6-10-添加角色-1" class="headerlink" title="6.10 添加角色"></a>6.10 添加角色</h2><blockquote>
<p>管理员权限是通过角色进行管理的，给管理员分配权限时，要先创建好角色。</p>
</blockquote>
<p>下面创建了一个【开发角色】，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/qsBkIQ.png"></p>
<h2 id="6-11-添加管理员-1"><a href="#6-11-添加管理员-1" class="headerlink" title="6.11 添加管理员"></a>6.11 添加管理员</h2><blockquote>
<p>本系统默认就创建了admin账号，无需分配任何角色，就拥有最高权限。 一个管理员是可以拥有多个角 色的。</p>
</blockquote>
<p>下面创建一个【zhangsan】的管理员账号，并属于【开发角色】，如下所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/xyolW8.png"></p>
<h2 id="6-12-定时任务模块-1"><a href="#6-12-定时任务模块-1" class="headerlink" title="6.12 定时任务模块"></a>6.12 定时任务模块</h2><blockquote>
<p>本系统使用开源框架Quartz，实现的定时任务，已实现分布式定时任务，可部署多台服务器，不重复执行，以及动态增加、修改、删除、暂停、恢复、立即执行定时任务。 Quartz自带了各数据库的SQL脚本，如果想更改成其他数据库，可参考Quartz相应的SQL脚本。</p>
</blockquote>
<h3 id="6-12-1-新增定时任务"><a href="#6-12-1-新增定时任务" class="headerlink" title="6.12.1 新增定时任务"></a>6.12.1 新增定时任务</h3><p>新增一个定时任务，其实很简单，只要定义一个普通的Spring Bean即可，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;testTask&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTask</span> <span class="keyword">implements</span> <span class="title class_">ITask</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String params)</span> &#123;</span><br><span class="line">        logger.debug(<span class="string">&quot;TestTask定时任务正在执行，参数为：&#123;&#125;&quot;</span>, params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何让Quartz，定时执行testTask里的方法呢？只需要在管理后台，新增一个定时任务即可，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/j1UF4l.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/9d5CTr.png"></p>
<p>刚才配置的定时任务，每隔 30 分钟，就会调用TestTask的test方法了，是不是很简单啊。</p>
<h4 id="6-12-2-源码分析"><a href="#6-12-2-源码分析" class="headerlink" title="6.12.2 源码分析"></a>6.12.2 源码分析</h4><p>Quartz提供了相关的API，我们可以调用API，对Quartz进行增加、修改、删除、暂停、恢复、立即执行等。 本系统中， ScheduleUtils 类就是对Quartz API进行的封装，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">JOB_NAME</span> <span class="operator">=</span> <span class="string">&quot;TASK_&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取触发器key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TriggerKey <span class="title function_">getTriggerKey</span><span class="params">(Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> TriggerKey.triggerKey(JOB_NAME + jobId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取jobKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JobKey <span class="title function_">getJobKey</span><span class="params">(Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> JobKey.jobKey(JOB_NAME + jobId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取表达式触发器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CronTrigger <span class="title function_">getCronTrigger</span><span class="params">(Scheduler scheduler, Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (CronTrigger) scheduler.getTrigger(getTriggerKey(jobId));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;getCronTrigger异常，请检查qrtz开头的表，是否有脏数据&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createScheduleJob</span><span class="params">(Scheduler scheduler, ScheduleJobEntity scheduleJob)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//构建job信息</span></span><br><span class="line">            <span class="type">JobDetail</span> <span class="variable">jobDetail</span> <span class="operator">=</span> JobBuilder.newJob(ScheduleJob.class).withIdentity(getJobKey</span><br><span class="line">                    (scheduleJob.getJobId())).build();</span><br><span class="line"><span class="comment">//表达式调度构建器</span></span><br><span class="line">            <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(scheduleJo</span><br><span class="line">                    b.getCronExpression())</span><br><span class="line">                    .withMisfireHandlingInstructionDoNothing();</span><br><span class="line"><span class="comment">//按新的cronExpression表达式构建一个新的trigger</span></span><br><span class="line">            <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> TriggerBuilder.newTrigger().withIdentity(getTriggerKey(sche</span><br><span class="line">                    duleJob.getJobId())).</span><br><span class="line">                    withSchedule(scheduleBuilder).build();</span><br><span class="line"><span class="comment">//放入参数，运行时的方法可以获取</span></span><br><span class="line">            jobDetail.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(</span><br><span class="line">                    scheduleJob));</span><br><span class="line">            scheduler.scheduleJob(jobDetail, trigger);</span><br><span class="line"><span class="comment">//暂停任务</span></span><br><span class="line">            <span class="keyword">if</span> (scheduleJob.getStatus() == ScheduleStatus.PAUSE.getValue()) &#123;</span><br><span class="line">                pauseJob(scheduler, scheduleJob.getJobId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;创建定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">updateScheduleJob</span><span class="params">(Scheduler scheduler, ScheduleJobEntity scheduleJob)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">TriggerKey</span> <span class="variable">triggerKey</span> <span class="operator">=</span> getTriggerKey(scheduleJob.getJobId());</span><br><span class="line"><span class="comment">//表达式调度构建器</span></span><br><span class="line">            <span class="type">CronScheduleBuilder</span> <span class="variable">scheduleBuilder</span> <span class="operator">=</span> CronScheduleBuilder.cronSchedule(scheduleJo</span><br><span class="line">                    b.getCronExpression())</span><br><span class="line">                    .withMisfireHandlingInstructionDoNothing();</span><br><span class="line">            <span class="type">CronTrigger</span> <span class="variable">trigger</span> <span class="operator">=</span> getCronTrigger(scheduler, scheduleJob.getJobId());</span><br><span class="line"><span class="comment">//按新的cronExpression表达式重新构建trigger</span></span><br><span class="line">            trigger = trigger.getTriggerBuilder().withIdentity(triggerKey).withSchedule(sched</span><br><span class="line">                    uleBuilder).build();</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">            trigger.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(sc</span><br><span class="line">                    heduleJob));</span><br><span class="line">            scheduler.rescheduleJob(triggerKey, trigger);</span><br><span class="line"><span class="comment">//暂停任务</span></span><br><span class="line">            <span class="keyword">if</span> (scheduleJob.getStatus() == ScheduleStatus.PAUSE.getValue()) &#123;</span><br><span class="line">                pauseJob(scheduler, scheduleJob.getJobId());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;更新定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立即执行任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(Scheduler scheduler, ScheduleJobEntity scheduleJob)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//参数</span></span><br><span class="line">            <span class="type">JobDataMap</span> <span class="variable">dataMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JobDataMap</span>();</span><br><span class="line">            dataMap.put(ScheduleJobEntity.JOB_PARAM_KEY, <span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(scheduleJob));</span><br><span class="line">            scheduler.triggerJob(getJobKey(scheduleJob.getJobId()), dataMap);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;立即执行定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">pauseJob</span><span class="params">(Scheduler scheduler, Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.pauseJob(getJobKey(jobId));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;暂停定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 恢复任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resumeJob</span><span class="params">(Scheduler scheduler, Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.resumeJob(getJobKey(jobId));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;暂停定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除定时任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">deleteScheduleJob</span><span class="params">(Scheduler scheduler, Long jobId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            scheduler.deleteJob(getJobKey(jobId));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SchedulerException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;删除定时任务失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是几个核心的方法：</p>
<ul>
<li><p>createScheduleJob【创建定时任务】：在管理后台新增任务时，会调用该方法，把任务添加到Quartz 中，再根据cron表达式，定时执行任务。</p>
</li>
<li><p>updateScheduleJob【更新定时任务】：修改任务时，调用该方法，修改Quartz中的任务信息。</p>
</li>
<li><p>run【立即执行定时任务】：马上执行一次该任务，只执行一次。</p>
</li>
<li><p>pauseJob【暂停定时任务】：这个不是暂停正在执行的任务，而是以后不再执行这个定时任务了。正在 执行的任务，还是照常执行完。</p>
</li>
<li><p>resumeJob【恢复定时任务】：这个是针对pauseJob来的，如果任务暂停了，以后都不会再执行，要想再执行，则需要调用resumeJob，使定时任务恢复执行。</p>
</li>
<li><p>deleteScheduleJob【删除定时任务】：删除定时任务</p>
</li>
</ul>
<p>其中， <code>createScheduleJob</code> 、 <code>updateScheduleJob</code> 在启动项目的时候，也会调用，把数据库里，新增或修 改的任务，更新到Quartz中，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;scheduleJobService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleJobServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ScheduleJobService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目启动时，初始化定时器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;ScheduleJobEntity&gt; scheduleJobList = schedulerJobDao.queryList(<span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;());</span><br><span class="line">        <span class="keyword">for</span> (ScheduleJobEntity scheduleJob : scheduleJobList) &#123;</span><br><span class="line">            <span class="type">CronTrigger</span> <span class="variable">cronTrigger</span> <span class="operator">=</span> ScheduleUtils.getCronTrigger(scheduler, scheduleJob.getJobId());</span><br><span class="line">            <span class="comment">//如果不存在，则创建</span></span><br><span class="line">            <span class="keyword">if</span> (cronTrigger == <span class="literal">null</span>) &#123;</span><br><span class="line">                ScheduleUtils.createScheduleJob(scheduler, scheduleJob);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ScheduleUtils.updateScheduleJob(scheduler, scheduleJob);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大家是不是还有疑问呢，怎么就能定时执行，刚才在管理后台新增的任务testTask呢？ 下面我们再来分析 下 createScheduleJob 方法，创建定时任务的时候，要调用该方法，代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//构建一个新的定时任务，JobBuilder.newJob()只能接受Job类型的参数</span></span><br><span class="line"><span class="comment">//把ScheduleJob.class作为参数传进去，ScheduleJob继承QuartzJobBean，而QuartzJobBean实现了Job接口</span></span><br><span class="line">JobDetail jobDetail=JobBuilder.newJob(ScheduleJob.class).withIdentity(getJobKey(scheduleJob.getJobId())).build();</span><br><span class="line"><span class="comment">//构建cron，定时任务的周期</span></span><br><span class="line">        CronScheduleBuilder scheduleBuilder=CronScheduleBuilder.cronSchedule(scheduleJob.getCronExpression()).withMisfireHandlingInstructionDoNothing();</span><br><span class="line"><span class="comment">//根据cron，构建一个CronTrigger</span></span><br><span class="line">        CronTrigger trigger=TriggerBuilder.newTrigger().withIdentity(getTriggerKey(scheduleJob.getJobId())).withSchedule(scheduleBuilder).build();</span><br><span class="line"><span class="comment">//放入参数，运行时的方法可以获取</span></span><br><span class="line">        jobDetail.getJobDataMap().put(ScheduleJobEntity.JOB_PARAM_KEY,<span class="keyword">new</span> <span class="title class_">Gson</span>().toJson(scheduleJob));</span><br><span class="line"><span class="comment">//把任务添加到Quartz中</span></span><br><span class="line">        scheduler.scheduleJob(jobDetail,trigger);</span><br></pre></td></tr></table></figure>

<p>把任务添加到 Quartz 后，等cron定义的时间周期到了，就会执行 ScheduleJob 类的 executeInternal 方 法， ScheduleJob 代码如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleJob</span> <span class="keyword">extends</span> <span class="title class_">QuartzJobBean</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException &#123;</span><br><span class="line">        <span class="type">ScheduleJobEntity</span> <span class="variable">scheduleJob</span> <span class="operator">=</span> (ScheduleJobEntity) context.getMergedJobDataMap()</span><br><span class="line">                .get(ScheduleJobEntity.JOB_PARAM_KEY);</span><br><span class="line">        <span class="comment">//获取spring bean</span></span><br><span class="line">        <span class="type">ScheduleJobLogService</span> <span class="variable">scheduleJobLogService</span> <span class="operator">=</span> (ScheduleJobLogService) SpringContextUt</span><br><span class="line">        ils.getBean(<span class="string">&quot;scheduleJobLogService&quot;</span>);</span><br><span class="line">        <span class="comment">//数据库保存执行记录</span></span><br><span class="line">        <span class="type">ScheduleJobLogEntity</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduleJobLogEntity</span>();</span><br><span class="line">        log.setJobId(scheduleJob.getJobId());</span><br><span class="line">        log.setBeanName(scheduleJob.getBeanName());</span><br><span class="line">        log.setParams(scheduleJob.getParams());</span><br><span class="line">        log.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="comment">//任务开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//执行任务 </span></span><br><span class="line">            logger.info(<span class="string">&quot;任务准备执行，任务ID：&quot;</span> + scheduleJob.getJobId());</span><br><span class="line"></span><br><span class="line">            <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> SpringContextUtils.getBean(scheduleJob.getBeanName());</span><br><span class="line">            <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> target.getClass().getDeclaredMethod(<span class="string">&quot;run&quot;</span>, String.class);</span><br><span class="line">            method.invoke(target, scheduleJob.getParams());</span><br><span class="line">            <span class="comment">//任务执行总时长 </span></span><br><span class="line">            <span class="type">long</span> <span class="variable">times</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            log.setTimes((<span class="type">int</span>) times);</span><br><span class="line">            <span class="comment">//任务状态 0 ：成功 1 ：失败</span></span><br><span class="line"></span><br><span class="line">            log.setStatus(<span class="number">0</span>);</span><br><span class="line">            logger.info(<span class="string">&quot;任务执行完毕，任务ID：&quot;</span> + scheduleJob.getJobId() + <span class="string">&quot; 总共耗时：&quot;</span> + tim es + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;任务执行失败，任务ID：&quot;</span> + scheduleJob.getJobId(), e);</span><br><span class="line">            <span class="comment">//任务执行总时长</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">times</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            log.setTimes((<span class="type">int</span>) times);</span><br><span class="line">            <span class="comment">//任务状态 0 ：成功 1 ：失败 </span></span><br><span class="line">            log.setStatus(<span class="number">1</span>);</span><br><span class="line">            log.setError(StringUtils.substring(e.toString(), <span class="number">0</span>, <span class="number">2000</span>));</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            scheduleJobLogService.save(log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-13-云存储模块-1"><a href="#6-13-云存储模块-1" class="headerlink" title="6.13 云存储模块"></a>6.13 云存储模块</h2><blockquote>
<p>图片、文件上传，使用的是七牛、阿里云、腾讯云的存储服务，不能上传到本地服务器。上传到本地 服务器，不利于维护，访问速度慢等缺点，所以推荐使用云存储服务。</p>
</blockquote>
<h3 id="6-13-1-七牛的配置"><a href="#6-13-1-七牛的配置" class="headerlink" title="6.13.1 七牛的配置"></a>6.13.1 七牛的配置</h3><blockquote>
<p>如果没有七牛账号，则需要注册七牛账号，才能进行配置，下面演示注册七牛账号并配置，步骤如 下：</p>
</blockquote>
<ol>
<li>[注册七牛账号][34]，并登录后，再创建七牛空间，如下图：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/86h4oq.png"></p>
<ol start="2">
<li>进入管理后端，填写七牛配置信息，如下图：</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/tkisAZ.png"></p>
<p>必填项有域名、AccessKey、SecretKey、空间名。其中，空间名就是才创建的空间名 ios-app ，填进去就可 以了。域名、AccessKey、SecretKey可以通过下图找到：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/v0K61m.png"></p>
<h3 id="6-13-2-阿里云的配置"><a href="#6-13-2-阿里云的配置" class="headerlink" title="6.13.2 阿里云的配置"></a>6.13.2 阿里云的配置</h3><ul>
<li>进入管理后端，填写阿里云配置信息，如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/bHjijJ.png"></p>
<ul>
<li>进去阿里云管理后台，并创建Bucket，如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/zEeaHL.png"></p>
<ul>
<li>通过下面的界面，可以找到域名、BucketName、EndPoint</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/tB5WLW.png"></p>
<ul>
<li>通过下面的界面，可以找到AccessKeyId、AccessKeySecret</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/DIzny3.png"></p>
<h4 id="6-13-3-腾讯云的配置"><a href="#6-13-3-腾讯云的配置" class="headerlink" title="6.13.3 腾讯云的配置"></a>6.13.3 腾讯云的配置</h4><ul>
<li>进入管理后端，填写腾讯云配置信息，如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/lH6UMH.png"></p>
<ul>
<li>进去腾讯云管理后台，并创建Bucket，如下图：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/UGXMhL.png"></p>
<ul>
<li>通过下面的界面，可以找到域名、BucketName、Bucket所属地区</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/rLnoLL.png"></p>
<ul>
<li>通过下面的界面，可以找到AppId、SecretId、SecretKey</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/18/7XxX9S.png"></p>
<h4 id="6-13-4-源码分析"><a href="#6-13-4-源码分析" class="headerlink" title="6.13.4 源码分析"></a>6.13.4 源码分析</h4><p>本项目的文件上传，使用的是七牛、阿里云、腾讯云，则需要引入他们的SDK，如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qiniu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>qiniu-java-sdk<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;qiniu.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;aliyun.oss.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qcloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cos_api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;qcloud.cos.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>定义抽象类 CloudStorageService ，用来声明上传的公共接口，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">CloudStorageService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 云存储配置信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CloudStorageConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件路径</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> prefix 前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffix 后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回上传路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPath</span><span class="params">(String prefix, String suffix)</span> &#123;</span><br><span class="line">        <span class="comment">//生成uuid</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replaceAll(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="comment">//文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> DateUtils.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yyyyMMdd&quot;</span>) + <span class="string">&quot;/&quot;</span> + uuid;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(prefix)) &#123;</span><br><span class="line">            path = prefix + <span class="string">&quot;/&quot;</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> path + suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data 文件字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 文件路径，包含文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回http地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] data, String path)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data   文件字节数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffix 后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回http地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">uploadSuffix</span><span class="params">(<span class="type">byte</span>[] data, String suffix)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 字节流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path        文件路径，包含文件名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回http地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String path)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 文件上传</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> inputStream 字节流</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> suffix      后缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回http地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">uploadSuffix</span><span class="params">(InputStream inputStream, String suffix)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>七牛上传的实现，只需继承 CloudStorageService ，并实现相应的上传接口，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qiniu.common.Zone;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.http.Response;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.Configuration;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.storage.UploadManager;</span><br><span class="line"><span class="keyword">import</span> com.qiniu.util.Auth;</span><br><span class="line"><span class="keyword">import</span> io.renren.common.exception.RRException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 七牛云存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QiniuCloudStorageService</span> <span class="keyword">extends</span> <span class="title class_">CloudStorageService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> UploadManager uploadManager;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QiniuCloudStorageService</span><span class="params">(CloudStorageConfig config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        uploadManager = <span class="keyword">new</span> <span class="title class_">UploadManager</span>(<span class="keyword">new</span> <span class="title class_">Configuration</span>(Zone.autoZone()));</span><br><span class="line">        token = Auth.create(config.getQiniuAccessKey(), config.getQiniuSecretKey()).</span><br><span class="line">                uploadToken(config.getQiniuBucketName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] data, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> uploadManager.put(data, path, token);</span><br><span class="line">            <span class="keyword">if</span> (!res.isOK()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;上传七牛出错：&quot;</span> + res.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;上传文件失败，请核对七牛配置信息&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config.getQiniuDomain() + <span class="string">&quot;/&quot;</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = IOUtils.toByteArray(inputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.upload(data, path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;上传文件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(<span class="type">byte</span>[] data, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(data, getPath(config.getQiniuPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(InputStream inputStream, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(inputStream, getPath(config.getQiniuPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>阿里云上传的实现，只需继承 CloudStorageService ，并实现相应的上传接口，如下所示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> io.renren.common.exception.RRException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AliyunCloudStorageService</span> <span class="keyword">extends</span> <span class="title class_">CloudStorageService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> OSSClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AliyunCloudStorageService</span><span class="params">(CloudStorageConfig config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">OSSClient</span>(config.getAliyunEndPoint(), config.getAliyunAccessKeyId(),</span><br><span class="line">                config.getAliyunAccessKeySecret());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] data, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(data), path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            client.putObject(config.getAliyunBucketName(), path, inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;上传文件失败，请检查配置信息&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config.getAliyunDomain() + <span class="string">&quot;/&quot;</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(<span class="type">byte</span>[] data, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(data, getPath(config.getAliyunPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(InputStream inputStream, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(inputStream, getPath(config.getAliyunPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>腾讯云上传的实现，只需继承 CloudStorageService ，并实现相应的上传接口，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qcloud.cos.COSClient;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.ClientConfig;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.request.UploadFileRequest;</span><br><span class="line"><span class="keyword">import</span> com.qcloud.cos.sign.Credentials;</span><br><span class="line"><span class="keyword">import</span> io.renren.common.exception.RRException;</span><br><span class="line"><span class="keyword">import</span> net.sf.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.IOUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 腾讯云存储</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Mark sunlightcs@gmail.com</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QcloudCloudStorageService</span> <span class="keyword">extends</span> <span class="title class_">CloudStorageService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> COSClient client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">QcloudCloudStorageService</span><span class="params">(CloudStorageConfig config)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.config = config;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Credentials</span> <span class="variable">credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Credentials</span>(config.getQcloudAppId(), config.getQcloudSe</span><br><span class="line">                <span class="title function_">cretId</span><span class="params">()</span>,</span><br><span class="line">                config.getQcloudSecretKey());</span><br><span class="line"><span class="comment">//初始化客户端配置</span></span><br><span class="line">        <span class="type">ClientConfig</span> <span class="variable">clientConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClientConfig</span>();</span><br><span class="line"><span class="comment">//设置bucket所在的区域，华南：gz 华北：tj 华东：sh</span></span><br><span class="line">        clientConfig.setRegion(config.getQcloudRegion());</span><br><span class="line">        client = <span class="keyword">new</span> <span class="title class_">COSClient</span>(clientConfig, credentials);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="type">byte</span>[] data, String path)</span> &#123;</span><br><span class="line"><span class="comment">//腾讯云必需要以&quot;/&quot;开头</span></span><br><span class="line">        <span class="keyword">if</span> (!path.startsWith(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            path = <span class="string">&quot;/&quot;</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//上传到腾讯云</span></span><br><span class="line">        <span class="type">UploadFileRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UploadFileRequest</span>(config.getQcloudBucketName(), path,</span><br><span class="line">                data);</span><br><span class="line">        <span class="type">String</span> <span class="variable">response</span> <span class="operator">=</span> client.uploadFile(request);</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONObject.fromObject(response);</span><br><span class="line">        <span class="keyword">if</span> (jsonObject.getInt(<span class="string">&quot;code&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;文件上传失败，&quot;</span> + jsonObject.getString(<span class="string">&quot;message&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config.getQcloudDomain() + path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(InputStream inputStream, String path)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">byte</span>[] data = IOUtils.toByteArray(inputStream);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.upload(data, path);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;上传文件失败&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(<span class="type">byte</span>[] data, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(data, getPath(config.getQcloudPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadSuffix</span><span class="params">(InputStream inputStream, String suffix)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> upload(inputStream, getPath(config.getQcloudPrefix(), suffix));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对外提供了OSSFactory工厂，可方便业务的调用，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">OSSFactory</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SysConfigService sysConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        OSSFactory.sysConfigService = (SysConfigService) SpringContextUtils.getBean(<span class="string">&quot;sysConfi</span></span><br><span class="line"><span class="string">                gService&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CloudStorageService <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//获取云存储配置信息</span></span><br><span class="line">        <span class="type">CloudStorageConfig</span> <span class="variable">config</span> <span class="operator">=</span> sysConfigService.getConfigObject(ConfigConstant.CLOUD_STO</span><br><span class="line">                RAGE_CONFIG_KEY, CloudStorageConfig.class);</span><br><span class="line">        <span class="keyword">if</span> (config.getType() == Constant.CloudService.QINIU.getValue()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QiniuCloudStorageService</span>(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.getType() == Constant.CloudService.ALIYUN.getValue()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AliyunCloudStorageService</span>(config);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (config.getType() == Constant.CloudService.QCLOUD.getValue()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">QcloudCloudStorageService</span>(config);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>文件上传的例子，如下： @RequestMapping(“&#x2F;upload”)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span><span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">if</span>(file.isEmpty())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(<span class="string">&quot;上传文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//上传文件，并返回文件的http地址</span></span><br><span class="line">        String url=OSSFactory.build().upload(file.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-14-APP-模块-1"><a href="#6-14-APP-模块-1" class="headerlink" title="6.14 APP 模块"></a>6.14 APP 模块</h2><blockquote>
<p>APP模块，是针对APP使用的，如IOS、Android等，主要是解决用户认证的问题。</p>
</blockquote>
<h3 id="6-14-1-APP-的使用"><a href="#6-14-1-APP-的使用" class="headerlink" title="6.14.1 APP 的使用"></a>6.14.1 APP 的使用</h3><blockquote>
<p>APP的设计思路：用户通过APP，输入手机号、密码登录后，系统会生成与登录用户一一对应的 token，用户调用需要登录的接口时，只需把token传过来，服务端就知道是谁在访问接口，token如果过期，则拒绝访问，从而保证系统的安全性。</p>
</blockquote>
<p>使用很简单，看看下面的例子，就会使用了。仔细观察，我们会发现，有 2 个自定义的注解。其中， @LoginUser注解是获取当前登录用户的信息，有哪些信息，下面会分析的。@Login注解则是需要用户认证，没有登录的用户，不能访问该接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.renren.modules.app.annotation.Login;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.app.annotation.LoginUser;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestAttribute;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/app&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiTestController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Login</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;userInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">userInfo</span><span class="params">(<span class="meta">@LoginUser</span> UserEntity user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户ID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Login</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;userId&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">userInfo</span><span class="params">(<span class="meta">@RequestAttribute(&quot;userId&quot;)</span> Integer userId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;userId&quot;</span>, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 忽略Token验证测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;notToken&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">notToken</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> R.ok().put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无需token也能访问。。。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-14-2-源码分析"><a href="#6-14-2-源码分析" class="headerlink" title="6.14.2 源码分析"></a>6.14.2 源码分析</h3><ul>
<li>我们先来看看，APP用户登录的时候，都干了那些事情，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/app&quot;)</span></span><br><span class="line"><span class="meta">@Api(&quot;APP登录接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ApiLoginController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;登录&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginForm form)</span> &#123;</span><br><span class="line">				<span class="comment">//表单校验</span></span><br><span class="line">        ValidatorUtils.validateEntity(form);</span><br><span class="line">				<span class="comment">//用户登录</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">userId</span> <span class="operator">=</span> userService.login(form);</span><br><span class="line">				<span class="comment">//生成token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> jwtUtils.generateToken(userId);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, token);</span><br><span class="line">        map.put(<span class="string">&quot;expire&quot;</span>, jwtUtils.getExpire());</span><br><span class="line">        <span class="keyword">return</span> R.ok(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;renren.jwt&quot;)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">Logger</span> <span class="variable">logger</span> <span class="operator">=</span> LoggerFactory.getLogger(getClass());</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expire;</span><br><span class="line">    <span class="keyword">private</span> String header;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成jwt token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateToken</span><span class="params">(<span class="type">long</span> userId)</span> &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">				<span class="comment">//过期时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">expireDate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(nowDate.getTime() + expire * <span class="number">1000</span>);</span><br><span class="line">        <span class="keyword">return</span> Jwts.builder()</span><br><span class="line">                .setHeaderParam(<span class="string">&quot;typ&quot;</span>, <span class="string">&quot;JWT&quot;</span>)</span><br><span class="line">                .setSubject(userId + <span class="string">&quot;&quot;</span>)</span><br><span class="line">                .setIssuedAt(nowDate)</span><br><span class="line">                .setExpiration(expireDate)</span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, secret)</span><br><span class="line">                .compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Claims <span class="title function_">getClaimByToken</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> Jwts.parser()</span><br><span class="line">                    .setSigningKey(secret)</span><br><span class="line">                    .parseClaimsJws(token)</span><br><span class="line">                    .getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;validate is token error &quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token是否过期</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true：过期</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecret</span><span class="params">(String secret)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.secret = secret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setExpire</span><span class="params">(<span class="type">long</span> expire)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.expire = expire;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> header;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHeader</span><span class="params">(String header)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.header = header;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们从上面的代码，可以看到，用户每次登录的时候，都会生成一个唯一的token，这个token是通过jwt生成 的。</p>
<ul>
<li>APP模块的核心配置，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.renren.modules.api.interceptor.AuthorizationInterceptor;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.api.resolver.LoginUserHandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthorizationInterceptor authorizationInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LoginUserHandlerMethodArgumentResolver loginUserHandlerMethodArgumentResolver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(authorizationInterceptor).addPathPatterns(<span class="string">&quot;/app/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; argumentResolvers)</span> &#123;</span><br><span class="line">        argumentResolvers.add(loginUserHandlerMethodArgumentResolver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，配置了个Interceptor，用来拦截 &#x2F;app 开头的所有请求，拦截后，会到 AuthorizationInterceptor类preHandle方法处理。只有以 &#x2F;app开头的请求，API模块认证才会起作用，如果要以&#x2F;api 开头，则需要修改此处。还配置了argumentResolver，别忽略了啊，下面会讲解。</p>
<p>温馨提示，别忘了配置shiro，不然会被shiro拦截掉的，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(&quot;shiroFilter&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shirFilter</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line"><span class="comment">//部分代码省略...</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"><span class="comment">//让shiro放过，以/app开头的请求</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/app/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);</span><br><span class="line"><span class="comment">//部分代码省略...</span></span><br><span class="line">        shiroFilter.setFilterChainDefinitionMap(filterMap);</span><br><span class="line">        <span class="keyword">return</span> shiroFilter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>分析AuthorizationInterceptor类，我们可以发现，拦截 &#x2F;app 开头的请求后，都干了些什么，如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.renren.common.exception.RRException;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.app.utils.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.app.annotation.Login;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.HandlerMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 权限(Token)验证</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AuthorizationInterceptor</span> <span class="keyword">extends</span> <span class="title class_">HandlerInterceptorAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtUtils jwtUtils;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;userId&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object</span></span><br><span class="line"><span class="params">            handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Login annotation;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            annotation = ((HandlerMethod) handler).getMethodAnnotation(Login.class);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (annotation == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//获取用户凭证</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(jwtUtils.getHeader());</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            token = request.getParameter(jwtUtils.getHeader());</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//凭证为空</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(jwtUtils.getHeader() + <span class="string">&quot;不能为空&quot;</span>, HttpStatus.UNAUTHORIZED.v</span><br><span class="line">                    <span class="title function_">alue</span><span class="params">()</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jwtUtils.getClaimByToken(token);</span><br><span class="line">        <span class="keyword">if</span> (claims == <span class="literal">null</span> || jwtUtils.isTokenExpired(claims.getExpiration())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RRException</span>(jwtUtils.getHeader() + <span class="string">&quot;失效，请重新登录&quot;</span>, HttpStatus.UNAUTHO</span><br><span class="line">                    RIZED.value());</span><br><span class="line">        &#125;</span><br><span class="line">				<span class="comment">//设置userId到request里，后续根据userId，获取用户信息</span></span><br><span class="line">        request.setAttribute(USER_KEY, Long.parseLong(claims.getSubject()));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，进入 &#x2F;app 请求的接口之前，会判断请求的接口，是否加了@Login注解(需要token认证)，如果没有@Login注解，则不验证token，可以直接访问接口。如果有@Login注解，则需要验证token的正确性，并把userId放到request的USER_KEY里，后续会用到。</p>
<ul>
<li>此时，@Login注解的作用，相信大家都明白了。再看看下面的代码，加了@LoginUser注解后，user对象里，就变成当前登录用户的信息，这是什么时候设置进去的呢？</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取用户信息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;userInfo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">userInfo</span><span class="params">(<span class="meta">@LoginUser</span> UserEntity user)</span>&#123;</span><br><span class="line">  	<span class="keyword">return</span> R.ok().put(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>设置user对象进去，其实是在LoginUserHandlerMethodArgumentResolver里干的,LoginUserHandlerMethodArgumentResolver是我们自定义的参数转换器，只要实现HandlerMethodArgumentResolver接口即可，代码如下所示：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.renren.modules.api.annotation.LoginUser;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.api.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.api.interceptor.AuthorizationInterceptor;</span><br><span class="line"><span class="keyword">import</span> io.renren.modules.api.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.MethodParameter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.support.WebDataBinderFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.NativeWebRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.context.request.RequestAttributes;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.HandlerMethodArgumentResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.method.support.ModelAndViewContainer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginUserHandlerMethodArgumentResolver</span> <span class="keyword">implements</span> <span class="title class_">HandlerMethodArgumentResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">supportsParameter</span><span class="params">(MethodParameter parameter)</span> &#123;</span><br><span class="line"><span class="comment">//如果方法的参数是UserEntity，且参数前面有@LoginUser注解，则进入resolveArgument方法，进行</span></span><br><span class="line">        处理</span><br><span class="line">        <span class="keyword">return</span> parameter.getParameterType().isAssignableFrom(UserEntity.class) &amp;&amp; parameter.h</span><br><span class="line">        <span class="title function_">asParameterAnnotation</span><span class="params">(LoginUser.class)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer container,</span></span><br><span class="line"><span class="params">                                  NativeWebRequest request, WebDataBinderFactory factory)</span> thr</span><br><span class="line"></span><br><span class="line">    ows Exception</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//获取用户ID，之前设置进去的，还有印象吧</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> request.getAttribute(AuthorizationInterceptor.USER_KEY, RequestAttrib</span><br><span class="line">                utes.SCOPE_REQUEST);</span><br><span class="line">        <span class="keyword">if</span> (object == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//通过userId，获取用户信息</span></span><br><span class="line">        <span class="type">UserEntity</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryObject((Long) object);</span><br><span class="line"><span class="comment">//把当前用户信息，设置到UserEntity参数的user对象里</span></span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="第-7-章-生产环境部署"><a href="#第-7-章-生产环境部署" class="headerlink" title="第 7 章 生产环境部署"></a>第 7 章 生产环境部署</h1><blockquote>
<p>部署项目前，需要准备JDK8、Maven、MySQL5.5+环境，参考开发环境搭建。</p>
</blockquote>
<h2 id="7-1-jar-包部署"><a href="#7-1-jar-包部署" class="headerlink" title="7.1 jar 包部署"></a>7.1 jar 包部署</h2><h2 id="7-2-docker-部署"><a href="#7-2-docker-部署" class="headerlink" title="7.2 docker 部署"></a>7.2 docker 部署</h2><h2 id="7-3-集群部署"><a href="#7-3-集群部署" class="headerlink" title="7.3 集群部署"></a>7.3 集群部署</h2><h3 id="7-1-jar-包部署-1"><a href="#7-1-jar-包部署-1" class="headerlink" title="7.1 jar 包部署"></a>7.1 jar 包部署</h3><blockquote>
<p>Spring Boot项目，推荐打成jar包的方式，部署到服务器上。</p>
</blockquote>
<ul>
<li>Spring Boot内置了Tomcat，可配置Tomcat的端口号、初始化线程数、最大线程数、连接超时时长、https 等等，如下所示：</li>
</ul>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="attr">max-threads:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">min-spare-threads:</span> <span class="number">30</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">connection-timeout:</span> <span class="string">5000ms</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/renren-fast</span></span><br><span class="line">    <span class="attr">session:</span></span><br><span class="line">    <span class="attr">cookie:</span></span><br><span class="line">    <span class="attr">http-only:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ssl:</span></span><br><span class="line">    <span class="attr">key-store:</span> <span class="string">classpath:.keystore</span></span><br><span class="line">    <span class="attr">key-store-type:</span> <span class="string">JKS</span></span><br><span class="line">    <span class="attr">key-password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">key-alias:</span> <span class="string">tomcat</span></span><br></pre></td></tr></table></figure>

<ul>
<li>当然，还可以指定jvm的内存大小，如下所示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -Xms4g -Xmx4g -Xmn1g -server -jar renren-fast.jar</span><br></pre></td></tr></table></figure>

<ul>
<li>在windows下部署，只需打开cmd窗口，输入如下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -jar renren-fast.jar --spring.profiles.active=prod</span><br></pre></td></tr></table></figure>

<ul>
<li>在Linux下部署，只需输入如下命令，即可在Linux后台运行：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">nohup</span> java -jar renren-fast.jar --spring.profiles.active=prod &gt; renren.log &amp;</span><br></pre></td></tr></table></figure>

<ul>
<li>在Linux环境下，我们一般可以创建shell脚本，用于重启项目，如下所示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#创建启动的shell脚本</span></span><br><span class="line">[root@renren renren-fast]<span class="comment"># vim start.sh</span></span><br><span class="line"><span class="comment">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line">process=`ps -fe|grep <span class="string">&quot;renren-fast.jar&quot;</span> |grep -ivE <span class="string">&quot;grep|cron&quot;</span> |awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ !<span class="variable">$process</span> ];</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">		<span class="built_in">echo</span> <span class="string">&quot;stop erp process <span class="variable">$process</span> .....&quot;</span></span><br><span class="line">		<span class="built_in">kill</span> -9 <span class="variable">$process</span></span><br><span class="line">    <span class="built_in">sleep</span> 1 </span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start erp process.....&quot;</span></span><br><span class="line"><span class="built_in">nohup</span> java -Dspring.profiles.active=prod -jar renren-fast.jar --server.port=8080 --server.servlet.context-path=/renren-fast 2&gt;&amp;1 | cronolog <span class="built_in">log</span>.%Y-%m-%d.out &gt;&gt; /dev/null &amp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;start erp success!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过shell脚本启动项目</span></span><br><span class="line">[root@renren renren-fast]<span class="comment"># yum install -y cronolog</span></span><br><span class="line">[root@renren renren-fast]<span class="comment"># chomd +x start.sh</span></span><br><span class="line">[root@renren renren-fast]<span class="comment"># ./start.sh</span></span><br></pre></td></tr></table></figure>

<h2 id="7-2-docker-部署-1"><a href="#7-2-docker-部署-1" class="headerlink" title="7.2 docker 部署"></a>7.2 docker 部署</h2><p>安装docker环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#安装docker</span></span><br><span class="line">[root@mark ~]<span class="comment"># curl -sSL https://get.docker.com/ | sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动docker</span></span><br><span class="line">[root@mark ~]<span class="comment"># service docker start</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看docker版本信息</span></span><br><span class="line">[root@mark ~]<span class="comment"># docker version</span></span><br><span class="line">Client:</span><br><span class="line">    Version: 17.07.0-ce</span><br><span class="line">    API version: 1.31</span><br><span class="line">    Go version: go1.8.3</span><br><span class="line">    Git commit: 8784753</span><br><span class="line">    Built: Tue Aug 29 17:42:01 2017</span><br><span class="line">    OS/Arch: linux/amd64</span><br><span class="line">Server:</span><br><span class="line">    Version: 17.07.0-ce</span><br><span class="line">    API version: 1.31 (minimum version 1.12)</span><br><span class="line">    Go version: go1.8.3</span><br><span class="line">    Git commit: 8784753</span><br><span class="line">    Built: Tue Aug 29 17:43:23 2017</span><br><span class="line">    OS/Arch: linux/amd64</span><br><span class="line">    Experimental: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>还需要准备java、maven环境，请自行安装</li>
<li>通过maven插件，构建docker镜像</li>
</ul>
<h2 id="打包并构建项目镜像"><a href="#打包并构建项目镜像" class="headerlink" title="打包并构建项目镜像"></a>打包并构建项目镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@mark renren-fast]<span class="comment"># mvn clean package docker:build</span></span><br><span class="line"><span class="comment">#省略打包log...</span></span><br><span class="line">[INFO] Building image renren/fast</span><br><span class="line">Step 1/6 : FROM java:8</span><br><span class="line">	---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/6 : EXPOSE 8080</span><br><span class="line">    ---&gt; Using cache</span><br><span class="line">    ---&gt; 8e33aadb2c18</span><br><span class="line">Step 3/6 : VOLUME /tmp</span><br><span class="line">  ---&gt; Using cache</span><br><span class="line">  ---&gt; c5dc0c509062</span><br><span class="line">Step 4/6 : ADD renren-fast-1.2.0.jar /app.jar</span><br><span class="line">  ---&gt; 831bc3ca84bc</span><br><span class="line">Step 5/6 : RUN bash -c <span class="string">&#x27;touch /app.jar&#x27;</span></span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> fe3ef9343e4c</span><br><span class="line">  ---&gt; b3d6dd6fc297</span><br><span class="line">Removing intermediate container fe3ef9343e4c</span><br><span class="line">Step 6/6 : ENTRYPOINT java -jar /app.jar</span><br><span class="line">  ---&gt; Running <span class="keyword">in</span> 89adce4ae167</span><br><span class="line">  ---&gt; a4ae60970a77</span><br><span class="line">Removing intermediate container 89adce4ae167</span><br><span class="line">ProgressMessage&#123;<span class="built_in">id</span>=null, status=null, stream=null, error=null, progress=null, progressDetail=</span><br><span class="line">null&#125;</span><br><span class="line">Successfully built a4ae60970a77</span><br><span class="line">Successfully tagged renren/fast:latest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看镜像</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># docker images</span></span><br><span class="line">REPOSITORY 		TAG 		IMAGE ID 				 CREATED 					SIZE</span><br><span class="line">renren/fast 	latest 	a4ae60970a77 		 14 seconds ago 	714MB</span><br><span class="line">java 					8 			d23bdf5b1b1b 		 7 months ago 		643MB</span><br></pre></td></tr></table></figure>

<ul>
<li>安装docker-compose，用来管理容器</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下载地址：https://github.com/docker/compose/releases</span></span><br><span class="line"><span class="comment">#下载docker-compose</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment">#增加可执行权限</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># chmod +x /usr/local/bin/docker-compose</span></span><br><span class="line"><span class="comment">#查看版本信息</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># docker-compose version</span></span><br><span class="line">docker-compose version 1.16.1, build 6d1ac21</span><br><span class="line">docker-py version: 2.5.1</span><br><span class="line">CPython version: 2.7.13</span><br><span class="line">OpenSSL version: OpenSSL 1.0.1t 3 May 2016</span><br></pre></td></tr></table></figure>

<p>如果下载不了，可以用迅雷将<a href="https://github.com/docker/compose/releases/download/1.16.1/docker-compose-">https://github.com/docker/compose/releases/download/1.16.1/docker-compose-</a><br>Linux-x86_64下载到本地，再上传到服务器</p>
<ul>
<li>通过docker-compose，启动项目，如下所示：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#启动项目</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># docker-compose up -d</span></span><br><span class="line">Creating network <span class="string">&quot;renrenfast_default&quot;</span> with the default driver</span><br><span class="line">Creating renrenfast_campus_1 ...</span><br><span class="line">Creating renrenfast_campus_1 ... <span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查看启动的容器</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># docker ps</span></span><br><span class="line">CONTAINER ID 	IMAGE 			COMMAND 							CREATED 						STATUS 				PORTS 				</span><br><span class="line">NAMES</span><br><span class="line">f4e3fcdd8dd4 	renren/fast <span class="string">&quot;java -jar /app.jar&quot;</span> 	55 seconds ago 			Up 3 seconds 	0.0.0.0:8080-&gt;8080/tcp renrenfast_renren-fast_1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#停掉并删除，docker-compose管理的容器</span></span><br><span class="line">[root@mark renren-fast]<span class="comment"># docker-compose down</span></span><br><span class="line">Stopping renrenfast_renren-fast_1 ... <span class="keyword">done</span> </span><br><span class="line">Removing renrenfast_renren-fast_1 ... <span class="keyword">done</span></span><br><span class="line">Removing network renrenfast_default</span><br></pre></td></tr></table></figure>

<h2 id="7-3-集群部署-1"><a href="#7-3-集群部署-1" class="headerlink" title="7.3 集群部署"></a>7.3 集群部署</h2><blockquote>
<p>本系统支持集群部署，集群部署，只需启动多个节点，并配置Nginx即可。</p>
</blockquote>
<ul>
<li>配置Nginx</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    upstream renren &#123;</span><br><span class="line">        server localhost:8080;</span><br><span class="line">        server localhost:8081;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name localhost;</span><br><span class="line">        location /renren-fast &#123;</span><br><span class="line">            proxy_pass http://renren;</span><br><span class="line">            client_max_body_size 1024m;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_redirect off;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>通过<a href="http://localhost/renren-fast%EF%BC%8C%E5%B0%B1%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86">http://localhost/renren-fast，就可以访问了</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>超详细从0开始搭建 Spring Boot 项目</title>
    <url>/posts/79603c56/</url>
    <content><![CDATA[<h1 id="超详细从0开始搭建-Spring-Boot-项目"><a href="#超详细从0开始搭建-Spring-Boot-项目" class="headerlink" title="超详细从0开始搭建 Spring Boot 项目"></a>超详细从0开始搭建 Spring Boot 项目</h1><p>这个项目，我是打算作为种子项目的，作为种子项目，必须的“开箱即用”，必须要包含大部分 web 开发的相关功能，后期所有的 Spring Boot 项目都是将这个项目拿来，简单修改一下配置，就可以快速开发了。</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><p><a href="https://github.com/wqlm/boot">Github</a></p>
<h1 id="1-0-0-创建项目"><a href="#1-0-0-创建项目" class="headerlink" title="1.0.0 创建项目"></a>1.0.0 创建项目</h1><p>我使用的是 idea</p>
<p>创建项目 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/w8NHXh.png" alt="img"></p>
<p>选择 Spring initializr ，如果点Next一直在转圈，可能是 <a href="https://link.juejin.cn/?target=https://start.spring.io/">start.spring.io&#x2F;</a> 在国外，访问比较慢。可以科学上网或者，使用自定义的 <a href="https://link.juejin.cn/?target=http://start.spring.io/">start.spring.io&#x2F;</a> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/T8zrCm.png" alt="img"></p>
<p>主要改以下组织名称、项目名称和项目描述就好了 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/JQ1yll.png" alt="img"></p>
<p>我创建项目的时候， Spring Boot 最新稳定版是 2.1.9 。要用就用最新的！！！ 依赖先都不勾选，后期一项一项加</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/2PU7rC.png" alt="img"></p>
<p>项目文件夹名称以及存放位置 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/ejmw40.png" alt="img"></p>
<h2 id="添加maven镜像"><a href="#添加maven镜像" class="headerlink" title="添加maven镜像"></a>添加maven镜像</h2><p>添加maven镜像加快依赖下载速度</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei_plugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="pom-文件"><a href="#pom-文件" class="headerlink" title="pom 文件"></a>pom 文件</h2><p>整体 .pom 文件内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqlm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot Demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei_plugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="依赖结构图"><a href="#依赖结构图" class="headerlink" title="依赖结构图"></a>依赖结构图</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/123.png" alt="img"></p>
<h1 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h1><p>观察仔细的人应该发现了，<strong>spring-boot-starter</strong> 和 <strong>spring-boot-starter-test</strong> 都没有指定版本，那它们是怎么确定版本的？</p>
<blockquote>
<p>参考 <a href="https://juejin.cn/post/6844903965444816903">为什么 maven 依赖可以不指定版本</a></p>
</blockquote>
<h1 id="1-1-0-添加-web-模块"><a href="#1-1-0-添加-web-模块" class="headerlink" title="1.1.0 添加 web 模块"></a>1.1.0 添加 web 模块</h1><p>在 pom 文件中添加 web 模块</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>由于 <strong>spring-boot-starter-web</strong> 包含 <strong>spring-boot-starter</strong> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/JFwFNq.png" alt="img"></p>
<p>建议删掉如下 <strong>spring-boot-starter</strong> 依赖，以保证依赖的干净整洁</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>引入 <strong>spring-boot-starter-web</strong> 后，我们可以</p>
<ul>
<li>编写 web 应用</li>
<li>不需要配置容器即可运行 web 应用</li>
<li>对请求参数进行校验</li>
<li>将业务结果对象转换成 josn 返回</li>
</ul>
<h2 id="依赖结构图-1"><a href="#依赖结构图-1" class="headerlink" title="依赖结构图"></a>依赖结构图</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/SpringBootWeb.png" alt="img"> 从图中我们可以看到 <strong>spring-boot-starter-web</strong> 引入了几个关键的依赖</p>
<ul>
<li><p>spring-boot-starter</p>
</li>
<li><p><strong>spring-boot-starter-tomcat</strong>：spring boot 不需要 tomcat 也能启动就是因为它</p>
</li>
<li><p>spring-webmvc</p>
</li>
<li><p>spring-web</p>
</li>
<li><p>spring-boot-starter-json</p>
<p>： 有了它，就可以使用 @ResponseBody 返回 json 数据</p>
<ul>
<li><strong>jackson</strong> ：spring boot 默认的 json 解析工具</li>
</ul>
</li>
<li><p>hibernate-validator</p>
<p>：提供参数校验的注解，如</p>
<p>@Range、@Length</p>
<ul>
<li><strong>javax.validation</strong>：提供参数校验的注解，如 <strong>@NotBlank、@NotNull、@Pattern</strong></li>
</ul>
</li>
</ul>
<p>关于参数校验请参考 <a href="https://juejin.cn/post/6844903961581846535#heading-4">参数校验 Hibernate-Validator</a></p>
<h1 id="1-2-0-集成-mysql"><a href="#1-2-0-集成-mysql" class="headerlink" title="1.2.0 集成 mysql"></a>1.2.0 集成 mysql</h1><p>Spring Boot 集成 mysql 需要 <strong>JDBC 驱动</strong> 和 <strong>mysql 驱动</strong></p>
<h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--JDBC--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>版本号可以不用填，spring boot 配置了默认的版本号。例如 spring boot 2.1.9.RELEASE 对应的 mysql-connector-java 版本为 8.0.17</p>
<h2 id="配置-mysql"><a href="#配置-mysql" class="headerlink" title="配置 mysql"></a>配置 mysql</h2><p>根据 <strong>mysql-connector-java</strong> 版本不同，配置的内容也有些许差异</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql-connector-java 6.0.x 以下版本配置</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/boot?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="literal">false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="number">123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># mysql-connector-java 6.0.x 及以上版本配置</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/boot?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=Asia/Shanghai</span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如下图，<strong>spring boot 2.1.9.RELEASE</strong> 对应的 <strong>mysql-connector-java</strong> 版本为 8.0.17 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/UqEhk0.png" alt="img"></p>
<p>更多请参考<a href="https://juejin.cn/post/6844903965713252360">MySQL JDBC 连接</a></p>
<h2 id="创建示例数据库和表"><a href="#创建示例数据库和表" class="headerlink" title="创建示例数据库和表"></a>创建示例数据库和表</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建 boot 数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">	<span class="keyword">NOT</span> <span class="keyword">EXISTS</span> boot <span class="keyword">DEFAULT</span> CHARSET utf8 <span class="keyword">COLLATE</span> utf8_bin;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 选择 boot 数据库</span></span><br><span class="line">USE boot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建 user 表</span></span><br><span class="line"><span class="keyword">SET NAMES</span> utf8mb4;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span></span><br><span class="line"><span class="keyword">IF</span></span><br><span class="line">	<span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">	`id` <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">	`user_name` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`pasword` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	`salt` <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">	<span class="keyword">PRIMARY KEY</span> ( `id` ) </span><br><span class="line">) ENGINE = INNODB <span class="keyword">DEFAULT</span> CHARSET = utf8 <span class="keyword">COLLATE</span> = utf8_bin;</span><br><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS = <span class="number">1</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="1-3-0-多环境配置"><a href="#1-3-0-多环境配置" class="headerlink" title="1.3.0 多环境配置"></a>1.3.0 多环境配置</h1><p>详细参考<a href="https://juejin.cn/post/6844903891763625998">spring profile 与 maven profile 多环境管理</a></p>
<h2 id="spring-多环境配置"><a href="#spring-多环境配置" class="headerlink" title="spring 多环境配置"></a>spring 多环境配置</h2><p><strong>配置一个 dev 环境</strong></p>
<p>创建 <code>application-dev.properties</code> 文件，并将 mysql 相关配置迁移过来 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/TlaIN7.png" alt="img"></p>
<p><strong>使用 dev 环境</strong></p>
<p>在 <code>application-dev.properties</code> 指定要使用的环境</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/PKG3wR.png" alt="img"></p>
<blockquote>
<p>同理你也可以创建 test、prod 环境，但一般公共配置还是会放在 application.properties 中，只有非公共配置才会放在各自的环境中</p>
</blockquote>
<h2 id="maven-多环境配置"><a href="#maven-多环境配置" class="headerlink" title="maven 多环境配置"></a>maven 多环境配置</h2><p>spring boot 多环境配置有两个缺点</p>
<ol>
<li>每次切换环境要手动修改 <code>spring.profiles.active</code> 的值</li>
<li>打包的时候，要手动删除其它环境的配置文件，不然其它环境的敏感信息就都打包进去了</li>
</ol>
<p>而 maven 的 profile 可以解决这两个问题</p>
<h3 id="第一个问题"><a href="#第一个问题" class="headerlink" title="第一个问题"></a>第一个问题</h3><p><em><strong>“每次切换环境要手动修改<code>spring.profiles.active</code>的值”</strong></em></p>
<p>这个问题就可以通过配置 profile 解决，在pom的根节点下添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- activeByDefault 为 true 表示，默认激活 id为dev 的profile--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- properties 里面可以添加自定义节点，如下添加了一个env节点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个节点的值可以在maven的其他地方引用，可以简单理解为定义了一个叫env的变量 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">env</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如上，定义了三套环境，其中id为dev的是默认环境，三套环境中定义了叫 env的“变量”</p>
<p>如果你用的是idea编辑器，添加好后，maven控件窗口应该会多出一个 Profiles,其中默认值就是上面配置的dev</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/XvL7nF.png" alt="img"></p>
<p>最小化的 profiles 已经配置好了，通过勾选上图中的Profiles，就可以快速切换 maven的 profile 环境。</p>
<p>现在 maven profile 可以通过 勾选上图中的Profiles 快速切换环境</p>
<p>Spring Profile 还得通过 手动修改<code>spring.profiles.active</code>的值来切环境</p>
<p>现在的问题是怎样让 maven profile的环境与Spring Profile一一对应，达到切换maven profile环境时，Spring Profile环境也被切换了</p>
<p>还记得maven profile 中定义的 env “变量”吗,现在只需要把</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=dev</span><br></pre></td></tr></table></figure>

<p>改成</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring.profiles.active</span>=@env@</span><br></pre></td></tr></table></figure>

<p>就将maven profile 与 Spring Profile 环境关联起来了</p>
<p>当maven profile 将 环境切换成 test 时，在pom中定义的id为test的profile环境将被激活，在该环境下env的值是test，maven插件会将 @env@ 替换为 test，这样Spring Profile的环境也随之发生了改变。从上面可以看出，自定义的”变量”env的值还不能乱写，要与Spring Profile的环境相对应。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/q13RBD.png" alt="img"></p>
<p><strong>总结</strong></p>
<ul>
<li>第一步，在<code>pom</code>文件中配置 profiles</li>
<li>第二步，在<code>application.properties</code>配置文件中添加 <code>spring.profiles.active=@env@</code></li>
</ul>
<h3 id="第二个问题"><a href="#第二个问题" class="headerlink" title="第二个问题"></a>第二个问题</h3><p><em><strong>打包的时候，要手动删除其它环境的配置文件，不然其它环境的敏感信息就都打包进去了</strong></em></p>
<p>解决这个问题需要在pom根节点下中配置 build 信息</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--先排除application开头的配置文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--filtering 需要设置为 true，这样在include的时候，才会把</span></span><br><span class="line"><span class="comment">            配置文件中的@env@ 这个maven`变量`替换成当前环境的对应值  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--引入所需环境的配置文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$&#123;env&#125;.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>directory：资源文件所在目录</li>
<li>includes：需要包含的文件列表</li>
<li>excludes：需要排除的文件列表</li>
</ul>
<p>如上，配置了两个 <code>&lt;resource&gt;</code>，第一个先排除了src&#x2F;main&#x2F;resources目录下所有 application 开头是配置文件，第二个在第一个的基础上添加了所需的配置文件。注意 <code>application-$&#123;env&#125;.yml</code>,它是一个动态变化的值，随着当前环境的改变而改变，假如当前环境是 id叫 dev的 profile，那么env的值为 dev。</p>
<p>这样配置后，maven在build时，就会根据配置先排除掉指定的配置文件，然后根据当前环境添加所需要的配置文件。</p>
<h2 id="pom-文件-1"><a href="#pom-文件-1" class="headerlink" title="pom 文件"></a>pom 文件</h2><figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqlm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>boot<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Spring Boot Demo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!--maven 多环境--&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span> <span class="comment">&lt;!-- 为 true 表示，默认激活该 profile--&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span> <span class="comment">&lt;!-- properties 里面可以添加自定义节点，如下添加了一个env节点 --&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">env</span>&gt;</span> <span class="comment">&lt;!-- 这个节点的值可以在maven的其他地方引用，可以简单理解为定义了一个叫env的变量 --&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>test<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>test<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">env</span>&gt;</span>prod<span class="tag">&lt;/<span class="name">env</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--web--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--mysql--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--mybatis--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!--test--&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="comment">&lt;!--先排除application开头的配置文件--&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>application*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="comment">&lt;!--filtering 需要设置为 true，这样在include的时候，才会把配置文件中的@env@ 这个maven`变量`替换成当前环境的对应值--&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="comment">&lt;!--引入所需环境的配置文件--&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-$</span><span class="template-variable">&#123;env&#125;</span><span class="language-xml">.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>华为maven插件仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>huawei_plugin<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://mirrors.huaweicloud.com/repository/maven/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure>

<h1 id="1-4-0-多模块配置"><a href="#1-4-0-多模块配置" class="headerlink" title="1.4.0 多模块配置"></a>1.4.0 多模块配置</h1><p>稍微大一点的项目一般都会采用多模块的形式管理项目，将一个大型项目升级成多模块项目，一般需要两大步骤</p>
<ol>
<li>拆分现有项目</li>
<li>进行 <strong>maven 多模块配置</strong></li>
</ol>
<blockquote>
<p>关于<strong>如何拆分现有项目</strong>和<strong>maven 多模块配置</strong>的详细介绍请参考 <a href="https://juejin.cn/post/6844903970024980488">Maven 多模块配置、管理</a></p>
</blockquote>
<h2 id="拆分现有项目"><a href="#拆分现有项目" class="headerlink" title="拆分现有项目"></a>拆分现有项目</h2><p>我是按照功能拆分项目的，但由于该项目本身不大，所以我简单的拆分为 <strong>user 模块和 common 模块</strong></p>
<p>在boot下创建两个新的模块 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/jIfN1z.png" alt="img"></p>
<p>子模块的pom <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/26QxUd.png" alt="img"></p>
<p>此时，父模块的pom内容也发生了改变，添加了如下三行 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/D8QTvR.png" alt="img"></p>
<p>再来创建 common 模块，创建过程同上，我就不演示了,创建好之后，pom如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/9w9MDz.png" alt="img"></p>
<p>整个项目结构如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/u6PtzJ.png" alt="img"></p>
<p>下一步进行迁移工作，将原先 src 目录下面的内容迁移到对于的子模块中 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/cwvRoe.png" alt="img"></p>
<p>这里我放到 user 模块中，迁移过程中注意路径和命名规范，过程就不展示了，迁移之后，结构如下。 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/tbuJkH.png" alt="img"></p>
<h2 id="多模块配置"><a href="#多模块配置" class="headerlink" title="多模块配置"></a>多模块配置</h2><p>多模块配置遵守以下原则</p>
<ul>
<li>公共、通用配置一定要配置在父pom中</li>
<li>版本号由父 pom 统一管理</li>
</ul>
<p>如下图，蓝色背景的元素都会被子项目全部继承 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/jsOsQG.png" alt="img"></p>
<p>由于目前，只有 user 模块用到了如下依赖项，而 common 模块不需要用到这些依赖，所以，将依赖复制到 user 模块下，后删掉依赖 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/P84pRC.png" alt="img"></p>
<p><strong>build</strong>中的配置目前也是只有 user 模块用到，也复制到 user 模块下，后删掉 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/9Tnf3i.png" alt="img"></p>
<p>父项目已经配置完成了，接下来配置 user 模块，如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/jIFFov.png" alt="img"></p>
<p>common 模块用到的时候在配置</p>
<h2 id="多模块管理"><a href="#多模块管理" class="headerlink" title="多模块管理"></a>多模块管理</h2><p><strong>多模块环境管理</strong> 我们在父 pom 中配置了 maven 多环境，子模块会继承这些配置。之后，我们只需要在 maven 插件中切换环境，所有的子模块的 maven 环境都会被切换 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/14/pAe8jr.png" alt="img"></p>
<p><strong>多模块构建管理</strong> 在 maven 插件中，通过 boot 项目对所以子模块进行、编译、测试、打包、清理… <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/94zsV0.png" alt="img"></p>
<h1 id="1-5-0-集成-mybatis"><a href="#1-5-0-集成-mybatis" class="headerlink" title="1.5.0 集成 mybatis"></a>1.5.0 集成 mybatis</h1><p>集成 mybatis 一般需要5步</p>
<ol>
<li>引入依赖</li>
<li>创建 PO 层，存放我们的数据持久化对象</li>
<li>创建 DAO 层，存放数据库的增删改查方法</li>
<li>创建 mapper.xml 层, 对应增删改查语句</li>
<li>在启动类上配置 @MapperScan</li>
<li>其他。如配置 MyBatis Generator，用来帮我们生成 PO、DAO、Mapper.xml</li>
</ol>
<h2 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h2><p>在多模块项目中添加依赖要注意一下几点</p>
<ul>
<li>不要将依赖直接添加到父 pom 中，这样所以子模块都会继承该依赖</li>
<li>多个模块引用了统一个依赖，最好保证依赖的版本一致</li>
</ul>
<p>maven dependencyManagement 可以非常方便的管理多模块的依赖</p>
<blockquote>
<p>关于 maven dependencyManagement 请参考 <a href="https://juejin.cn/post/6844903965444816903">maven 依赖版本管理</a></p>
</blockquote>
<p>这里我就不在解释，直接应用了</p>
<ol>
<li><p>在父 pom 的根节点下, <strong>properties</strong> 里，定义mybatis-spring-boot-starter 版本号的变量</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">mybatis-spring-boot-starter.version</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/dz72JN.png" alt="img"></p>
</li>
<li><p>在父 pom 的根节点下，<strong>申明</strong> mybatis 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/ZKQezo.png" alt="img"></p>
</li>
<li><p>在 user 模块的 pom 文件中引入 mybatis 依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>由于 <strong>mybatis-spring-boot-starter</strong> 包含 <strong>spring-boot-starter-jdbc</strong> ，所以删除<strong>spring-boot-starter-jdbc</strong>依赖，保证依赖的整洁</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/Udl9pr.png" alt="img"></p>
<h2 id="依赖结构图-2"><a href="#依赖结构图-2" class="headerlink" title="依赖结构图"></a>依赖结构图</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1280fbe2516d4464acf313c5fd450c90~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>
<h2 id="创建对应的文件夹"><a href="#创建对应的文件夹" class="headerlink" title="创建对应的文件夹"></a>创建对应的文件夹</h2><p>如图</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/dYdApC.png" alt="img"></p>
<p><strong>com.wqlm.boot</strong></p>
<ul>
<li><strong>controller</strong> ：控制层</li>
<li><strong>po</strong> : 存放与数据库中表相对应的java对象</li>
<li><strong>dto</strong> : 存放数据传输对象，比如注册时，注册的信息可以用一个 dto 对象来接收</li>
<li><strong>dao</strong> : 存放操作数据库的接口</li>
<li><strong>service</strong> : 业务层</li>
<li><strong>vo</strong> : 存放业务返回结果对象</li>
<li><strong>qo</strong> : 封装了查询参数的对象</li>
</ul>
<p><strong>resources</strong></p>
<ul>
<li><strong>mapper</strong> : 存放mapper.xml 文件</li>
</ul>
<h2 id="配置-mybatis"><a href="#配置-mybatis" class="headerlink" title="配置 mybatis"></a>配置 mybatis</h2><p>mybatis 需要知道有那些类是 <strong>mapper</strong>！有两种方式可以告诉 mybatis。</p>
<p><strong>第一种</strong></p>
<p>在启动类上配置 <strong>@MapperScan</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 指定你的 mapper接口所在的 <span class="keyword">package</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.wqlm.boot.user.dao&quot;)</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/SNZ4na.png" alt="img"></p>
<p><strong>第二种</strong> 在接口上加 <code>@Mapper</code> 注解，如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/hWTvLA.png" alt="img"></p>
<blockquote>
<p>要我选我肯定选第一种配置方式，一劳永逸</p>
</blockquote>
<p>除此之外，还要告诉 mybatis ，你的 mapper.xml 文件在哪</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mybatis</span></span><br><span class="line"><span class="comment"># mapper.xml文件的位置</span></span><br><span class="line">mybatis.mapper-locations=classpath*<span class="symbol">:mapper/*</span>.xml</span><br></pre></td></tr></table></figure>

<p>由于这里的配置跟环境无关,所以应该配置在 <strong>application.properties</strong> 中 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/93Lrt4.png" alt="img"></p>
<h1 id="1-5-1-配置-MyBatis-Generator"><a href="#1-5-1-配置-MyBatis-Generator" class="headerlink" title="1.5.1 配置 MyBatis Generator"></a>1.5.1 配置 MyBatis Generator</h1><p>MyBatis Generator 是 MyBatis 提供的一个代码生成工具。可以帮我们生成 表对应的持久化对象(po)、操作数据库的接口(dao)、CRUD sql的xml(mapper)。</p>
<p>使用方法主要分为三步</p>
<ol>
<li>引入并配置 MyBatis Generator 插件</li>
<li>配置 MyBatis Generator Config 文件</li>
<li>使用 MyBatis Generator 插件</li>
</ol>
<p>详细说明请参考 <a href="https://juejin.im/editor/posts/5db694e3e51d452a2e25ba45">MyBatis Generator 超详细配置</a></p>
<p>这里只给出一种最终配置</p>
<h2 id="引入并配置-MyBatis-Generator-插件"><a href="#引入并配置-MyBatis-Generator-插件" class="headerlink" title="引入并配置 MyBatis Generator 插件"></a>引入并配置 MyBatis Generator 插件</h2><p>在user项目的pom文件的根节点下添加如下配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis的代码生成器的配置文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/mybatis-generator-config.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--允许覆盖生成的文件--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--将当前pom的依赖项添加到生成器的类路径中--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;includeCompileDependencies&gt;true&lt;/includeCompileDependencies&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mybatis-generator插件的依赖包--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;dependency&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;artifactId&gt;mybatis-generator-core&lt;/artifactId&gt;--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--&lt;version&gt;1.3.7&lt;/version&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--&lt;/dependency&gt;--&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- mysql的JDBC驱动 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/3kZllK.png" alt="img"></p>
<h2 id="配置-MyBatis-Generator-Config-文件"><a href="#配置-MyBatis-Generator-Config-文件" class="headerlink" title="配置 MyBatis Generator Config 文件"></a>配置 MyBatis Generator Config 文件</h2><p>在user项目的 <strong>resources</strong> 目录下，创建<strong>mybatis-generator-config.xml</strong>，内容如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis的代码生成器相关配置--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 引入配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;application-dev.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 一个数据库一个context,context的子元素必须按照它给出的顺序</span></span><br><span class="line"><span class="comment">        property*,plugin*,commentGenerator?,jdbcConnection,javaTypeResolver?,</span></span><br><span class="line"><span class="comment">        javaModelGenerator,sqlMapGenerator?,javaClientGenerator?,table+</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;myContext&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span> <span class="attr">defaultModelType</span>=<span class="string">&quot;flat&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 这个插件给生成的Java模型对象增加了equals和hashCode方法 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;plugin type=&quot;org.mybatis.generator.plugins.EqualsHashCodePlugin&quot;/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 注释 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否不生成注释 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 不希望生成的注释中包含时间戳 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;suppressDate&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 添加 db 表中字段的注释，只有suppressAllComments为false时才生效--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;addRemarkComments&quot; value=&quot;true&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jdbc连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;$&#123;spring.datasource.driverClassName&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;$&#123;spring.datasource.url&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;$&#123;spring.datasource.username&#125;&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;$&#123;spring.datasource.password&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--高版本的 mysql-connector-java 需要设置 nullCatalogMeansCurrent=true--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 类型转换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否使用bigDecimal，默认false。</span></span><br><span class="line"><span class="comment">                false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer</span></span><br><span class="line"><span class="comment">                true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--默认false</span></span><br><span class="line"><span class="comment">                false，将所有 JDBC 的时间类型解析为 java.util.Date</span></span><br><span class="line"><span class="comment">                true，将 JDBC 的时间类型按如下规则解析</span></span><br><span class="line"><span class="comment">                    DATE	                -&gt; java.time.LocalDate</span></span><br><span class="line"><span class="comment">                    TIME	                -&gt; java.time.LocalTime</span></span><br><span class="line"><span class="comment">                    TIMESTAMP               -&gt; java.time.LocalDateTime</span></span><br><span class="line"><span class="comment">                    TIME_WITH_TIMEZONE  	-&gt; java.time.OffsetTime</span></span><br><span class="line"><span class="comment">                    TIMESTAMP_WITH_TIMEZONE	-&gt; java.time.OffsetDateTime</span></span><br><span class="line"><span class="comment">                --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;useJSR310Types&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成实体类地址 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.wqlm.boot.user.po&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否让 schema 作为包的后缀，默认为false --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否针对string类型的字段在set方法中进行修剪，默认false --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成Mapper.xml文件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 生成 XxxMapper.java 接口--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.wqlm.boot.user.dao&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;enableSubPackages&quot; value=&quot;false&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- schema为数据库名，oracle需要配置，mysql不需要配置。</span></span><br><span class="line"><span class="comment">             tableName为对应的数据库表名</span></span><br><span class="line"><span class="comment">             domainObjectName 是要生成的实体类名(可以不指定，默认按帕斯卡命名法将表名转换成类名)</span></span><br><span class="line"><span class="comment">             enableXXXByExample 默认为 true， 为 true 会生成一个对应Example帮助类，帮助你进行条件查询，不想要可以设为false</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">schema</span>=<span class="string">&quot;&quot;</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--是否使用实际列名,默认为false--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;property name=&quot;useActualColumnNames&quot; value=&quot;false&quot; /&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/CvMq6e.png" alt="img"></p>
<h3 id="application-dev-properties-的配置"><a href="#application-dev-properties-的配置" class="headerlink" title="application-dev.properties 的配置"></a>application-dev.properties 的配置</h3><p>MyBatis Generator Config 引用的外部配置文件内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysql</span></span><br><span class="line"><span class="attr">spring.datasource.driverClassName</span>=com.mysql.cj.jdbc.Driver</span><br><span class="line"><span class="attr">spring.datasource.url</span>=jdbc:mysql://localhost:<span class="number">3306</span>/boot?useUnicode=<span class="literal">true</span>&amp;characterEncoding=utf-<span class="number">8</span>&amp;useSSL=<span class="literal">false</span>&amp;serverTimezone=Asia/Shanghai</span><br><span class="line"><span class="attr">spring.datasource.username</span>=root</span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="number">123456</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/1ytj1a.png" alt="img"></p>
<h2 id="使用-MyBatis-Generator-插件"><a href="#使用-MyBatis-Generator-插件" class="headerlink" title="使用 MyBatis Generator 插件"></a>使用 MyBatis Generator 插件</h2><p>配置好后，双击 maven 中的 MyBatis Generator 运行 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/chQ2RK.png" alt="img"></p>
<h1 id="1-5-2-集成-tk-mybatis-通用mapper"><a href="#1-5-2-集成-tk-mybatis-通用mapper" class="headerlink" title="1.5.2 集成 tk.mybatis (通用mapper)"></a>1.5.2 集成 tk.mybatis (通用mapper)</h1><p>上一节中，MyBatis Generator 为我们生成了一些常用的操作数据库的方法。其实我们也可以通过 集成 tk.mybatis (通用mapper) 来实现，集成之后，会有更多的通用方法，并且这些通用方法是不用配置mapper.xml 的。</p>
<p>springboot 集成 tk.mybatis (通用mapper) 一般需要3步</p>
<ol>
<li>引入依赖</li>
<li>配置 tk.mybatis 的 MyBatis Generator 插件</li>
<li>启动类上配置要扫描的 dao 路径</li>
<li>配置通用 Mapper</li>
</ol>
<blockquote>
<p><a href="https://link.juejin.cn/?target=https://github.com/abel533/Mapper/wiki/1.3-spring-boot">tk.mybatis 的 GitHub</a></p>
</blockquote>
<h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><p>老规矩，还是在父 pom 中配置 tk.mybatis 的版本并申明 tk.mybatis 的依赖 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/hhg631.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tk.mybatis.mapper-spring-boot-starter.version</span>&gt;</span>2.1.5<span class="tag">&lt;/<span class="name">tk.mybatis.mapper-spring-boot-starter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--申明依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--tk.mybatis 通用mapper--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;tk.mybatis.mapper-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后在 user 模块的 pom 中引入依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--tk.mybatis 通用mapper--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/NPi4ZQ.png" alt="img"></p>
<h2 id="配置-tk-mybatis-的-MyBatis-Generator-插件"><a href="#配置-tk-mybatis-的-MyBatis-Generator-插件" class="headerlink" title="配置 tk.mybatis 的 MyBatis Generator 插件"></a>配置 tk.mybatis 的 MyBatis Generator 插件</h2><p>tk.mybatis 为 MyBatis Generator 开发了一个插件，用于改变 MyBatis Generator 的原始生成策略，配置好之后，生成出来的文件更加精练、注释更加有意义。</p>
<p>整个配置过程分两步</p>
<ol>
<li>引入插件依赖</li>
<li>修改 MyBatis Generator Config</li>
</ol>
<h3 id="引入插件依赖"><a href="#引入插件依赖" class="headerlink" title="引入插件依赖"></a>引入插件依赖</h3><p>在原来的 MyBatis Generator 插件的 <strong>dependencies</strong> 里面添加如下依赖 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/oQ6vk7.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--4.15 是目前最新的版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>tk.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="修改-MyBatis-Generator-Config"><a href="#修改-MyBatis-Generator-Config" class="headerlink" title="修改 MyBatis Generator Config"></a>修改 MyBatis Generator Config</h3><p>主要有一下几点改动</p>
<p>首先是 <strong>targetRuntime</strong> 的值改为 <strong>MyBatis3Simple</strong>，<strong>defaultModelType</strong> 设置为 <strong>flat</strong> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/qS4fk6.png" alt="img"></p>
<p>如果 <code>targetRuntime=&quot;MyBatis3&quot;</code> 的话，生成出来的 mapper.xml 会多出一段无用代码，如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/nXQ6Zw.png" alt="img"></p>
<p>然后添加 tk.mybatis 插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span> <span class="attr">type</span>=<span class="string">&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--dao 要继承的接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mappers&quot;</span> <span class="attr">value</span>=<span class="string">&quot;tk.mybatis.mapper.common.Mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是否区分大小写，默认false--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;caseSensitive&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/grytMg.png" alt="img"></p>
<p>其他地方都不需要改动，配置好之后，运行 MyBatis Generator 插件，生成出来的文件如下</p>
<p><strong>po</strong> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/cXVeGj.png" alt="img"> 可以看到，相比与 MyBatis Generator 生成的注释，tk.mybatis 生成的注解跟简洁易懂。除此之外，它还多了几个注解</p>
<ul>
<li>**@Table(name &#x3D; “user”)**：意思是该po对应数据库的user表</li>
<li><strong>@Id</strong>：表示该属性对应user表的主键</li>
<li>**@Column(name &#x3D; “user_name”)**：表示该属性对应user表的 <strong>user_name</strong> 字段</li>
</ul>
<p><strong>dao</strong> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/HICidL.png" alt="img"> 相比于 MyBatis Generator 生成的代码，少了很多接口，但多继承了一个类，这个类就是你在 tk.mybatis 插件里面配置的类 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/7uYHxp.png" alt="img"> 你可能猜到了，少的那些接口，都在继承的这个<code>tk.mybatis.mapper.common.Mapper</code>类中有，如下图，userMapper 继承了这么多方法，而且这些方法都是可以直接使用的 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/OEiYUJ.png" alt="img"></p>
<p><strong>mapper.xml</strong> <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/RECl9n.png" alt="img"> 相比于 MyBatis Generator 少了很多代码</p>
<h2 id="启动类上配置要扫描的-dao-路径"><a href="#启动类上配置要扫描的-dao-路径" class="headerlink" title="启动类上配置要扫描的 dao 路径"></a>启动类上配置要扫描的 dao 路径</h2><p>这一步我们在集成 mybatis 时已经配置过了 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/mcGpvt.png" alt="img"></p>
<p>但是集成 tk.mybatis 后，需要使用 tk.mybatis 包下的 <code>@MapperScan</code> ,因此需要修改一下 <code>@MapperScan</code> 的包路径 ![img](&#x2F;Users&#x2F;xh&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20220315161228552.png)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tk.mybatis.spring.annotation.MapperScan;</span><br></pre></td></tr></table></figure>

<h2 id="配置通用-Mapper"><a href="#配置通用-Mapper" class="headerlink" title="配置通用 Mapper"></a>配置通用 Mapper</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/7cpwzb.png" alt="img"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通用 mapper</span></span><br><span class="line"><span class="comment"># 主键自增回写方法,默认值MYSQL</span></span><br><span class="line"><span class="string">mapper.identity=MYSQL</span></span><br><span class="line"><span class="comment"># 设置 insert 和 update 中，字符串类型!=&quot;&quot;才插入/更新,默认false</span></span><br><span class="line"><span class="comment">#mapper.not-empty=true</span></span><br></pre></td></tr></table></figure>

<p>tk.mybatis 至此就全部集成完了</p>
<h1 id="1-5-3-集成-pagehelper-分页插件"><a href="#1-5-3-集成-pagehelper-分页插件" class="headerlink" title="1.5.3 集成 pagehelper 分页插件"></a>1.5.3 集成 pagehelper 分页插件</h1><p>分页查询是web开发中一个很常见的功能，mybatis 虽然也可以实现分页，但那是基于内存的分页，即把数据一次性全查出来，然后放在内存中分多次返回。</p>
<p>而 pagehelper 分页插件是物理分页，是通过 sql 关键字来实现的。例如mysql中的<strong>limit</strong>，oracle中的<strong>rownum</strong>等。</p>
<blockquote>
<p>pagehelper 分页插件和 tk.mybatis 是通一个作者写的<a href="https://link.juejin.cn/?target=https://github.com/pagehelper/pagehelper-spring-boot">pagehelper项目地址</a></p>
</blockquote>
<p>集成 pagehelper 需要两步</p>
<ul>
<li>引入 pagehelper 依赖</li>
<li>配置 pagehelper</li>
</ul>
<h2 id="引入-pagehelper-依赖"><a href="#引入-pagehelper-依赖" class="headerlink" title="引入 pagehelper 依赖"></a>引入 pagehelper 依赖</h2><p>老规矩，父pom中定义依赖版本，并申明依赖 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/9zftKM.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">pagehelper-spring-boot-starter.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper-spring-boot-starter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>子模块中引入依赖 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/xFSjFs.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置-pagehelper"><a href="#配置-pagehelper" class="headerlink" title="配置 pagehelper"></a>配置 pagehelper</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/WTq9z3.png" alt="img"></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用的sql方言</span></span><br><span class="line"><span class="string">pagehelper.helperDialect=mysql</span></span><br><span class="line"><span class="comment"># 是否启用合理化，默认false，启用合理化时，如果 pageNum&lt;1会查询第一页，如果pageNum&gt;pages会查询最后一页</span></span><br><span class="line"><span class="string">pagehelper.reasonable=true</span></span><br><span class="line"><span class="comment"># 是否支持通过Mapper接口参数来传递分页参数，默认false</span></span><br><span class="line"><span class="comment">#pagehelper.supportMethodsArguments=true</span></span><br><span class="line"><span class="string">pagehelper.params=count=countSql</span></span><br></pre></td></tr></table></figure>

<p>更多配置请参考<a href="https://link.juejin.cn/?target=https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md">官网</a></p>
<h1 id="1-6-0-引入-lombok-插件"><a href="#1-6-0-引入-lombok-插件" class="headerlink" title="1.6.0 引入 lombok 插件"></a>1.6.0 引入 lombok 插件</h1><p>lombok 是一个简化代码的插件，能通过一个注解帮你生成 get、set、tostring、hash… 方法。</p>
<p>集成 lombok 十分简单</p>
<ol>
<li>引入 lombok 依赖</li>
<li>安装 ide 对应的 lombok 插件</li>
</ol>
<p>lombok 使用方法参考这篇文章 <a href="https://juejin.cn/post/6844903961602818061">lombok 插件</a></p>
<h2 id="引入-lombok-依赖"><a href="#引入-lombok-依赖" class="headerlink" title="引入 lombok 依赖"></a>引入 lombok 依赖</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/ZPPJwY.png" alt="img"></p>
<p>由于 <code>spring-boot-starter-parent</code> 中已经申明了lombok 依赖，我们只需要在子模块中引入就好了</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/1QmJ99.png" alt="img"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="安装-ide-对应的-lombok-插件"><a href="#安装-ide-对应的-lombok-插件" class="headerlink" title="安装 ide 对应的 lombok 插件"></a>安装 ide 对应的 lombok 插件</h2><h1 id="1-7-0-集成-redis"><a href="#1-7-0-集成-redis" class="headerlink" title="1.7.0 集成 redis"></a>1.7.0 集成 redis</h1><p>作为最常用的 nosql 数据库，Spring Boot 对 redis 做了非常好对支持，集成起来也很简单，只需要4步</p>
<ol>
<li>引入依赖</li>
<li>配置 redis</li>
<li>自定义 RedisTemplate (推荐)</li>
<li>自定义 redis 操作类 (推荐)</li>
</ol>
<p>详细的集成步骤我单独提出来写了篇文章，地址如下</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844903990090694663">Spring Boot 2.0 集成 redis</a></p>
</blockquote>
<h1 id="1-7-1-集成-spring-cache"><a href="#1-7-1-集成-spring-cache" class="headerlink" title="1.7.1 集成 spring cache"></a>1.7.1 集成 spring cache</h1><p>Spring Cache 是 Spring 为缓存场景提供的一套解决方案。通过使用 @CachePut、@CacheEvict、@Cacheable等注解实现对缓存的，存储、查询、删除等操作</p>
<p>由于我们已经引入 <strong>redis</strong> ，所以只需要简单配置一下，就可以使用 <strong>spring cache</strong></p>
<p>详细的集成步骤我单独提出来写了篇文章，地址如下(在 Spring Cache 那一节)</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844903990090694663">Spring Boot 2.0 集成 redis</a></p>
</blockquote>
<blockquote>
<p>当然，不用也可以选择不去集成</p>
</blockquote>
<h1 id="1-8-0-开发用户模块"><a href="#1-8-0-开发用户模块" class="headerlink" title="1.8.0 开发用户模块"></a>1.8.0 开发用户模块</h1><p>不同的系统对应不同的用户设计，掘金的用户系统和淘宝的用户系统肯定是不一样的，所以，该项目虽然是一个种子项目，但很难给出通用的用户模块设计。</p>
<p>因此，我转变思路，并不去追求什么通用的用户模块，而是力求在该模块中，将上面集成的技术，全部都应用起来。</p>
<p>这样，在以后使用到上面的某项技术的时候，也有一个参照。</p>
<h2 id="用户表"><a href="#用户表" class="headerlink" title="用户表"></a>用户表</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/IDz7HH.png" alt="img"> 建表语句在 <strong>配置 mysql</strong> 那一章</p>
<h2 id="添加-controller-、service-、dto"><a href="#添加-controller-、service-、dto" class="headerlink" title="添加 controller 、service 、dto"></a>添加 controller 、service 、dto</h2><p>先创建 controller 、service 、dto 目录 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/TPVPlm.png" alt="img"></p>
<p>先从注册接口开始写</p>
<p>注意校验参数一定要加 <code>@Valid</code> 注解 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/o8oi7N.png" alt="img"></p>
<p>其中 <code>@Data</code> 用到了 lombok 插件 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/hNzazO.png" alt="r"></p>
<p>数据库存的是密码加盐后的hash，也就是说就连我们自己也看不到用户的密码 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/YRibiI.png" alt="img"></p>
<h1 id="1-8-1-自定义全局状态码和业务结果类"><a href="#1-8-1-自定义全局状态码和业务结果类" class="headerlink" title="1.8.1 自定义全局状态码和业务结果类"></a>1.8.1 自定义全局状态码和业务结果类</h1><p>虽然向上面这样直接返回 <code>注册成功</code>、<code>注册失败</code> 也没有什么问题，但却不太优雅，因为其他接口返回的可能不是简单的字符串。</p>
<p>我们其实可以自定义一个业务结果类，所有的接口，都返回该业务结果对象，这个业务结果类，除了有业务结果外，还有业务执行状态、业务消息等。</p>
<p>除了业务结果类，我还建议创建全局状态码类，就想蚂蚁金服的api接口一样，调用失败会返回一个状态码，方便错误排查</p>
<h2 id="自定义全局状态码"><a href="#自定义全局状态码" class="headerlink" title="自定义全局状态码"></a>自定义全局状态码</h2><p>新建 enums 目录 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/JgReQh.png" alt="img"></p>
<p>创建 ApplicationEnum 全局状态码类，我这里只写了几个，之后可以往里面加 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/Nn0608.png" alt="m"></p>
<h2 id="创建业务结果类"><a href="#创建业务结果类" class="headerlink" title="创建业务结果类"></a>创建业务结果类</h2><p>如下，在 vo 目录下下创建 result 目录，并在里面创建业务结果类 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/3TxTv0.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/5v8woV.png" alt="img"></p>
<p>为了方便使用，再创建一个 SuccessResult 和一个 FailResult <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/03FPuP.png" alt="img"></p>
<h2 id="改造注册接口"><a href="#改造注册接口" class="headerlink" title="改造注册接口"></a>改造注册接口</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/YTSNwJ.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/eDPqi0.png" alt="img"></p>
<h1 id="1-8-2-统一异常处理"><a href="#1-8-2-统一异常处理" class="headerlink" title="1.8.2 统一异常处理"></a>1.8.2 统一异常处理</h1><p>业务执行过程中会产生的各种异常，对其进行统一处理是所有web项目的通用需求。Spring 提供了 @RestControllerAdvice、@ExceptionHandler 注解来帮助我们处理异常。</p>
<p>具体的异常处理该如何设计没有统一的标准，下面是我给出的设计，仅供参考。</p>
<p>我的做法是自定义一个异常类，然后在业务出错时抛出，最后在自定义异常处理类中处理。</p>
<blockquote>
<p>更多内容请参考 <a href="https://juejin.cn/post/6844903822545027080">基于spring 的统一异常处理</a></p>
</blockquote>
<h2 id="自定义异常类"><a href="#自定义异常类" class="headerlink" title="自定义异常类"></a>自定义异常类</h2><p>每一种异常都对于一种ApplicationEnum <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/VtXi3s.png" alt="img"></p>
<h2 id="自定义异常处理类"><a href="#自定义异常处理类" class="headerlink" title="自定义异常处理类"></a>自定义异常处理类</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/CJU0iG.png" alt="img"></p>
<p>如果一个异常能匹配多个 @ExceptionHandler 时，选择匹配深度最小的Exception(即最匹配的Exception)</p>
<h2 id="使用自定义异常"><a href="#使用自定义异常" class="headerlink" title="使用自定义异常"></a>使用自定义异常</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/CN6vw7.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/xuPmYc.png" alt="img"></p>
<h1 id="1-8-3-参数校验及异常处理"><a href="#1-8-3-参数校验及异常处理" class="headerlink" title="1.8.3 参数校验及异常处理"></a>1.8.3 参数校验及异常处理</h1><h2 id="参数校验"><a href="#参数校验" class="headerlink" title="参数校验"></a>参数校验</h2><p>首先在要校验的对象前加上 <code>@valid</code> 注解 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/CqdFZW.png" alt="img"></p>
<p>然后在要校验的对象中使用适当的注解 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/jsepFp.png" alt="img"></p>
<p>详细内容请参考</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844903961581846535">参数校验 Hibernate-Validator</a><br><a href="https://juejin.cn/post/6844904003310977031">Spring 参数校验详解</a></p>
</blockquote>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>如果参数绑定不成功或者校验不通过，就会抛出异常！但是默认抛出的异常包含很多敏感信息，如下： <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/bng0MW.png" alt="img"> 因此我们应该对常见的异常进行捕获后再封装。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/lJAMTX.png" alt="img"></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span><span class="string">` 是为了重写几个常见异常的默认处理方式。当然，你也可以直接通过 `</span><span class="meta">@ExceptionHandler</span>()<span class="string">` 拦截，这样就不用`</span><span class="keyword">extends</span> <span class="title class_">ResponseEntityExceptionHandler</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/RJAMIb.png" alt="img"> 一般只需要处理这三个异常就可以覆盖大部分需要手动处理参数异常的场景</p>
<ul>
<li>org.springframework.validation.BindException</li>
<li>org.springframework.web.bind.MethodArgumentNotValidException</li>
<li>javax.validation.ConstraintViolationException</li>
</ul>
<p>详细内容请参考</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844904003684302861">Spring 参数校验的异常处理</a></p>
</blockquote>
<h1 id="1-8-4-添加登陆、修改密码、获取用户信息的接口"><a href="#1-8-4-添加登陆、修改密码、获取用户信息的接口" class="headerlink" title="1.8.4 添加登陆、修改密码、获取用户信息的接口"></a>1.8.4 添加登陆、修改密码、获取用户信息的接口</h1><p>主要是些业务逻辑，没有什么指的说的，具体代码参考项目源码！唯一指的提一嘴的是 使用 <code>@Value(&quot;$&#123;&#125;&quot;)</code> 注解获取配置文件中的属性 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/e0WpMK.png" alt="img"></p>
<h1 id="1-8-5-添加认证拦截器"><a href="#1-8-5-添加认证拦截器" class="headerlink" title="1.8.5 添加认证拦截器"></a>1.8.5 添加认证拦截器</h1><p>有些接口我们希望只有登陆的用户能访问，解决方案一般是添加一个登陆拦截器。</p>
<p>方法也很简单，主要分为3步</p>
<ul>
<li>定义哪些接口需要认证(登陆后才能访问)，或者哪些接口不需要认证</li>
<li>自定义 <code>HandlerInterceptor</code> , 在访问接口前进行拦截处理</li>
<li>自定义 <code>WebMvcConfigurer</code> ，定义哪些接口需要拦截</li>
</ul>
<p>1.确定免认证url <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/Lvbex2.png" alt="img"></p>
<p>2.自定义 <code>HandlerInterceptor</code> ，对拦截到的请求进行token有效性校验 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/pKIykI.png" alt="img"></p>
<p>3.自定义 <code>WebMvcConfigurer</code> ，拦截除免认证url列表之外的所有请求 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/zPTm1U.png" alt="img"></p>
<h1 id="1-8-6-统一映射自定义配置"><a href="#1-8-6-统一映射自定义配置" class="headerlink" title="1.8.6 统一映射自定义配置"></a>1.8.6 统一映射自定义配置</h1><p>之前我们都是哪里需要用到 <code>properties</code> 中的配置，就在那里使用 <code>@Value(&quot;$&#123;&#125;&quot;)</code> 来获取。如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/BgYKIV.png" alt="img"></p>
<p>我们也可以创建一个自定义配置类，将所有 <code>properties</code> 中的自定义属性全部映射到对应的属性上，如下 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/ZxDYtO.png" alt="img"></p>
<p>然后使用时，直接访问该类 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/HcRk8e.png" alt="img"> </p>
<h1 id="1-9-0-配置日志"><a href="#1-9-0-配置日志" class="headerlink" title="1.9.0 配置日志"></a>1.9.0 配置日志</h1><p>spring boot 已经对日志系统进行了默认的配置，但是如果你想显示 sql 或将日志输出到文件就需要进行进一步配置。</p>
<p>详细内容请参考</p>
<blockquote>
<p><a href="https://juejin.cn/post/6844904031228264456">java 生态下的日志框架</a><br><a href="https://juejin.cn/post/6844904031224070157">Java 日志实现框架 Logback</a><br><a href="https://juejin.cn/post/6844904036580196359">Logback 配置样例</a><br><a href="https://juejin.cn/post/6844904037301616647">Spring Boot Logging</a></p>
</blockquote>
<h2 id="显示-sql"><a href="#显示-sql" class="headerlink" title="显示 sql"></a>显示 sql</h2><p>在 <code>application.properties</code> 中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># dao(com.wqlm.boot.user.dao) 层设置成 debug 级别以显示sql</span></span><br><span class="line"><span class="string">logging.level.com.wqlm.boot.user.dao=debug</span></span><br></pre></td></tr></table></figure>

<h2 id="输出日志到文件"><a href="#输出日志到文件" class="headerlink" title="输出日志到文件"></a>输出日志到文件</h2><p>在 <code>application.properties</code> 中配置</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 当前活动的日志文件名</span></span><br><span class="line"><span class="string">logging.file.name=logs/user/user.log</span></span><br><span class="line"><span class="comment"># 最多保留多少天的日志</span></span><br><span class="line"><span class="string">logging.file.max-history=30</span></span><br><span class="line"><span class="comment"># 单个日志文件最大容量</span></span><br><span class="line"><span class="string">logging.file.max-size=10MB</span></span><br></pre></td></tr></table></figure>

<h2 id="精细化配置"><a href="#精细化配置" class="headerlink" title="精细化配置"></a>精细化配置</h2><p>在 <code>application.properties</code> 中只能进行有限的配置，如果想进一步配置，就需要使用对应日志框架的配置文件了！</p>
<p>spring boot 使用 <code>logback</code> 作为日志实现框架，spring boot 推荐使用 <code>logback-spring.xml</code> 作为配置文件的名称。</p>
<p>以下是一个参考的配置样例</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- scan ：开启&quot;热更新&quot; scanPeriod：&quot;热更新&quot;扫描周期，默认 60 seconds(60秒)--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;300 seconds&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入颜色转换器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">conversionRule</span> <span class="attr">conversionWord</span>=<span class="string">&quot;clr&quot;</span> <span class="attr">converterClass</span>=<span class="string">&quot;org.springframework.boot.logging.logback.ColorConverter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义变量  name ：变量名   scope ： 在哪个环境中查找 source ： 使用哪个属性 defaultValue ：没找到时的默认值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">name</span>=<span class="string">&quot;env&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">source</span>=<span class="string">&quot;spring.profiles.active&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;env&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 应用名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;APP_NAME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;user&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义变量，用于配置日志输出格式，这个格式是尽量偏向 spring boot 默认的输出风格</span></span><br><span class="line"><span class="comment">    %date：日期，默认格式 yyyy-MM-dd hhh:mm:ss,SSS 默认使用本机时区，通过 %d&#123;yyyy-MM-dd hhh:mm:ss,SSS&#125; 来自定义</span></span><br><span class="line"><span class="comment">    %-5level：5个占位符的日志级别，例如&quot; info&quot;、&quot;error&quot;</span></span><br><span class="line"><span class="comment">    %thread : 输出日志的线程</span></span><br><span class="line"><span class="comment">    %class : 输出日志的类的完全限定名，效率低</span></span><br><span class="line"><span class="comment">    %method : 输出日志的方法名</span></span><br><span class="line"><span class="comment">    %line : 输出日志的行号，效率低</span></span><br><span class="line"><span class="comment">    %msg : 日志消息内容</span></span><br><span class="line"><span class="comment">    %n : 换行</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%date %-5level $&#123;PID:- &#125; --- [%thread] %class.%method/%line : %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 彩色日志格式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATTERN_COLOUR&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;$&#123;env&#125; %date %clr(%-5level) %magenta($&#123;PID:- &#125;) --- [%thread] %cyan(%class.%method/%line) : %msg%n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志输出器. ch.qos.logback.core.ConsoleAppender : 输出到控制台--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置日志输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN_COLOUR&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用的字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志输出器。ch.qos.logback.core.rolling.RollingFileAppender : 滚动输出到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ROLLING&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 活动中的日志文件名(支持绝对和相对路径) --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>logs/$&#123;APP_NAME&#125;/$&#123;APP_NAME&#125;.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略. ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy : 按照大小和时间滚动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 何时触发滚动，如何滚动，以及滚动文件的命名格式</span></span><br><span class="line"><span class="comment">            %d : 日期，默认格式 yyyy-MM-dd，通过 %d&#123;yyyy-MM-dd hhh:mm:ss&#125; 来自定义格式。logback 就是通过 %d 知道了触发滚动的时机</span></span><br><span class="line"><span class="comment">            %i : 单个滚动周期内的日志文件的序列号</span></span><br><span class="line"><span class="comment">            .zip : 将日志文件压缩成zip。不想压缩，可以使用.log 结尾</span></span><br><span class="line"><span class="comment">            如下每天0点以后的第一日志请求触发滚动，将前一天的日志打成 zip 压缩包存放在 logs/app1/backup 下，并命名为 app1_%d_%i.zip</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logs/$&#123;APP_NAME&#125;/backup/$&#123;APP_NAME&#125;_%d&#123;yyyy-MM-dd&#125;_%i.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--单个日志文件的最大大小--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--删除n个滚动周期之前的日志文件(最多保留前n个滚动周期的历史记录)--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在有 maxHistory 的限制下，进一步限制所有日志文件大小之和的上限，超过则从最旧的日志开始删除--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 使用的字符集 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 非 prod 环境下使用以下配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">&quot;!prod&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 记录器 name : 包名或类名， level : 要记录的日志的起始级别， additivity : 是否追加父类的 appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wqlm.boot.dao&quot;</span> <span class="attr">level</span>=<span class="string">&quot;debug&quot;</span> <span class="attr">additivity</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ROLLING&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根记录器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用 STDOUT、ROLLING 输出记录的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ROLLING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>相对路径的位置 <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/15/3OpOlj.png" alt="img"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>xkeysnail for ubuntu 键盘映射</title>
    <url>/posts/30ffdeaa/</url>
    <content><![CDATA[<h1 id="xkeysnail-for-ubuntu-键盘映射"><a href="#xkeysnail-for-ubuntu-键盘映射" class="headerlink" title="xkeysnail for ubuntu 键盘映射"></a>xkeysnail for ubuntu 键盘映射</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xkeysnail xkeysnail.py --device /dev/input/event4    <span class="string">&#x27;AT Translated Set 2 keyboard&#x27;</span> </span><br><span class="line">xhost +SI:localuser:root</span><br><span class="line">sudo xkeysnail --watch xkeysnail-gte60.py --device /dev/input/event24    <span class="string">&#x27;GT BLE60 0AEBCB Keyboard&#x27;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>设备</category>
      </categories>
      <tags>
        <tag>键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>1、【对线面试官】今天来聊聊Java注解</title>
    <url>/posts/dc033d1f/</url>
    <content><![CDATA[<h1 id="1、【对线面试官】今天来聊聊Java注解"><a href="#1、【对线面试官】今天来聊聊Java注解" class="headerlink" title="1、【对线面试官】今天来聊聊Java注解"></a>1、【对线面试官】今天来聊聊Java注解</h1><h2 id="什么是注解？"><a href="#什么是注解？" class="headerlink" title="什么是注解？"></a>什么是注解？</h2><ul>
<li>注解在我的理解下，就是代码中的特殊标记，这些标记可以在编译、类加载、运行时被读取，并执行相对应的处理。</li>
</ul>
<h2 id="开发中用到的注"><a href="#开发中用到的注" class="headerlink" title="开发中用到的注"></a>开发中用到的注</h2><ol>
<li>注解其实在开发中是非常常见的，比如我们在使用各种框架时（像我们Java程序员接触最多的还是Spring框架一套） ，就会用到非常多的注解，@Controller I@Param &#x2F; @Select等等</li>
<li>一些项目也用到lombok的注解，@SIf4j&#x2F;@Data等等</li>
<li>除了框架实现的注解，Java原生也有@ Overried、 @Deprecated、 @Functional Interface等基本注解</li>
<li>不过Java原生的基本注解大多数用于「标记」和「检查」<ul>
<li>原生Java除了这些提供基本注解之外，还有一种叫做元Annotation（元注解），所谓的元Annotation就是用来修饰注解的</li>
<li>常用的元Annotation有@Retention和@Target</li>
<li>@Retention注解可以简单理解为设置注解的生命周期，而@Target表示这个注解可以修饰哪些地方（比如方法、还是成员变量、还是包等等）</li>
</ul>
</li>
</ol>
<h2 id="自己定义过的注解，在项目里边用的"><a href="#自己定义过的注解，在项目里边用的" class="headerlink" title="自己定义过的注解，在项目里边用的"></a>自己定义过的注解，在项目里边用的</h2><ol>
<li>嗯，写过的。背景是这样的：我司有个监控告警系统，对外提供了客户端供我们自己使用。监控一般的指标就是QPS、RT和错误嘛。</li>
<li>原生的客户端需要在代码里指定上报这会导致这种监控的代码会跟业务代码混合，比较恶心。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// qps 上报</span></span><br><span class="line">    qps(params);</span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建上下文(模拟业务代码）</span></span><br><span class="line">    <span class="type">ProcessContext</span> <span class="variable">processContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">    <span class="type">UserModel</span> <span class="variable">userModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserModel</span>();</span><br><span class="line">    userModel.setAge(<span class="string">&quot;22&quot;</span>);</span><br><span class="line">    userModel.setName(userName);</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// rt 上报</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">    rt(endTime - startTime);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 出错上报</span></span><br><span class="line">    error(params);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>其实这种基础的监控信息，显然都可以通过AOP切面的方式去处理掉（可以看到都是方法级的）。而再用注解这个载体配置相关的信息，配合AOP解析就会比较优雅</p>
</li>
<li><p>要写自定义的注解，首先考虑我们是在什么时候解析这个注解。这就需要用到前面所说的@Retention注解，这个注解会修饰我们自定义注解生命周期。</p>
</li>
<li><p>@Retention注解传入的是RetentionPolic y枚举，该枚举有三个常量，分别是SOU RCE、 CLASS和RUNTIME</p>
</li>
<li><p>理解这块就得了解从.java文件到class文件再到class被jvm加载的过程了。下面的图描述着从.java文件到编译为class文件的过程</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/lW9KUH_20211025142411.png"></p>
</li>
<li><p>从上面的图可以发现有个「注解抽象语法树」，这里其实就会去解析注解，然后做处理的逻辑。</p>
</li>
<li><p>所以重点来了，如果你想要在编译期间处理注解相关的逻辑，你需要继承AbstractProcessor并实现process方法。比如可以看到lombok就用AnnotationProcessor继承了AbstractProcessor。</p>
</li>
<li><p>一般来说，只要自定义的注解中@Retention注解设置为SOURCE和CLASS这俩个级别，那么就需要继承并实现</p>
</li>
<li><p>因为SOURCE和CLASS这俩个级别等加载到jvm的时候，注解就被抹除了</p>
</li>
<li><p>从这里又引申出：lombok的实现原理就是在这（为什么使用了个@Data这样的注解就能有set&#x2F;get等方法了，就是在这里加上去的）</p>
</li>
</ol>
<h2 id="自定义注解的级别"><a href="#自定义注解的级别" class="headerlink" title="自定义注解的级别"></a>自定义注解的级别</h2><ol>
<li>一般来说，我们自己定义的注解都是RUNTIME级别的，因为大多数情况我们是根据运行时环境去做一些处理。</li>
<li>我们现实在开发的过程中写自定义注解需要配合反射来使用</li>
<li>因为反射是Java获取运行时的信息的重要手段</li>
<li>所以，我当时就用了自定义注解，在SpringAOP的逻辑处理中，判断是否带有自定义注解，如果有则将监控的逻辑写在方法的前后</li>
<li>这样，只要在方法上加上我的注解，那就可以有对方法监控的效果（RT、QPS、ERROR)</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;@annotation(com.sanwai.service.openapi.monitor.Monitor)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">antispan</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">functionName</span> <span class="operator">=</span> pjp.getSignature().getName();</span><br><span class="line">    Map&lt;String, String&gt; tags = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    logger.info(functionName);</span><br><span class="line"></span><br><span class="line">    tags.put(<span class="string">&quot;functionName&quot;</span>, functionName);</span><br><span class="line">    tags.put(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;done&quot;</span>);</span><br><span class="line"></span><br><span class="line">    monitor.sum(functionName, <span class="string">&quot;start&quot;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法执行开始时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        o = pjp.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="comment">//方法执行结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">        tags.put(<span class="string">&quot;flag&quot;</span>, <span class="string">&quot;fail&quot;</span>);</span><br><span class="line">        monitor.avg(<span class="string">&quot;rt&quot;</span>, tags, endTime - startTime);</span><br><span class="line"></span><br><span class="line">        monitor.sum(functionName, <span class="string">&quot;fail&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法执行结束时间</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">    monitor.avg(<span class="string">&quot;rt&quot;</span>, tags, endTime - startTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != o) &#123;</span><br><span class="line">        monitor.sum(functionName, <span class="string">&quot;done&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>注解是代码的特殊标记，可以在编译、类加载、运行时被读取</li>
<li>其实对应的就是RetentionPolicy枚举三种级别</li>
<li>SOURCE和CLASS级别需要继承AbstractProcessor，实现process方法去处理我们自定义的注解</li>
<li>而RUNTIME级别是我们日常开发用得最多了，配合Java反射机制可以在很多场景优化我们的代码</li>
</ol>
<h2 id="展示态度（嗯，总体来看，你对注解这块基础还是扎实的。）"><a href="#展示态度（嗯，总体来看，你对注解这块基础还是扎实的。）" class="headerlink" title="展示态度（嗯，总体来看，你对注解这块基础还是扎实的。）"></a>展示态度（嗯，总体来看，你对注解这块基础还是扎实的。）</h2><ul>
<li>主要是在工作中遇到注解的时候就多看看原理是怎么实现的，然后遇到业务机会，还是会写写，优化优化下代码</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客文章加密</title>
    <url>/posts/c30e6297/</url>
    <content><![CDATA[<h1 id="Hexo博客文章加密"><a href="#Hexo博客文章加密" class="headerlink" title="Hexo博客文章加密"></a>Hexo博客文章加密</h1><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>平时开发过程中遇到的一些问题，我都会整理到文档中。有些感觉不错的，会二次整理成文章发布到我的博客中。但是有些文章如果存在隐私内容，或者不打算公开的话，就不能放在博客中了。</p>
<p>我的博客是使用 <code>Hexo</code> 来搭建的，并不能设置某些文章不可见。但如果不在电脑旁或者出门没有带电脑又想要查看一下之前记录的内容，就很不方便了。</p>
<p>我也尝试在 <code>github</code> 上去找一些可以设置账户的开源的博客框架，但测试过一些后发现并没有符合自己需求的，而自己开发却没有时间。</p>
<p>思来想去，就想看看有没有插件能够实现 <code>Hexo</code> 博客的加密操作。最终让我找到了一款名为 <code>Hexo-Blog-Encrypt</code> 的插件。</p>
<p>为了防止以下的修改可能出现版本差异，这里我先声明我使用的 <code>Hexo</code> 版本信息：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">hexo</span>: <span class="number">4</span>.<span class="number">2</span>.<span class="number">1</span></span><br><span class="line"><span class="attribute">hexo</span>-cli: <span class="number">3</span>.<span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="attribute">next</span> theme version: <span class="number">7</span>.<span class="number">8</span>.<span class="number">0</span>+a7a948a</span><br><span class="line"><span class="attribute">hexo</span>-blog-encrypt: <span class="string">&quot;^3.1.6&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-blog-encrypt</span></span><br></pre></td></tr></table></figure>

<h4 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h4><p>该插件的使用也很方便，这里我仅作简单介绍，详细的可以查看官方文档。 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt">D0n9X1n&#x2F;hexo-blog-encrypt: Yet, just another hexo plugin for security.</a></p>
<p>要为一篇文章添加密码查看功能，只需要在文章信息头部添加 <code>password</code> 字段即可：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">hello</span> <span class="string">world</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2021-04-13 21:18:02</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">hello</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<hr>
<h4 id="全局加密配置"><a href="#全局加密配置" class="headerlink" title="全局加密配置"></a>全局加密配置</h4><p>分别为每篇文章设置密码，虽然很灵活，但是配置或者修改起来非常麻烦。为此，可以通过设置统一配置来实现全局加密。</p>
<p>通过添加指定 <code>tag</code> 的方式，可以为所有需要加密的文章添加统一加密操作。只需要在需要加密的文章中，添加设置的 <code>tag值</code> 即可。</p>
<p>在Hexo主配置文件 <code>_config.yml</code> 中添加如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Security</span></span><br><span class="line"><span class="attr">encrypt:</span> <span class="comment"># hexo-blog-encrypt</span></span><br><span class="line">  <span class="attr">silent:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">abstract:</span> <span class="string">这是一篇加密文章，需要密码才能继续阅读。</span></span><br><span class="line">  <span class="attr">message:</span> <span class="string">当前文章暂不对外可见，请输入密码后查看！</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">name:</span> <span class="string">private</span>, <span class="attr">password:</span> <span class="string">hello</span>&#125;</span><br><span class="line">  <span class="attr">wrong_pass_message:</span> <span class="string">抱歉，您输入的密码错误，请检查后重新输入。</span></span><br><span class="line">  <span class="attr">wrong_hash_message:</span> <span class="string">抱歉,</span> <span class="string">当前文章不能被校验,</span> <span class="string">不过您还是可以看看解密后的内容。</span></span><br></pre></td></tr></table></figure>

<p>之后，需要清除缓存后重新生成 <code>hexo clean &amp;&amp; hexo s -g</code>。</p>
<p>其中的 <code>tag</code> 部分：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- &#123;name: private, password: hello&#125;</span><br></pre></td></tr></table></figure>

<p>表示当在文章中指定了 <code>private</code> 这个 <code>tag</code> 后，该文章就会自动加密并使用对应的值 <code>hello</code> 作为密码，输入密码后才可查看。</p>
<p>相应的文章头部设置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Password</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-21 11:54:07</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">private</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="在全局加密配置下禁用某些文章的加密"><a href="#在全局加密配置下禁用某些文章的加密" class="headerlink" title="在全局加密配置下禁用某些文章的加密"></a>在全局加密配置下禁用某些文章的加密</h4><p>可能有这样的情况，属于 <code>private</code> 标签下的某篇文章在一段时间内想要开放访问。如果在描述中加上密码提示： <code>当前文章密码为xxx，请输入密码后查看</code> ，来让用户每次查看时都要先输入密码后再查看，这样的操作又会给访客带来不便。</p>
<p>这时可以单独设置允许某篇文章不设置密码。</p>
<p>只需要在使用 <code>加密tag</code> 的前提下，结合 <code>password</code> 来实现即可。在博客文章的头部添加 <code>password</code> 并设置为 <code>&quot;&quot;</code> 就能取消当前文章的 <code>Tag</code> 加密。</p>
<p>相应的设置示例如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="literal">No</span> <span class="string">Password</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-21 11:54:07</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">private</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h4 id="在全局加密配置下设置非全局密码"><a href="#在全局加密配置下设置非全局密码" class="headerlink" title="在全局加密配置下设置非全局密码"></a>在全局加密配置下设置非全局密码</h4><p>在全局加密配置下，我们可以通过设置多个 <code>加密tag</code> 来为多篇不同类型的文章设置相同的查看密码：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">tags:</span></span><br><span class="line">- &#123;name: private, password: hello&#125;</span><br><span class="line">- &#123;name: jiami, password: world&#125;</span><br><span class="line">- &#123;name: 加密, password: jiesuo&#125;</span><br></pre></td></tr></table></figure>

<p>那么可能有这样的场景：</p>
<p>属于 <code>private</code> 标签下的某篇文章想要设置成不一样的密码，防止用户恶意通过一个密码来查看同标签下的所有文章。此时，仍可以通过 <code>password</code> 参数来实现：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Password</span> <span class="string">Test</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-12-21 11:54:07</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">private</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">&quot;buyiyang&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<p>说明：</p>
<p>该文章通过tag值 <code>private</code> 做了加密，按说密码应该为 <code>hello</code> ，但是又在信息头中设置了 <code>password</code> ，因为配置的优先级是 <code>文章信息头 &gt; 按标签加密</code>，所以最后的密码为 <code>buyiyang</code> 。</p>
<hr>
<h4 id="解密后目录不显示"><a href="#解密后目录不显示" class="headerlink" title="解密后目录不显示"></a>解密后目录不显示</h4><p>在为某些文章设置了 <strong>加密后查看</strong> 之后，不经意间发现这些文章的目录在解密后却不显示了。</p>
<h4 id="探究原因"><a href="#探究原因" class="headerlink" title="探究原因"></a>探究原因</h4><p>从插件的 <code>github issues</code> 中我找到了相关的讨论：</p>
<ul>
<li><a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/16">解密后目录不会更新 · Issue #16 · D0n9X1n&#x2F;hexo-blog-encrypt</a></li>
</ul>
<p>原因：</p>
<blockquote>
<p>加密的时候，<code>post.content</code> 会变成加密后的串，所以原来的 <code>TOC</code> 生成逻辑就会针对加密后的内容。<br>所以这边我只能把原来的内容存进 <code>post.origin</code> 字段。</p>
</blockquote>
<p>找到文件 <code>themes/next/layout/_macro/sidebar.swig</code> ，编辑如下部分：</p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165143.png"><img src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165143.png" alt="20210418165143"></a></p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165143.png">20210418165143</a></p>
<p>插件 <code>hexo-blog-encrypt</code> 对文章内容进行加密后，会将原始文章内容保存到字段 <code>origin</code> 中，当生成 <code>TOC</code> 时，我们可以通过 <code>page.origin</code> 来得到原始内容，生成文章目录。</p>
<p>相应的代码为：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-inner&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name">set</span> display_toc = page.toc.enable and display_toc %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> display_toc %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (page.encrypt) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name">set</span> toc = toc(page.origin, &#123; class: &quot;nav&quot;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">else</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name">set</span> toc = toc(page.content, &#123; class: &quot;nav&quot;, list_number: page.toc.number, max_depth: page.toc.max_depth &#125;) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name">set</span> display_toc = toc.length &gt; 1 and display_toc %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;sidebar-nav motion-element&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>修改完成后，执行 <code>hexo clean &amp;&amp; hexo s -g</code> 并重新预览。</p>
<p>效果如下：</p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165529.png"><img src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165529.png" alt="20210418165529"></a></p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418165529.png">20210418165529</a></p>
<p>不过，这样的效果貌似不是我想要的。我理想中的效果应该是：</p>
<ul>
<li>当文章加密后，访客只能看到侧边栏中的 <code>站点概览</code> 部分，不需要看到 <code>文章目录</code> 部分。</li>
<li>当文章解密后，访客则可以看到 <code>站点概览</code> 和 <code>文章目录</code> 两部分。</li>
</ul>
<p>而现在加密后的文章未解密之前也可以看到 <code>文章目录</code> ，虽然该目录不可点击。</p>
<p>当然，如果你不是很介意，那么到这里就可以结束了。如果你和我一样有一些 <strong>追求完美的强迫症</strong> 的话，我们继续。</p>
<h5 id="如何优化"><a href="#如何优化" class="headerlink" title="如何优化"></a>如何优化</h5><p>查看了 <code>hexo-blog-encrypt</code> 相关的 <code>issues</code> ，我找到了一种 <strong>折中</strong> 的解决方法。</p>
<p>从 issue <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/67#issuecomment-463893408">Archer主题解密后TOC依旧不显示（已按手册修改）</a> 中我们可以知道：</p>
<p>我们可以在文章加密的前提下，通过将目录部分加入到一个 <code>不可见的div</code> 中来实现 <code>隐藏目录</code> 的效果。在源码中的 <a href="https://github.com/D0n9X1n/hexo-blog-encrypt/blob/479ccd4cf522adc8f667cfa06290f057a219cb88/lib/hbe.js#L207">hexo-blog-encrypt&#x2F;lib&#x2F;hbe.js</a> 部分我们也可以看到，解密后通过设置 <code>id</code> 值为 <code>toc-div</code> 的元素为 <code>display:inline</code> 来控制显示隐藏。</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (page.encrypt) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-div&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">else</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-div&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">xxx这里是目录部分xxx</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>对文件 <code>themes/next/layout/_macro/sidebar.swig</code> 修改后的代码如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="comment">&lt;!--noindex--&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-toc-wrap sidebar-panel&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (page.encrypt) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-div&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display:none&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">else</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;toc-div&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> display_toc %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-toc motion-element&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; toc &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="comment">&lt;!--/noindex--&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>但这种方法并不是完全的加密，而是采用 <code>障眼法</code> 的方式，通过查看html源文件还是可以看到目录内容的，只是不显示罢了。</p>
<p>对于这个问题，<code>hexo-blog-encrypt</code> 插件的作者也作了说明：<a href="https://github.com/D0n9X1n/hexo-blog-encrypt/issues/162">next 主题内没有 article.ejs 文件【TOC 相关】 · Issue #162 · D0n9X1n&#x2F;hexo-blog-encrypt</a></p>
<h5 id="只好妥协"><a href="#只好妥协" class="headerlink" title="只好妥协"></a>只好妥协</h5><p>因为该插件中目前只有一个参数 <code>page.encrypt</code> 可以用来判断当前的文章是否进行了 <strong>加密处理</strong> ，而不能获知该文章当前是处于 <strong>加密后的锁定</strong> 状态，还是处于 <strong>加密后的解锁</strong> 状态。如果再有一个参数结合起来一起处理就好了。</p>
<p>所以，目前只能在解锁前隐藏目录，解锁后再显示目录。但在解锁前目录区域还是会展开，只是没有内容显示罢了。</p>
<hr>
<h4 id="让加密文章显示加密提示"><a href="#让加密文章显示加密提示" class="headerlink" title="让加密文章显示加密提示"></a>让加密文章显示加密提示</h4><p>类似于我的博客文章列表中的 <code>文章置顶</code> 的提示效果，考虑在文章列表中对加密的文章增加类似的 <code>加密</code> 提示信息。</p>
<p>上面对于文章的加密处理，一方面是在 <code>配置文件</code> 中添加的 <code>tag</code> 全局配置，另一方面是在单个 <code>md源文件</code> 中添加的 <code>password</code> 参数。所以我们需要对这两种情况分别做处理。</p>
<h5 id="对于password参数的情况"><a href="#对于password参数的情况" class="headerlink" title="对于password参数的情况"></a>对于password参数的情况</h5><p>针对于 <code>password</code> 字段，参考获取其他字段的方法，比如获取标题用 <code>post.title</code> ，获取置顶用 <code>post.top</code> ，那么获取 <code>password</code> 就是 <code>post.password</code> 了。</p>
<p>可以参考我之前添加置顶提示信息的操作，对文件 <code>themes/next/layout/_macro/post.swig</code> 的修改如下：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# 加密文章添加提示信息-for password #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.password %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<h5 id="对于tag标签的情况"><a href="#对于tag标签的情况" class="headerlink" title="对于tag标签的情况"></a>对于tag标签的情况</h5><p>针对于 <code>tag</code> 标签的获取，可以从文件 <code>themes/next/layout/_macro/post.swig</code> 中找到类似的处理方法：</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml">&#123;%- for tag in post.tags.toArray() %&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">url_for</span>(<span class="name">tag.path</span>) &#125;&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; <span class="name">tag_indicate</span> &#125;&#125;</span><span class="language-xml"> </span><span class="template-variable">&#123;&#123; <span class="name">tag.name</span> &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&#123;%- endfor %&#125;</span></span><br></pre></td></tr></table></figure>

<p>即可以用最简单的 <strong>遍历法</strong> 来处理：</p>
<p>我们获取到配置文件中设置的所有 <code>加密tag值</code> ，再找到文章中的 <code>tag标签</code> 。二者一对比，有匹配的项则说明该文章设置了 <code>tag值</code> 加密。</p>
<h5 id="swig文件"><a href="#swig文件" class="headerlink" title="swig文件"></a>swig文件</h5><p>要在 <code>.swig</code> 文件中实现相应的对比逻辑，就需要了解其使用的语法格式。而对于 <code>swig</code> 文件，使用的是 <code>Swig</code> 语法。</p>
<blockquote>
<p><code>Swig</code> 是一个非常棒的、类似 <code>Django/jinja</code> 的 <code>node.js</code> 模板引擎。</p>
</blockquote>
<p>不过看到这个代码库 <a href="https://github.com/paularmstrong/swig">paularmstrong&#x2F;swig: Take a swig of the best template engine for JavaScript.</a> 已经 <code>归档</code> 了。</p>
<p>但因为 <code>Swig</code> 是类似于 <code>jinja</code> 的模板引擎，那么我们直接去参考 <code>jinja</code> 的语法就可以了。</p>
<ul>
<li><a href="http://docs.jinkan.org/docs/jinja2/templates.html">模板设计者文档 — Jinja2 2.7 documentation</a></li>
</ul>
<h5 id="最终实现"><a href="#最终实现" class="headerlink" title="最终实现"></a>最终实现</h5><p>获取全局配置中 <code>encrypt.tags</code> 的值：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (config.encrypt) and (config.encrypt.tags) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ctag <span class="keyword">in</span> config.encrypt.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; ctag.name &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>在文章列表中获取当前文章包含的 <code>tags</code> 列表：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ptag <span class="keyword">in</span> post.tags.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="template-variable">&#123;&#123; ptag.name &#125;&#125;</span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于其中展示的文本格式，可以参考已有的 <code>发表于</code> <code>更新于</code> 这些副标题的格式来实现。</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;far fa-calendar&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span>发表于<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span> <span class="attr">title</span>=<span class="string">&quot;创建时间：2021-02-28 11:18:43 / 修改时间：11:41:19&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated datePublished&quot;</span> <span class="attr">datetime</span>=<span class="string">&quot;2021-02-28T11:18:43+08:00&quot;</span>&gt;</span>2021-02-28<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>对其进行优化，我们只需要显示提示文字，不需要后面的带下划线部分，最终得到的就是：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>整合上面的代码，对于文章中包含 <code>password</code> 的文档，通过如下方式来显示：</p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170147.png"><img src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170147.png" alt="20210418170147"></a></p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170147.png">20210418170147</a></p>
<p>相应代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# 加密文章添加提示信息-for password #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.password %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于文章中包含指定加密 <code>tags</code> 的文档，通过如下方式来显示：</p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170209.png"><img src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170209.png" alt="20210418170209"></a></p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170209.png">20210418170209</a></p>
<p>相应代码：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# 加密文章添加提示信息-for config tags #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    // 获取全局配置中的加密tag</span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (config.encrypt) and (config.encrypt.tags) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ctag <span class="keyword">in</span> config.encrypt.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        // 判断当前文章中是否包含tags</span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ptag <span class="keyword">in</span> post.tags.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            // 如果有相同的tag值</span></span><br><span class="line"><span class="language-xml">            </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (ctag.name == ptag.name) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">              // 显示加密提示信息</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                      <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>对于两种都有的文档，我们只需要通过一个 <code>判断</code> 来处理就好了：优先判断文档中的 <code>password</code> 字段。当文档中包含 <code>password</code> 时，就说明是加密文章；否则就去判断配置文件看是否为加密文章。</p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170330.png"><img src="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170330.png" alt="20210418170330"></a></p>
<p><a href="https://gitee.com/leafney/blogimage/raw/master/blog/20210418170330.png">20210418170330</a></p>
<p>最后的代码为：</p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# 加密文章添加提示信息-for password #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.password %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">else</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="comment">&#123;# 加密文章添加提示信息-for config tags #&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (config.encrypt) and (config.encrypt.tags) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ctag <span class="keyword">in</span> config.encrypt.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> post.tags %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name"><span class="name">for</span></span> ptag <span class="keyword">in</span> post.tags.toArray() %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;%- <span class="name"><span class="name">if</span></span> (ctag.name == ptag.name) %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-text&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&#x27;#FD7E13&#x27;</span>&gt;</span>[加密]<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">  </span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<p>稍微不好的一点就是，上面的操作是通过 <code>两个for循环</code> 来处理的，会导致一些性能问题。不过这个操作是在编译过程 <code>hexo g</code> 的时候来处理的，不影响博客浏览，也就可以忽略了。</p>
<hr>
<h4 id="更换图标"><a href="#更换图标" class="headerlink" title="更换图标"></a>更换图标</h4><p>对于需要显示的图标，可以从网站 <a href="https://fontawesome.com/icons">Icons | Font Awesome</a> 中获取。</p>
<p>例如，我这里选择的是 <code>锁</code> 的icon图标，得到的代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fas fa-lock&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
]]></content>
  </entry>
  <entry>
    <title>Hexo博客进阶：为 Next 主题添加 Waline 评论系统</title>
    <url>/posts/a07389a8/</url>
    <content><![CDATA[<h1 id="Hexo博客进阶：为-Next-主题添加-Waline-评论系统"><a href="#Hexo博客进阶：为-Next-主题添加-Waline-评论系统" class="headerlink" title="Hexo博客进阶：为 Next 主题添加 Waline 评论系统"></a>Hexo博客进阶：为 Next 主题添加 Waline 评论系统</h1><p> 发表于 2022-01-20 分类于 <a href="https://qianfanguojin.top/categories/Hexo%E5%8D%9A%E5%AE%A2/">Hexo博客</a> 阅读次数： 44 Waline： 本文字数： 2.2k 阅读时长 ≈ 4 分钟</p>
<p>文章发出之后，往往我们想要得到读者更多地反馈，那么拥有一个评论系统是至关重要的。</p>
<p>本篇带大家通过一些简单的配置，在 Hexo Next 主题下添加 Waline 评论系统。</p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的 <a href="https://qianfanguojin.top/2019/07/23/Hexo%E5%8D%9A%E5%AE%A2%E8%BF%9B%E9%98%B6%EF%BC%9A%E4%B8%BANext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0Valine%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F/?highlight=valine">Hexo博客进阶：为Next主题添加Valine评论系统 | 谢同学的博客 (qianfanguojin.top)</a> 文章中，我叙述了如何 在 Next主题下配置 Valine 评论系统。</p>
<p>但是，根据读者反馈，Valine 评论系统在 Next 主题高版本 (7.+) 以上已没有支持，且 Valine 已经很久没有更新维护了。不过，有大佬在 Valine 的基础之上开发了 <a href="https://waline.js.org/">Waline</a> 。<br>这次，我们就来描述如何快速上手安装配置更加人性化且带后端的 <a href="https://waline.js.org/">Waline</a> 评论系统。</p>
<h2 id="1-第一步，配置评论数据库"><a href="#1-第一步，配置评论数据库" class="headerlink" title="1. 第一步，配置评论数据库"></a>1. 第一步，配置评论数据库</h2><p><code>Waline</code> 和 Valine 一样，也是支持基于 <a href="https://leancloud.app/">LeanCloud</a> 作为数据存储的，但是 <code>Waline</code> 支持的部署方式更多：</p>
<table>
<thead>
<tr>
<th></th>
<th>Waline</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td><strong>Client</strong></td>
<td><strong>Server</strong></td>
<td><strong>Storage</strong></td>
</tr>
<tr>
<td><a href="https://waline.js.org/">@waline&#x2F;client</a></td>
<td><a href="https://vercel.com/">Vercel</a></td>
<td><a href="https://leancloud.app/">LeanCloud</a></td>
</tr>
<tr>
<td><a href="https://minivaline.js.org/">MiniValine</a></td>
<td><a href="https://deta.sh/">Deta</a></td>
<td><a href="https://clodbase.net/">CloudBase</a></td>
</tr>
<tr>
<td><a href="https://github.com/asforest/AprilComment">AprilComment</a></td>
<td><a href="https://cloudbase.net/">CloudBase</a></td>
<td><a href="https://mongodb.com/">MongoDB</a></td>
</tr>
<tr>
<td></td>
<td><a href="https://inspirecloud.com/">InspireCloud</a></td>
<td>MySQL</td>
</tr>
<tr>
<td></td>
<td><a href="https://railway.app/">Railway</a></td>
<td>SQLite</td>
</tr>
<tr>
<td></td>
<td><a href="https://render.com/">Render</a></td>
<td>PostgreSQL</td>
</tr>
<tr>
<td></td>
<td>Docker</td>
<td><a href="https://github.com/">GitHub</a></td>
</tr>
<tr>
<td></td>
<td>Virtual Host</td>
<td><a href="https://docs.deta.sh/docs/base/about">Deta Base</a></td>
</tr>
<tr>
<td></td>
<td></td>
<td><a href="https://inspirecloud.com/docs/nodejs/database/quickstart.html">InspireCloud</a></td>
</tr>
</tbody></table>
<p>为了方便，这里我只讲述最简单，零成本的数据库建立方法。</p>
<p>我们需要注册一个 <a href="https://console.leancloud.app/register">Leancloud 国际版 </a>的账号，注意，一定要是 <strong>国际版</strong>，国内版需要绑定备案的域名，比较麻烦。具体可以在注册时的左上角看到：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201202316763.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201202316763.png" alt="img"></a></p>
<p>注册完成后，登录，然后我们找到<code>创建应用</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/others/20210815161252.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/others/20210815161252.png" alt="img"></a></p>
<p>在这里填写你的应用名称,名称可以自己定义，然后，下面选择<code>开发版</code> 点击<code>创建</code>。</p>
<p>然后点击应用进入设置。</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/others/202108151614201.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/others/202108151614201.png" alt="img"></a></p>
<p>点击应用凭证，取得我们 <code>AppKey</code> 、<code>App id</code> 、以及 <code>MasterKey</code> ：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211139993.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211139993.png" alt="img"></a></p>
<p>数据库配置完毕，接下来安装服务端。</p>
<h2 id="2-安装服务端"><a href="#2-安装服务端" class="headerlink" title="2. 安装服务端"></a>2. 安装服务端</h2><p>由上面的表格可以看到，<code>Waline</code> 支持多种服务端，为了最简便上手，我们使用第一种方式，即在 <code>Vercl</code> 上安装服务端。首先，点击下面的按钮，一键部署：</p>
<p><a href="https://vercel.com/import/project?template=https://github.com/walinejs/waline/tree/main/example"><img src="https://vercel.com/button" alt="Vercel"></a></p>
<p>应该需要注册一个账号，支持使用 <code>Github</code> 账号直接登录：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211306146.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211306146.png" alt="img"></a></p>
<p>登录后重新点进来，点击 <code>Create</code>：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211309809.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211309809.png" alt="img"></a></p>
<p>然后等待下面 <code>Deploy</code> 构建完成，点击 <code>Go to Dashboard</code></p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211313406.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211313406.png" alt="img"></a></p>
<p>找到 Settings &#x3D;&gt; Environment Variables，配置环境变量：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211314501.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211314501.png" alt="img"></a></p>
<p>我们需要配置三个环境变量，对应如下表：</p>
<table>
<thead>
<tr>
<th>Lean Cloud</th>
<th>Vercel Environment</th>
</tr>
</thead>
<tbody><tr>
<td>AppID</td>
<td>LEAN_ID</td>
</tr>
<tr>
<td>AppKey</td>
<td>LEAN_KEY</td>
</tr>
<tr>
<td>MasterKey</td>
<td>LEAN_MASTER_KEY</td>
</tr>
</tbody></table>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211330222.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211330222.png" alt="img"></a></p>
<blockquote>
<p>提示</p>
<p>如果你使用 LeanCloud 国内版，请额外配置 <code>LEAN_SERVER</code> 环境变量，值为你绑定好的域名。</p>
</blockquote>
<p>为了使环境变量生效，我们需要重新构建一次。在上方找到 Deployments ，选择第一个右边的三个点，点击 Redeploy 。</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211333672.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211333672.png" alt="img"></a></p>
<p>等待其构建结束，然后记住 <code>DOMAINS</code> 中的域名地址：</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211413737.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211413737.png" alt="img"></a></p>
<p>好了，服务端部署到此结束，下面我们开始在 <code>Hexo Next</code> 主题中配置客户端。</p>
<h2 id="3-在Hexo-Next主题中配置"><a href="#3-在Hexo-Next主题中配置" class="headerlink" title="3. 在Hexo Next主题中配置"></a>3. 在Hexo Next主题中配置</h2><p>由于 Next 主题中并不自带 <code>Waline</code> 的评论配置，我们需要安装官方提供的插件。在 <code>Hexo</code> 根目录执行：</p>
<figure class="highlight autoit"><table><tr><td class="code"><pre><span class="line">npm install <span class="symbol">@waline</span>/hexo-<span class="keyword">next</span></span><br></pre></td></tr></table></figure>

<p>找到 Next 的主题配置文件，在最后加上</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Waline</span></span><br><span class="line"><span class="comment"># For more information: https://waline.js.org, https://github.com/walinejs/waline</span></span><br><span class="line"><span class="attr">waline:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#是否开启</span></span><br><span class="line">  <span class="attr">serverURL:</span> <span class="string">waline-server-pearl.vercel.app</span> <span class="comment"># Waline #服务端地址，我们这里就是上面部署的 Vercel 地址</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">请文明评论呀</span> <span class="comment"># #评论框的默认文字</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># 头像风格</span></span><br><span class="line">  <span class="attr">meta:</span> [<span class="string">nick</span>, <span class="string">mail</span>, <span class="string">link</span>] <span class="comment"># 自定义评论框上面的三个输入框的内容</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># 评论数量多少时显示分页</span></span><br><span class="line">  <span class="attr">lang:</span> <span class="string">zh-cn</span> <span class="comment"># 语言, 可选值: en, zh-cn</span></span><br><span class="line">  <span class="comment"># Warning: 不要同时启用 `waline.visitor` 以及 `leancloud_visitors`.</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span> <span class="comment"># 文章阅读统计</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># 如果为 false , 评论数量只会在当前评论页面显示, 主页则不显示</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [] <span class="comment"># 设置用户评论时必填的信息，[nick,mail]: [nick] | [nick, mail]</span></span><br><span class="line">  <span class="attr">libUrl:</span> <span class="comment"># Set custom library cdn url</span></span><br></pre></td></tr></table></figure>

<p>重新部署 <code>Hexo</code> ，就可以看到结果了。</p>
<blockquote>
<p>据反馈，Hexo 似乎在 8.x 的版本使用 waline 比较稳定，如果出现 <code>hexo g</code> 出错，可尝试升级 hexo 版本。</p>
</blockquote>
<h2 id="4-登录服务端"><a href="#4-登录服务端" class="headerlink" title="4. 登录服务端"></a>4. 登录服务端</h2><p>由于 <code>Waline</code> 有服务端，支持评论管理。我们需要注册一个账号作为管理员。</p>
<p>找到评论框，点击 <code>登录</code> 按钮，会弹出一个窗口，找到用户注册，默认第一个注册的用户为管理员，所以部署好一定要记得及时注册。</p>
<p><a href="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211432511.png"><img src="https://cdn.jsdelivr.net/gh/qianfanguojin/ImageHosting_1/hexo/202201211432511.png" alt="img"></a></p>
<p>注册好，登录之后即可进入评论管理的后台，可以对评论进行管理。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>经典动态规划：打家劫舍系列问题</title>
    <url>/posts/5cd5216c/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="e53fc1e6e345957f0230ba06119f11eeaa4ab4c496441ffcbab6c2578d111785"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next 主题博客个性化配置(2022年更新版本)</title>
    <url>/posts/75999130/</url>
    <content><![CDATA[<h1 id="Hexo-Next-主题博客个性化配置-2022年更行版本"><a href="#Hexo-Next-主题博客个性化配置-2022年更行版本" class="headerlink" title="Hexo-Next 主题博客个性化配置(2022年更行版本)"></a>Hexo-Next 主题博客个性化配置(2022年更行版本)</h1><h2 id="网页预览："><a href="#网页预览：" class="headerlink" title="网页预览："></a>网页预览：</h2><p><a href="https://swimminghao.netlify.app/">swimminghao.netlify.app</a><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/01/rRBwpH.png" alt="在这里插入图片描述"><br>因为本人比较喜欢简介风格的，所以整个界面都是<code>简约风格</code>的，一个好的博客，应该让人一眼就能看清楚技术分类,文章也应该就是文章，<code>让人能够最好的阅读你的博客</code> 这才是我们应该做的，所以没有太多花里胡哨的东西。</p>
<p><strong>使用工具：</strong></p>
<p><strong>Git<br>Github<br>visual studio code<br>Chrome</strong></p>
<h2 id="Hexo简易安装"><a href="#Hexo简易安装" class="headerlink" title="Hexo简易安装"></a>Hexo简易安装</h2><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><p><strong>软件版本</strong></p>
<p><strong>HEXO: 6.0.6<br>Hero-theme-next: 8.10.0</strong></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h1 id="主题下载安装"><a href="#主题下载安装" class="headerlink" title="主题下载安装"></a>主题下载安装</h1><p>进入命令行，下载 <a href="https://so.csdn.net/so/search?q=NexT&spm=1001.2101.3001.7020">NexT</a> 主题，输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next/ themes/next</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件<code>_config.yml</code>，找到如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: landscape =&gt; next</span><br></pre></td></tr></table></figure>

<p>将 landscape 修改为 next 即可。</p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>在 Hexo 中有<strong>两份</strong>主要的配置文件，其名称都是 <strong>_config.yml</strong>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的站点配置；另一份位于主<strong>题目录下</strong>，这份配置由主题作者提供，主要用于配置主题相关的选项。</p>
<p>为了描述方便，在以下说明中，将前者称为 **<code>站点配置文件</code>**， 后者称为 **<code>主题配置文件</code>**。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/hexo/_config.yml</span><br><span class="line">/hexo/themes/next/_config.yml</span><br></pre></td></tr></table></figure>

<h2 id="修改语言"><a href="#修改语言" class="headerlink" title="修改语言"></a>修改语言</h2><p>打开站点配置文件，搜索 language，找到如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">author: authorName</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>

<h2 id="新建标签及分类界面"><a href="#新建标签及分类界面" class="headerlink" title="新建标签及分类界面"></a>新建标签及分类界面</h2><p>打开 <strong>主题配置文件</strong>，搜索 menu，找到如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || fa fa-home</span><br><span class="line">  about: /about/ || fa fa-user</span><br><span class="line">  tags: /tags/ || fa fa-tags</span><br><span class="line">  categories: /categories/ || fa fa-th</span><br><span class="line">  archives: /archives/ || fa fa-archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class="line">  sitemap: /sitemap.xml || fa fa-sitemap</span><br><span class="line">  <span class="comment">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>

<p>把 tags 和 categories 前面的 # 删除，</p>
<h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>next 主题自带<strong>四种样式</strong>。</p>
<p>在主题配置文件<code>/next/_config.yml</code>中查找：<code>scheme</code>，找到如下代码：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line">scheme: Muse</span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br><span class="line">选择你喜欢的一种样式，去掉前面的 <span class="comment">#，其他主题前加上 # 即可。</span></span><br></pre></td></tr></table></figure>

<h2 id="隐藏网页底部-powered-By-Hexo-x2F-强力驱动"><a href="#隐藏网页底部-powered-By-Hexo-x2F-强力驱动" class="headerlink" title="隐藏网页底部 powered By Hexo &#x2F; 强力驱动"></a>隐藏网页底部 powered By Hexo &#x2F; 强力驱动</h2><p>打开 themes&#x2F;next&#x2F;layout&#x2F;_partials&#x2F;footer.njk</p>
<p>找到：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;\%- <span class="keyword">if</span> theme.footer.powered %&#125;</span><br><span class="line">  &lt;div class=<span class="string">&quot;powered-by&quot;</span>&gt;</span><br><span class="line">    &#123;\%- <span class="type">set</span> <span class="variable">next_site</span> <span class="operator">=</span> <span class="string">&#x27;https://theme-next.js.org&#x27;</span> <span class="keyword">if</span> theme.scheme === <span class="string">&#x27;Gemini&#x27;</span> <span class="keyword">else</span> <span class="string">&#x27;https://theme-next.js.org/&#x27;</span> + theme.scheme | lower + <span class="string">&#x27;/&#x27;</span> %&#125;</span><br><span class="line">    &#123;&#123;- __(<span class="string">&#x27;footer.powered&#x27;</span>, next_url(<span class="string">&#x27;https://hexo.io&#x27;</span>, <span class="string">&#x27;Hexo&#x27;</span>) + <span class="string">&#x27; &amp; &#x27;</span> + next_url(next_site, <span class="string">&#x27;NexT.&#x27;</span> + theme.scheme)) &#125;&#125;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&#123;\%- endif %&#125;</span><br></pre></td></tr></table></figure>

<p>把这段代码首尾分别加上：<code>&lt;!--</code> 和<code>--&gt;</code>，或者直接删除。</p>
<h2 id="主页文章添加阴影"><a href="#主页文章添加阴影" class="headerlink" title="主页文章添加阴影"></a>主页文章添加阴影</h2><p>参考： <a href="https://www.jianshu.com/p/64caf29fdd0c">Hexo NexT 主题美化记录</a><br>打开<code>themes\next\source\css\_common\components\post\index.styl</code>文件，将<code>post-block</code>更改为如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">if</span> <span class="string">(hexo-config(&#x27;motion.transition.post_block&#x27;))</span> &#123;</span><br><span class="line">    <span class="string">.post-block</span>&#123;</span><br><span class="line">        <span class="attr">margin-top:</span> <span class="string">60px;</span></span><br><span class="line">        <span class="attr">margin-bottom:</span> <span class="string">60px;</span></span><br><span class="line">        <span class="attr">padding:</span> <span class="string">25px;</span></span><br><span class="line">        <span class="string">background:rgba(255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.9</span><span class="string">)</span> <span class="string">none</span> <span class="string">repeat</span> <span class="string">scroll</span> <span class="type">!important;</span> <span class="string">//添加透明效果</span></span><br><span class="line">        <span class="string">-webkit-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">5px</span> <span class="string">rgba(202</span>, <span class="number">203</span>, <span class="number">203</span>, <span class="number">.5</span><span class="string">);</span></span><br><span class="line">        <span class="string">-moz-box-shadow:</span> <span class="number">0</span> <span class="number">0</span> <span class="string">5px</span> <span class="string">rgba(202</span>, <span class="number">203</span>, <span class="number">204</span>, <span class="number">.5</span><span class="string">);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="string">.pagination</span>, <span class="string">.comments</span> &#123;</span><br><span class="line">      <span class="attr">opacity:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h2 id="页脚增加网站运行时间统计"><a href="#页脚增加网站运行时间统计" class="headerlink" title="页脚增加网站运行时间统计"></a>页脚增加网站运行时间统计</h2><ol>
<li>打开<code>themes/next/layout/_partials/footer.njk</code>文件，在如下图位置加入代码：</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;\%- <span class="keyword">if</span> config.<span class="property">symbols_count_time</span>.<span class="property">total_symbols</span> or config.<span class="property">symbols_count_time</span>.<span class="property">total_time</span> %&#125;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;wordcount&quot;</span>&gt;</span><br><span class="line">  &#123;\%- <span class="keyword">if</span> config.<span class="property">symbols_count_time</span>.<span class="property">total_symbols</span> %&#125;</span><br><span class="line">  &lt;span <span class="keyword">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-chart-line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &#123;\%- <span class="keyword">if</span> theme.<span class="property">symbols_count_time</span>.<span class="property">item_text_total</span> %&#125;</span><br><span class="line">      &lt;span&gt;&#123;&#123; <span class="title function_">__</span>(<span class="string">&#x27;symbols_count_time.count_total&#x27;</span>) + <span class="title function_">__</span>(<span class="string">&#x27;symbol.colon&#x27;</span>) &#125;&#125;&lt;/span&gt;</span><br><span class="line">    &#123;\%- endif %&#125;</span><br><span class="line">    &lt;span title=<span class="string">&quot;&#123;&#123; __(&#x27;symbols_count_time.count_total&#x27;) &#125;&#125;&quot;</span>&gt;&#123;&#123; <span class="title function_">symbolsCountTotal</span>(site) &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &#123;\%- endif %&#125;</span><br><span class="line"></span><br><span class="line">  &#123;\%- <span class="keyword">if</span> config.<span class="property">symbols_count_time</span>.<span class="property">total_time</span> %&#125;</span><br><span class="line">  &lt;span <span class="keyword">class</span>=<span class="string">&quot;post-meta-item&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-coffee&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">    &#123;\%- <span class="keyword">if</span> theme.<span class="property">symbols_count_time</span>.<span class="property">item_text_total</span> %&#125;</span><br><span class="line">      &lt;span&gt;&#123;&#123; <span class="title function_">__</span>(<span class="string">&#x27;symbols_count_time.time_total&#x27;</span>) &#125;&#125; &amp;asymp;&lt;/span&gt;</span><br><span class="line">    &#123;\%- endif %&#125;</span><br><span class="line">    &lt;span title=<span class="string">&quot;&#123;&#123; __(&#x27;symbols_count_time.time_total&#x27;) &#125;&#125;&quot;</span>&gt;&#123;&#123; <span class="title function_">symbolsTimeTotal</span>(site, config.<span class="property">symbols_count_time</span>.<span class="property">awl</span>, config.<span class="property">symbols_count_time</span>.<span class="property">wpm</span>, <span class="title function_">__</span>(<span class="string">&#x27;symbols_count_time.time_minutes&#x27;</span>)) &#125;&#125;&lt;/span&gt;</span><br><span class="line">  &lt;/span&gt;</span><br><span class="line">  &#123;\%- endif %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&#123;\%- endif %&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此位置插入代码</span></span><br><span class="line"></span><br><span class="line">&#123;\%- <span class="keyword">if</span> theme.<span class="property">busuanzi_count</span>.<span class="property">enable</span> %&#125;</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;busuanzi-count&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>倒计时代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;span id=<span class="string">&quot;sitetime&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">javascript</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">siteTime</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">window</span>.<span class="built_in">setTimeout</span>(<span class="string">&quot;siteTime()&quot;</span>, <span class="number">1000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> seconds = <span class="number">1000</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> minutes = seconds * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> hours = minutes * <span class="number">60</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> days = hours * <span class="number">24</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> years = days * <span class="number">365</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> today = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayYear = today.<span class="title function_">getFullYear</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayMonth = today.<span class="title function_">getMonth</span>()+<span class="number">1</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayDate = today.<span class="title function_">getDate</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayHour = today.<span class="title function_">getHours</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todayMinute = today.<span class="title function_">getMinutes</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> todaySecond = today.<span class="title function_">getSeconds</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">/* Date.UTC() -- 返回date对象距世界标准时间(UTC)1970年1月1日午夜之间的毫秒数(时间戳)</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        year - 作为date对象的年份，为4位年份值</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        month - 0-11之间的整数，做为date对象的月份</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        day - 1-31之间的整数，做为date对象的天数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        hours - 0(午夜24点)-23之间的整数，做为date对象的小时数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        minutes - 0-59之间的整数，做为date对象的分钟数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        seconds - 0-59之间的整数，做为date对象的秒数</span></span></span></span><br><span class="line"><span class="comment"><span class="language-javascript"><span class="language-xml">        microseconds - 0-999之间的整数，做为date对象的毫秒数 */</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> t1 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2022</span>,<span class="number">01</span>,<span class="number">04</span>,<span class="number">00</span>,<span class="number">00</span>,<span class="number">00</span>); <span class="comment">//你的建站时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> t2 = <span class="title class_">Date</span>.<span class="title function_">UTC</span>(todayYear,todayMonth,todayDate,todayHour,todayMinute,todaySecond);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diff = t2-t1;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffYears = <span class="title class_">Math</span>.<span class="title function_">floor</span>(diff/years);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffDays = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff/days)-diffYears*<span class="number">365</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffHours = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days)/hours);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffMinutes = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours)/minutes);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> diffSeconds = <span class="title class_">Math</span>.<span class="title function_">floor</span>((diff-(diffYears*<span class="number">365</span>+diffDays)*days-diffHours*hours-diffMinutes*minutes)/seconds);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;sitetime&quot;</span>).<span class="property">innerHTML</span>=<span class="string">&quot; Run for &quot;</span>+diffYears+<span class="string">&quot; Year &quot;</span>+diffDays+<span class="string">&quot; Days &quot;</span>+diffHours+<span class="string">&quot; Hours &quot;</span>+diffMinutes+<span class="string">&quot; m &quot;</span>+diffSeconds+<span class="string">&quot; s&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">siteTime</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>在<code>themes\next\source\css\main.styl</code>文件中给倒计时添加样式</li>
</ol>
<p><strong>不生效</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#sitetime</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(left, <span class="number">#aa4b6b</span>, <span class="number">#6b6b83</span>, <span class="number">#3b8d99</span>);</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text;</span><br><span class="line">  -webkit-text-fill-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="浏览页面显示当前浏览进度"><a href="#浏览页面显示当前浏览进度" class="headerlink" title="浏览页面显示当前浏览进度"></a>浏览页面显示当前浏览进度</h2><p>打开 themes&#x2F;next&#x2F;_config.yml，搜索关键字 <code>scrollpercent</code>，把 false 改为 true。</p>
<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/02/SIVZj0.png" alt="在这里插入图片描述"></p>
<h2 id="Local-Search本地搜索"><a href="#Local-Search本地搜索" class="headerlink" title="Local Search本地搜索"></a>Local Search本地搜索</h2><p>安装插件<code>hexo-generator-searchdb</code>,执行以下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save	</span><br></pre></td></tr></table></figure>

<p>修改<code>hexo/_config.yml</code>站点配置文件，新增以下内容到任意位置：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>编辑 <strong>主题配置文件</strong>，启用本地搜索功能：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/02/b1OAJr.png" alt="在这里插入图片描述"></p>
<h2 id="设置网站图标"><a href="#设置网站图标" class="headerlink" title="设置网站图标"></a>设置网站图标</h2><p>在 <a href="https://www.easyicon.cc/">EasyIcon</a> 中找一张（32 * 32）的 ico 图标，或者去别的网站下载或者制作，并将图标名称改为 favicon.ico，然后把图标放在 <code>/themes/next/source/images</code> 里，并且修改主题配置文件：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">Put</span> <span class="string">your</span> <span class="string">favicon.ico</span> <span class="string">into</span> <span class="string">`hexo-site/source/`</span> <span class="string">directory.</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/favicon.ico</span></span><br></pre></td></tr></table></figure>

<h2 id="修改文章底部的-号的标签，改为图标"><a href="#修改文章底部的-号的标签，改为图标" class="headerlink" title="修改文章底部的#号的标签，改为图标"></a>修改文章底部的#号的标签，改为图标</h2><p>修改模板<code>/themes/next/layout/_macro/post.swig</code></p>
<p>搜索 <code>rel=&quot;tag&quot;&gt;&#123;&#123; tag_indicate &#125;&#125;</code>，将 <code>&#123;&#123; tag_indicate &#125;&#125;</code> 换成<code>&lt;i class=&quot;fa fa-tag&quot;&gt;&lt;/i&gt;</code></p>
<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/02/IPgd1C.png" alt="在这里插入图片描述"></p>
<h1 id="文章分享功能"><a href="#文章分享功能" class="headerlink" title="文章分享功能"></a>文章分享功能</h1><p>打开<code>themes/next/_config.yml</code> 搜索关键字<code>needmoreshare2</code> 修改为下面设置</p>
<p>用npm卸载掉<code>hexo-next-share</code>，搜索所有<code>hexo-next-share</code>文件夹删除干净，然后切换到<strong>网站文件夹</strong>下，运行<code>npm install theme-next/hexo-next-share --save</code>,将以下代码都复制进<strong>主题配置文件</strong>里</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># NeedMoreShare2</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/theme-next-needmoreshare2</span></span><br><span class="line"><span class="comment"># For more information: https://github.com/revir/need-more-share2</span></span><br><span class="line"><span class="comment"># iconStyle: default | box</span></span><br><span class="line"><span class="comment"># boxForm: horizontal | vertical</span></span><br><span class="line"><span class="comment"># position: top / middle / bottom + Left / Center / Right</span></span><br><span class="line"><span class="comment"># networks:</span></span><br><span class="line"><span class="comment"># Weibo | Wechat | Douban | QQZone | Twitter | Facebook | Linkedin | Mailto | Reddit | Delicious | StumbleUpon | Pinterest</span></span><br><span class="line"><span class="comment"># GooglePlus | Tumblr | GoogleBookmarks | Newsvine | Evernote | Friendfeed | Vkontakte | Odnoklassniki | Mailru</span></span><br><span class="line"><span class="attr">needmoreshare:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css</span></span><br><span class="line">  <span class="attr">postbottom:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">middleCenter</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line">  <span class="attr">float:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">iconStyle:</span> <span class="string">default</span></span><br><span class="line">      <span class="attr">boxForm:</span> <span class="string">horizontal</span></span><br><span class="line">      <span class="attr">position:</span> <span class="string">middleCenter</span></span><br><span class="line">      <span class="attr">networks:</span> <span class="string">Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Likely Share</span></span><br><span class="line"><span class="comment"># See: https://ilyabirman.net/projects/likely/, https://github.com/ilyabirman/Likely</span></span><br><span class="line"><span class="comment"># Likely supports four looks, nine social networks, any button text.</span></span><br><span class="line"><span class="comment"># You are free to modify the text value and order of any network.</span></span><br><span class="line"><span class="attr">likely:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.css</span></span><br><span class="line">  <span class="attr">look:</span> <span class="string">light</span> <span class="comment"># available values: normal, light, small, big</span></span><br><span class="line">  <span class="attr">networks:</span></span><br><span class="line">    <span class="attr">twitter:</span> <span class="string">Tweet</span></span><br><span class="line">    <span class="attr">facebook:</span> <span class="string">Share</span></span><br><span class="line">    <span class="attr">linkedin:</span> <span class="string">Link</span></span><br><span class="line">    <span class="attr">gplus:</span> <span class="string">Plus</span></span><br><span class="line">    <span class="attr">vkontakte:</span> <span class="string">Share</span></span><br><span class="line">    <span class="attr">odnoklassniki:</span> <span class="string">Class</span></span><br><span class="line">    <span class="attr">telegram:</span> <span class="string">Send</span></span><br><span class="line">    <span class="attr">whatsapp:</span> <span class="string">Send</span></span><br><span class="line">    <span class="attr">pinterest:</span> <span class="string">Pin</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># share.js</span></span><br><span class="line"><span class="comment"># See: https://github.com/overtrue/share.js</span></span><br><span class="line"><span class="comment"># networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span></span><br><span class="line"><span class="attr">sharejs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">cdn:</span></span><br><span class="line">    <span class="attr">js:</span> <span class="string">//cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.js</span></span><br><span class="line">    <span class="attr">css:</span> <span class="string">//cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.css</span></span><br><span class="line">  <span class="attr">networks:</span> <span class="string">weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span></span><br><span class="line">  <span class="attr">wechat_qrcode:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">share.title</span></span><br><span class="line">    <span class="attr">prompt:</span> <span class="string">share.prompt</span></span><br></pre></td></tr></table></figure>

<p>效果图：<br><code>postbottom</code>为文章末尾分享 <code>float</code>则是在页面侧端分享<br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/02/ce3s7Z.png" alt="在这里插入图片描述"></p>
<h2 id="文章加密访问"><a href="#文章加密访问" class="headerlink" title="文章加密访问"></a>文章加密访问</h2><p>参考链接： <a href="https://swimminghao.netlify.app/posts/c30e6297/">hexo文章加密访问</a></p>
<h2 id="增加文章字数统计及阅读时常功能"><a href="#增加文章字数统计及阅读时常功能" class="headerlink" title="增加文章字数统计及阅读时常功能"></a>增加文章字数统计及阅读时常功能</h2><p>安装字数统计插件 <code>npm i hexo-symbols-count-time</code><br>在<code>hexo</code>的<code>_config.yml</code>下找到<code># Extensions</code>在下面配置插件配置如下</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字数统计插件 npm i hexo-symbols-count-time</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 文章时长统计</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span> <span class="comment"># 全局字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span> <span class="comment"># 全局时长统计</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>  <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<h2 id="文章置顶功能"><a href="#文章置顶功能" class="headerlink" title="文章置顶功能"></a>文章置顶功能</h2><p>移除默认安装的插件：</p>
<p><code>npm uninstall hexo-generator-index --save</code><br>安装新插件:</p>
<p><code>npm install hexo-generator-index-pin-top --save</code><br>最后编辑有这需求的相关文章时，在Front-matter（文件最上方以—分隔的区域）加上一行：</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="literal">top</span>: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>如果你置顶了多篇，怎么控制顺序呢？设置top的值（大的在前面），比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Post a.md</span><br><span class="line">title: a</span><br><span class="line">top: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"># Post b.md</span><br><span class="line">title: b</span><br><span class="line">top: <span class="number">10</span></span><br><span class="line"><span class="number">1234567</span></span><br></pre></td></tr></table></figure>

<p>文章 b 便会显示在文章 a 的前面</p>
<p>设置置顶图标<br>打开<code>/themes/next/layout/_macro/post.swig</code>文件，在<code>&lt;div class=&quot;post-meta-container&quot;&gt;</code>下方，插入如下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;\% <span class="keyword">if</span> post.<span class="property">top</span> %&#125;</span><br><span class="line">    &lt;i <span class="keyword">class</span>=<span class="string">&quot;fa fa-thumb-tack&quot;</span>&gt;&lt;/i&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">7D26CD</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">&#123;\% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/02/FmHSJT.png" alt="在这里插入图片描述"></p>
<h2 id="修改-Read-More-按钮样式"><a href="#修改-Read-More-按钮样式" class="headerlink" title="修改[Read More]按钮样式"></a>修改[Read More]按钮样式</h2><p>修改<code>themes/next/source/css/_common/components/post/index.styl</code>文件，加入自定义样式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// <span class="selector-attr">[Read More]</span>按钮样式</span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">border</span>: none <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">transition-property</span>: unset;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.post-button</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>) <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: inset <span class="number">0px</span> <span class="number">0px</span> <span class="number">10px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.35</span>);</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">90deg</span>, <span class="number">#a166ab</span> <span class="number">0%</span>, <span class="number">#ef4e7b</span> <span class="number">25%</span>, <span class="number">#f37055</span> <span class="number">50%</span>, <span class="number">#ef4e7b</span> <span class="number">75%</span>, <span class="number">#a166ab</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/03/ymZvXQ.png" alt="在这里插入图片描述"></p>
<h2 id="修改-阅读全文-前显示文字数量即位置"><a href="#修改-阅读全文-前显示文字数量即位置" class="headerlink" title="修改 阅读全文 前显示文字数量即位置"></a>修改 阅读全文 前显示文字数量即位置</h2><p>打开 <code>themes/next/_config.yml</code>，搜索关键字 <code>auto_excerpt</code>， 修改length即可修改阅读全文前显示文字数量</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure>

<p><strong>或者在文章中任意位置添加<code>&lt;!-- more --&gt;</code></strong></p>
<p>建议在文章中加入 <code>&lt;!-- more --&gt;</code><br>自定义 [Read More] 按钮之前要显示的内容！</p>
<h2 id="修改链接文字样式"><a href="#修改链接文字样式" class="headerlink" title="修改链接文字样式"></a>修改链接文字样式</h2><p>打开<code>themes/next/source/css/_common/components/post/index.styl</code>添加以下代码:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">.post-body</span> <span class="string">p</span> <span class="string">a&#123;</span></span><br><span class="line"> <span class="attr">color:</span> <span class="comment">#0593d3;</span></span><br><span class="line"> <span class="attr">border-bottom:</span> <span class="string">none;</span></span><br><span class="line"> <span class="string">&amp;:hover</span> &#123;</span><br><span class="line">   <span class="attr">color:</span> <span class="comment">#ff106c;</span></span><br><span class="line">   <span class="attr">text-decoration:</span> <span class="string">underline;</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/03/6Ulm5b.png" alt="在这里插入图片描述"></p>
<h2 id="头像设置圆形-停留旋转效果"><a href="#头像设置圆形-停留旋转效果" class="headerlink" title="头像设置圆形,停留旋转效果"></a>头像设置圆形,停留旋转效果</h2><p>修改next主题配置文件,修改成以下代码:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/lion.png</span></span><br><span class="line">  <span class="comment"># lion.png放置在next/source/images文件夹下</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/03/lQxmpv.png" alt="在这里插入图片描述"></p>
<h2 id="增加近期文章"><a href="#增加近期文章" class="headerlink" title="增加近期文章"></a>增加近期文章</h2><p>hexo主站<code>source</code> 目录下创建 <code>_data/sidebar.njk</code> 文件，加入如下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&#123;# recent posts #&#125;</span><br><span class="line">&#123;\% if theme<span class="selector-class">.recent_posts</span> %&#125;</span><br><span class="line">  &lt;<span class="selector-tag">div</span> class=&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme<span class="selector-class">.recent_posts_layout</span>  &#125;&#125;&quot;&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span> class=&quot;links-of-blogroll-title&quot;&gt;</span><br><span class="line">      &lt;!-- modify <span class="attribute">icon</span> <span class="selector-tag">to</span> fire by szw --&gt;</span><br><span class="line">      &lt;<span class="selector-tag">i</span> class=&quot;fa fa-history fa-&#123;&#123; theme<span class="selector-class">.recent_posts_icon</span> | lower &#125;&#125;&quot; aria-hidden=&quot;true&quot;&gt;&lt;/<span class="selector-tag">i</span>&gt;</span><br><span class="line">      &#123;&#123; theme<span class="selector-class">.recent_posts_title</span> &#125;&#125;</span><br><span class="line">    &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span> class=&quot;links-of-blogroll-list&quot;&gt;</span><br><span class="line">      &#123;\% set posts = site<span class="selector-class">.posts</span><span class="selector-class">.sort</span>(&#x27;-date&#x27;) %&#125;</span><br><span class="line">      &#123;\% for post in posts<span class="selector-class">.slice</span>(&#x27;<span class="number">0</span>&#x27;, &#x27;<span class="number">5</span>&#x27;) %&#125;</span><br><span class="line">        &lt;<span class="selector-tag">li</span> class=&quot;recent_posts_li&quot;&gt;</span><br><span class="line">          &lt;<span class="selector-tag">a</span> href=&quot;&#123;&#123; url_for(post<span class="selector-class">.path</span>) &#125;&#125;&quot; title=&quot;&#123;&#123; post<span class="selector-class">.title</span> &#125;&#125;&quot; target=&quot;_blank&quot;&gt;&#123;&#123; post<span class="selector-class">.title</span> &#125;&#125;&lt;/<span class="selector-tag">a</span>&gt;</span><br><span class="line">        &lt;/<span class="selector-tag">li</span>&gt;</span><br><span class="line">      &#123;\% endfor %&#125;</span><br><span class="line">    &lt;/<span class="selector-tag">ul</span>&gt;</span><br><span class="line">  &lt;/<span class="selector-tag">div</span>&gt;</span><br><span class="line">&#123;\% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>并修改theme主题配置文件，取消sidebar的注释:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="string">source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure>


<p>编辑<code>themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl</code>文件，标题溢出隐藏</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">.links-of-blogroll-list</span> &#123;</span><br><span class="line">  <span class="attr">list-style:</span> <span class="string">none;</span></span><br><span class="line">  <span class="attr">margin:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="attr">padding:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">  <span class="attr">text-align:</span> <span class="string">cengter;</span></span><br><span class="line">  <span class="attr">display:</span> <span class="string">block;</span></span><br><span class="line">  <span class="attr">word-break:</span> <span class="string">keep-all;</span></span><br><span class="line">  <span class="attr">white-space:</span> <span class="string">nowrap;</span></span><br><span class="line">  <span class="attr">overflow:</span> <span class="string">hidden;</span></span><br><span class="line">  <span class="attr">text-overflow:</span> <span class="string">ellipsis;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 <code>themes/next/_config.yml</code>中修改成下方代码</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 近期文章设置</span></span><br><span class="line"><span class="attr">recent_posts_title:</span> <span class="string">近期文章</span></span><br><span class="line"><span class="attr">recent_posts_layout:</span> <span class="string">block</span></span><br><span class="line"><span class="attr">recent_posts:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p><strong>效果图：</strong><br><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2022/03/03/heV4KR.png" alt="在这里插入图片描述"></p>
<h2 id="文章末尾添加”本文结束”标记"><a href="#文章末尾添加”本文结束”标记" class="headerlink" title="文章末尾添加”本文结束”标记"></a>文章末尾添加”本文结束”标记</h2><ul>
<li><p>在目录<code>themes/next/layout/_macro/</code>下添加<code>passage-end-tag.swig</code>，内容如下： </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;\% if not is_index %&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color: #ccc;font-size:20px;&quot;</span>&gt;</span>------------- 本 文 结 束&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp感 谢 您 的 阅 读 -------------<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;\% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>打开<code>themes/next/layout/_macro/post.swig</code>文件，新增内容如下:</p>
</li>
<li><p>&#96;&#96;&#96;HTML<br><br>&#x2F;&#x2F;以下为新增代码</p>
<div>
    {\% if not is_index %}
    {\% include 'passage-end-tag.swig' %}
    {\% endif %}
 </div>
<figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">  </span><br><span class="line">- 打开`主题配置文件`，添加代码如下：</span><br><span class="line">- ```js</span><br><span class="line">  # 文章末尾添加“本文结束”标记</span><br><span class="line"><span class="title">  passage_end_tag:</span></span><br><span class="line"><span class="title">  enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="为博客加上妹子"><a href="#为博客加上妹子" class="headerlink" title="为博客加上妹子"></a>为博客加上妹子</h1><p>live2d与busuanzi组件有bug冲突，安装了live2d，busuanzi就失效，所以我没有使用。</p>
<p><code>npm install -save hexo-helper-live2d</code><br>然后在在 hexo 的 _config.yml中添加参数：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-&lt;你喜欢的模型名字&gt;s</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="number">12345678910111213141516</span></span><br></pre></td></tr></table></figure>

<p>可供选择模型：</p>
<ul>
<li><code>live2d-widget-model-chitose</code></li>
<li><code>live2d-widget-model-epsilon2_1</code></li>
<li><code>live2d-widget-model-gf</code></li>
<li><code>live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</code></li>
<li><code>live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</code></li>
<li><code>live2d-widget-model-haruto</code></li>
<li><code>live2d-widget-model-hibiki</code></li>
<li><code>live2d-widget-model-hijiki</code></li>
<li><code>live2d-widget-model-izumi</code></li>
<li><code>live2d-widget-model-koharu</code></li>
<li><code>live2d-widget-model-miku</code></li>
<li><code>live2d-widget-model-ni-j</code></li>
<li><code>live2d-widget-model-nico</code></li>
<li><code>live2d-widget-model-nietzsche</code></li>
<li><code>live2d-widget-model-nipsilon</code></li>
<li><code>live2d-widget-model-nito</code></li>
<li><code>live2d-widget-model-shizuku</code></li>
<li><code>live2d-widget-model-tororo</code></li>
<li><code>live2d-widget-model-tsumiki</code></li>
<li><code>live2d-widget-model-unitychan</code></li>
<li><code>live2d-widget-model-wanko</code></li>
<li><code>live2d-widget-model-z16</code></li>
</ul>
<p>在站点目录下建文件夹<code>live2d_models</code>，</p>
<p>再在<code>live2d_models</code>下建文件夹<code>&lt;你喜欢的模型名字</code>&gt;,</p>
<p>再在<code>&lt;你喜欢的模型名字&gt;</code>下建json文件：<code>&lt;你喜欢的模型名字&gt;.model.json</code></p>
<p>安装模型。在命令行（即Git Bash）运行以下命令即可：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save live2d-widget-model-&lt;你喜欢的模型名字&gt;</span></span><br></pre></td></tr></table></figure>

<p>复制你喜欢的模型名字：</p>
<h2 id="代码块复制选项"><a href="#代码块复制选项" class="headerlink" title="代码块复制选项"></a>代码块复制选项</h2><p>Next6 中自带了复制代码按钮，Next5 需要自己手动配置。</p>
<p>搜索 codeblock，找到如下配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line"><span class="attr">border_radius:</span> <span class="number">8</span>   <span class="comment"># 按钮圆滑度</span></span><br><span class="line"><span class="attr">copy_button:</span>  <span class="comment"># 设置是否开启代码块复制按钮</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	<span class="attr">show_result:</span> <span class="literal">true</span>  <span class="comment"># 是否显示复制成功信息</span></span><br></pre></td></tr></table></figure>

<h2 id="修改加载特效"><a href="#修改加载特效" class="headerlink" title="修改加载特效"></a>修改加载特效</h2><p>由于网页不可能一直都秒进，总会等待一段时间的，所以可以设置顶部加载条。Next 已经集成了很多加载特效，可以在下面选项中在线调试测试一下。</p>
<p>next主题配置文件搜索<code>pace</code>，找到如下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Progress bar in the top during page loading.</span></span><br><span class="line"><span class="string">G#</span> <span class="attr">For more information:</span> <span class="string">https://github.com/CodeByZach/pace</span></span><br><span class="line"><span class="attr">pace:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># All available colors:</span></span><br><span class="line">  <span class="comment"># black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">blue</span></span><br><span class="line">  <span class="comment"># All available themes:</span></span><br><span class="line">  <span class="comment"># big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line">  <span class="comment"># corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">loading-bar</span></span><br></pre></td></tr></table></figure>

<h2 id="修改文章链接"><a href="#修改文章链接" class="headerlink" title="修改文章链接"></a>修改文章链接</h2><p>在做次优化之前，hexo-next文章链接默认的生成规则是：<code>:year/:month/:day/:title</code>，是按照年、月、日、标题来生成的。<br>比如：<code>https://zxiaoxuan.github.io/2019/08/12/hello-world/</code> 这样，如果文章标题是中文的话，URL链接是也会是中文，<br><img src="https://img-blog.csdnimg.cn/20190831093938325.png" alt="在这里插入图片描述"></p>
<p>那么要生存简洁且唯一的URL，怎么办呢</p>
<p><strong>安装插件</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<blockquote>
<p>执行此命令可能会不成功，提示你缺少相应的依赖，比如babel-eslint、mini-css-extract-plugin、webpack-cli…<br>使用npm命令安装即可，比如npm install <a href="mailto:&#101;&#115;&#x6c;&#105;&#x6e;&#116;&#64;&#x34;&#46;&#x78;">&#101;&#115;&#x6c;&#105;&#x6e;&#116;&#64;&#x34;&#46;&#x78;</a> babel-eslint@8 –save-dev</p>
</blockquote>
<p>修改根目录站点配置文件<code>config.yml</code>，改为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink/</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">	<span class="attr">alg:</span> <span class="string">crc32</span>   <span class="comment">#算法： crc16(default) and crc32</span></span><br><span class="line">	<span class="attr">rep:</span> <span class="string">hex</span>     <span class="comment">#进制： dec(default) and hex</span></span><br></pre></td></tr></table></figure>

<p>生成的链接将会是这样的(官方样例)：<br><strong>四种可供选择</strong></p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">crc16 &amp; hex</span><br><span class="line">https:<span class="regexp">//</span>post.zz173.com<span class="regexp">/posts/</span><span class="number">66</span>c8.html</span><br><span class="line"></span><br><span class="line">crc16 &amp; dec</span><br><span class="line">https:<span class="regexp">//</span>post.zz173.com<span class="regexp">/posts/</span><span class="number">65535</span>.html</span><br><span class="line">crc32 &amp; hex</span><br><span class="line">https:<span class="regexp">//</span>post.zz173.com<span class="regexp">/posts/</span><span class="number">8</span>ddf18fb.html</span><br><span class="line"></span><br><span class="line">crc32 &amp; dec</span><br><span class="line">https:<span class="regexp">//</span>post.zz173.com<span class="regexp">/posts/</span><span class="number">1690090958</span>.html</span><br><span class="line"><span class="number">12345678910</span></span><br></pre></td></tr></table></figure>

<p>生成完后，原<code>md</code>文件的<code>Front-matter</code> 内会增加<code>abbrlink</code> 字段，值为生成的ID 。这个字段确保了在我们修改了Front-matter 内的博客标题title或创建日期date字段之后而不会改变链接地址。</p>
<h2 id="评论-Waline-增强版"><a href="#评论-Waline-增强版" class="headerlink" title="评论 Waline 增强版"></a>评论 Waline 增强版</h2><p>参考链接<a href="%5Bhexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%E8%AE%BF%E9%97%AE%5D(https://swimminghao.netlify.app/posts/a07389a8/)">Hexo NexT Waline评论</a></p>
<h2 id="各版块透明度修改"><a href="#各版块透明度修改" class="headerlink" title="各版块透明度修改"></a>各版块透明度修改</h2><p><strong>内容板块透明</strong><br>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件 <code>.content-wrap</code> 标签下 <code>background: white</code>修改为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>.<span class="number">7</span>); //<span class="number">0</span>.<span class="number">7</span>是透明度</span><br></pre></td></tr></table></figure>

<p><strong>菜单栏背景</strong><br>博客根目录 <code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.header-inner</code>标签下 background: white修改为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>.<span class="number">7</span>); //<span class="number">0</span>.<span class="number">7</span>是透明度</span><br></pre></td></tr></table></figure>

<p><strong>站点概况背景</strong><br>博客根目录<code>themes\next\source\css\_schemes\Pisces\_sidebar.styl</code> 文件<code>.sidebar-inner</code> 标签下 background: white修改为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>.<span class="number">7</span>); //<span class="number">0</span>.<span class="number">7</span>是透明度</span><br></pre></td></tr></table></figure>

<p>然后修改博客根目录<code>themes\next\source\css\_schemes\Pisces\_layout.styl</code>文件<code>.sidebar</code> 标签下 <code>background: $body-bg-color</code>修改为：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">background</span>: rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>.<span class="number">7</span>); //<span class="number">0</span>.<span class="number">7</span>是透明度</span><br></pre></td></tr></table></figure>

<p><strong>按钮背景</strong><br>博客根目录<code>themes\next\source\css\_common\components\post\post-button.styl</code> 同上修改对应位置为 <code>background: transparent;</code></p>
<h2 id="标签修改"><a href="#标签修改" class="headerlink" title="标签修改"></a>标签修改</h2><p>打开<code>themes/next/layout/page.swig</code></p>
<p>修改这里可以修改标签页的标签显示<br><img src="https://img-blog.csdnimg.cn/2019092019070486.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>在这里添加东西会在标签页面上显示<br><img src="https://img-blog.csdnimg.cn/20190920190746932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="彩色标签云"><a href="#彩色标签云" class="headerlink" title="彩色标签云"></a>彩色标签云</h2><p>在<code>/themes/next/layout/</code>目录下，新增<code>tag-color.swig</code>文件，加入下方代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">     <span class="keyword">var</span> alltags = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;tag-cloud-tags&#x27;</span>);</span><br><span class="line">     <span class="keyword">var</span> tags = alltags[<span class="number">0</span>].<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = tags.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">       <span class="keyword">var</span> r=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">75</span>+<span class="number">130</span>);</span><br><span class="line">       <span class="keyword">var</span> g=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">75</span>+<span class="number">100</span>);</span><br><span class="line">       <span class="keyword">var</span> b=<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">75</span>+<span class="number">80</span>);</span><br><span class="line">       tags[i].<span class="property">style</span>.<span class="property">background</span> = <span class="string">&quot;rgb(&quot;</span>+r+<span class="string">&quot;,&quot;</span>+g+<span class="string">&quot;,&quot;</span>+b+<span class="string">&quot;)&quot;</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.tag-cloud-tags</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="comment">/*font-family: Helvetica, Tahoma, Arial;*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="comment">/*font-weight: 100;*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">counter-reset</span>: tags;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">padding-left</span>: <span class="number">5px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">margin</span>: <span class="number">8px</span> <span class="number">5px</span> <span class="number">0px</span> <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:before</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">    <span class="attribute">content</span>: <span class="string">&quot;?&quot;</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="selector-class">.tag-cloud-tags</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">     <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">     <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1.1</span>);</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">     <span class="comment">/*box-shadow: 10px 10px 15px 2px rgba(0,0,0,.12), 0 0 6px 0 rgba(104, 104, 105, 0.1);*/</span></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">     <span class="attribute">transition-duration</span>: <span class="number">0.15s</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在&#x2F;themes&#x2F;next&#x2F;layout&#x2F;page.swig&#x2F;中引入tag-color.swig：</p>
<p>在下方加上 <code>&#123;\% include &#39;tag-color.swig&#39; %&#125;</code> 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> &lt;div <span class="keyword">class</span>=<span class="string">&quot;tag-cloud&quot;</span>&gt;</span><br><span class="line">          &lt;!--    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123; _p(&#x27;counter.tag_cloud&#x27;, site.tags.length) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>  --&gt;</span><br><span class="line">             <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">			  &#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: &#x27;#FFF&#x27;, end_color: &#x27;#FFF&#x27;&#125;) &#125;&#125;            </span></span><br><span class="line"><span class="language-xml">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">+     &#123;\% include <span class="string">&#x27;tag-color.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p><strong>或者将上方代码直接添加到下方</strong></p>
<p><img src="https://img-blog.csdnimg.cn/20190922224709732.png" alt="在这里插入图片描述"></p>
<h2 id="将标签云放到首页"><a href="#将标签云放到首页" class="headerlink" title="将标签云放到首页"></a>将标签云放到首页</h2><p>在路径：<code>/themes/next/layout/index.swig</code> 中</p>
<p><code>&#123;\% block content %&#125;</code>下面添加下方代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;\% block content %&#125;</span><br><span class="line"></span><br><span class="line">	&lt;div <span class="keyword">class</span>=<span class="string">&quot;tag-cloud&quot;</span>&gt;</span><br><span class="line">	  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tag-cloud-tags&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		&#123;&#123; tagcloud(&#123;min_font: 16, max_font: 16, amount: 300, color: true, start_color: &#x27;#fff&#x27;, end_color: &#x27;#fff&#x27;&#125;) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">	&lt;br&gt;</span><br><span class="line">	</span><br><span class="line">	&#123;\% include <span class="string">&#x27;tag-color.swig&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20190920194842525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2FzNDgwMTMzOTM3,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="归档页美化"><a href="#归档页美化" class="headerlink" title="归档页美化"></a>归档页美化</h2><p>修改&#x2F;themes&#x2F;next&#x2F;layout&#x2F;_macro&#x2F;post-collapse.swig后的代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;\% macro <span class="title function_">render</span>(post) %&#125;</span><br><span class="line"></span><br><span class="line">  &lt;article <span class="keyword">class</span>=<span class="string">&quot;post post-type-&#123;&#123; post.type | default(&#x27;normal&#x27;) &#125;&#125;&quot;</span> itemscope itemtype=<span class="string">&quot;http://schema.org/Article&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;post-header&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &lt;&#123;\% if theme.seo %&#125;h3&#123;\% else %&#125;h2&#123;\% endif %&#125; class=&quot;post-title&quot;&gt;</span></span><br><span class="line"><span class="language-xml">        &#123;\% if post.link %&#125;&#123;# Link posts #&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;post-title-link post-title-link-external&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.link) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; post.title or post.link &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-external-link&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;\% else %&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;post-title-link&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;url&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;\% if post.type === &#x27;picture&#x27; %&#125;</span></span><br><span class="line"><span class="language-xml">                &#123;&#123; post.content &#125;&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;\% else %&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>&#123;&#123; post.title | default(__(&#x27;post.untitled&#x27;)) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;\% endif %&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;\% endif %&#125;</span></span><br><span class="line"><span class="language-xml">      &lt;/&#123;\% if theme.seo %&#125;h3&#123;\% else %&#125;h2&#123;\% endif %&#125;&gt;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-meta&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">time</span> <span class="attr">class</span>=<span class="string">&quot;post-time&quot;</span> <span class="attr">itemprop</span>=<span class="string">&quot;dateCreated&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">datetime</span>=<span class="string">&quot;&#123;&#123; moment(post.date).format() &#125;&#125;&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">content</span>=<span class="string">&quot;&#123;&#123; date(post.date, config.date_format) &#125;&#125;&quot;</span> &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;&#123; date(post.date, &#x27;MM-DD&#x27;) &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">time</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line">  &lt;/article&gt;</span><br><span class="line"></span><br><span class="line">&#123;\% endmacro %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>记录</tag>
      </tags>
  </entry>
  <entry>
    <title>个人博客系统设计(支持hexo和halo同步)</title>
    <url>/posts/d2168e68/</url>
    <content><![CDATA[<h1 id="个人博客系统设计-支持hexo和halo同步"><a href="#个人博客系统设计-支持hexo和halo同步" class="headerlink" title="个人博客系统设计(支持hexo和halo同步)"></a>个人博客系统设计(支持hexo和halo同步)</h1><ol>
<li>本文主要介绍自己的博客系统是如何设计的，并使用<a href="https://github.com/linshenkx/haloSyncServer">Halo博客同步器</a> 将hexo（git pages: <a href="https://linshenkx.github.io/">https://linshenkx.github.io</a> ）文章自动同步到halo( <a href="http://linshenkx.cn/">http://linshenkx.cn</a> )。<br>实现一次编写、两套博客系统并存、多个网址访问的效果。</li>
</ol>
<h2 id="一-总览"><a href="#一-总览" class="headerlink" title="一 总览"></a>一 总览</h2><h3 id="达到效果"><a href="#达到效果" class="headerlink" title="达到效果"></a>达到效果</h3><table>
<thead>
<tr>
<th>个人博客网址</th>
<th>介绍</th>
<th>对应git仓库&#x2F;管理界面</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://linshenkx.gitee.io/">https://linshenkx.gitee.io</a></td>
<td>hexo next gitee pages</td>
<td><a href="https://gitee.com/linshenkx/linshenkx">https://gitee.com/linshenkx/linshenkx</a></td>
</tr>
<tr>
<td><a href="https://linshenkx.github.io/">https://linshenkx.github.io</a></td>
<td>hexo next github pages</td>
<td><a href="https://github.com/linshenkx/linshenkx.github.io">https://github.com/linshenkx/linshenkx.github.io</a></td>
</tr>
<tr>
<td><a href="https://linshen.netlify.app/">https://linshen.netlify.app</a></td>
<td>netlify加速，文章同步自blog源码仓库</td>
<td><a href="https://app.netlify.com/teams/linshenkx">https://app.netlify.com/teams/linshenkx</a></td>
</tr>
<tr>
<td><a href="https://linshenkx.cn/">https://linshenkx.cn</a></td>
<td>halo个人网站，文章同步自blog源码仓库</td>
<td><a href="https://linshenkx.cn/admin/index.html#/dashboard">https://linshenkx.cn/admin/index.html#/dashboard</a></td>
</tr>
</tbody></table>
<p>blog博客源码仓库（核心，私有）：<a href="https://github.com/linshenkx/blog">https://github.com/linshenkx/blog</a></p>
<h3 id="博客发布流程"><a href="#博客发布流程" class="headerlink" title="博客发布流程"></a>博客发布流程</h3><ol>
<li>编写博客<br>在blog工程下写博客，工程为标准hexo，博客为markdown文件放在source&#x2F;_posts目录下，使用多层级分类存放</li>
<li>发布到git pages<br>完成博客的增删改后，在工程目录下执行<code>hexo clean &amp;&amp; hexo d -g</code>部署到git pages。<br>这里我配置了同时发布到github和gitee，需要注意的是，gitee的git pages需要手动去触发更新才能生效。</li>
<li>提交并推送工程<br>提交并推送blog工程的修改。<br>netlify将自动获取blog工程，并执行hexo部署脚本（效果和git pages一样，只是用netlify访问据说会快一点）<br>自己开发的<a href="https://github.com/linshenkx/haloSyncServer">Halo博客同步器</a>也会检测到blog工程更新，根据更新情况将变化同步到halo博客系统中。</li>
</ol>
<h2 id="二-设计思路"><a href="#二-设计思路" class="headerlink" title="二 设计思路"></a>二 设计思路</h2><h3 id="1-起因"><a href="#1-起因" class="headerlink" title="1 起因"></a>1 起因</h3><p>本来我一直是在使用csdn的，但是网页端写作确实不方便，而且还可能受网络情况限制。<br>所以我后面一般都是用印象笔记做记录，在印象笔记写好再看心情整理到csdn上去。<br>但是悄不注意的，在21年初csdn改版，同时也改变了排名和引流规则。<br>之前一个星期2500到3000的访问量现在只剩1500到2000了。</p>
<p>嗯，不可忍。换。</p>
<h3 id="2-调研"><a href="#2-调研" class="headerlink" title="2 调研"></a>2 调研</h3><p>市面上的博客系统可根据对Git Pages的支持（即是否支持生成静态网站）分为两大类：</p>
<p>一是以hexo为代表的静态网站生成器：如hexo、hugo、jekyll，较成熟，有较多第三方主题和插件，可与git pages搭配使用，也可自行部署。</p>
<p>二是以halo为代表的五花八门的个人博客系统，功能更加强大，自由度更高，通常带后台管理，但不支持git pages，需自行部署。</p>
<h3 id="3-分析"><a href="#3-分析" class="headerlink" title="3 分析"></a>3 分析</h3><p>个人博客的话使用git pages比较稳定，网址固定，可以永久使用，而且可以通过搭配不同的git服务商来保证访问速度。<br>但是git pages的缺点也很明显，是静态网站，虽然可以搭配第三方插件增强，但说到底还是个静态网站。</p>
<p>而如果自己买服务器，买域名，用第三方个人博客系统，就可以玩得比较花里胡哨了，但谁知道会用多久呢。<br>服务器、域名都要自己负责，三五年之后还能不能访问就比较难说了。<br>但是年轻人嘛，总还是花里胡哨点才香。</p>
<p>那我就全都要。</p>
<p>git pages作为专业性较强的个人网站可以永久访问，<br>然后再弄个服务器放个博客系统自己玩。</p>
<h3 id="4-选型"><a href="#4-选型" class="headerlink" title="4 选型"></a>4 选型</h3><p>静态网站生成器选的是hexo，传统一点，支持的插件和主题比较多。<br>hugo虽然也不错，但似乎国内用的不多，支持可能还不够完善。</p>
<p>然后hexo的主题用的最经典的next，比较成熟，功能也很完善<br>虽然整体比较严肃压抑，但可以自己加个live2d增添点活力，<br>作为一个展示专业性的博客网站这样也就够了</p>
<p>自定义博客系统的话我选的是halo，最主要原因是它是java写的，利于二次开发（事实上后面用着也确实有问题，还提交了一个issue）<br>而且功能比较强大，生态比较完善，虽然第三方主题少且基本都没更新，但是…实在是找不出其他一个能打的了<br>另外halo支持导入markdown，且功能基本都通过rest接口放开，适合开发者使用</p>
<h2 id="三-设计实现"><a href="#三-设计实现" class="headerlink" title="三 设计实现"></a>三 设计实现</h2><h3 id="1-hexo"><a href="#1-hexo" class="headerlink" title="1 hexo"></a>1 hexo</h3><p>hexo本身只是静态网站生成器，你可以把hexo项目本身发布成为git pages项目，<br>像github、gitee这些会识别出这是一个hexo项目，然后进行编译，得到静态资源供外部访问。<br>这也是最简单的用法。</p>
<p>但是不推荐。</p>
<p>因为git pages项目一般都要求是public的（且名称固定，一个git账号只有一个git pages仓库），<br>hexo项目包含你的博客markdown源文件和其他的个人信息。<br>我们只是想把必要的生成后的静态网页放出去而已，至于项目的配置信息和markdown源文件应该藏起来。</p>
<p>所以需要使用 hexo-deployer-git 插件进行git pages的部署。<br>即放到git公开的文件只有生成后的网页文件而已，git只是把你生成后的index.html进行直接展示，不会再去编译了<br>（需要在source目录下添加.nojekyll文件表明为静态网页，无须编译）</p>
<p>而项目本身为了更好地进行管理和记录，还是要发布到git上面的，作为一个普通的私有仓库，名称可以任意（如 blog）</p>
<p>这样，每次要增删改完文章只需要执行<code>hexo clean &amp;&amp; hexo d -g</code>即可发布到git仓库上<br>注意，不同git服务商git pages规则不一样。<br>比方说我gitee和github的用户名都是linshenkx<br>但是gitee要求的仓库名是linshenkx，而github的仓库名就必须是linshenkx.github.io了<br>而github的git pages仓库在接收到推送后就自动（编译）部署<br>gitee则需要到仓库web界面手动触发更新</p>
<p>截至到这一步是大多数人的做法，即git上两个仓库并存，一（或多）个git pages公有仓库做展示，一个blog仓库存放博客源码<br>注意：如果git pages仓库允许私有，则可以使用一个仓库多个分支来实现相同效果。<br>但还是推荐使用两个仓库，因为这样更通用，设计上也更合理。</p>
<p>工程总体结构如下，为普通hexo工程：<br><a href="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1631718173(1).png"><img src="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1631718173(1).png" alt="img"></a><br>博客源码目录结构如下，为多层级结构：<br><a href="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1631718305(1).png"><img src="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1631718305(1).png" alt="img"></a></p>
<h3 id="2-halo"><a href="#2-halo" class="headerlink" title="2 halo"></a>2 halo</h3><p>halo的使用看官方文档一般就够了，这里需要补充的是其代理配置。<br>因为halo的在线下载更新主题功能通常需要连接到github，我习惯通过代理访问<br>这里提供一下配置方法<br>即在容器启动时添加JVM参数即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it -d --name halo --network host -e JVM_OPTS=&quot;-Dhttp.proxyHost=127.0.0.1 -Dhttp.proxyPort=7890 -Dhttps.proxyHost=127.0.0.1 -Dhttps.proxyPort=7890&quot; -v /opt/halo/workspace:/root/.halo --restart=always halohub/halo</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<h3 id="3-markdown图片"><a href="#3-markdown图片" class="headerlink" title="3 markdown图片"></a>3 markdown图片</h3><p>markdown图片的存放一直是个麻烦的问题。<br>最害怕遇到就是图链的失效，而且往往自己还不能发现。<br>理想状态下就是markdown一张图片支持配置多个图床链接，第一个图床链接超时就使用下一个。<br>这种服务端的处理思想很明显不适合放到客户端。<br>退而求其次，配置一个链接，访问这个链接会触发对多个图床的访问，然后那个快用那个。<br>这个效果技术上不难实现，也有个商业产品（聚合图床）是这样的，缺点是收费。<br>然后我又在github、gitee上找了各个图床软件，都不怎么样（这个时间成本都够给聚合图床开几年会员了）<br>最终还是妥协，用云存储吧，选了阿里<br>七牛、腾讯也都试了，其实都差不多，看个人爱好，没有太特别的理由</p>
<p>如果你用typora写markdown的话很方便，它支持picgo插件</p>
<p>但我习惯在idea里面编写，idea也有一些markdown-image插件，基本都不好用<br>所以我还是安装了picgo，开了快捷键，复制图片直接快捷键粘贴体验也还是比较舒服的<br>picgo的特点是插件多，不过插件质量一般，有很多bug</p>
<p>花了两天时间纠结、测试，最后的方案是：idea编辑+阿里云存储+picgo上传</p>
<h3 id="4-同步"><a href="#4-同步" class="headerlink" title="4 同步"></a>4 同步</h3><p>这才是重点</p>
<h4 id="1-同步的方向"><a href="#1-同步的方向" class="headerlink" title="1 同步的方向"></a>1 同步的方向</h4><p>即在哪里写文章，同步到哪里</p>
<p>我还是习惯用idea写markdown文档而不是在网页上。<br>所以确定是流向为 hexo-&gt;halo</p>
<h4 id="2-技术支撑"><a href="#2-技术支撑" class="headerlink" title="2 技术支撑"></a>2 技术支撑</h4><p>halo支持导入markdown文件，所以主要问题为hexo的markdown博客源码文件的获取<br>hexo文章存储路径为 source&#x2F;_posts ，有多层级文件夹，可以简单地理解成文件IO操作获取文章内容。<br>但关键是存储在git上，这里可以用JGit进行操作。<br>同时，JGit支持获取两次commit之间的文件变化情况。<br>即可以捕获到文章的增删改操作，而不用每次都全量地同步。</p>
<h4 id="3-成果"><a href="#3-成果" class="headerlink" title="3 成果"></a>3 成果</h4><p>又处理了一些细节问题，最终还是自己做了个haloSyncServer同步程序，<br>封装成docker，放服务器上跑，实现同步。<br>待整理后开源。</p>
<p>2021年11月更新<br>开源地址为：<a href="https://github.com/linshenkx/haloSyncServer">https://github.com/linshenkx/haloSyncServer</a><br>效果<br><a href="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1637394238(1).jpg"><img src="https://lian-gallery.oss-cn-guangzhou.aliyuncs.com/img/1637394238(1).jpg" alt="img"></a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>博客</tag>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>git.html</title>
    <url>/posts/765d86b6/</url>
    <content><![CDATA[<!doctype html>
<html>
<head>
<meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'>
<title>git</title><style type='text/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; }
html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }
body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }
iframe { margin: auto; }
a.url { word-break: break-all; }
a:active, a:hover { outline: 0px; }
.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }
#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; }
#write.first-line-indent p { text-indent: 2em; }
#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }
#write.first-line-indent li { margin-left: 2em; }
.for-image #write { padding-left: 8px; padding-right: 8px; }
body.typora-export { padding-left: 30px; padding-right: 30px; }
.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }
@media screen and (max-width: 500px) {
  body.typora-export { padding-left: 0px; padding-right: 0px; }
  #write { padding-left: 20px; padding-right: 20px; }
  .CodeMirror-sizer { margin-left: 0px !important; }
  .CodeMirror-gutters { display: none !important; }
}
#write li > figure:last-child { margin-bottom: 0.5rem; }
#write ol, #write ul { position: relative; }
img { max-width: 100%; vertical-align: middle; }
button, input, select, textarea { color: inherit; font: inherit; }
input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }
*, ::after, ::before { box-sizing: border-box; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }
p { line-height: inherit; }
h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 2; }
p { orphans: 4; }
h1 { font-size: 2rem; }
h2 { font-size: 1.8rem; }
h3 { font-size: 1.6rem; }
h4 { font-size: 1.4rem; }
h5 { font-size: 1.2rem; }
h6 { font-size: 1rem; }
.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }
.hidden { display: none; }
.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }
a { cursor: pointer; }
sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }
sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }
#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }
figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }
figure > table { margin: 0px !important; }
tr { break-inside: avoid; break-after: auto; }
thead { display: table-header-group; }
table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }
table.md-table td { min-width: 32px; }
.CodeMirror-gutters { border-right: 0px; background-color: inherit; }
.CodeMirror-linenumber { user-select: none; }
.CodeMirror { text-align: left; }
.CodeMirror-placeholder { opacity: 0.3; }
.CodeMirror pre { padding: 0px 4px; }
.CodeMirror-lines { padding: 0px; }
div.hr:focus { cursor: none; }
#write pre { white-space: pre-wrap; }
#write.fences-no-line-wrapping pre { white-space: pre; }
#write pre.ty-contain-cm { white-space: normal; }
.CodeMirror-gutters { margin-right: 4px; }
.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }
.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }
#write .md-fences.mock-cm { white-space: pre-wrap; }
.md-fences.md-fences-with-lineno { padding-left: 0px; }
#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }
.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }
.CodeMirror-line, twitterwidget { break-inside: avoid; }
.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }
.footnotes + .footnotes { margin-top: 0px; }
.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }
li div { padding-top: 0px; }
blockquote { margin: 1rem 0px; }
li .mathjax-block, li p { margin: 0.5rem 0px; }
li { margin: 0px; position: relative; }
blockquote > :last-child { margin-bottom: 0px; }
blockquote > :first-child, li > :first-child { margin-top: 0px; }
.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }
#write .footnote-line { white-space: pre-wrap; }
@media print {
  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; }
  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }
  .typora-export * { -webkit-print-color-adjust: exact; }
  html.blink-to-pdf { font-size: 13px; }
  .typora-export #write { padding-left: 32px; padding-right: 32px; padding-bottom: 0px; break-after: avoid; }
  .typora-export #write::after { height: 0px; }
}
.footnote-line { margin-top: 0.714em; font-size: 0.7em; }
a img, img a { cursor: pointer; }
pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }
p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }
p > .md-image:only-child { display: inline-block; width: 100%; }
#write .MathJax_Display { margin: 0.8em 0px 0px; }
.md-math-block { width: 100%; }
.md-math-block:not(:empty)::after { display: none; }
[contenteditable="true"]:active, [contenteditable="true"]:focus { outline: 0px; box-shadow: none; }
.md-task-list-item { position: relative; list-style-type: none; }
.task-list-item.md-task-list-item { padding-left: 0px; }
.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }
.math { font-size: 1rem; }
.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }
.md-toc-content { position: relative; margin-left: 0px; }
.md-toc-content::after, .md-toc::after { display: none; }
.md-toc-item { display: block; color: rgb(65, 131, 196); }
.md-toc-item a { text-decoration: none; }
.md-toc-inner:hover { text-decoration: underline; }
.md-toc-inner { display: inline-block; cursor: pointer; }
.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }
.md-toc-h2 .md-toc-inner { margin-left: 2em; }
.md-toc-h3 .md-toc-inner { margin-left: 4em; }
.md-toc-h4 .md-toc-inner { margin-left: 6em; }
.md-toc-h5 .md-toc-inner { margin-left: 8em; }
.md-toc-h6 .md-toc-inner { margin-left: 10em; }
@media screen and (max-width: 48em) {
  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }
  .md-toc-h4 .md-toc-inner { margin-left: 5em; }
  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }
  .md-toc-h6 .md-toc-inner { margin-left: 8em; }
}
a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }
.footnote-line a:not(.reversefootnote) { color: inherit; }
.md-attr { display: none; }
.md-fn-count::after { content: "."; }
code, pre, samp, tt { font-family: var(--monospace); }
kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }
.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }
code { text-align: left; vertical-align: initial; }
a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }
.md-inline-math .MathJax_SVG .noError { display: none !important; }
.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }
.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }
.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }
.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }
.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }
.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }
.MathJax_SVG * { transition: none 0s ease 0s; }
.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }
.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }
.md-diagram-panel > svg { max-width: 100%; }
[lang="mermaid"] svg, [lang="flow"] svg { max-width: 100%; height: auto; }
[lang="mermaid"] .node text { font-size: 1rem; }
table tr th { border-bottom: 0px; }
video { max-width: 100%; display: block; margin: 0px auto; }
iframe { max-width: 100%; width: 100%; border: none; }
.highlight td, .highlight tr { border: 0px; }


:root { --side-bar-bg-color: #fafafa; --control-text-color: #777; }
html { font-size: 16px; }
body { font-family: "Open Sans", "Clear Sans", "Helvetica Neue", Helvetica, Arial, sans-serif; color: rgb(51, 51, 51); line-height: 1.6; }
#write { max-width: 860px; margin: 0px auto; padding: 30px 30px 100px; }
#write > ul:first-child, #write > ol:first-child { margin-top: 30px; }
a { color: rgb(65, 131, 196); }
h1, h2, h3, h4, h5, h6 { position: relative; margin-top: 1rem; margin-bottom: 1rem; font-weight: bold; line-height: 1.4; cursor: text; }
h1:hover a.anchor, h2:hover a.anchor, h3:hover a.anchor, h4:hover a.anchor, h5:hover a.anchor, h6:hover a.anchor { text-decoration: none; }
h1 tt, h1 code { font-size: inherit; }
h2 tt, h2 code { font-size: inherit; }
h3 tt, h3 code { font-size: inherit; }
h4 tt, h4 code { font-size: inherit; }
h5 tt, h5 code { font-size: inherit; }
h6 tt, h6 code { font-size: inherit; }
h1 { padding-bottom: 0.3em; font-size: 2.25em; line-height: 1.2; border-bottom: 1px solid rgb(238, 238, 238); }
h2 { padding-bottom: 0.3em; font-size: 1.75em; line-height: 1.225; border-bottom: 1px solid rgb(238, 238, 238); }
h3 { font-size: 1.5em; line-height: 1.43; }
h4 { font-size: 1.25em; }
h5 { font-size: 1em; }
h6 { font-size: 1em; color: rgb(119, 119, 119); }
p, blockquote, ul, ol, dl, table { margin: 0.8em 0px; }
li > ol, li > ul { margin: 0px; }
hr { height: 2px; padding: 0px; margin: 16px 0px; background-color: rgb(231, 231, 231); border: 0px none; overflow: hidden; box-sizing: content-box; }
li p.first { display: inline-block; }
ul, ol { padding-left: 30px; }
ul:first-child, ol:first-child { margin-top: 0px; }
ul:last-child, ol:last-child { margin-bottom: 0px; }
blockquote { border-left: 4px solid rgb(223, 226, 229); padding: 0px 15px; color: rgb(119, 119, 119); }
blockquote blockquote { padding-right: 0px; }
table { padding: 0px; word-break: initial; }
table tr { border-top: 1px solid rgb(223, 226, 229); margin: 0px; padding: 0px; }
table tr:nth-child(2n), thead { background-color: rgb(248, 248, 248); }
table tr th { font-weight: bold; border-width: 1px 1px 0px; border-top-style: solid; border-right-style: solid; border-left-style: solid; border-top-color: rgb(223, 226, 229); border-right-color: rgb(223, 226, 229); border-left-color: rgb(223, 226, 229); border-image: initial; border-bottom-style: initial; border-bottom-color: initial; margin: 0px; padding: 6px 13px; }
table tr td { border: 1px solid rgb(223, 226, 229); margin: 0px; padding: 6px 13px; }
table tr th:first-child, table tr td:first-child { margin-top: 0px; }
table tr th:last-child, table tr td:last-child { margin-bottom: 0px; }
.CodeMirror-lines { padding-left: 4px; }
.code-tooltip { box-shadow: rgba(0, 28, 36, 0.3) 0px 1px 1px 0px; border-top: 1px solid rgb(238, 242, 242); }
.md-fences, code, tt { border: 1px solid rgb(231, 234, 237); background-color: rgb(248, 248, 248); border-radius: 3px; padding: 2px 4px 0px; font-size: 0.9em; }
code { background-color: rgb(243, 244, 244); padding: 0px 2px; }
.md-fences { margin-bottom: 15px; margin-top: 15px; padding-top: 8px; padding-bottom: 6px; }
.md-task-list-item > input { margin-left: -1.3em; }
@media print {
  html { font-size: 13px; }
  table, pre { break-inside: avoid; }
  pre { overflow-wrap: break-word; }
}
.md-fences { background-color: rgb(248, 248, 248); }
#write pre.md-meta-block { padding: 1rem; font-size: 85%; line-height: 1.45; background-color: rgb(247, 247, 247); border: 0px; border-radius: 3px; color: rgb(119, 119, 119); margin-top: 0px !important; }
.mathjax-block > .code-tooltip { bottom: 0.375rem; }
.md-mathjax-midline { background: rgb(250, 250, 250); }
#write > h3.md-focus::before { left: -1.5625rem; top: 0.375rem; }
#write > h4.md-focus::before { left: -1.5625rem; top: 0.285714rem; }
#write > h5.md-focus::before { left: -1.5625rem; top: 0.285714rem; }
#write > h6.md-focus::before { left: -1.5625rem; top: 0.285714rem; }
.md-image > .md-meta { border-radius: 3px; padding: 2px 0px 0px 4px; font-size: 0.9em; color: inherit; }
.md-tag { color: rgb(167, 167, 167); opacity: 1; }
.md-toc { margin-top: 20px; padding-bottom: 20px; }
.sidebar-tabs { border-bottom: none; }
#typora-quick-open { border: 1px solid rgb(221, 221, 221); background-color: rgb(248, 248, 248); }
#typora-quick-open-item { background-color: rgb(250, 250, 250); border-color: rgb(254, 254, 254) rgb(229, 229, 229) rgb(229, 229, 229) rgb(238, 238, 238); border-style: solid; border-width: 1px; }
.on-focus-mode blockquote { border-left-color: rgba(85, 85, 85, 0.12); }
header, .context-menu, .megamenu-content, footer { font-family: "Segoe UI", Arial, sans-serif; }
.file-node-content:hover .file-node-icon, .file-node-content:hover .file-node-open-state { visibility: visible; }
.mac-seamless-mode #typora-sidebar { background-color: var(--side-bar-bg-color); }
.md-lang { color: rgb(180, 101, 77); }
.html-for-mac .context-menu { --item-hover-bg-color: #E6F0FE; }
#md-notification .btn { border: 0px; }
.dropdown-menu .divider { border-color: rgb(229, 229, 229); }
.ty-preferences .window-content { background-color: rgb(250, 250, 250); }
.ty-preferences .nav-group-item.active { color: white; background: rgb(153, 153, 153); }


</style>
</head>
<body class='typora-export' >
<div  id='write'  class = 'is-node'><h1><a name="git指令" class="md-header-anchor"></a><span>git指令</span></h1><h2><a name="一般来说日常使用只要记住下图6个命令就可以了但是熟练使用恐怕要记住60～100个命令" class="md-header-anchor"></a><span>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</span></h2><p><img src='/home/xh/OneDrive/learning/bg2015120901.png' alt='' referrerPolicy='no-referrer' /></p><p><code>workspace：工作区</code></p><p><code>Index/Stage：暂存区</code></p><p><code>Repository：仓库区（或本地仓库）</code></p><p><code>Remote：远程仓库</code></p><ul><li><span>述任务及修改内容，填写要发布的前后端应用和提测、上线时间，以及研发负责人、研发人员、测试负责人。</span></li></ul><ol><li><h2><a name="将测试报告已解密）通过ftp上传" class="md-header-anchor"></a><span>将测试报告（已解密）通过ftp上传</span></h2><ul><li><span>将上传报告名加到app-sz-artemis中的ReportRecognitionServiceTest类</span></li><li><strong><span>（注）报告提前解密，保证准时完成上线。上传报告名必须以模板名开头：例，xikang1.田淑梅.pdf</span></strong></li></ul></li><li><h2><a name="提交项目到dev与release分支" class="md-header-anchor"></a><span>提交项目到dev与release分支</span></h2><ul><li><span>首先commit&amp;push sz-artemis-common 项目（因为sz-artemis-report-parser、sz-artemis-report-api、app-sz-artemis均依赖于它），然后c&amp;p sz-artimis-report-parser，最后c&amp;p app-sz-artemis。</span></li><li><strong><span>（注）先push到dev分支，再push到release分支，release分支严格遵守格式：例，release-2019-09-05</span></strong></li></ul></li><li><h2><a name="通过rocketchat编译" class="md-header-anchor"></a><span>通过Rocket.chat编译</span></h2><ul><li><span>使用Rocket.chat编译，严格按照步骤3里的顺序，并注意指令正确。每编译完一个项目到</span><a href='http://118.178.137.55:8089/job' target='_blank' class='url'>http://118.178.137.55:8089/job</a><span>下查看console output，是否编译成功。</span></li><li><strong><span>（注）指令格式：@Gerty b sz-artemis-common；@Gerty b sz-artemis-report-parser；@Gerty b sz-artemis-api；@Gerty b test_sz-artemis</span></strong></li></ul></li><li><h2><a name="自测" class="md-header-anchor"></a><span>自测</span></h2><ul><li><span>通过识别回归测试工具，进行自测,查看测试通过的状况以及与以往测试用例集相异的excel结果</span></li><li><span>若excel结果无差异，或差异在可接受范围以内，则测试通过，并将本次测试产生的测试用例覆盖历史测试用例。</span></li><li><span>测试通过则可上线。</span></li></ul></li><li><h2><a name="发jira链接" class="md-header-anchor"></a><span>发jira链接</span></h2><ul><li><span>链接发顾璟琛审核，之后发方雷部署。</span></li></ul></li></ol><p>&nbsp;</p></div>
</body>
</html>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>github 上传大文件100MB姿势</title>
    <url>/posts/473fac3a/</url>
    <content><![CDATA[<h1 id="github-上传大文件100MB姿势"><a href="#github-上传大文件100MB姿势" class="headerlink" title="github 上传大文件100MB姿势"></a>github 上传大文件100MB姿势</h1><p>具体就是安装<a href="https://link.jianshu.com/?t=https://git-lfs.github.com">git-lfs</a>，先下载，然后就是一顿操作：</p>
<ol>
<li><p>先在web建立一个空仓库</p>
</li>
<li><p>然后建立跟仓库名一样的文件夹，并执行初始化命令：<code>git init</code></p>
</li>
<li><p>然后执行<code>git lfs install</code></p>
</li>
<li><p>然后添加你要上传的文件名或后缀名：<code>git lfs track &#39;*.zip&#39;</code></p>
</li>
<li><p>然后就把生成的  <code>.gitattributes</code>文件，先传到远程仓库</p>
<ul>
<li><code>git add .gitattributes</code></li>
</ul>
</li>
</ol>
<ul>
<li><code>git commit -m &#39;large - init file&#39;</code><ul>
<li><code>git push -u origin master:master</code> # 第一次要这样执行，后面再传就<code>git push</code>就行。</li>
</ul>
</li>
</ul>
<ol start="6">
<li><p>然后就可以正常添加上传大文件了！</p>
<ul>
<li><code>git add bigfile.zip</code></li>
<li><code>git commit -m &#39;upload Big file.&#39;</code></li>
<li><code>git push</code> # 第一次要这样执行，后面再传就<code>git push</code>就行。</li>
</ul>
</li>
</ol>
<hr>
<ul>
<li><p>删除远程仓库文件，但本地文件不删除，如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bigfile.<span class="built_in">zip</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>git rm bigfile.zip</code></li>
<li><code>git commit -m &#39;rm bigfile.zip&#39;</code></li>
<li><code>git push</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git reset放弃修改&amp;放弃增加文件</title>
    <url>/posts/d664f3f3/</url>
    <content><![CDATA[<h1 id="git-reset放弃修改-amp-放弃增加文件"><a href="#git-reset放弃修改-amp-放弃增加文件" class="headerlink" title="git reset放弃修改&amp;放弃增加文件"></a>git reset放弃修改&amp;放弃增加文件</h1><p><strong>1. 本地修改了一堆文件(并没有使用git add到暂存区)，想放弃修改。</strong><br>单个文件&#x2F;文件夹：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">$ git checkout <span class="comment">-- filename</span></span><br></pre></td></tr></table></figure>

<p>所有文件&#x2F;文件夹：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git checkout .</span><br></pre></td></tr></table></figure>

<p><strong>2. 本地新增了一堆文件(并没有git add到暂存区)，想放弃修改。</strong><br>单个文件&#x2F;文件夹：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> <span class="built_in">rm</span> filename / <span class="built_in">rm</span> <span class="built_in">dir</span> <span class="literal">-rf</span></span><br></pre></td></tr></table></figure>

<p>所有文件&#x2F;文件夹：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git clean -xdf</span><br></pre></td></tr></table></figure>

<p>&#x2F;&#x2F; 删除新增的文件，如果文件已经已经git add到暂存区，并不会删除！</p>
<p><strong>3. 本地修改&#x2F;新增了一堆文件，已经git add到暂存区，想放弃修改。</strong><br>单个文件&#x2F;文件夹：</p>
<figure class="highlight sas"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> HEAD <span class="keyword">filename</span></span><br></pre></td></tr></table></figure>

<p>所有文件&#x2F;文件夹：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git reset HEAD .</span><br></pre></td></tr></table></figure>

<p><strong>4. 本地通过git add &amp; git commit 之后，想要撤销此次commit</strong></p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>git reset commit_id</span><br></pre></td></tr></table></figure>

<p>这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位<br><strong>&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改还在工作区！</strong></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git <span class="keyword">reset</span> <span class="comment">--hard commit_id</span></span><br></pre></td></tr></table></figure>

<p>这个id是你想要回到的那个节点，可以通过git log查看，可以只选前6位<br><strong>&#x2F;&#x2F; 撤销之后，你所做的已经commit的修改将会清除，仍在工作区&#x2F;暂存区的代码不会清除！</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令</title>
    <url>/posts/341ecd43/</url>
    <content><![CDATA[<h1 id="git指令"><a href="#git指令" class="headerlink" title="git指令"></a>git指令</h1><h1 id="个人开发"><a href="#个人开发" class="headerlink" title="个人开发"></a><strong>个人开发</strong></h1><h2 id="一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。"><a href="#一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。" class="headerlink" title="一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。"></a>一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/QTmUTc_20220214115250.png"></p>
<p><code>workspace：工作区</code></p>
<p><code>Index/Stage：暂存区</code></p>
<p><code>Repository：仓库区（或本地仓库）</code></p>
<p><code>Remote：远程仓库</code></p>
<ol>
<li><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="增加-x2F-删除文件"><a href="#增加-x2F-删除文件" class="headerlink" title="增加&#x2F;删除文件"></a>增加&#x2F;删除文件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [<span class="built_in">dir</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git <span class="built_in">rm</span> [file1] [file2] ...</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure>
</blockquote>
</li>
<li><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure>
</li>
<li><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>

<h1 id="多人合作开发"><a href="#多人合作开发" class="headerlink" title="多人合作开发"></a><strong>多人合作开发</strong></h1><ol>
<li><h2 id="源仓库"><a href="#源仓库" class="headerlink" title="源仓库"></a>源仓库</h2><p>项目开始的时候，项目发起者构建起一个项目的最原始的仓库，称之为源仓库（origin）。</p>
<ul>
<li>源仓库有两个作用<ol>
<li>汇总参与该项目的各个开发者的代码</li>
<li>存放趋于稳定和可发布的代码</li>
</ol>
</li>
<li>源仓库受到保护，开发者不直接对其进行开发工作。只有项目管理者能对其进行较高权限的操作。</li>
</ul>
</li>
<li><h2 id="开发者仓库"><a href="#开发者仓库" class="headerlink" title="开发者仓库"></a>开发者仓库</h2><p>如上所说，任何开发者都不会对源仓库进行直接的操作，源仓库建立以后，每个开发者需要fork一份源仓库，作为自己日常开发的仓库。</p>
<p>每个开发者所fork的仓库是完全独立的，互不干扰。每个开发者仓库相当于一个源仓库实体的镜像，开发者在这个镜像中进行编码，提交到自己的仓库中，这样就可以轻易地实现团队成员之间的并行开发工作。而开发工作完成以后，开发者可以向源仓库发送pull request，请求管理员把自己的代码合并到源仓库中，这样就实现了分布式开发工作，和最后的集中式的管理。</p>
</li>
<li><h2 id="分支-（Branch）"><a href="#分支-（Branch）" class="headerlink" title="分支 （Branch）"></a>分支 （Branch）</h2><p>git分支有两类，5种：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">永久性分支</span><br><span class="line">master branch：主分支</span><br><span class="line">develop branch：开发分支</span><br><span class="line">临时性分支</span><br><span class="line">feature branch：功能分支</span><br><span class="line">release branch：预发布分支</span><br><span class="line">hotfix branch：bug修复分支</span><br></pre></td></tr></table></figure>


</li>
<li><h2 id="多人合作具体步骤"><a href="#多人合作具体步骤" class="headerlink" title="多人合作具体步骤"></a>多人合作具体步骤</h2><p>1）clone远程代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<p>2）切换到develop分支，将本地新项目提交到本地develop分支，再将本地develp分支上的新建项目将上传到远程develop分支。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">   git add .</span><br><span class="line">git  commit -m <span class="string">&quot;new branch commit&quot;</span></span><br><span class="line">   git push origin new branch commit</span><br></pre></td></tr></table></figure></li>
</ol>
<p>3)开发</p>
<ul>
<li><p>切换到develop分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure>
</li>
<li><p>分出一个功能性分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b function-branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>在功能性分支上进行开发工作，多次commit，测试以后</p>
</li>
<li><p>把做好的功能合并到develop中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line"><span class="comment"># 回到develop分支</span></span><br><span class="line">   </span><br><span class="line">git merge --no-ff function-branch</span><br><span class="line"><span class="comment"># 把做好的功能合并到develop中</span></span><br><span class="line"></span><br><span class="line">git branch -d functio-branch</span><br><span class="line"> <span class="comment"># 删除功能性分支</span></span><br><span class="line"></span><br><span class="line">git push origin develop</span><br><span class="line"><span class="comment"># 把develop提交到自己的远程仓库中</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>4)合并远程master和develop分支</p>
<p>切换到master分支，从远程pull代码，将develop分支合并到本地master分支（此时本地master分支是与远程同步的），有冲突解决，没有则罢。最后push到远程master仓库。</p>
<p><strong>（注）保证多人协作的时候尽量少出现merge conflict和污染主分支,做到以下几点：</strong></p>
<ul>
<li><p>做好分工，尽量避免出现多人修改同一个文件。</p>
</li>
<li><p>每个人的所有开发工作都只在自己的分支开发。</p>
</li>
<li><p>每个人只允许在自己的分支直接push远程分支。</p>
</li>
<li><p>合并的时候必须遵循以下条件.</p>
<p>1）首先本地切换到develop分支</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure>

<p>2）git pull</p>
<p>3）那么在pull到远程的develop最新的内容之后，</p>
   <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git merge  [branch]</span><br></pre></td></tr></table></figure>

<p>4）如果出现confict那么清除conflict之后，commit。然后把本地develop push到远程develop。</p>
<p>5）没完成一个功能就提交一次。不要累计代码。</p>
</li>
</ul>
</li>
</ol>
<p>git checkout dev</p>
<p>git push origin –delete release-1.00.00</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git命令作业</title>
    <url>/posts/ba167550/</url>
    <content><![CDATA[<h1 id="正常上线"><a href="#正常上线" class="headerlink" title="正常上线"></a>正常上线</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git clone</span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">git checkout -b feature-function</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;结束功能开发&#x27;</span></span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">git merge feature-function</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">git checkout -b release-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line">git push origin release-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line"></span><br><span class="line">线上发现bug 紧急上线</span><br><span class="line"></span><br><span class="line">git checkout -b hotfix-<span class="number">2019</span>-09-<span class="number">29</span> origin/master</span><br><span class="line">git checkout -b hotfix-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;message&#x27;</span></span><br><span class="line">git push origin hotfix-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">git merge hotfix-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch -d feature-function    </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git流程</title>
    <url>/posts/f44eb3a2/</url>
    <content><![CDATA[<h1 id="git-流程"><a href="#git-流程" class="headerlink" title="git 流程"></a>git 流程</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">正常上线</span><br><span class="line">git clone</span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line"></span><br><span class="line">git checkout -b feature-function</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;结束功能开发&#x27;</span></span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">git merge feature-function</span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line">git checkout -b release-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line">git push origin release-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line"></span><br><span class="line">线上发现bug 紧急上线</span><br><span class="line"></span><br><span class="line">git checkout -b hotfix-<span class="number">2019</span>-09-<span class="number">29</span> origin/master</span><br><span class="line">git checkout -b hotfix-<span class="number">2019</span>-09-<span class="number">29</span> </span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&#x27;message&#x27;</span></span><br><span class="line">git push origin hotfix-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line"></span><br><span class="line">git checkout dev</span><br><span class="line">git merge hotfix-<span class="number">2019</span>-09-<span class="number">29</span></span><br><span class="line">git push origin dev</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git branch -d feature-function</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>idea .gitignore(git文件忽略)</title>
    <url>/posts/734afda2/</url>
    <content><![CDATA[<h1 id="idea-gitignore-git文件忽略"><a href="#idea-gitignore-git文件忽略" class="headerlink" title="idea .gitignore(git文件忽略)"></a>idea .gitignore(git文件忽略)</h1><p>idea使用git通常需要忽略一些临时文件，需要配置.gitignore插件</p>
<ol>
<li><p>安装插件<br>File -&gt; Settings -&gt; Plugins 搜索框搜索.ignore，点击安装</p>
</li>
<li><p>生成初始.ignore文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/svvoLk_20210619221210.png"></p>
</li>
</ol>
<p>出现如下弹框，会默认生成所选语言的常用忽略项，我这里选java，</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/0XlItZ_20210619221230.png" alt="img"></p>
<p>生成如下文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># Compiled <span class="keyword">class</span> <span class="title class_">file</span></span><br><span class="line">*.class</span><br><span class="line"></span><br><span class="line"># Log file</span><br><span class="line">*.log</span><br><span class="line"></span><br><span class="line"># BlueJ files</span><br><span class="line">*.ctxt</span><br><span class="line"></span><br><span class="line"># Mobile Tools <span class="keyword">for</span> <span class="title function_">Java</span> <span class="params">(J2ME)</span></span><br><span class="line">.mtj.tmp/</span><br><span class="line"></span><br><span class="line"># Package Files #</span><br><span class="line">*.jar</span><br><span class="line">*.war</span><br><span class="line">*.ear</span><br><span class="line">*.zip</span><br><span class="line">*.tar.gz</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line"># virtual machine crash logs, see http:<span class="comment">//www.java.com/en/download/help/error_hotspot.xml</span></span><br><span class="line">hs_err_pid*</span><br></pre></td></tr></table></figure>

<p>idea项目一般需要自己增加如下两项</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.idea/</span><br><span class="line">target/</span><br></pre></td></tr></table></figure>

<p>即忽略这两个文件夹即文件夹下的所有文件</p>
<p>现在可以使用了，提交一次测试下</p>
<p>发现.idea文件夹下的文件还有变更被提交，这是因为在使用gitignore之前，此文件就以及被跟踪了，这样的话需要移除跟踪，如下命令:</p>
<p>移除指定文件夹即文件夹下所有文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git rm --cached --force -r .idea </span><br><span class="line">rm <span class="string">&#x27;.idea/artifacts/xxx_api_war.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/artifacts/xxx_api_war_exploded.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/artifacts/xxx_task_war.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/artifacts/xxx_task_war_exploded.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__ch_qos_logback_logback_classic_1_1_7.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__ch_qos_logback_logback_core_1_1_7.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_alibaba_druid_1_0_22.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_alibaba_fastjson_1_2_14.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_aliyun_openservices_ons_client_1_2_4.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_aalto_xml_0_9_11.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_annotations_2_5_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_core_2_5_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_jackson_core_jackson_databind_2_5_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_jackson_dataformat_jackson_dataformat_xml_2_5_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_fasterxml_jackson_module_jackson_module_jaxb_annotations_2_5_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__com_google_guava_guava_19_0.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__commons_codec_commons_codec_1_9.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__commons_httpclient_commons_httpclient_3_1.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__commons_logging_commons_logging_1_0_4.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__commons_logging_commons_logging_1_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__javax_servlet_javax_servlet_api_3_1_0.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__mysql_mysql_connector_java_5_1_39.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_apache_commons_commons_lang3_3_3_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_apache_commons_commons_pool2_2_0.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_apache_httpcomponents_httpclient_4_4.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_apache_httpcomponents_httpcore_4_4.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_aspectj_aspectjweaver_1_8_9.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_codehaus_woodstox_stax2_api_3_1_4.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_mongodb_mongo_java_driver_2_14_0.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_mybatis_mybatis_3_4_1.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_mybatis_mybatis_spring_1_3_0.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_quartz_scheduler_quartz_2_2_2.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_slf4j_jcl_over_slf4j_1_7_21.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_slf4j_slf4j_api_1_7_21.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_data_spring_data_commons_1_12_2_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_data_spring_data_mongodb_1_9_2_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_aop_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_aspects_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_beans_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_context_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_context_support_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_core_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_expression_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_jdbc_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_tx_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_web_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__org_springframework_spring_webmvc_4_3_1_RELEASE.xml&#x27;</span></span><br><span class="line">rm <span class="string">&#x27;.idea/libraries/Maven__redis_clients_jedis_2_6_2.xml&#x27;</span></span><br></pre></td></tr></table></figure>

<p>移除指定文件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">git rm --cached --force ydq-api/ydq-api.iml</span><br><span class="line">rm <span class="string">&#x27;ydq-api/ydq-api.iml&#x27;</span></span><br></pre></td></tr></table></figure>

<p>这样，表示移除成功。</p>
<p>现在，上面的操作进行提交：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/wa03I1_20210619221316.png" alt="img"></p>
<p>移交移除文件.png</p>
<p>以后再做一些变更，当再次提交时，只有未被忽略的（被忽略的文件的变更再也不会被提交了）修改的文件了。</p>
<p>现在，idea下配置.gitignore结束。</p>
<p>注：<br><strong>.gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未track状态），然后再提交：</strong><br><strong>输入：</strong><br><strong>git rm -r –cached filePath</strong><br><strong>git commit -m “remove xx”</strong><br><strong>或者：</strong><br><strong>git rm -r –cached .</strong><br><strong>git add .</strong><br><strong>git commit -m “update .gitignore”</strong></p>
<p><strong>来解释下几个参数 -r 是删除文件夹及其子目录 –cached 是删除暂存区里的文件而不删除工作区里的文件，第一种是删除某个文件，第二种方法就把所有暂存区里的文件删了，再加一遍，相当于更新了一遍。</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Dockerfile</title>
    <url>/posts/5624fad4/</url>
    <content><![CDATA[<h1 id="Docker相关指令"><a href="#Docker相关指令" class="headerlink" title="Docker相关指令"></a>Docker相关指令</h1><h2 id="docker镜像运行以及日志"><a href="#docker镜像运行以及日志" class="headerlink" title="docker镜像运行以及日志"></a>docker镜像运行以及日志</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker run --restart=always -d --name holer-client -e PARAMS=<span class="string">&quot;www.swimminghao.top 6060 51c45156bf1c4a82b4e6ffff2150b65e&quot;</span> swimminghao/holer-client:latest</span><br><span class="line">❯ docker run -d --name holer-server --restart=always -p 600:600 -p 6060:6060 -p 6443:6443 -p 11000-11010:11000-11010 swimminghao/holer-server:latest</span><br><span class="line">❯ docker logs -f 1ed9a5d6f0cc</span><br></pre></td></tr></table></figure>

<h2 id="Dockerfile-打包jar成docker镜像"><a href="#Dockerfile-打包jar成docker镜像" class="headerlink" title="Dockerfile 打包jar成docker镜像"></a>Dockerfile 打包jar成docker镜像</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker build -t swimminghao/holer-client:latest .</span><br></pre></td></tr></table></figure>

<h2 id="docker容器停止以及镜像删除"><a href="#docker容器停止以及镜像删除" class="headerlink" title="docker容器停止以及镜像删除"></a>docker容器停止以及镜像删除</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker ps -a</span><br><span class="line">❯ docker pull seanhongxing/holer-server</span><br><span class="line">❯ docker stop f8ca94969ba0 &amp;&amp; docker <span class="built_in">rm</span> f8ca94969ba0</span><br><span class="line">❯ docker image <span class="built_in">ls</span> -a</span><br><span class="line">❯ docker image <span class="built_in">rm</span> f8ca94969ba0</span><br></pre></td></tr></table></figure>

<h2 id="docker镜像反推Dockerfile："><a href="#docker镜像反推Dockerfile：" class="headerlink" title="docker镜像反推Dockerfile："></a>docker镜像反推Dockerfile：</h2><h3 id="1、指令"><a href="#1、指令" class="headerlink" title="1、指令"></a>1、指令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ docker <span class="built_in">history</span> &lt;83d576a828a8&gt; --format <span class="string">&quot;&#123;&#123;.CreatedBy&#125;&#125;&quot;</span> --no-trunc |<span class="built_in">tac</span> | awk <span class="string">&#x27;&#123;if($3~/nop/)&#123;for(i=1;i&lt;=3;i++)&#123;$i=&quot;&quot;&#125;;print substr($0,4)&#125;else&#123;print &quot;RUN&quot;,$0&#125;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、bash脚本"><a href="#2、bash脚本" class="headerlink" title="2、bash脚本"></a>2、bash脚本</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">❯ bash decompile.sh seanhongxing/holer-server</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"><span class="comment"># File Name: dockerfile.sh</span></span><br><span class="line"><span class="comment"># Author: www.linuxea.com</span></span><br><span class="line"><span class="comment"># Version: 1</span></span><br><span class="line"><span class="comment"># Created Time: Thu 14 Feb 2019 10:52:01 AM CST</span></span><br><span class="line"><span class="comment">#########################################################################</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$OSTYPE</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">    linux*)</span><br><span class="line">        docker <span class="built_in">history</span> --no-trunc --format <span class="string">&quot;&#123;&#123;.CreatedBy&#125;&#125;&quot;</span> <span class="variable">$1</span> | <span class="comment"># extract information from layers</span></span><br><span class="line">        <span class="built_in">tac</span>                                                    | <span class="comment"># reverse the file</span></span><br><span class="line">        sed <span class="string">&#x27;s,^\(|3.*\)\?/bin/\(ba\)\?sh -c,RUN,&#x27;</span>             | <span class="comment"># change /bin/(ba)?sh calls to RUN</span></span><br><span class="line">        sed <span class="string">&#x27;s,^RUN #(nop) *,,&#x27;</span>                                | <span class="comment"># remove RUN #(nop) calls for ENV,LABEL...</span></span><br><span class="line">        sed <span class="string">&#x27;s,  *&amp;&amp;  *, \\\n \&amp;\&amp; ,g&#x27;</span>                           <span class="comment"># pretty print multi command lines following Docker best practices</span></span><br><span class="line">    ;;</span><br><span class="line">    darwin*)</span><br><span class="line">        docker <span class="built_in">history</span> --no-trunc --format <span class="string">&quot;&#123;&#123;.CreatedBy&#125;&#125;&quot;</span> <span class="variable">$1</span> | <span class="comment"># extract information from layers</span></span><br><span class="line">        <span class="built_in">tail</span> -r                                                | <span class="comment"># reverse the file</span></span><br><span class="line">        sed -E <span class="string">&#x27;s,^(\|3.*)?/bin/(ba)?sh -c,RUN,&#x27;</span>               | <span class="comment"># change /bin/(ba)?sh calls to RUN</span></span><br><span class="line">        sed <span class="string">&#x27;s,^RUN #(nop) *,,&#x27;</span>                                | <span class="comment"># remove RUN #(nop) calls for ENV,LABEL...</span></span><br><span class="line">        sed $<span class="string">&#x27;s,  *&amp;&amp;  *, \\\ \\\n \&amp;\&amp; ,g&#x27;</span>                      <span class="comment"># pretty print multi command lines following Docker best practices</span></span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;unknown OSTYPE: <span class="variable">$OSTYPE</span>&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure>

<h2 id="docker镜像下载jar包"><a href="#docker镜像下载jar包" class="headerlink" title="docker镜像下载jar包"></a>docker镜像下载jar包</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//镜像导出</span><br><span class="line">❯ docker save -o ./client.tar seanhongxing/holer-client:latest</span><br><span class="line">//容器导出</span><br><span class="line">❯ docker <span class="built_in">export</span> seanhongxing/holer-client &gt; ./client.tar</span><br></pre></td></tr></table></figure>

<p><strong>注：分层，jar包在某一层</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mac快捷键</title>
    <url>/posts/d7c70a78/</url>
    <content><![CDATA[<h1 id="mac快捷键"><a href="#mac快捷键" class="headerlink" title="mac快捷键"></a>mac快捷键</h1><h2 id="图形按键"><a href="#图形按键" class="headerlink" title="图形按键"></a>图形按键</h2><table>
<thead>
<tr>
<th>按键或组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>⌘</td>
<td>Command 键</td>
</tr>
<tr>
<td>⌃</td>
<td>Control 键</td>
</tr>
<tr>
<td>⌥</td>
<td>Option 键</td>
</tr>
<tr>
<td>⇧</td>
<td>Shift 键</td>
</tr>
<tr>
<td>⇪</td>
<td>Caps Lock</td>
</tr>
<tr>
<td>fn</td>
<td>功能键常用快捷键</td>
</tr>
</tbody></table>
<h2 id="剪切、拷贝和粘贴"><a href="#剪切、拷贝和粘贴" class="headerlink" title="剪切、拷贝和粘贴"></a>剪切、拷贝和粘贴</h2><blockquote>
<p>您可以在大多数 app 中使用这些快捷键来剪切、拷贝或粘贴选中的项目。其中包括文本、图片、音乐等等。您甚至可以在 Finder 中拷贝和粘贴文件，来将文件拷贝到新位置。</p>
</blockquote>
<table>
<thead>
<tr>
<th>按键或组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-C</td>
<td>将所选数据拷贝到剪贴板</td>
</tr>
<tr>
<td>Command-X</td>
<td>移除选中的项目，然后将副本放在剪贴板中</td>
</tr>
<tr>
<td>Command-V</td>
<td>将剪贴板副本放到（粘贴）到当前文稿或 app 中</td>
</tr>
</tbody></table>
<h2 id="拍摄屏幕快照"><a href="#拍摄屏幕快照" class="headerlink" title="拍摄屏幕快照"></a>拍摄屏幕快照</h2><blockquote>
<p>使用这些快捷键可拍摄一张屏幕内容的照片。您也可以使用 Grab 拍摄屏幕快照，这款 app 位于“实用工具”文件夹中。</p>
</blockquote>
<table>
<thead>
<tr>
<th>按键或组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-Shift-3</td>
<td>将屏幕捕捉到文件</td>
</tr>
<tr>
<td>Command-Shift-Control-3</td>
<td>将屏幕内容捕捉到剪贴板</td>
</tr>
<tr>
<td>Command-Shift-4</td>
<td>将所选屏幕内容捕捉到一个文件，或按空格键仅捕捉一个窗口</td>
</tr>
<tr>
<td>Command-Shift-Control-4</td>
<td>将所选屏幕内容捕捉到剪贴板，或按空格键仅捕捉一个窗口</td>
</tr>
</tbody></table>
<h2 id="启动快捷键"><a href="#启动快捷键" class="headerlink" title="启动快捷键"></a>启动快捷键</h2><blockquote>
<p>使用这些组合键可更改电脑的启动方式。启动 Mac 后立即按住相关按键或组合键，直到所需的功能出现。例如，启动时按住 Option 键，直到“启动管理器”出现。<br>注：如果您使用的不是 Apple 制造的键盘，则 Alt 键通常相当于 Option 键。如果此修饰键不起作用，请尝试改用 Apple 键盘。</p>
</blockquote>
<table>
<thead>
<tr>
<th>按键或组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Option 或 Alt</td>
<td>显示所有启动宗卷（启动管理器）</td>
</tr>
<tr>
<td>Shift</td>
<td>在安全模式下启动</td>
</tr>
<tr>
<td>C</td>
<td>从可引导介质（DVD、CD、USB 闪存驱动器）启动</td>
</tr>
<tr>
<td>T</td>
<td>在目标磁盘模式下启动</td>
</tr>
<tr>
<td>N</td>
<td>从 NetBoot 服务器启动</td>
</tr>
<tr>
<td>X</td>
<td>强制 OS X 启动（如果非 OS X 启动宗卷可用）</td>
</tr>
<tr>
<td>D</td>
<td>使用 Apple Hardware Test</td>
</tr>
<tr>
<td>Command-R</td>
<td>使用 OS X 恢复功能（OS X Lion 或更高版本）</td>
</tr>
<tr>
<td>Command-Option-R</td>
<td>在受支持的电脑上使用互联网恢复</td>
</tr>
<tr>
<td>Command-V</td>
<td>以详细模式启动</td>
</tr>
<tr>
<td>Command-S</td>
<td>以单用户模式启动</td>
</tr>
<tr>
<td>Command-Option-P-R</td>
<td>重置 NVRAM</td>
</tr>
<tr>
<td>按住介质推出 (⏏) 键、F12 键、鼠标或触控板按钮</td>
<td>推出活动光盘</td>
</tr>
</tbody></table>
<h2 id="睡眠、关闭和注销快捷键"><a href="#睡眠、关闭和注销快捷键" class="headerlink" title="睡眠、关闭和注销快捷键"></a>睡眠、关闭和注销快捷键</h2><blockquote>
<p>Mac 启动后使用这些组合键可让电脑进入睡眠状态、关机、注销或重新启动。</p>
</blockquote>
<table>
<thead>
<tr>
<th>按键或组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>电源按钮</td>
<td>轻按可开机。在通电后，轻按“电源”按钮可使您的 Mac 唤醒或进入睡眠状态。</td>
</tr>
<tr>
<td>按住电源按钮 1.5 秒</td>
<td>显示重新启动&#x2F;睡眠&#x2F;关闭对话框</td>
</tr>
<tr>
<td>按住电源按钮 5 秒</td>
<td>强制 Mac 关机</td>
</tr>
<tr>
<td>Control-电源按钮</td>
<td>显示重新启动&#x2F;睡眠&#x2F;关闭对话框</td>
</tr>
<tr>
<td>Command-Control-电源按钮</td>
<td>强制 Mac 重新启动</td>
</tr>
<tr>
<td>Command-Option-电源按钮</td>
<td>使电脑进入睡眠状态</td>
</tr>
<tr>
<td>Command-Control-电源按钮</td>
<td>退出所有 app（会让您先存储对已打开文稿所作的更改），然后重新启动电脑</td>
</tr>
<tr>
<td>Command-Option-Control-电源按钮</td>
<td>退出所有 app（会让您先存储对已打开文稿所作的更改），然后关闭电脑</td>
</tr>
<tr>
<td>Shift-Control-电源按钮</td>
<td>使所有显示器进入睡眠状态</td>
</tr>
<tr>
<td>Command-Shift-Q</td>
<td>注销</td>
</tr>
<tr>
<td>Command-Shift-Option-Q</td>
<td>立即注销</td>
</tr>
</tbody></table>
<h2 id="App-快捷键"><a href="#App-快捷键" class="headerlink" title="App 快捷键"></a>App 快捷键</h2><blockquote>
<p>这些键盘快捷键适用于大部分 app。</p>
</blockquote>
<table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-A</td>
<td>在最前面的窗口中选择所有项目或文本</td>
</tr>
<tr>
<td>Command-Z</td>
<td>撤消上一命令（有些 app 可让您撤消多次）</td>
</tr>
<tr>
<td>Command-Shift-Z</td>
<td>重做，恢复上次使用撤消进行的更改（有些 app 可让您重做多次）</td>
</tr>
<tr>
<td>Command-空格键</td>
<td>显示或隐藏 Spotlight 搜索栏（如果同时使用多语种，此快捷键可能会转而循环显示启用的脚本系统）</td>
</tr>
<tr>
<td>Command-Option-空格键</td>
<td>显示 Spotlight 搜索结果窗口（如果安装了多语种，则可能循环显示某一脚本中的键盘布局和输入法）</td>
</tr>
<tr>
<td>Command-Tab</td>
<td>在打开的 app 列表中，向下移动到下一个最近使用的 app</td>
</tr>
<tr>
<td>Option-介质推出键 (⏏)</td>
<td>从备选光盘驱动器中推出（如果已安装）</td>
</tr>
<tr>
<td>Command-调低亮度 (F1)</td>
<td>切换针对多显示器配置的“镜像显示器”</td>
</tr>
<tr>
<td>Command-调高亮度 (F2)</td>
<td>切换目标显示器模式</td>
</tr>
<tr>
<td>Command-Mission Control (F3)</td>
<td>显示桌面</td>
</tr>
<tr>
<td>Command-F5</td>
<td>切换 VoiceOver 的开关</td>
</tr>
<tr>
<td>Option-亮度 (F2)</td>
<td>打开“显示器”系统偏好设置</td>
</tr>
<tr>
<td>Option-Mission Control (F3)</td>
<td>打开“Mission Control”偏好设置</td>
</tr>
<tr>
<td>Option-音量键 (F12)</td>
<td>打开“声音”偏好设置</td>
</tr>
<tr>
<td>Command-减号 (–)</td>
<td>缩小所选项</td>
</tr>
<tr>
<td>Command-冒号 (:)</td>
<td>显示“拼写和语法”窗口</td>
</tr>
<tr>
<td>Command-分号 (;)</td>
<td>查找文稿中拼写错误的词</td>
</tr>
<tr>
<td>Command-逗号 (,)</td>
<td>打开最前面的 app 的偏好设置窗口</td>
</tr>
<tr>
<td>Command-问号 (?)</td>
<td>打开“帮助”菜单</td>
</tr>
<tr>
<td>Command-加号 (+)或 Command-Shift-等号 (&#x3D;)</td>
<td>放大所选项</td>
</tr>
<tr>
<td>Command-Option-D</td>
<td>显示或隐藏 Dock</td>
</tr>
<tr>
<td>Command-Control-D</td>
<td>显示或隐藏选中字词的定义</td>
</tr>
<tr>
<td>Command-D</td>
<td>在“打开和存储”对话框中选择“桌面”文件夹</td>
</tr>
<tr>
<td>Command-Delete</td>
<td>选择包含“删除”或“不存储”按钮的对话框中的“不存储”</td>
</tr>
<tr>
<td>Command-E</td>
<td>使用所选内容进行查找</td>
</tr>
<tr>
<td>Command-F</td>
<td>打开“查找”窗口，或在文稿中查找文本</td>
</tr>
<tr>
<td>Command-Option-F</td>
<td>移到搜索栏控件</td>
</tr>
<tr>
<td>Command-G</td>
<td>查找所选内容出现的下一个位置</td>
</tr>
<tr>
<td>Command-Shift-G</td>
<td>查找所选内容出现的上一个位置</td>
</tr>
<tr>
<td>Command-H</td>
<td>隐藏当前正在运行的 app 的窗口</td>
</tr>
<tr>
<td>Command-Option-H</td>
<td>隐藏所有其他正在运行的 app 的窗口</td>
</tr>
<tr>
<td>Command-Option-I</td>
<td>显示检查器窗口</td>
</tr>
<tr>
<td>Command-M</td>
<td>将活跃窗口最小化至 Dock</td>
</tr>
<tr>
<td>Command-Option-M</td>
<td>将处于活动状态的 app 的所有窗口最小化至 Dock 中</td>
</tr>
<tr>
<td>Command-N</td>
<td>在最前面的 app 中创建新文稿</td>
</tr>
<tr>
<td>Command-O</td>
<td>显示一个对话框，用于选择要在最前面的 app 中打开的文稿</td>
</tr>
<tr>
<td>Command-P</td>
<td>打印当前文稿</td>
</tr>
<tr>
<td>Command-Shift-P</td>
<td>显示用于指定文稿参数（页面设置）的对话框</td>
</tr>
<tr>
<td>Command-Q</td>
<td>退出最前面的 app</td>
</tr>
<tr>
<td>Command-S</td>
<td>存储活跃文稿</td>
</tr>
<tr>
<td>Command-Shift-S</td>
<td>显示“存储为”对话框或复制当前文稿</td>
</tr>
<tr>
<td>Command-Option-T</td>
<td>显示或隐藏工具栏</td>
</tr>
<tr>
<td>Command-W</td>
<td>关闭最前面的窗口</td>
</tr>
<tr>
<td>Command-Option-W</td>
<td>关闭当前 app 中的所有窗口</td>
</tr>
<tr>
<td>Command-Z</td>
<td>撤消上一命令（有些 app 允许多次撤消）</td>
</tr>
<tr>
<td>Command-Shift-Z</td>
<td>重做，恢复上次使用撤消进行的更改（有些 app 可让您重做多次）</td>
</tr>
<tr>
<td>Command-Option-esc</td>
<td>选择要强制退出的 app</td>
</tr>
<tr>
<td>Command-Shift-Option-Esc（按住三秒钟）</td>
<td>强制退出最前面的 app</td>
</tr>
</tbody></table>
<h2 id="对文本进行处理"><a href="#对文本进行处理" class="headerlink" title="对文本进行处理"></a>对文本进行处理</h2><blockquote>
<p>编辑某个字段或文稿中的文本时可使用这些组合键。</p>
</blockquote>
<table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-B</td>
<td>以粗体显示所选文本或切换文本粗体显示开&#x2F;关</td>
</tr>
<tr>
<td>Command-I</td>
<td>以斜体显示所选文本或切换文本斜体显示开&#x2F;关</td>
</tr>
<tr>
<td>Command-U</td>
<td>对所选文本加下划线或打开&#x2F;关闭加下划线功能</td>
</tr>
<tr>
<td>Command-T</td>
<td>显示或隐藏“字体”窗口</td>
</tr>
<tr>
<td>fn-Delete</td>
<td>向前删除（适用于便携式 Mac 的内建键盘）</td>
</tr>
<tr>
<td>fn-上箭头</td>
<td>向上滚动一页（相当于 Page Up 键）</td>
</tr>
<tr>
<td>fn-下箭头</td>
<td>向下滚动一页（相当于 Page Down 键）</td>
</tr>
<tr>
<td>fn-左箭头</td>
<td>滚动至文稿开头（相当于 Home 键）</td>
</tr>
<tr>
<td>fn-右箭头</td>
<td>滚动至文稿末尾（相当于 End 键）</td>
</tr>
<tr>
<td>Command-右箭头</td>
<td>将文本插入点移至当前行的行尾</td>
</tr>
<tr>
<td>Command-左箭头</td>
<td>将文本插入点移至当前行的行首</td>
</tr>
<tr>
<td>Command-下箭头</td>
<td>将文本插入点移至文稿末尾</td>
</tr>
<tr>
<td>Command-上箭头</td>
<td>将文本插入点移至文稿开头</td>
</tr>
<tr>
<td>Option-右箭头</td>
<td>将文本插入点移至下一个单词的末尾</td>
</tr>
<tr>
<td>Option-左箭头</td>
<td>将文本插入点移至上一个单词的开头</td>
</tr>
<tr>
<td>Option-Delete</td>
<td>删除光标左侧的词，以及词后的任何空格或标点符号</td>
</tr>
<tr>
<td>Command-Shift-右箭头</td>
<td>选中插入点与当前行行尾之间的文本 (*)</td>
</tr>
<tr>
<td>Command-Shift-左箭头</td>
<td>选中插入点与当前行行首之间的文本 (*)</td>
</tr>
<tr>
<td>Command-Shift-上箭头</td>
<td>选中插入点与文稿开头之间的文本 (*)</td>
</tr>
<tr>
<td>Command-Shift-下箭头</td>
<td>选中插入点与文稿末尾之间的文本 (*)</td>
</tr>
<tr>
<td>Shift-左箭头</td>
<td>将文本选择范围向左扩展一个字符 (*)</td>
</tr>
<tr>
<td>Shift-右箭头</td>
<td>将文本选择范围向右扩展一个字符 (*)</td>
</tr>
<tr>
<td>Shift-上箭头</td>
<td>将文本选择范围扩展到上一行相同水平位置的最近字符边缘 (*)</td>
</tr>
<tr>
<td>Shift-下箭头</td>
<td>将文本选择范围扩展到下一行相同水平位置的最近字符边缘 (*)</td>
</tr>
<tr>
<td>Shift-Option-右箭头</td>
<td>将文本选择范围扩展到当前词的词尾，再按一次则扩展到后一词的词尾 (*)</td>
</tr>
<tr>
<td>Shift-Option-左箭头</td>
<td>将文本选择范围扩展到当前词的词首，再按一次则扩展到后一词的词首 (*)</td>
</tr>
<tr>
<td>Shift-Option-下箭头</td>
<td>将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的结尾 (*)</td>
</tr>
<tr>
<td>Shift-Option-上箭头</td>
<td>将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首 (*)</td>
</tr>
<tr>
<td>Control-A</td>
<td>移至行或段落的开头</td>
</tr>
<tr>
<td>Control-B</td>
<td>向后移动一个字符</td>
</tr>
<tr>
<td>Control-D</td>
<td>删除光标前的字符</td>
</tr>
<tr>
<td>Control-E</td>
<td>移至行或段落的开头</td>
</tr>
<tr>
<td>Control-F</td>
<td>向前移动一个字符</td>
</tr>
<tr>
<td>Control-H</td>
<td>删除光标后的字符</td>
</tr>
<tr>
<td>Control-K</td>
<td>删除从光标前的字符到行或段落末尾的所有内容</td>
</tr>
<tr>
<td>Control-L</td>
<td>将光标或所选内容置于可见区域中央</td>
</tr>
<tr>
<td>Control-N</td>
<td>下移一行</td>
</tr>
<tr>
<td>Control-O</td>
<td>在光标后插入一行</td>
</tr>
<tr>
<td>Control-P</td>
<td>上移一行</td>
</tr>
<tr>
<td>Control-T</td>
<td>调换光标前后的字符</td>
</tr>
<tr>
<td>Control-V</td>
<td>下移</td>
</tr>
<tr>
<td>Command-{</td>
<td>使所选内容左对齐</td>
</tr>
<tr>
<td>Command-}</td>
<td>使所选内容右对齐</td>
</tr>
<tr>
<td>Command-</td>
<td>使所选内容居中对齐</td>
</tr>
<tr>
<td>Command-Option-C</td>
<td>拷贝所选项的格式设置并存储到剪贴板</td>
</tr>
<tr>
<td>Command-Option-V</td>
<td>将某对象的样式应用于所选对象（粘贴样式）</td>
</tr>
<tr>
<td>Command-Shift-Option-V</td>
<td>将周围文本的样式应用于所插入对象（粘贴并匹配样式）</td>
</tr>
<tr>
<td>Command-Control-V</td>
<td>将格式设置应用于所选对象（粘贴标尺）</td>
</tr>
</tbody></table>
<h2 id="辅助功能"><a href="#辅助功能" class="headerlink" title="辅助功能"></a>辅助功能</h2><blockquote>
<p>这些键盘快捷键可帮助您通过键盘或辅助设备控制 Mac。这些快捷键中，有些快捷键需要在“系统偏好设置”的“键盘”面板或“辅助功能”面板中启用。</p>
</blockquote>
<table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-Option-F5</td>
<td>显示辅助功能选项</td>
</tr>
<tr>
<td>Command-F5 或 fn-Command-F5</td>
<td>打开或关闭 VoiceOver</td>
</tr>
<tr>
<td>Option-Control-F8 或 fn-Option-Control-F8</td>
<td>打开 VoiceOver 实用工具（如果 VoiceOver 已打开）</td>
</tr>
<tr>
<td>Command-Option-8</td>
<td>打开或关闭缩放功能</td>
</tr>
<tr>
<td>Command-Option-加号 (+)</td>
<td>放大</td>
</tr>
<tr>
<td>Command-Option-减号 (–)</td>
<td>缩小</td>
</tr>
<tr>
<td>Command-Option-Control-8</td>
<td>反转&#x2F;复原屏幕颜色</td>
</tr>
<tr>
<td>Command-Option-Control-逗号 (,)</td>
<td>降低对比度</td>
</tr>
<tr>
<td>Command-Option-Control-句点 (.)</td>
<td>增强对比度</td>
</tr>
</tbody></table>
<h2 id="全键盘控制"><a href="#全键盘控制" class="headerlink" title="全键盘控制"></a>全键盘控制</h2><blockquote>
<p>通过全键盘控制，您可以使用键盘进行导航，并与屏幕上的项目进行交互。使用这些快捷键可选择并调整文本栏和滑块等控件。按 Control-F7 或从“系统偏好设置”中“键盘”偏好设置的“快捷键”面板中选择“全键盘控制”，可以切换此设置开&#x2F;关。</p>
</blockquote>
<table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Tab</td>
<td>移至下一个控件</td>
</tr>
<tr>
<td>Shift-Tab</td>
<td>移至上一个控件</td>
</tr>
<tr>
<td>Control-Tab</td>
<td>已选择文本栏时移至下一个控件</td>
</tr>
<tr>
<td>Shift-Control-Tab</td>
<td>将焦点移至上一组控件</td>
</tr>
<tr>
<td>箭头键</td>
<td>移至列表、标签组或菜单中的相邻项，或移动滑块和调节器（用于增加和减小值的垂直上下箭头）</td>
</tr>
<tr>
<td>Control-箭头键</td>
<td>移至与文本栏相邻的控件</td>
</tr>
<tr>
<td>空格键</td>
<td>选择高亮显示的菜单项</td>
</tr>
<tr>
<td>Return 或 Enter 键</td>
<td>点按默认按钮或执行默认操作</td>
</tr>
<tr>
<td>Esc 键</td>
<td>点按“取消”按钮，或关闭菜单而不选取项目</td>
</tr>
<tr>
<td>Shift-Control-F6</td>
<td>将焦点移至上一个面板</td>
</tr>
<tr>
<td>Control-F7</td>
<td>临时覆盖窗口和对话框中的当前键盘访问模式</td>
</tr>
<tr>
<td>Control-F8</td>
<td>移到菜单栏中的状态菜单</td>
</tr>
<tr>
<td>Command-重音符 (&#96;)</td>
<td>激活最前面的 app 中下一个打开的窗口</td>
</tr>
<tr>
<td>Command-Shift-重音符 (&#96;)</td>
<td>激活最前面的 app 中上一个打开的窗口</td>
</tr>
<tr>
<td>Command-Option-重音符 (&#96;)</td>
<td>将焦点移至窗口抽屉</td>
</tr>
</tbody></table>
<h2 id="您可以在菜单栏中浏览菜单，而无需使用鼠标或触控板。若要将焦点置于菜单栏中，请按-Control-F2（便携式键盘上的-fn-Control-F2）。然后使用下列组合键。"><a href="#您可以在菜单栏中浏览菜单，而无需使用鼠标或触控板。若要将焦点置于菜单栏中，请按-Control-F2（便携式键盘上的-fn-Control-F2）。然后使用下列组合键。" class="headerlink" title="您可以在菜单栏中浏览菜单，而无需使用鼠标或触控板。若要将焦点置于菜单栏中，请按 Control-F2（便携式键盘上的 fn-Control-F2）。然后使用下列组合键。"></a>您可以在菜单栏中浏览菜单，而无需使用鼠标或触控板。若要将焦点置于菜单栏中，请按 Control-F2（便携式键盘上的 fn-Control-F2）。然后使用下列组合键。</h2><table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>左箭头和右箭头</td>
<td>从一个菜单移到另一个菜单</td>
</tr>
<tr>
<td>Return</td>
<td>打开所选菜单</td>
</tr>
<tr>
<td>上箭头和下箭头</td>
<td>移至所选菜单中的菜单项</td>
</tr>
<tr>
<td>键入菜单项的名称</td>
<td>跳到所选菜单中的菜单项</td>
</tr>
<tr>
<td>Return</td>
<td>选择菜单项</td>
</tr>
</tbody></table>
<h2 id="辅助功能-鼠标键"><a href="#辅助功能-鼠标键" class="headerlink" title="辅助功能 - 鼠标键"></a>辅助功能 - 鼠标键</h2><blockquote>
<p>在“辅助功能”偏好设置中打开“鼠标键后，您可以使用键盘或数字小键盘上的按键移动鼠标指针。</p>
</blockquote>
<table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>8 或数字小键盘上的 8</td>
<td>上移</td>
</tr>
<tr>
<td>K 或数字小键盘上的 2</td>
<td>下移</td>
</tr>
<tr>
<td>U 或数字小键盘上的 4</td>
<td>左移</td>
</tr>
<tr>
<td>O 或数字小键盘上的 6</td>
<td>右移</td>
</tr>
<tr>
<td>J 或数字小键盘上的 1</td>
<td>沿对角线向左下角移</td>
</tr>
<tr>
<td>L 或数字小键盘上的 3</td>
<td>沿对角线向右下角移</td>
</tr>
<tr>
<td>7 或数字小键盘上的 7</td>
<td>沿对角线向左上角移</td>
</tr>
<tr>
<td>9 或数字小键盘上的 9</td>
<td>沿对角线向右上角移</td>
</tr>
<tr>
<td>I 或数字小键盘上的 5</td>
<td>按鼠标按钮</td>
</tr>
<tr>
<td>M 或数字小键盘上的 0</td>
<td>按住鼠标按钮</td>
</tr>
<tr>
<td>.（句点键）</td>
<td>释放按住的鼠标按钮</td>
</tr>
</tbody></table>
<h2 id="Finder-快捷键"><a href="#Finder-快捷键" class="headerlink" title="Finder 快捷键"></a>Finder 快捷键</h2><table>
<thead>
<tr>
<th>组合键</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Command-A</td>
<td>选择最前面的窗口中的所有文件</td>
</tr>
<tr>
<td>Command-Option-A</td>
<td>取消选择所有项</td>
</tr>
<tr>
<td>Command-C</td>
<td>拷贝选中的文件，然后使用“粘贴”或“移动”来移动这些文件。</td>
</tr>
<tr>
<td>Command-D</td>
<td>重复选中的文件</td>
</tr>
<tr>
<td>Command-E</td>
<td>推出</td>
</tr>
<tr>
<td>Command-F</td>
<td>查找任何匹配 Spotlight 属性的内容</td>
</tr>
<tr>
<td>Command-I</td>
<td>显示选中的文件的“显示简介”窗口</td>
</tr>
<tr>
<td>Command-Shift-C</td>
<td>打开“电脑”窗口</td>
</tr>
<tr>
<td>Command-Shift-D</td>
<td>打开“桌面”文件夹</td>
</tr>
<tr>
<td>Command-Shift-F</td>
<td>显示“我的所有文件”窗口</td>
</tr>
<tr>
<td>Command-Shift-G</td>
<td>前往文件夹</td>
</tr>
<tr>
<td>Command-Shift-H</td>
<td>打开当前已登录用户帐户的个人文件夹</td>
</tr>
<tr>
<td>Command-Shift-I</td>
<td>打开 iCloud Drive</td>
</tr>
<tr>
<td>Command-Shift-K</td>
<td>打开“网络”窗口</td>
</tr>
<tr>
<td>Command-Shift-L</td>
<td>打开“下载”文件夹</td>
</tr>
<tr>
<td>Command-Shift-O</td>
<td>打开“文稿”文件夹</td>
</tr>
<tr>
<td>Command-Shift-R</td>
<td>打开 AirDrop 窗口</td>
</tr>
<tr>
<td>Command-Shift-U</td>
<td>打开“实用工具”文件夹</td>
</tr>
<tr>
<td>Command-Control-T</td>
<td>添加到边栏 (OS X Mavericks)</td>
</tr>
<tr>
<td>Command-Option-I</td>
<td>显示或隐藏“检查器”窗口</td>
</tr>
<tr>
<td>Command-Control-I</td>
<td>获得摘要信息</td>
</tr>
<tr>
<td>Command-Option-P</td>
<td>隐藏或显示路径栏</td>
</tr>
<tr>
<td>Command-Option-S</td>
<td>隐藏或显示边栏</td>
</tr>
<tr>
<td>Command-正斜线 (&#x2F;)</td>
<td>隐藏或显示状态栏</td>
</tr>
<tr>
<td>Command-J</td>
<td>调出“显示”选项</td>
</tr>
<tr>
<td>Command-K</td>
<td>连接到服务器</td>
</tr>
<tr>
<td>Command-L</td>
<td>为所选项制作替身</td>
</tr>
<tr>
<td>Command-N</td>
<td>新建 Finder 窗口</td>
</tr>
<tr>
<td>Command-Shift-N</td>
<td>新建文件夹</td>
</tr>
<tr>
<td>Command-Option-N</td>
<td>新建智能文件夹</td>
</tr>
<tr>
<td>Command-O</td>
<td>打开所选项</td>
</tr>
<tr>
<td>Command-R</td>
<td>显示（替身的）原身</td>
</tr>
<tr>
<td>Command-T</td>
<td>在当前 Finder窗口中打开单个标签时显示或隐藏标签栏</td>
</tr>
<tr>
<td>Command-Shift-T</td>
<td>显示或隐藏 Finder 标签</td>
</tr>
<tr>
<td>Command-Option-T</td>
<td>在当前 Finder窗口中打开单个标签时显示或隐藏工具栏</td>
</tr>
<tr>
<td>Command-V</td>
<td>将您放在剪贴板上的文本副本粘贴到当前位置。</td>
</tr>
<tr>
<td>Command-Option-V</td>
<td>将您放在剪贴板上的文本从其原始位置移动到当前位置。</td>
</tr>
<tr>
<td>Command-Option-Y</td>
<td>查看选中文件的快速查看幻灯片。</td>
</tr>
<tr>
<td>Command-1</td>
<td>以图标显示</td>
</tr>
<tr>
<td>Command-2</td>
<td>以列表方式显示</td>
</tr>
<tr>
<td>Command-3</td>
<td>以分栏方式显示</td>
</tr>
<tr>
<td>Command-4</td>
<td>以 Cover Flow 方式显示（Mac OS X v10.5 或更高版本）</td>
</tr>
<tr>
<td>Command-逗号 (,)</td>
<td>打开 Finder 偏好设置</td>
</tr>
<tr>
<td>Command-左中括号 ([)</td>
<td>前往上一文件夹</td>
</tr>
<tr>
<td>Command-右中括号 (])</td>
<td>前往下一文件夹</td>
</tr>
<tr>
<td>Command-Control-上箭头</td>
<td>在新窗口中打开包含当前文件夹的文件夹</td>
</tr>
<tr>
<td>Command-下箭头</td>
<td>打开高亮显示的项目</td>
</tr>
<tr>
<td>右箭头（以列表视图显示）</td>
<td>打开所选文件夹</td>
</tr>
<tr>
<td>左箭头（以列表视图显示）</td>
<td>关闭所选文件夹</td>
</tr>
<tr>
<td>Option-点按显示三角形</td>
<td>（以列表视图显示）打开所选文件夹内的所有文件夹</td>
</tr>
<tr>
<td>Option-连按</td>
<td>在单独窗口中打开文件夹，并关闭当前窗口</td>
</tr>
<tr>
<td>Command-连按</td>
<td>在单独标签或窗口中打开文件夹</td>
</tr>
<tr>
<td>Command-点按窗口标题</td>
<td>查看包含当前窗口的文件夹</td>
</tr>
<tr>
<td>Command-Delete</td>
<td>移至废纸篓</td>
</tr>
<tr>
<td>Command-Shift-Delete</td>
<td>清倒废纸篓</td>
</tr>
<tr>
<td>Command-Shift-Option-Delete</td>
<td>清倒废纸篓（不显示确认对话框）</td>
</tr>
<tr>
<td>空格键（或 Command-Y）</td>
<td>快速查看选中的文件</td>
</tr>
<tr>
<td>拖移时按 Command 键</td>
<td>将拖移的项目移至其他宗卷或位置（按住按键时指针会改变）</td>
</tr>
<tr>
<td>拖移时按 Option键</td>
<td>拷贝拖移的项目（按住按键时指针会改变）</td>
</tr>
<tr>
<td>拖移时按 Command-Option 组合键</td>
<td>对拖移的项目赋予别名（按住按键时指针会改变）</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>mac</tag>
      </tags>
  </entry>
  <entry>
    <title>NAS上搭建SS客户端</title>
    <url>/posts/e215f7cb/</url>
    <content><![CDATA[<h1 id="群辉NAS上搭建SS客户端来连接远程并提供本地HTTP-x2F-Socks5代理"><a href="#群辉NAS上搭建SS客户端来连接远程并提供本地HTTP-x2F-Socks5代理" class="headerlink" title="群辉NAS上搭建SS客户端来连接远程并提供本地HTTP&#x2F;Socks5代理"></a>群辉NAS上搭建SS客户端来连接远程并提供本地HTTP&#x2F;Socks5代理</h1><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/mxF2RW_20220217094542.png" alt="img"></p>
<p><a href="https://odcn.top/2018/10/24/854/%E7%BE%A4%E6%99%96ss%E5%90%8C%E6%AD%A5dropbox%E5%92%8Cgoogledrive/">主要参考了这片文章。</a></p>
<blockquote>
<p><a href="https://odcn.top/2018/10/24/854/%E7%BE%A4%E6%99%96ss%E5%90%8C%E6%AD%A5dropbox%E5%92%8Cgoogledrive/">shadowsocks的Http代理桥接为SOCKS5代理，使群晖SS同步Dropbox和GoogleDrive</a></p>
</blockquote>
<iframe title="《shadowsocks的Http代理桥接为SOCKS5代理，使群晖SS同步Dropbox和GoogleDrive》—oD^Blog" class="wp-embedded-content" sandbox="allow-scripts" security="restricted" src="https://odcn.top/2018/10/24/854/%e7%be%a4%e6%99%96ss%e5%90%8c%e6%ad%a5dropbox%e5%92%8cgoogledrive/embed/#?secret=hiN7sQcs2t" data-secret="hiN7sQcs2t" width="600" height="338" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="box-sizing: border-box; margin: 0px; padding: 0px; border: 0px; max-width: 100%; position: absolute; clip: rect(1px, 1px, 1px, 1px);"></iframe>
**Contents**  [hide](https://1024.ee/index.php/2020/04/06/群辉nas上搭建ss客户端来连接远程并提供本地http-socks5代理/#) 

<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#xia_zaidocker_-_ss-privoxy">1 下载docker – ss-privoxy</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#gao_ji_she_zhi">2 高级设置</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#she_zhi_duan_kou">3 设置端口</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#zui_hou_cha_yi_cha">4 最后查一查</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#kai_qi_hou_cha_cha_ri_zhi_yi_qie_zheng_chang_ji_ke">5 开启后查查日志，一切正常即可</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#qun_hui_zi_ji_de_shi_yong_kai_zhe_li_jiu_xing">6 群辉自己的使用，看这里就行。</a></p>
<p><a href="https://1024.ee/index.php/2020/04/06/%E7%BE%A4%E8%BE%89nas%E4%B8%8A%E6%90%AD%E5%BB%BAss%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%9D%A5%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E5%B9%B6%E6%8F%90%E4%BE%9B%E6%9C%AC%E5%9C%B0http-socks5%E4%BB%A3%E7%90%86/#qun_hui_zi_ji_de_shi_yong_kai_zhe_li_jiu_xing">7指令</a></p>
<h2 id="下载docker-–-ss-privoxy"><a href="#下载docker-–-ss-privoxy" class="headerlink" title="下载docker – ss-privoxy"></a>下载docker – ss-privoxy</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2NcHvz_20220217094617.png" alt="img"></p>
<h2 id="高级设置"><a href="#高级设置" class="headerlink" title="高级设置"></a>高级设置</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/JTDf8S_20220217094637.png" alt="img">注意是<strong>文件</strong>，不是文件夹。而且，文件名就是<strong>config</strong>, 不是config.conf之类。</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment">#配置文件</span></span><br><span class="line"></span><br><span class="line">confdir /etc/privoxy</span><br><span class="line">logdir /var/log/privoxy</span><br><span class="line"></span><br><span class="line">actionsfile match-all.action <span class="comment"># Actions that are applied to all sites and maybe overruled later on.</span></span><br><span class="line">actionsfile default.action <span class="comment"># Main actions file</span></span><br><span class="line">actionsfile <span class="keyword">user</span>.action <span class="comment"># User customizations</span></span><br><span class="line"></span><br><span class="line">filterfile default.filter</span><br><span class="line">filterfile <span class="keyword">user</span>.filter <span class="comment"># User customizations</span></span><br><span class="line"></span><br><span class="line">logfile privoxy.log</span><br><span class="line"><span class="comment">#下面这行的意思是监听来自任意地址的8118访问</span></span><br><span class="line">listen-address :<span class="number">8118</span></span><br><span class="line">toggle <span class="number">1</span></span><br><span class="line"></span><br><span class="line">enable-remote-toggle <span class="number">0</span></span><br><span class="line">enable-remote-http-toggle <span class="number">0</span></span><br><span class="line">enable-edit-actions <span class="number">0</span></span><br><span class="line">enforce-blocks <span class="number">0</span></span><br><span class="line"></span><br><span class="line">buffer-limit <span class="number">4096</span></span><br><span class="line">enable-proxy-authentication-forwarding <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启用这段全局代理模式#####################################</span></span><br><span class="line"><span class="comment">##下面一行表示将所有网址转发给本地7070端口，也就是本地的SS客户端所开放的端口。</span></span><br><span class="line"><span class="comment">#forward-socks5 / 127.0.0.1:7070 .</span></span><br><span class="line"><span class="comment">#启动这段只有部分网址走代理###############################</span></span><br><span class="line">forward / .</span><br><span class="line"><span class="comment">#下面这一段表示需要走代理的规则</span></span><br><span class="line">forward-socks5 .dropbox*.com <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7070</span> .</span><br><span class="line">forward-socks5 .*google*.* <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7070</span> .</span><br><span class="line">forward-socks5 .*facebook*.* <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7070</span> .</span><br><span class="line">forward-socks5 .*twitter*.* <span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">7070</span> .</span><br><span class="line"><span class="comment">#forward-socks5 .*youtube*.* 127.0.0.1:7070 .</span></span><br><span class="line"><span class="comment">##########################################################</span></span><br><span class="line">forwarded-connect-retries <span class="number">0</span></span><br><span class="line"></span><br><span class="line">accept-intercepted-requests <span class="number">0</span></span><br><span class="line">allow-cgi-request-crunching <span class="number">0</span></span><br><span class="line">split-large-forms <span class="number">0</span></span><br><span class="line">keep-alive-timeout <span class="number">300</span></span><br><span class="line">tolerate-pipelining <span class="number">1</span></span><br><span class="line">default-server-timeout <span class="number">60</span></span><br><span class="line">socket-timeout <span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置文件结束</span></span><br></pre></td></tr></table></figure>

<h2 id="设置端口"><a href="#设置端口" class="headerlink" title="设置端口"></a>设置端口</h2><ul>
<li>7070 For Socks5 – All Traffic</li>
<li>8118 for Http&#x2F;Https – 部分域名翻墙，改conf文件即可</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/t5PYQv_20220217094721.png" alt="img"></p>
<h2 id="最后查一查"><a href="#最后查一查" class="headerlink" title="最后查一查"></a>最后查一查</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/iwGoJB_20220217094740.png" alt="img"></p>
<h2 id="开启后查查日志，一切正常即可"><a href="#开启后查查日志，一切正常即可" class="headerlink" title="开启后查查日志，一切正常即可"></a>开启后查查日志，一切正常即可</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/S5u8G1_20220217094809.png" alt="img"></p>
<h2 id="群辉自己的使用，开这里就行。"><a href="#群辉自己的使用，开这里就行。" class="headerlink" title="群辉自己的使用，开这里就行。"></a>群辉自己的使用，开这里就行。</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/L0Nwl6_20220217094828.png" alt="img"></p>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d --restart=always \</span><br><span class="line">-i -t -e SERVER_ADDR=n24.boom.party \</span><br><span class="line">-e SERVER_PORT=12000 \</span><br><span class="line">-e PASSWORD=Uk92CS \</span><br><span class="line">-e METHOD=aes-256-cfb \</span><br><span class="line">-e PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \</span><br><span class="line">-e TIME_OUT=300 \</span><br><span class="line">-p 7070:7070 \</span><br><span class="line">-p 8118:8118 \</span><br><span class="line">-v /share/CACHEDEV1_DATA/Container/etc/privoxy/config:/etc/privoxy/config \</span><br><span class="line">oldiy/ss-privoxy</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>nas</tag>
      </tags>
  </entry>
  <entry>
    <title>shell知识点</title>
    <url>/posts/5832e44e/</url>
    <content><![CDATA[<h1 id="1易混淆点"><a href="#1易混淆点" class="headerlink" title="$1易混淆点"></a>$1易混淆点</h1><h2 id="一、标准输入和参数的区别"><a href="#一、标准输入和参数的区别" class="headerlink" title="一、标准输入和参数的区别"></a>一、标准输入和参数的区别</h2><p>这个问题一定是最容易让人迷惑的，具体来说，就是搞不清什么时候用管道 符| 和文件重定向&gt; ，&lt; ，什么时候用变量$ 。</p>
<p>比如说，我现在有个自动连接宽带的 shell 脚本 connect.sh ，存在我的家目录:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">where</span> connect.sh </span><br><span class="line">/home/fdl/bin/connect.sh</span><br></pre></td></tr></table></figure>

<p>如果我想删除这个脚本，而且想少敲几次键盘，应该怎么操作呢?我曾经这<br>样尝试过:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">where</span> connect.sh | <span class="built_in">rm</span></span><br></pre></td></tr></table></figure>

<p>实际上，这样操作是错误的，正确的做法应该是这样的:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">rm</span> $(<span class="built_in">where</span> connect.sh)</span><br></pre></td></tr></table></figure>

<p>前者试图将 where 的结果连接到 rm 的标准输入，后者试图将结果作为命令行参数传入。</p>
<p><strong>标准输入就是编程语言中诸如</strong> <strong>scanf</strong> <strong>或者</strong> <strong>readline</strong> <strong>这种命令;而参数是指 程序的</strong> <strong>main</strong> <strong>函数传入的</strong> <strong>args</strong> <strong>字符数组</strong>。</p>
<p>前文「Linux文件描述符」说过，管道符和重定向符是将数据作为程序的标 准输入，而 $(cmd) 是读取 cmd 命令输出的数据作为参数。</p>
<p>用刚才的例子说， rm 命令源代码中肯定不接受标准输入，而是接收命令行 参数，删除相应的文件。作为对比， cat 命令是既接受标准输入，又接受 命令行参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cat</span> filename </span><br><span class="line">...file text...</span><br><span class="line">$ <span class="built_in">cat</span> &lt; filename</span><br><span class="line">...file text...</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span> | <span class="built_in">cat</span></span><br><span class="line">hello world</span><br></pre></td></tr></table></figure>

<p><strong>如果命令能够让终端阻塞，说明该命令接收标准输入，反之就是不接受</strong>，比 如你只运行 cat 命令不加任何参数，终端就会阻塞，等待你输入字符串并 回显相同的字符串。</p>
<h2 id="二、后台运行程序"><a href="#二、后台运行程序" class="headerlink" title="二、后台运行程序"></a><strong>二、后台运行程序</strong></h2><p>比如说你远程登录到服务器上，运行一个 Django web 程序:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python manager.py runserver 0.0.0.0 Listening on 0.0.0.0:8080...</span><br></pre></td></tr></table></figure>

<p>现在你可以通过服务器的 IP 地址测试 Django 服务，但是终端此时就阻塞 了，你输入什么都不响应，除非输入 Ctrl-C 或者 Ctrl-&#x2F; 终止 python 进程。</p>
<p>可以在命令之后加一个 &amp; 符号，这样命令行不会阻塞，可以响应你后续输 入的命令，但是如果你退出服务器的登录，就不能访问该网⻚了。</p>
<p>如果你想在退出服务器之后仍然能够访问web服务，应该这样写命令 (cmd &amp;) :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ (python manager.py runserver 0.0.0.0 &amp;) Listening on 0.0.0.0:8080...</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">logout</span></span><br></pre></td></tr></table></figure>

<p><strong>底层原理是这样的</strong>:</p>
<p>每一个命令行终端都是一个 shell 进程，你在这个终端里执行的程序实际上 都是这个 shell 进程分出来的子进程。正常情况下，shell 进程会阻塞，等待 子进程退出才重新接收你输入的新的命令。加上 &amp; 号，只是让 shell 进程不 再阻塞，可以继续响应你的新命令。但是无论如何，你如果关掉了这个 shell 命令行端口，依附于它的所有子进程都会退出。</p>
<p><strong>而 (cmd &amp;) 这样运行命令，则是将 cmd 命令挂到一个 systemd 系统守护进程名下，认 systemd 做爸爸，这样当你退出当前终端时，对于刚才的 cmd 命令就完全没有影响了。</strong></p>
<p>类似的，还有一种后台运行常用的做法是这样:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nohub some_cmd &amp;</span><br></pre></td></tr></table></figure>

<p>nohub 命令也是类似的原理，不过通过我的测试，<strong>还是 (cmd &amp;) 这种形式 更加稳定</strong>。</p>
<h2 id="三、单引号和双引号的区别"><a href="#三、单引号和双引号的区别" class="headerlink" title="三、单引号和双引号的区别"></a>三、单引号和双引号的区别</h2><p>不同的 shell 行为会有细微区别，但有一点是确定的，<strong>对于</strong> <strong>$</strong> <strong>，</strong> <strong>(</strong> <strong>，</strong> <strong>)</strong> <strong>这 几个符号，单引号包围的字符串不会做任何转义，双引号包围的字符串会转 义</strong>。</p>
<p>shell 的行为可以测试，使用 set -x 命令，会开启 shell 的命令回显，你可 以通过回显观察 shell 到底在执行什么命令:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/acjc30_20210910112344.png"></p>
<p>可⻅ echo $(cmd) 和 echo “$(cmd)” ，结果差不多，但是仍然有区别。注 意观察，双引号转义完成的结果会自动增加单引号，而前者不会。</p>
<p><strong>也就是说，如果</strong> <strong>$</strong> <strong>读取出的参数字符串包含空格，应该用双引号括起来， 否则就会出错</strong>。</p>
<h2 id="四、-sudo-找不到命令"><a href="#四、-sudo-找不到命令" class="headerlink" title="四、****sudo 找不到命令"></a><strong>四、****sudo</strong> <strong>找不到命令</strong></h2><p>有时候我们普通用户可以用的命令，用 sudo 加权限之后却报错 command not found:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ connect.sh</span><br><span class="line"> network-manager: Permission denied</span><br><span class="line"></span><br><span class="line">$ sudo connect.sh</span><br><span class="line"> sudo: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure>

<p>原因在于， connect.sh 这个脚本仅存在于该用户的环境变量中:</p>
<p><strong>当使用</strong> <strong>sudo</strong> <strong>时，系统会使用</strong> <strong>&#x2F;etc&#x2F;sudoers</strong> <strong>这个文件中规定的该用户的权 限和环境变量</strong>，而这个脚本在 &#x2F;etc&#x2F;sudoers 环境变量目录中当然是找不到 的。</p>
<p>解决方法是使用脚本文件的路径，而不是仅仅通过脚本名称:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo /home/fdl/bin/connect.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell效率</title>
    <url>/posts/98b63d5c/</url>
    <content><![CDATA[<h1 id="§1效率"><a href="#§1效率" class="headerlink" title="§1效率"></a>§1效率</h1><h2 id="输入相似文件名太麻烦"><a href="#输入相似文件名太麻烦" class="headerlink" title="输入相似文件名太麻烦"></a><strong>输入相似文件名太麻烦</strong></h2><p>用花括号括起来的字符串用逗号连接，可以自动扩展，非常有用，直接看例子:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;one,two,three&#125;file</span><br><span class="line">onefile twofile threefile</span><br><span class="line">$ <span class="built_in">echo</span> &#123;one,two,three&#125;&#123;1,2,3&#125;</span><br><span class="line">one1 one2 one3 two1 two2 two3 three1 three2 three3</span><br></pre></td></tr></table></figure>

<p>你看，花括号中的每个字符都可以和之后(或之前)的字符串进行组合拼 接，<strong>注意花括号和其中的逗号不可以用空格分隔，否则会被认为是普通的字 符串对待</strong>。</p>
<p>这个技巧有什么实际用处呢?最简单有用的就是给 cp , mv , rm 等命令扩 展参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /very/long/path/file&#123;,.bak&#125;</span><br><span class="line">==&gt; <span class="built_in">cp</span> /very/long/path/file /very/long/path/file.bak</span><br><span class="line"><span class="comment"># 给 file 复制一个叫做 file.bak 的副本</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> file&#123;1,3,5&#125;.txt</span><br><span class="line"><span class="comment"># 删除 file1.txt file3.txt file5.txt</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mv</span> *.&#123;c,cpp&#125; src/</span><br><span class="line"><span class="comment"># 将所有 .c 和 .cpp 为后缀的文件移入 src 文件夹</span></span><br></pre></td></tr></table></figure>

<h2 id="输入路径名称太麻烦"><a href="#输入路径名称太麻烦" class="headerlink" title="输入路径名称太麻烦"></a><strong>输入路径名称太麻烦</strong></h2><ul>
<li><strong>用</strong> <strong>cd -</strong> <strong>返回刚才呆的目录</strong>，直接看例子吧:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line"> /very/long/path</span><br><span class="line"> $ <span class="built_in">cd</span> <span class="comment"># 回到家目录瞅瞅</span></span><br><span class="line"> $ <span class="built_in">pwd</span></span><br><span class="line"> /home/labuladong</span><br><span class="line"> $ <span class="built_in">cd</span> - <span class="comment"># 再返回刚才那个目录 $ pwd</span></span><br><span class="line"> /very/long/path</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>特殊命令</strong> <strong>!$</strong> <strong>会替换成上一次输入的命令最后的路径</strong>，直接看例子:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没有加可执行权限</span></span><br><span class="line">$ /usr/bin/script.sh</span><br><span class="line">zsh: permission denied: /usr/bin/script.sh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x !$</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/script.sh</span><br><span class="line"><span class="built_in">export</span> lessCharset-uft8</span><br></pre></td></tr></table></figure>

<p><strong>特殊命令</strong> <strong>!*</strong> <strong>会替换成上一次命令输入的所有文件路径</strong>，直接看例子:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建了三个脚本文件</span></span><br><span class="line">$ file script1.sh script2.sh script3.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给它们全部加上可执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x !*</span><br><span class="line"><span class="built_in">chmod</span> +x script1.sh script2.sh script3.sh</span><br></pre></td></tr></table></figure>

<p><strong>可以在环境变量</strong> <strong>CDPATH</strong> <strong>中加入你常用的工作目录</strong>，当 cd 命令在当前目 录中找不到你指定的文件&#x2F;目录时，会自动到 CDPATH 中的目录中寻找。</p>
<p>比如说我常去 &#x2F;var&#x2F;log 目录找日志，可以执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> CDPATH=<span class="string">&#x27;~:/var/log&#x27;</span></span><br><span class="line"><span class="comment"># cd 命令将会在 〜 目录和 /var/log 目录扩展搜索$ pwd</span></span><br><span class="line">/home/labuladong/musics</span><br><span class="line">$ <span class="built_in">cd</span> mysql</span><br><span class="line"><span class="built_in">cd</span> /var/log/mysql</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/var/log/mysql</span><br><span class="line">$ <span class="built_in">cd</span> my_pictures</span><br><span class="line"><span class="built_in">cd</span> /home/labuladong/my_pictures</span><br></pre></td></tr></table></figure>

<p>这个技巧是十分好用的，这样就免了经常写完整的路径名称，节约不少时间。</p>
<p>需要注意的是，以上操作是 bash 支持的，其他主流 shell 解释器当然都支持 扩展 cd 命令的搜索目录，但可能不是修改 CDPATH 这个变量，具体的设 置方法可以自行搜索。</p>
<h2 id="输入重复命令太麻烦"><a href="#输入重复命令太麻烦" class="headerlink" title="输入重复命令太麻烦"></a>输入重复命令太麻烦</h2><p>** <strong>使用特殊命令</strong> <strong>!!</strong> <strong>，可以自动替换成上一次使用的命令</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install net-tools</span><br><span class="line"> E: Could not open lock file - open (13: Permission denied)</span><br><span class="line"></span><br><span class="line">$ sudo !!</span><br><span class="line"> sudo apt install net-tools [sudo] password <span class="keyword">for</span> fdl:</span><br></pre></td></tr></table></figure>

<p>有的命令很⻓，一时间想不起来具体参数了怎么办?</p>
<p><strong>对于</strong> <strong>bash</strong> <strong>终端，可以使用</strong> <strong>Ctrl+R</strong> <strong>快捷键反向搜索历史命令</strong>，之所以说是 反向搜索，就是搜索最近一次输入的命令。</p>
<p>比如按下 Ctrl+R 之后，输入 sudo ，bash 就会搜索出最近一次包含 sudo 的命令，你回⻋之后就可以运行该命令了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(reverse-i-search)`sudo<span class="string">&#x27;: sudo apt install git</span></span><br></pre></td></tr></table></figure>

<p>但是这个方法有缺点:首先，该功能似乎只有 bash 支持，我用的 zsh 作为 shell 终端，就用不了;第二，只能查找出一个(最近的)命令，如果我想 找以前的某个命令，就没办法了。</p>
<p>对于这种情况，<strong>我们最常用的方法是使用</strong> <strong>history</strong> <strong>命令配合管道符和</strong> <strong>grep</strong> <strong>命令来寻找某个历史命令</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤出所有包含 config 字段的历史命令</span></span><br><span class="line">$ <span class="built_in">history</span> | grep <span class="string">&#x27;config&#x27;</span></span><br><span class="line">	7352 ./configure</span><br><span class="line">	7434 git config --global --<span class="built_in">unset</span> https.proxy 9609 ifconfig</span><br><span class="line">	9985 clip -o | sed -z <span class="string">&#x27;s/\n/,\n/g&#x27;</span> | clip</span><br><span class="line">	10433 <span class="built_in">cd</span> ~/.config</span><br></pre></td></tr></table></figure>

<p>你使用的所有 shell 命令都会被记录，前面的数字就表示这是第几个命令， 找到你想重复使用的命令后，也不需要复制粘贴该命令，<strong>只要使用</strong> <strong>!</strong> <strong>+</strong> <strong>你 想重用的命令编号即可运行该命令</strong>。<br>拿上面的例子，我想重新运行 git config 那条命令，就可以这样:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ !7434</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy <span class="comment"># 运行完成</span></span><br></pre></td></tr></table></figure>

<p>我觉得 history 加管道加 grep 这样打的字还是太多，可以在 你的 shell 配置文件中( .bashrc ， .zshrc 等) 中写这样一个函数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">his</span></span>() &#123;</span><br><span class="line">	<span class="built_in">history</span> | grep <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就不需要写那么多，只需要 his ‘some_keyword’ 即可搜索历史命令。</p>
<p>我一般不使用 bash 作为终端，我给大家推荐一款很好用的 shell 终端叫做 zsh，这也是我自己使用的 shell。这款终端还可以扩展各种插件，非常好 用，具体配置方法可自行搜索。</p>
<h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><ul>
<li><p>**yes <strong>命令自动输入字符</strong>y **进行确认</p>
<p>我们安装某些软件的时候，可能有交互式的提问:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install XXX</span><br><span class="line">...</span><br><span class="line">XXX will use 996 MB disk space, <span class="built_in">continue</span>? [y/n]</span><br></pre></td></tr></table></figure>

<p>一般情况下我们都是一路 y 到底，但如果我们想自动化一些软件的安装就很 烦，遇到这种交互式提问就卡住了，还得手动处理。</p>
<p>yes 命令可以帮助我们:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">yes</span> | your_cmd</span><br></pre></td></tr></table></figure>

<p>这样就会一路自动 y 下去，不会停下让我们输入了。 如果你读过前文Linux 文件描述符，就知道其原理很简单:</p>
<p>你单独运行一下 yes 命令，发现它就是打印出一大堆字符 y，通过管道把 输出和 your_cmd 的标准输入相连接，如果 your_cmd 又提出无聊的问题， 就会从标准输入读取数据，也就会读取到一个 y 和换行符，和你手动输入 y 确认是一个效果。</p>
<ul>
<li><strong>特殊变量</strong> <strong>$?</strong> <strong>记录上一次命令的返回值</strong>。</li>
</ul>
<p>在 Linux shell 中，遵循 C 语言的习惯，返回值为 0 的话就是程序正常退 出，非 0 值就是异常退出出。读取上一次命令的返回值在平时使用命令行时 感觉没什么用，但是如果你想编写一些 shell 脚本，知道返回值非常有用。</p>
<p><strong>举个实际的例子</strong>，比如我的 Github 仓库 fucking-algorithm ，我需要给其中 所有 markdown 文件最下方添加上一篇、下一篇、目录三个⻚脚链接，有的 文章已经有了⻚脚，大部分都没有。</p>
<p>为了防止重复添加，我必须知道一个 md 文件下方是否已添加，这时候就可 以使用 $? 变量配合 grep 命令做到:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">filename=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 查看文件尾部是否包含关键词</span></span><br><span class="line"><span class="built_in">tail</span> | grep <span class="string">&#x27;下一篇&#x27;</span> <span class="variable">$filename</span></span><br><span class="line"><span class="comment"># grep 查找到匹配会返回 0，找不到则返回非 0 值</span></span><br><span class="line">[ $? -ne 0 ] &amp;&amp; &#123; 添加⻚脚; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>特殊变量</strong> <strong>$$</strong> <strong>记录当前进程的</strong> <strong>PID</strong>。</li>
</ul>
<p>这个功能可能在平时使用时也不怎么用，但是在写 shell 脚本时也非常有 用，比如说你要在 &#x2F;tmp 创建临时文件，给文件起名字一直都是非常让人 费脑子 的，这时候可以使用 $$ 变量扩展出当前进程的 PID 作为临时文件的名字。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>shell效率0</title>
    <url>/posts/969e74c3/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="§1效率"><a href="#§1效率" class="headerlink" title="§1效率"></a>§1效率</h1><h2 id="输入相似文件名太麻烦"><a href="#输入相似文件名太麻烦" class="headerlink" title="输入相似文件名太麻烦"></a><strong>输入相似文件名太麻烦</strong></h2><p>用花括号括起来的字符串用逗号连接，可以自动扩展，非常有用，直接看例子:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> &#123;one,two,three&#125;file</span><br><span class="line">onefile twofile threefile</span><br><span class="line">$ <span class="built_in">echo</span> &#123;one,two,three&#125;&#123;1,2,3&#125;</span><br><span class="line">one1 one2 one3 two1 two2 two3 three1 three2 three3</span><br></pre></td></tr></table></figure>

<p>你看，花括号中的每个字符都可以和之后(或之前)的字符串进行组合拼 接，<strong>注意花括号和其中的逗号不可以用空格分隔，否则会被认为是普通的字 符串对待</strong>。</p>
<p>这个技巧有什么实际用处呢?最简单有用的就是给 cp , mv , rm 等命令扩 展参数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cp</span> /very/long/path/file&#123;,.bak&#125;</span><br><span class="line">==&gt; <span class="built_in">cp</span> /very/long/path/file /very/long/path/file.bak</span><br><span class="line"><span class="comment"># 给 file 复制一个叫做 file.bak 的副本</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">rm</span> file&#123;1,3,5&#125;.txt</span><br><span class="line"><span class="comment"># 删除 file1.txt file3.txt file5.txt</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">mv</span> *.&#123;c,cpp&#125; src/</span><br><span class="line"><span class="comment"># 将所有 .c 和 .cpp 为后缀的文件移入 src 文件夹</span></span><br></pre></td></tr></table></figure>

<h2 id="输入路径名称太麻烦"><a href="#输入路径名称太麻烦" class="headerlink" title="输入路径名称太麻烦"></a><strong>输入路径名称太麻烦</strong></h2><ul>
<li><strong>用</strong> <strong>cd -</strong> <strong>返回刚才呆的目录</strong>，直接看例子吧:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line"> /very/long/path</span><br><span class="line"> $ <span class="built_in">cd</span> <span class="comment"># 回到家目录瞅瞅</span></span><br><span class="line"> $ <span class="built_in">pwd</span></span><br><span class="line"> /home/labuladong</span><br><span class="line"> $ <span class="built_in">cd</span> - <span class="comment"># 再返回刚才那个目录 $ pwd</span></span><br><span class="line"> /very/long/path</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>特殊命令</strong> <strong>!$</strong> <strong>会替换成上一次输入的命令最后的路径</strong>，直接看例子:</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#没有加可执行权限</span></span><br><span class="line">$ /usr/bin/script.sh</span><br><span class="line">zsh: permission denied: /usr/bin/script.sh</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">chmod</span> +x !$</span><br><span class="line"><span class="built_in">chmod</span> +x /usr/bin/script.sh</span><br><span class="line"><span class="built_in">export</span> lessCharset-uft8</span><br></pre></td></tr></table></figure>

<p><strong>特殊命令</strong> <strong>!*</strong> <strong>会替换成上一次命令输入的所有文件路径</strong>，直接看例子:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建了三个脚本文件</span></span><br><span class="line">$ file script1.sh script2.sh script3.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 给它们全部加上可执行权限</span></span><br><span class="line">$ <span class="built_in">chmod</span> +x !*</span><br><span class="line"><span class="built_in">chmod</span> +x script1.sh script2.sh script3.sh</span><br></pre></td></tr></table></figure>

<p><strong>可以在环境变量</strong> <strong>CDPATH</strong> <strong>中加入你常用的工作目录</strong>，当 cd 命令在当前目 录中找不到你指定的文件&#x2F;目录时，会自动到 CDPATH 中的目录中寻找。</p>
<p>比如说我常去 &#x2F;var&#x2F;log 目录找日志，可以执行如下命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> CDPATH=<span class="string">&#x27;~:/var/log&#x27;</span></span><br><span class="line"><span class="comment"># cd 命令将会在 〜 目录和 /var/log 目录扩展搜索$ pwd</span></span><br><span class="line">/home/labuladong/musics</span><br><span class="line">$ <span class="built_in">cd</span> mysql</span><br><span class="line"><span class="built_in">cd</span> /var/log/mysql</span><br><span class="line">$ <span class="built_in">pwd</span></span><br><span class="line">/var/log/mysql</span><br><span class="line">$ <span class="built_in">cd</span> my_pictures</span><br><span class="line"><span class="built_in">cd</span> /home/labuladong/my_pictures</span><br></pre></td></tr></table></figure>

<p>这个技巧是十分好用的，这样就免了经常写完整的路径名称，节约不少时间。</p>
<p>需要注意的是，以上操作是 bash 支持的，其他主流 shell 解释器当然都支持 扩展 cd 命令的搜索目录，但可能不是修改 CDPATH 这个变量，具体的设 置方法可以自行搜索。</p>
<h2 id="输入重复命令太麻烦"><a href="#输入重复命令太麻烦" class="headerlink" title="输入重复命令太麻烦"></a>输入重复命令太麻烦</h2><p>** <strong>使用特殊命令</strong> <strong>!!</strong> <strong>，可以自动替换成上一次使用的命令</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ apt install net-tools</span><br><span class="line"> E: Could not open lock file - open (13: Permission denied)</span><br><span class="line"></span><br><span class="line">$ sudo !!</span><br><span class="line"> sudo apt install net-tools [sudo] password <span class="keyword">for</span> fdl:</span><br></pre></td></tr></table></figure>

<p>有的命令很⻓，一时间想不起来具体参数了怎么办?</p>
<p><strong>对于</strong> <strong>bash</strong> <strong>终端，可以使用</strong> <strong>Ctrl+R</strong> <strong>快捷键反向搜索历史命令</strong>，之所以说是 反向搜索，就是搜索最近一次输入的命令。</p>
<p>比如按下 Ctrl+R 之后，输入 sudo ，bash 就会搜索出最近一次包含 sudo 的命令，你回⻋之后就可以运行该命令了:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(reverse-i-search)`sudo<span class="string">&#x27;: sudo apt install git</span></span><br></pre></td></tr></table></figure>

<p>但是这个方法有缺点:首先，该功能似乎只有 bash 支持，我用的 zsh 作为 shell 终端，就用不了;第二，只能查找出一个(最近的)命令，如果我想 找以前的某个命令，就没办法了。</p>
<p>对于这种情况，<strong>我们最常用的方法是使用</strong> <strong>history</strong> <strong>命令配合管道符和</strong> <strong>grep</strong> <strong>命令来寻找某个历史命令</strong>:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 过滤出所有包含 config 字段的历史命令</span></span><br><span class="line">$ <span class="built_in">history</span> | grep <span class="string">&#x27;config&#x27;</span></span><br><span class="line">	7352 ./configure</span><br><span class="line">	7434 git config --global --<span class="built_in">unset</span> https.proxy 9609 ifconfig</span><br><span class="line">	9985 clip -o | sed -z <span class="string">&#x27;s/\n/,\n/g&#x27;</span> | clip</span><br><span class="line">	10433 <span class="built_in">cd</span> ~/.config</span><br></pre></td></tr></table></figure>

<p>你使用的所有 shell 命令都会被记录，前面的数字就表示这是第几个命令， 找到你想重复使用的命令后，也不需要复制粘贴该命令，<strong>只要使用</strong> <strong>!</strong> <strong>+</strong> <strong>你 想重用的命令编号即可运行该命令</strong>。<br>拿上面的例子，我想重新运行 git config 那条命令，就可以这样:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ !7434</span><br><span class="line">git config --global --<span class="built_in">unset</span> https.proxy <span class="comment"># 运行完成</span></span><br></pre></td></tr></table></figure>

<p>我觉得 history 加管道加 grep 这样打的字还是太多，可以在 你的 shell 配置文件中( .bashrc ， .zshrc 等) 中写这样一个函数:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">his</span></span>() &#123;</span><br><span class="line">	<span class="built_in">history</span> | grep <span class="string">&quot;<span class="variable">$@</span>&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就不需要写那么多，只需要 his ‘some_keyword’ 即可搜索历史命令。</p>
<p>我一般不使用 bash 作为终端，我给大家推荐一款很好用的 shell 终端叫做 zsh，这也是我自己使用的 shell。这款终端还可以扩展各种插件，非常好 用，具体配置方法可自行搜索。</p>
<h2 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h2><ul>
<li><p>**yes <strong>命令自动输入字符</strong>y **进行确认</p>
<p>我们安装某些软件的时候，可能有交互式的提问:</p>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt install XXX</span><br><span class="line">...</span><br><span class="line">XXX will use 996 MB disk space, <span class="built_in">continue</span>? [y/n]</span><br></pre></td></tr></table></figure>

<p>一般情况下我们都是一路 y 到底，但如果我们想自动化一些软件的安装就很 烦，遇到这种交互式提问就卡住了，还得手动处理。</p>
<p>yes 命令可以帮助我们:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">yes</span> | your_cmd</span><br></pre></td></tr></table></figure>

<p>这样就会一路自动 y 下去，不会停下让我们输入了。 如果你读过前文Linux 文件描述符，就知道其原理很简单:</p>
<p>你单独运行一下 yes 命令，发现它就是打印出一大堆字符 y，通过管道把 输出和 your_cmd 的标准输入相连接，如果 your_cmd 又提出无聊的问题， 就会从标准输入读取数据，也就会读取到一个 y 和换行符，和你手动输入 y 确认是一个效果。</p>
<ul>
<li><strong>特殊变量</strong> <strong>$?</strong> <strong>记录上一次命令的返回值</strong>。</li>
</ul>
<p>在 Linux shell 中，遵循 C 语言的习惯，返回值为 0 的话就是程序正常退 出，非 0 值就是异常退出出。读取上一次命令的返回值在平时使用命令行时 感觉没什么用，但是如果你想编写一些 shell 脚本，知道返回值非常有用。</p>
<p><strong>举个实际的例子</strong>，比如我的 Github 仓库 fucking-algorithm ，我需要给其中 所有 markdown 文件最下方添加上一篇、下一篇、目录三个⻚脚链接，有的 文章已经有了⻚脚，大部分都没有。</p>
<p>为了防止重复添加，我必须知道一个 md 文件下方是否已添加，这时候就可 以使用 $? 变量配合 grep 命令做到:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">filename=<span class="variable">$1</span></span><br><span class="line"><span class="comment"># 查看文件尾部是否包含关键词</span></span><br><span class="line"><span class="built_in">tail</span> | grep <span class="string">&#x27;下一篇&#x27;</span> <span class="variable">$filename</span></span><br><span class="line"><span class="comment"># grep 查找到匹配会返回 0，找不到则返回非 0 值</span></span><br><span class="line">[ $? -ne 0 ] &amp;&amp; &#123; 添加⻚脚; &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>特殊变量</strong> <strong>$$</strong> <strong>记录当前进程的</strong> <strong>PID</strong>。</li>
</ul>
<p>这个功能可能在平时使用时也不怎么用，但是在写 shell 脚本时也非常有 用，比如说你要在 &#x2F;tmp 创建临时文件，给文件起名字一直都是非常让人 费脑子 的，这时候可以使用 $$ 变量扩展出当前进程的 PID 作为临时文件的名字。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>报告分类bash</title>
    <url>/posts/9efd0db9/</url>
    <content><![CDATA[<h1 id="报告分类bash"><a href="#报告分类bash" class="headerlink" title="报告分类bash"></a>报告分类bash</h1><pre><code class="java">for file in *.pdf; do mkdir -p -- &quot;$&#123;file%%-*&#125;&quot; &amp;&amp; \
    mv -- &quot;$file&quot; &quot;$&#123;file%%-*&#125;&quot;; done
</code></pre>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>explain结果每个字段的含义说明</title>
    <url>/posts/cec762c6/</url>
    <content><![CDATA[<h1 id="explain结果每个字段的含义说明"><a href="#explain结果每个字段的含义说明" class="headerlink" title="explain结果每个字段的含义说明"></a>explain结果每个字段的含义说明</h1><p>我们都知道用<code>explain xxx</code>分析sql语句的性能，但是具体从explain的结果怎么分析性能以及每个字段的含义你清楚吗？这里我做下总结记录，也是供自己以后参考。</p>
<blockquote>
<ul>
<li>首先需要注意：<strong>MYSQL 5.6.3</strong>以前只能<code>EXPLAIN SELECT</code>; MYSQL5.6.3以后就可以<code>EXPLAIN SELECT,UPDATE,DELETE</code></li>
</ul>
</blockquote>
<hr>
<p>explain结果示例：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from staff;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="params">| id |</span> select_type <span class="params">| table |</span> type <span class="params">| possible_keys |</span> key  <span class="params">| key_len |</span> ref  <span class="params">| rows |</span> Extra <span class="params">|</span></span><br><span class="line"><span class="params">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line"><span class="params">|</span>  <span class="number">1</span> <span class="params">| SIMPLE      |</span> staff <span class="params">| ALL  |</span> NULL          <span class="params">| NULL |</span> NULL    <span class="params">| NULL |</span>    <span class="number">2</span> <span class="params">| NULL  |</span></span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set</span><br></pre></td></tr></table></figure>

<hr>
<p>先上一个官方文档表格的中文版：</p>
<table>
<thead>
<tr>
<th>Column</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>查询序号</td>
</tr>
<tr>
<td>select_type</td>
<td>查询类型</td>
</tr>
<tr>
<td>table</td>
<td>表名</td>
</tr>
<tr>
<td>partitions</td>
<td>匹配的分区</td>
</tr>
<tr>
<td>type</td>
<td>join类型</td>
</tr>
<tr>
<td>prossible_keys</td>
<td>可能会选择的索引</td>
</tr>
<tr>
<td>key</td>
<td>实际选择的索引</td>
</tr>
<tr>
<td>key_len</td>
<td>索引的长度</td>
</tr>
<tr>
<td>ref</td>
<td>与索引作比较的列</td>
</tr>
<tr>
<td>rows</td>
<td>要检索的行数(估算值)</td>
</tr>
<tr>
<td>filtered</td>
<td>查询条件过滤的行数的百分比</td>
</tr>
<tr>
<td>Extra</td>
<td>额外信息</td>
</tr>
</tbody></table>
<p>这是explain结果的各个字段，分别解释下含义：</p>
<h2 id="1-id"><a href="#1-id" class="headerlink" title="1. id"></a>1. id</h2><p>SQL查询中的序列号。</p>
<blockquote>
<p>id列数字越大越先执行，如果说数字一样大，那么就从上往下依次执行。</p>
</blockquote>
<h2 id="2-select-type"><a href="#2-select-type" class="headerlink" title="2. select_type"></a>2. select_type</h2><p>查询的类型，可以是下表的任何一种类型：</p>
<table>
<thead>
<tr>
<th>select_type</th>
<th>类型说明</th>
</tr>
</thead>
<tbody><tr>
<td>SIMPLE</td>
<td>简单SELECT(不使用UNION或子查询)</td>
</tr>
<tr>
<td>PRIMARY</td>
<td>最外层的SELECT</td>
</tr>
<tr>
<td>UNION</td>
<td>UNION中第二个或之后的SELECT语句</td>
</tr>
<tr>
<td>DEPENDENT UNION</td>
<td>UNION中第二个或之后的SELECT语句取决于外面的查询</td>
</tr>
<tr>
<td>UNION RESULT</td>
<td>UNION的结果</td>
</tr>
<tr>
<td>SUBQUERY</td>
<td>子查询中的第一个SELECT</td>
</tr>
<tr>
<td>DEPENDENT SUBQUERY</td>
<td>子查询中的第一个SELECT, 取决于外面的查询</td>
</tr>
<tr>
<td>DERIVED</td>
<td>衍生表(FROM子句中的子查询)</td>
</tr>
<tr>
<td>MATERIALIZED</td>
<td>物化子查询</td>
</tr>
<tr>
<td>UNCACHEABLE SUBQUERY</td>
<td>结果集无法缓存的子查询，必须重新评估外部查询的每一行</td>
</tr>
<tr>
<td>UNCACHEABLE UNION</td>
<td>UNION中第二个或之后的SELECT，属于无法缓存的子查询</td>
</tr>
</tbody></table>
<p>DEPENDENT 意味着使用了关联子查询。</p>
<h2 id="3-table"><a href="#3-table" class="headerlink" title="3. table"></a>3. table</h2><p>查询的表名。不一定是实际存在的表名。<br>可以为如下的值：</p>
<ul>
<li>&lt;unionM,N&gt;: 引用id为M和N UNION后的结果。</li>
<li><derivedN>: 引用id为N的结果派生出的表。派生表可以是一个结果集，例如派生自FROM中子查询的结果。</li>
<li><subqueryN>: 引用id为N的子查询结果物化得到的表。即生成一个临时表保存子查询的结果。</li>
</ul>
<h2 id="4-type（重要）"><a href="#4-type（重要）" class="headerlink" title="4. type（重要）"></a>4. type（重要）</h2><p>这是<strong>最重要的字段之一</strong>，显示查询使用了何种类型。从最好到最差的连接类型依次为：</p>
<blockquote>
<p><strong>system，const，eq_ref，ref，fulltext，ref_or_null，index_merge，unique_subquery，index_subquery，range，index，ALL</strong></p>
</blockquote>
<p>除了all之外，其他的type都可以使用到索引，除了index_merge之外，其他的type只可以用到一个索引。</p>
<ul>
<li><h6 id="1、system"><a href="#1、system" class="headerlink" title="1、system"></a>1、system</h6></li>
</ul>
<p>表中只有一行数据或者是空表，这是const类型的一个特例。且只能用于myisam和memory表。如果是Innodb引擎表，type列在这个情况通常都是all或者index</p>
<ul>
<li><h6 id="2、const"><a href="#2、const" class="headerlink" title="2、const"></a>2、const</h6></li>
</ul>
<p>最多只有一行记录匹配。当联合主键或唯一索引的所有字段跟常量值比较时，join类型为const。其他数据库也叫做唯一索引扫描</p>
<ul>
<li><h6 id="3、eq-ref"><a href="#3、eq-ref" class="headerlink" title="3、eq_ref"></a>3、eq_ref</h6></li>
</ul>
<p>多表join时，对于来自前面表的每一行，在当前表中只能找到一行。这可能是除了system和const之外最好的类型。当主键或唯一非NULL索引的所有字段都被用作join联接时会使用此类型。</p>
<p>eq_ref可用于使用’&#x3D;’操作符作比较的索引列。比较的值可以是常量，也可以是使用在此表之前读取的表的列的表达式。</p>
<blockquote>
<p><strong>相对于下面的ref区别就是它使用的唯一索引，即主键或唯一索引，而ref使用的是非唯一索引或者普通索引。<br>eq_ref只能找到一行，而ref能找到多行。</strong></p>
</blockquote>
<ul>
<li><h6 id="4、ref"><a href="#4、ref" class="headerlink" title="4、ref"></a>4、ref</h6></li>
</ul>
<p>对于来自前面表的每一行，在此表的索引中可以匹配到多行。若联接只用到索引的最左前缀或索引不是主键或唯一索引时，使用ref类型（也就是说，此联接能够匹配多行记录）。</p>
<p>ref可用于使用’&#x3D;’或’&lt;&#x3D;&gt;’操作符作比较的索引列。</p>
<ul>
<li><h6 id="5、-fulltext"><a href="#5、-fulltext" class="headerlink" title="5、 fulltext"></a>5、 fulltext</h6></li>
</ul>
<p>使用全文索引的时候是这个类型。要注意，<strong>全文索引的优先级很高</strong>，若全文索引和普通索引同时存在时，mysql不管代价，优先选择使用全文索引</p>
<ul>
<li><h6 id="6、ref-or-null"><a href="#6、ref-or-null" class="headerlink" title="6、ref_or_null"></a>6、ref_or_null</h6></li>
</ul>
<p>跟ref类型类似，只是增加了null值的比较。实际用的不多。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">eg.</span><br><span class="line">SELECT * FROM ref_table</span><br><span class="line">WHERE key_column=expr OR key_column IS <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="7、index-merge"><a href="#7、index-merge" class="headerlink" title="7、index_merge"></a>7、index_merge</h6></li>
</ul>
<p>表示查询使用了两个以上的索引，最后取交集或者并集，常见and ，or的条件使用了不同的索引，官方排序这个在ref_or_null之后，但是实际上由于要读取多个索引，性能可能大部分时间都不如range</p>
<ul>
<li><h6 id="8、unique-subquery"><a href="#8、unique-subquery" class="headerlink" title="8、unique_subquery"></a>8、unique_subquery</h6></li>
</ul>
<p>用于where中的in形式子查询，子查询返回不重复值唯一值，可以完全替换子查询，效率更高。<br>该类型替换了下面形式的IN子查询的ref：<br><code>value IN (SELECT primary_key FROM single_table WHERE some_expr)</code></p>
<ul>
<li><h6 id="9、index-subquery"><a href="#9、index-subquery" class="headerlink" title="9、index_subquery"></a>9、index_subquery</h6></li>
</ul>
<p>该联接类型类似于unique_subquery。适用于非唯一索引，可以返回重复值。</p>
<ul>
<li><h6 id="10、range"><a href="#10、range" class="headerlink" title="10、range"></a>10、range</h6></li>
</ul>
<p>索引范围查询，常见于使用 &#x3D;, &lt;&gt;, &gt;, &gt;&#x3D;, &lt;, &lt;&#x3D;, IS NULL, &lt;&#x3D;&gt;, BETWEEN, IN()或者like等运算符的查询中。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">SELECT * FROM tbl_name</span><br><span class="line">  WHERE key_column BETWEEN <span class="number">10</span> <span class="keyword">and</span> <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">SELECT * FROM tbl_name</span></span><br><span class="line"><span class="function">  WHERE key_column <span class="title">IN</span> <span class="params">(<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="11、index"><a href="#11、index" class="headerlink" title="11、index"></a>11、index</h6></li>
</ul>
<p>索引全表扫描，把索引从头到尾扫一遍。这里包含两种情况：<br>一种是查询使用了覆盖索引，那么它只需要扫描索引就可以获得数据，这个效率要比全表扫描要快，因为索引通常比数据表小，而且还能避免二次查询。在extra中显示Using index，反之，如果在索引上进行全表扫描，没有Using index的提示。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 此表见有一个name列索引。</span></span><br><span class="line"><span class="comment"># 因为查询的列name上建有索引，所以如果这样type走的是index</span></span><br><span class="line">mysql&gt; explain select name from testa;</span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span><br><span class="line"><span class="params">| id |</span> select_type <span class="params">| table |</span> type  <span class="params">| possible_keys |</span> key      <span class="params">| key_len |</span> ref  <span class="params">| rows |</span> Extra       <span class="params">|</span></span><br><span class="line"><span class="params">+----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span></span><br><span class="line"><span class="params">|</span>  <span class="number">1</span> <span class="params">| SIMPLE      |</span> testa <span class="params">| index |</span> NULL          <span class="params">| idx_name |</span> <span class="number">33</span>      <span class="params">| NULL |</span>    <span class="number">2</span> <span class="params">| Using index |</span></span><br><span class="line">+----+-------------+-------+-------+---------------+----------+---------+------+------+-------------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 因为查询的列cusno没有建索引，或者查询的列包含没有索引的列，这样查询就会走ALL扫描，如下：</span></span><br><span class="line">mysql&gt; explain select cusno from testa;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="params">| id |</span> select_type <span class="params">| table |</span> type <span class="params">| possible_keys |</span> key  <span class="params">| key_len |</span> ref  <span class="params">| rows |</span> Extra <span class="params">|</span></span><br><span class="line"><span class="params">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line"><span class="params">|</span>  <span class="number">1</span> <span class="params">| SIMPLE      |</span> testa <span class="params">| ALL  |</span> NULL          <span class="params">| NULL |</span> NULL    <span class="params">| NULL |</span>    <span class="number">2</span> <span class="params">| NULL  |</span></span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set</span><br><span class="line"></span><br><span class="line"><span class="comment"># 包含有未见索引的列</span></span><br><span class="line">mysql&gt; explain select * from testa;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="params">| id |</span> select_type <span class="params">| table |</span> type <span class="params">| possible_keys |</span> key  <span class="params">| key_len |</span> ref  <span class="params">| rows |</span> Extra <span class="params">|</span></span><br><span class="line"><span class="params">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span></span><br><span class="line"><span class="params">|</span>  <span class="number">1</span> <span class="params">| SIMPLE      |</span> testa <span class="params">| ALL  |</span> NULL          <span class="params">| NULL |</span> NULL    <span class="params">| NULL |</span>    <span class="number">2</span> <span class="params">| NULL  |</span></span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set</span><br></pre></td></tr></table></figure>

<ul>
<li><h6 id="12、all"><a href="#12、all" class="headerlink" title="12、all"></a>12、all</h6></li>
</ul>
<p>全表扫描，性能最差。</p>
<h2 id="5-partitions"><a href="#5-partitions" class="headerlink" title="5. partitions"></a>5. partitions</h2><p>版本5.7以前，该项是explain partitions显示的选项，5.7以后成为了默认选项。该列显示的为分区表命中的分区情况。非分区表该字段为空（null）。</p>
<h2 id="6-possible-keys"><a href="#6-possible-keys" class="headerlink" title="6. possible_keys"></a>6. possible_keys</h2><p>查询可能使用到的索引都会在这里列出来</p>
<h2 id="7-key"><a href="#7-key" class="headerlink" title="7. key"></a>7. key</h2><p>查询真正使用到的索引。<br>select_type为index_merge时，这里可能出现两个以上的索引，其他的select_type这里只会出现一个。</p>
<h2 id="8-key-len"><a href="#8-key-len" class="headerlink" title="8. key_len"></a>8. key_len</h2><p>查询用到的索引长度（字节数）。<br>如果是单列索引，那就整个索引长度算进去，如果是多列索引，那么查询不一定都能使用到所有的列，用多少算多少。留意下这个列的值，算一下你的多列索引总长度就知道有没有使用到所有的列了。</p>
<blockquote>
<p>key_len只计算<strong>where</strong>条件用到的索引长度，而排序和分组就算用到了索引，也不会计算到key_len中。</p>
</blockquote>
<h2 id="9-ref"><a href="#9-ref" class="headerlink" title="9. ref"></a>9. ref</h2><p>如果是使用的常数等值查询，这里会显示const，如果是连接查询，被驱动表的执行计划这里会显示驱动表的关联字段，如果是条件使用了表达式或者函数，或者条件列发生了内部隐式转换，这里可能显示为func</p>
<h2 id="10-rows（重要）"><a href="#10-rows（重要）" class="headerlink" title="10. rows（重要）"></a>10. rows（重要）</h2><p><strong>rows 也是一个重要的字段</strong>。 这是mysql估算的需要扫描的行数（不是精确值）。<br>这个值非常直观显示 SQL 的效率好坏, 原则上 rows 越少越好.</p>
<h2 id="11-filtered"><a href="#11-filtered" class="headerlink" title="11. filtered"></a>11. filtered</h2><p>这个字段表示存储引擎返回的数据在server层过滤后，剩下多少满足查询的记录数量的比例，注意是百分比，不是具体记录数。这个字段不重要</p>
<h2 id="12-extra（重要）"><a href="#12-extra（重要）" class="headerlink" title="12. extra（重要）"></a>12. extra（重要）</h2><p>EXplain 中的很多额外的信息会在 Extra 字段显示, 常见的有以下几种内容:</p>
<ul>
<li><strong>distinct</strong>：在select部分使用了distinc关键字</li>
<li><strong>Using filesort</strong>：当 Extra 中有 Using filesort 时, 表示 MySQL 需额外的排序操作, 不能通过索引顺序达到排序效果. 一般有 Using filesort, 都建议优化去掉, 因为这样的查询 CPU 资源消耗大.</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line"># 例如下面的例子:</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY product_name \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">           <span class="keyword">id</span>: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: <span class="literal">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="literal">NULL</span></span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: <span class="number">253</span></span><br><span class="line">          ref: <span class="literal">NULL</span></span><br><span class="line">         rows: <span class="number">9</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: Using index; Using filesort</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line">我们的索引是</span><br><span class="line"></span><br><span class="line">KEY `user_product_detail_index` (`user_id`, `product_name`, `productor`)</span><br><span class="line">但是上面的查询中根据 product_name 来排序, 因此不能使用索引进行优化, 进而会产生 Using filesort.</span><br><span class="line">如果我们将排序依据改为 ORDER BY user_id, product_name, 那么就不会出现 Using filesort 了. 例如:</span><br><span class="line"></span><br><span class="line">mysql&gt; EXPLAIN SELECT * FROM order_info ORDER BY user_id, product_name \G</span><br><span class="line">*************************** <span class="number">1.</span> row ***************************</span><br><span class="line">           <span class="keyword">id</span>: <span class="number">1</span></span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: order_info</span><br><span class="line">   partitions: <span class="literal">NULL</span></span><br><span class="line">         type: index</span><br><span class="line">possible_keys: <span class="literal">NULL</span></span><br><span class="line">          key: user_product_detail_index</span><br><span class="line">      key_len: <span class="number">253</span></span><br><span class="line">          ref: <span class="literal">NULL</span></span><br><span class="line">         rows: <span class="number">9</span></span><br><span class="line">     filtered: <span class="number">100.00</span></span><br><span class="line">        Extra: Using index</span><br><span class="line"><span class="number">1</span> row <span class="keyword">in</span> set, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Using index</strong><br>“覆盖索引扫描”, 表示查询在索引树中就可查找所需数据, 不用扫描表数据文件, 往往说明<strong>性能不错</strong></li>
<li><strong>Using temporary</strong><br>查询有使用临时表, 一般出现于排序, 分组和多表 join 的情况, 查询效率不高, 建议优化.</li>
</ul>
<p>除此之外还有其他值，这里就不一一一列举了。</p>
<hr>
<p>通过以上这些总结，以后我们看到explain的结果，就知道该从哪些字段值去分析sql语句的执行效率了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连表操作后字符集不同导致索引失效问题</title>
    <url>/posts/48353052/</url>
    <content><![CDATA[<h1 id="mysql-连表操作后字符集不同导致索引失效"><a href="#mysql-连表操作后字符集不同导致索引失效" class="headerlink" title="mysql 连表操作后字符集不同导致索引失效"></a>mysql 连表操作后字符集不同导致索引失效</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个表的字符集为utf8mb4<br>一个表的字符集为utf8</p>
<p>连表查询后可以发现索引失效的情况，查询很慢。</p>
<p>t1为utf8，t2为utf8mb4。但是为什么表字符集不一样（实际是字段字符集不一样）就会导致t1全表扫描呢？</p>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>（1）首先t2 left join t1决定了t2是驱动表，这一步相当于执行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> t2.name <span class="operator">=</span> <span class="string">&#x27;dddd&#x27;</span></span><br></pre></td></tr></table></figure>

<p>取出code字段的值，假如为’8a77a32a7e0825f7c8634226105c42e5’;</p>
<p>（2）然后拿t2查到的code的值根据join条件去t1里面查找，这一步就相当于执行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> t1.code <span class="operator">=</span> <span class="string">&#x27;8a77a32a7e0825f7c8634226105c42e5&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>（3）但是由于第（1）步里面t2表取出的code字段是utf8mb4字符集，而t1表里面的code是utf8字符集，这里需要做字符集转换，字符集转换遵循由小到大的原则，因为utf8mb4是utf8的超集，所以这里把utf8转换成utf8mb4，即把t1.code转换成utf8mb4字符集，转换了之后，由于t1.code上面的索引仍然是utf8字符集，所以这个索引会被执行计划忽略了，然后t1表只能选择全表扫描。如果t2筛选出来的记录不止1条，那么t1就会被多次全表扫描，性能之差可想而知。</p>
<h2 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 charset utf8mb4;</span><br></pre></td></tr></table></figure>

<p>这是错的，这只是改了表的默认字符集，即新的字段才会使用utf8mb4，已经存在的字段仍然是utf8。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">convert</span> <span class="keyword">to</span> charset utf8mb4;</span><br></pre></td></tr></table></figure>

<p>查看 SHOW FULL COLUMNS FROM t1 ;会发现字段的字符已经改变。</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><strong>排序规则概念：</strong>是指对指定字符集下不同字符的比较规则。排序规则有以下特征：</p>
<ul>
<li>它和字符集（CHARSET）相关</li>
<li>每种字符集都有多种它支持的排序规则</li>
<li>每种字符集都会默认指定一种排序规则为默认值。</li>
<li>mysql可对相应字符集，单独设置排序规则</li>
</ul>
<p><strong>排序规则作用</strong>：排序规则指定后，它会影响我们使用 ORDER BY语句查询的结果顺序，会影响到 WHERE条件中大于小于号的筛选结果，会影响 DISTINCT、GROUP BY、HAVING 语句的查询结果。另外，mysql 建索引的时候，如果索引列是字符类型，也会影响索引创建，只不过这种影响我们感知不到。总之，凡是涉及到字符类型比较或排序的地方，都和排序规则有关。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>表字符集不同时，可能导致join的SQL使用不到索引，引起严重的性能问题；</li>
<li>建表语句一定要设置默认字符集，需要关联的表字符集一定要统一；</li>
<li>统一dev、fat、test、prod环境mysql对应库的字符集，可以及早发现问题；</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql连表操作后字符集不同导致索引失效问题1</title>
    <url>/posts/6f1ea5f/</url>
    <content><![CDATA[<h1 id="mysql-连表操作后字符集不同导致索引失效"><a href="#mysql-连表操作后字符集不同导致索引失效" class="headerlink" title="mysql 连表操作后字符集不同导致索引失效"></a>mysql 连表操作后字符集不同导致索引失效</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>一个表的字符集为utf8mb4<br>一个表的字符集为utf8</p>
<p>连表查询后可以发现索引失效的情况，查询很慢。这时候可以通过show warnings;查询警告信息。发现了convert(testdb.t1.code using utf8mb4)之后，发现2个表的字符集不一样。</p>
<p>t1为utf8，t2为utf8mb4。但是为什么表字符集不一样（实际是字段字符集不一样）就会导致t1全表扫描呢？下面来做分析。</p>
<h2 id="分析原因"><a href="#分析原因" class="headerlink" title="分析原因"></a>分析原因</h2><p>（1）首先t2 left join t1决定了t2是驱动表，这一步相当于执行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t2 <span class="keyword">where</span> t2.name <span class="operator">=</span> <span class="string">&#x27;dddd&#x27;</span></span><br></pre></td></tr></table></figure>

<p>取出code字段的值，这里为’8a77a32a7e0825f7c8634226105c42e5’;</p>
<p>（2）然后拿t2查到的code的值根据join条件去t1里面查找，这一步就相当于执行了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t1 <span class="keyword">where</span> t1.code <span class="operator">=</span> <span class="string">&#x27;8a77a32a7e0825f7c8634226105c42e5&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>（3）但是由于第（1）步里面t2表取出的code字段是utf8mb4字符集，而t1表里面的code是utf8字符集，这里需要做字符集转换，字符集转换遵循由小到大的原则，因为utf8mb4是utf8的超集，所以这里把utf8转换成utf8mb4，即把t1.code转换成utf8mb4字符集，转换了之后，由于t1.code上面的索引仍然是utf8字符集，所以这个索引就被执行计划忽略了，然后t1表只能选择全表扫描。如果t2筛选出来的记录不止1条，那么t1就会被多次全表扫描，性能之差可想而知。</p>
<h2 id="修改字符集"><a href="#修改字符集" class="headerlink" title="修改字符集"></a>修改字符集</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 charset utf8mb4;</span><br></pre></td></tr></table></figure>

<p>但这是错的，这只是改了表的默认字符集，即新的字段才会使用utf8mb4，已经存在的字段仍然是utf8。<br>show create table t1 会发现DEFAULT CHARSET&#x3D;utf8mb4改变了，但是SHOW FULL COLUMNS FROM pay_log_all_from_mq;会发现字段的字符集没有改变。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t1 <span class="keyword">convert</span> <span class="keyword">to</span> charset utf8mb4;</span><br></pre></td></tr></table></figure>

<p>查看 SHOW FULL COLUMNS FROM t1 ;会发现字段的字符已经改变。</p>
<h2 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h2><ul>
<li>表字符集不同时，可能导致join的SQL使用不到索引，引起严重的性能问题；</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>上线流程(另一个复件)</title>
    <url>/posts/4b90d310/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="c03066dab5bbf165daf1aed2b9481f26f281e2fb5a0b571d6db64f3dae18325e">d0887b061916fa4336825c648648024650420a30bcdcd73b3bacf4e441f5343e63d395ea6231075ece2b248bd588e6daad5e3af9c1572ee714f6d49394efd0af689df74ee856219fa929b74c7d64956434aff81627f12decec9f87b478fe440d53c101d69b22cf81abd857a29a1c62c2a9031523fbb47922568a0e66a3cfc425ec52e590d6c6cdc37f1a191a5a7b0447984e42ff2bb3045d95490368b828792c7874ff64f6570e83a67cd19c913e17d3e43ce9874c96c40d8e5172852f36ea52d3bfbd415277f7f2e1c144f2fbe92b03e4473af91af463497d0fbbef51a87a1fbe520ad6f8e91f2de863b337cc3165c350e2aa0783ca3952ecc7480fa884173d5d45d96fd88484bca2d324629d8d00d5ef1eba938ac684e88a42a570d5cebd9b62a4afbc75d819b54c8bb6b080adb31f88e918a83fc6e75ef2f9ad0b7ae8aefe76913dc64844ccfa74a0865a498beef6c645cbcb3beea3eb3cfb467c033def54f92a199f88ed1d24529362d5f498175261b7a7629c716af8ef1d9d0a4a89a269b9b53e573805bdd3e1f63add8b3e4ad9e2e58c8fa6c615580e336a8df8d60ca1386c144bd7ffd4330cb18ee3bfa91b047c5a040b60b8229b45076f24efbff113bc72562bb525c7fe8c1c6016080f6693b099090430d2c2f5f6f6310818f2319917d067b12970a773090f499db4ba6b2beb547979fdcee32cd4a3b0e96b520d2e78763094d9f5ca6d3f8dfd0e6a568713fdb7793f904be11b7c47d4a404ae79d05a66108443fe582f9e2434a717bce1b77f480454c89ecc8eea6dacdffd1d28096403febc336cca8aae5e61cf6da20b64fcbc83187b50c9ecd3b0d111c7a9e41afbe1d5c14c89ce2a4306a878432a1e9c5d6ee77504a72175bd0037d772357ea725dbe264e36f5a345a4bcd248f81472e14f32e1aadf355dfcdf5883eca42a6e1d3985f368c09867ac34f1d592353ceeb17ee3ec6765a3adda4bb454f8972d538fa056ef056af32c6b14275e2dd5257a574650473033f82e272ef160c93aa6f0023976e0cf15f861340f45fd27738552f9cafc13480fa3dbd1356c26eb5c2b927502429da153dcf815f1d04459c84162784714d6f42c4c8d7d307beab2a3cc4ce232eff1b82d5895a3646a1583374ca8bb5758cefe5c0d9b3c44aa989187779cbe12860a77aa229fd5ca1b76dd79fe4edd1287ea1792aee668dd55eb2ca7f1fd6354efd7106f6be1030b0356c9862188d75597574c62af78aae15dee36cfd7cb73d701e4a613b15a5124dcb3fcb1b558b7da2d92b92a5bb6406849c8a9c64d67ebecc27fb3c0c5ffe199c13ef1f6debd6444ae38e7263a9f94db936fee4f675675f89646b71441586a31e7039fc5e787fdc19def3e50b83e11d33b147c81016aa0de0a608ec8fa11020128ddb35c0d2142b3000f1231766f2f151671b0d9c1e59fd81d506d7d72272a9b0746a3dd466c743cea7b475ff48449a6574d28c691dcdfe0c85d91e46d1328e7c356eb724763c39e1514f592cdd46d673f804f7e9b13002731c1da5fec3adfc377cafe3b01212a6a1bf95240b6c0a877e47602c7a5d66222e888b71d999b2743cca95f33020e8223a1b49a09e4fa8c297c9489d41cd6a8c22c347207febd79a2399ed741557ae94a7e122f2db426c9f95980015362151d63c35f0f5e2e5444fab1fa470b35c52b3304534fec3979249b709ee7bbddbce4432eced313cde4a51d1f04c11d7d28e248c638e85e20107ec7de10c638c06e1b1b070c793cedc1a151ea3f5abe1e4a285fa98e2098c1f4fa002716123dcb20e5a3b984bc9c4493469ec6273ccacafca31a303bd1010450e8aee4eed6564ef8dc6c7ccc145d8a5684b81d3211ab96584e205d854d782fba329e769a3a4cb1096e20cf5c5b66a92b13dfba43e66159b944de1f2b24716d3ac515f3cc0bc7290990a8ef9a2c917fe510a9866362b2988cfe0d5b25c13cfd9e97e4ff08852af63928b66d638bd902c052be1a701c0408af91ef5c77edb934e7241a0835cb2ea3b96291d510908a882d767c337b41f077e241f5b8925366b3d6cd92be7b84d6d312d6915ffe50e4bdf69bd6be18a7bb832a50ccc3d2fddd4b05c5a52b79d1f45849231e75a4cd11ff1e4293dc8e3c358471f56f3a9ac2aca9d86b14f329fecfe25b81e47b3cf0b9f83620e11f9624cf8cf57c08dd78103435dee419e066e1c2ac8751bd340c42a962c599b0d3b9231587092b459f1e8d7810615b0c48eb36ad5f6a63e6d832c427777bbc0d439b53de4e0e02f55e6ab545ccc7eab6ca4593c05dae9fd8304a6ce8e9ae387fd69e409f40868e2e0d934b8740fa13832dc84be3294fad58b48fd3e463f45fcfb101599a99c6ca848e47ea70ce94936e1e2d90d418c23ae04d8826c0467b9e3dfe4990e719080d66e70b57d2d17fcbda202a0179be697d0b2c3b0e88b2906b571fce491420ff90dc66192677d5cb6f03a6275196cfd5ec212f99cbada81742ffeec4fed83b18f6f3e8142ae6bd22db49d8bd6ac7838946ac5e58884e57f1c67176dffa6e427827e50043a13925d8c013dcdcb50043c95b1671ec536e8b9787c920576c737711f8b16f15b0822adfbfa613c7a855be56cd913ecc7fe1e57a0b6cb50adb1ace9459e88874b7adf609db89a4634eff80a0814b7bd188c8a292ec8d4e933eb98d80c7826446703eefaf7649c3f74a7eeee30633d652a2b9fae9c69d1f0d1c0fd6c60dc964ef9e53a7e7b3cf043d8739c4249b4e56dc4a1e85dfce513ef54267bd8fe39d9f25702b1458d724979404d75dab7713edaa72a5f976a79ab2291863a21e65e3449c6acdcf278db9a746f15cf3671be41a4ad6e41f9547e6c1d58ef81a31d29eaea2fd205a4969ce82eaf7b64f201fc4492b36fc22a3154193292f3b76225ab441bf73be99993f7ff59ea44a13de5eb93391b39c060fac75b32a493736e0b1e6b042f5620a7e8c4190b8126f079bc64b6170637e1e7760e290177c7a085204a82fa87f82e9ed8f40e67beea7ea6a3b2d86a497813f1f0cd4a27d36fbaed6a6b029a9a916fa0ac41baf7e44d283c6faa872812ee1d091122baead5be63eba4f1bfa536c6092c113435c6b3b5ba96c437bc2e2b461d3cee17795fbe31b8c086e732f4bf71a957f8301913299f5cedbd77612c8fa1bd0f63a59d26d0ce14d9b1cc01a0e9f806a8ef10958341ab4cbd1c4da1ea6ef0e04cf8b8d44d9cb7e00e5c93a508d0bad7a59bef41b7cf0bc1bd90b8699e3790e5f2c331088b2422a97ea8570e4286f60d31e141b7b8f12b9d26fee7c39fc24e1ef5519300873e3eb6f2d0ff858d6894d7b33d821ee918161f438f73b8abcf824073860583b18fe59ad26442bae7cda578a3e9e32b51e57738a62f166faf2dce0254b163d0a6e6bdcca41b2f886b0bbf8b45a0020f7b0098688a29e352760880b4bacec91c15913f15f1df81591bdf1d3ca1f077c49820169854bd115c0355211771b133b30561ca33b57ae3249c2b8c17203fc6beb81cc9b379422580dde718d7133b159d73da4beb332289bd58f80be893cba3a150578f9944e0d825758cd77c977718e7ee59862da1644f73f4cf592b76275269668c23a74e073e0ce0e85d4e23d42960f0a48d5d0c7522b3b3acfb80d133d92123837af5597912e310d243076669c659601018981106b05fddcfe9b32cedb41ddb7e36f61d4d7b4dd23bb743291ed7f22554a9653531e32285620e46f1e4f5a113808a2da11b846c7c195a9aa933a8afe74b366b5a83baded2fb0e28fa8ebe257a7afd18b16a3490e01bf937fedfac63df3dec0143e6c18d71c625c5af966e0ea37c09b14234db2f4747aaabc86056df47f6967396b1f0aecd05ebaf77bc43bf34d452d15ded</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>上线流程(复件)</title>
    <url>/posts/4f289b4f/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4f6f285807c40ce300979fe90d39e176fadbb6fae4c60203d0bb702b0e36b6dd">d0887b061916fa4336825c648648024650420a30bcdcd73b3bacf4e441f5343e63d395ea6231075ece2b248bd588e6daad5e3af9c1572ee714f6d49394efd0af689df74ee856219fa929b74c7d64956434aff81627f12decec9f87b478fe440d53c101d69b22cf81abd857a29a1c62c2a9031523fbb47922568a0e66a3cfc425ec52e590d6c6cdc37f1a191a5a7b0447db29e125b72795db16db17b95409d093045d5c4a6d7f507840f864e135c2e0e22b9ec95b5052f3956b54121507a1b413345b63ec679dfb93c5523fd429fd5c1ef43e5a2f075557f81fa8e8510b05621382e082137d9f1a16c33eee7b54ffbdebfce2707edcbc5ec0866e93bf1a7ec5dd1cf16bafe259dfb4f20ed2282bb56ed8cd41412e83897a5c80d65e7179b362d604e29ebe72ad4e4fbbf8699bc971a6847f9d7ab739ef0d1dbc258c4833017ab88cd23d21615518cfda2cef9ac15c82d27398a806a139859638e6972f64d0f242edc3e223a94e45f6360a5d65ea734ddfc3dc477da08a2fa9d27cb474b02770c2e949003c0ea745875e0d7176fc0318bba4a6bb87d16d72cb13d276f4f899deec955bce6075365d4a925962f75bd90da68b3f25fd7c9bc872aaf563994403858d9eadc8d0972f940e4804626f9c64803804b1cf0f37762b78dec4a5718bc6be9cf41ea3bf967248eb8d901c336dcd088c774d2bc386548736f3635badac0012604be3fedcb1aee9768f82636a3f17e8c4cc1aeeebd934150458f3f0c0cb7eaba96d3085a0dbc51b46e20c964a616f20f074a210a8f69d456fd4fd983d998c7dcba9d73af6a6e0c3fd7f0d1288db849ab764055d6bc1cac6cb34d859a7b257a569a65ec7552ed0cc73b5cfef00c2b7508e5ada137f0a2b4f91bb60a4cb5f5d6727319b899ce676564dd21965148ddb12e8880a7f9ed4ff1127868215fb536210d88cf67f2ab4c502a5cf1fcc00c86cd0812882f26173dcd1952dae6e9cbb49c020a19e52784838cb1410c845d90b79d3f640249b70c427010c4f1b62f239c70e3ea9c77a853812960b9bbf2ee3f892c87d7ea7c963658e105bc960b6a24e27cf0dd22bf8d2ed770604310f64df16635d60fea5c61dd6a98438c053b9971eeb93e0fa2610c572fc3e6af005b1305604ae99033ee408c7823ea452d58c6a7c80a05ebc222bc0dac778143283ea1c4ef4acc8c95b4a0c0622d409c60781ee0522511a82362d565af90c73b5770f128728c0537d151ff7e6ddeafa6d6f23e8ef88173a1128739e46686c89d917287c3f6797e3da202e971c2aa3df9ce7d2be8f1f298a3403de9a31bd641ab77e05661cc398b61d3a3a10b83fc4272337206a1c383b1c491878f34625fb61c5fbceef7913334aba965e1c42c64d630d77f80749053a6ae793a2c61e9059ae8a3171fe8ad9d43e2bdbb89c28a3915b617db0353a13fdce2e75cde33e3d36554251aa089e18dfd5770ad11786a77f9996daf5a52261d257dd58b20a89fd491cd149de8e13079e5772c81cd7e23c8eefe6546d22b37eac4bc087c05fe236add01e3c172bdb2848b1dde07d17d85cb49bd7ce0b09fd2d02ba91e408dc3b202399f51ebe3228e6ebd43fb9978970009f7e33c85a9185bcf15dbe9e1c66db13660be25fc89afa5717aa655851a103cd946725ef79f15a84607d9bcc7f1b61bd7b8911b497da11dc367ba0258d08a368e81b3d3d3d5ead496a2b31f4839c76a8229e44b57c267bb32de6cafe47ec374be85a5335ce152a5a298c15640d35c04c319977421623e9ecccfe5dbb1a14146474ce49e40233535ea6611cb104f1fac6c2c51275f0ed45b59301e23cd850fd029758bc1e329c203b2988e813688aa233d63e5121b538d4c2928e8fce6693b09e31157a3966230369255156083079e9e5e79614488322c3c4755e25fe78246ba035ca4ddd71ad3404a9065089b9b5fa8c518e5466f112d410e4938735b73206f6f1d6101ea4d658a579c9ab48d72ee1ad742f1699b0198699a86e02a7460c8bc3f438c3e745d97683027b914e7b7554a33dddf28d18c363467d10b2796fd62fc07eb9f1a99d189895675b95ab598574066606467c82ab14697f0f1540bbe00ae6e098bbded74df3a3f2deff67be5844449392a5adef832484d46ddd18d62f0746cf4469e5c8b715fd0cdc1a5e28ca1971aa51099e8249a45b08b6a207db3840f5ff5b7a6f8f2490c39d8916ad0755785f769e8039dbd9ef993f87f1176588438003155479920f78b2bff5203db5263d6b63d52451ee5a495273cddfa08e05580f0aa47ab2cd5b89bed53d52cb1aeda7f6c605f6d8f4aea9299aca47157ccb47ef927cc1250d3a54447ea46f3849bb54a7078c72c381d39a38d665a27567b451709a69fc83860876adc822e510801d8d135f64be7833d02931f796a40af7db446447bd901d75ea23bdc0881954c70001f864bd66de01f8ea15ba77e1a85b93332674246fd1546b9083a367e36c27377b59fe9e64fdc0f9bfdb68b48b9270b5be51e0a76e067ab70db49a3953cfcc9101898b0dc59f97ed334dc927c2b57f0188c2a405f3c343ad41c90456949b0f27f1ba6b4408351813eda7b3c84ef68dad0e93d5611f25da13a013ac88fca4b8067f1625a0bd4d42de5964ace391e63a3dd4127ad01c46d90731ec203e8c79441a9820d353588f31eebeabdfeedeb6be00fbfdfa740bc23235c3cb4b7585fc4bf9fa6f852bee6c196d05c72282bcd60e4c9bf4945fa924e7131a20b8cec64adb4cd90541321b2a3fe9edc5456d11c8b48a3fec598e3e4723df2b89f70254d45f8dd665650ac43ee8358524877a6c3d0624c0dccdcc64bda9ce2a64ba6be1cc355b090b69a512b112ee7a5a948739496bdbc753b44ecfa13be37456862e28ef96bb004f6d55df063ec4b69609be488f55bf7a024cbf47541dc6c5ce890a6134fedc2a8e9c0049405ef085736804538647f0d8a43006690062362cdd12c05346b7760a355ab97183bfc11442201bff911d1f2c36406d9e67dee2328d9348f42899241be8a2d0c4062f6d83309a6551969e5bb45b25847b95ccb218e8dd04766bb5fb07b66318592ffc61b955f38445c87285c59383c4d8d9d2fb79315502ccf5ce1935ee54a679d36d5e0cab860649666cc8ace2e362616a49cd0d5644e6f6842433bd57e685f18e09d6d64e4e6c9f1b4d4041ad18b6a7ec5f12ab622a7b1c3dd1df4551dc18d9edb44f0519709bb3e313c30a992f83cbed224242e41005d192287edd2eb4ccd1fb5152fd606d82f605d09ad348f26bc0d9ca75b6e70124798532d051e84831656fadcf6ba89abbb0a00505775e44a490c1baa291b3760207a55df1529eb466691d189db1e4a9bf2c6920338eb980bfba5a83d70b0bbe454b4d90bc8b0a203d97ad5867c4e68cbbe614648ee2fa7920ee036e6379de23cfbe0563ec63fd7191e7593d5dcff3003a374cbba6f79a5fd3b65bb01e7f0fb59f930cdeca9f0bdca6231b73d918746c32e0a4554b6f00119dcc4a21da9edc22d6fa9b373d6dc1eeef9268f3b01c5c2caad45ca501bfdc90091586a922be81fd78980603d7979231988d44c7ea6a377d480fd7e85712bc74d8a886f9ae6bc126d8a34c2c74c63867847b48ce412b94a3d6eb3a13f999ff7f59bf2a67e58007b039ae7a7257f4d994c9609837a75a84afe9d215bd49e47301367b5dd6499591d72a1760fbeeb202238c12daf9f0a9534d7a13198bc6007fe9fb9d77199d799a7a8931863923a1fe3b4c180a6c83a68fb17236e137954e541bdce7c0cde694f30c9d2a8c30fff6e0617220563fff8a9a4f25566966f340240fb43528dceffee67bd6e3d184e204b5bb6f4165a77fb68d8b48241b0c53b78bf58e0b50920a8ce85bb059b9a3c4e3826bbff27529028047224ed801a5b186945cfc1d584e7d6848e921a0af3d9bd002e5af73ddd34460cf336d83060db3d4b6dd05d773e1ea2a7f6f8c8fdfb264569aa85026dce54b4fec62ff275eadf754dbb99df48bb304c7cbb37bd2488377c20f5777e7c36f9282b8d05a46a09f0af4e326719bb3c5a7384b877584c1776fd7bc6c7512fdd3d18a4039a256b15ec4fb4339efed03ee3cca917e5e26bbb25732a889e4b8441d16c86471cab79c1cadf540b02199e817102e4a3bdb51b21eb248f47c40b5599d0cd8721e57ae0e8fa4ea1be100cea1e322db9a0c2ab536842fbc38a9657899180882b10e67a95e5c5ecacc8fb0683958bb4a079363a3376b9b0a1a79ba9202ab4ebcb1c86639f52a60e576701d7c886c16b940fbd07cd12abccd6f2ce377aece8d7c8181cf6dfd8e56cdbd670449486574ee8dccbccf4bdf6165a52b6d0b73bef0cfbd5d69de2930271e0ee325dd60a55dcd27a6af9f13875028a976c4ee4910c8545fb2f78aaca0903703a45c8b45977050a10d3150339181d7d51ff3d184e7684e075406d4fec1eb66ad5456ec232ce5c4b3c4e4dea0a7501181ad9e9fea9d449f708fa87a85030f3233b65ac292f7e40f69928eb83bba3498a867e89c2928750f4a585cf8e3d73a876a77d79226ef499f655c2368ac9c3eaa2773530234b8f19ec3b6a856b0172b1f29ca9399ff75a50d64d521d0d23feed9596b89d92cb142038f81e846bc5feba982651f30a1fbf7317c3d539d5134d402c91bcc332185d347f56a5105b87b54332728031f3eb8d5f127b635892839d2b75717261eac2105c118d36868baba1ecf734b7842bbc89a854149dddb1e07e8dbb3bebbfbcbda48f121664181bffc38ac75024d8fe307c3f50e2b1fbc4d8f910b3eeb81eb05ba9a0ce57da4cc46903087047622efae2338771e61c2996146116f26c2c7e67422865708ebd8fd98211ac610e647aa60342eb5ef6936ad2466a8f5fd9af561de4562a842ec626c24252e435fa8b52d425c78fb9fa2467ab60a5b76717b604c3837be9d5107c1aaf86cd506e3ea93e6beb444d1e01ccead90a259753ffac7a3ee347b41fac51980b7542758da3e66e33f46a0fd7dd311427a0f5101510eb2fae319a67df0c1db614beb39a6982a29898deb5665bd81934bdaa7399322241b598f91e966335a859d65e2152ac36b5ef2132fbbf092bc355939fc1e0ebf168c986daa376014b8b768b5fdad7a4e36febf7d0057cd7c171540e646731dce3ce621f8ffe40098cb50b7d0eb2e5f36184e05a5c4e31ddf44d4067f01d9c8f9a86f9019804816fc5f2b6a72ac3bc798b7318452502a54d99e73f5a75bc661ba854043bcaca2295a5669d4131613b6847f24f217748b6150df246a6f7168b200c8cee00d83ac2d2cd63c28305c908f721ace9b85d4af97ba7e62d6df66e5f040beabb1df2e85b12ecd85f39c4dbdc9594d67c188191730a4df3234667656dbc599002b408a812079f2b398092652a858764424b834126303da418f37a90f7adc90cedc68c13e4f6946624bbf47f955ec642e4c695400514ab3d89a6dcbdb06b4b7a493ac820a06e958a6b95a9b6608f88d628d47963656fcea4d2dd588b6db4e5fd40db3103c1d6794fd4e0670618812e72c0e8d1e9e4acc3682d12ad656ffb879d64edec0d19006592e84018d477606f5de8045dd75d4e3e7e91d253fbcde73fb445cfa7a961766d49be1e4b417ba7f1820fd766942de18f2d8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>上线流程-DESKTOP-J06DG54</title>
    <url>/posts/c988e95f/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="21187b362ada01b2b520ba37e5390241940f04158edf035cf3ad639ac544818b">d0887b061916fa4336825c648648024650420a30bcdcd73b3bacf4e441f5343e63d395ea6231075ece2b248bd588e6daad5e3af9c1572ee714f6d49394efd0af689df74ee856219fa929b74c7d64956434aff81627f12decec9f87b478fe440d53c101d69b22cf81abd857a29a1c62c2a9031523fbb47922568a0e66a3cfc425ec52e590d6c6cdc37f1a191a5a7b0447984e42ff2bb3045d95490368b828792c7874ff64f6570e83a67cd19c913e17d3e43ce9874c96c40d8e5172852f36ea52d3bfbd415277f7f2e1c144f2fbe92b03e4473af91af463497d0fbbef51a87a1fbe520ad6f8e91f2de863b337cc3165c350e2aa0783ca3952ecc7480fa884173d5d45d96fd88484bca2d324629d8d00d5ef1eba938ac684e88a42a570d5cebd9b62a4afbc75d819b54c8bb6b080adb31f88e918a83fc6e75ef2f9ad0b7ae8aefe76913dc64844ccfa74a0865a498beef6c645cbcb3beea3eb3cfb467c033def54f92a199f88ed1d24529362d5f498175261b7a7629c716af8ef1d9d0a4a89a269b9b53e573805bdd3e1f63add8b3e4ad9e2e58c8fa6c615580e336a8df8d60ca1386c144bd7ffd4330cb18ee3bfa91b047c5a040b60b8229b45076f24efbff113bc72562bb525c7fe8c1c6016080f6693b099090430d2c2f5f6f6310818f2319917d067b12970a773090f499db4ba6b2beb547979fdcee32cd4a3b0e96b520d2e78763094d9f5ca6d3f8dfd0e6a568713fdb7793f904be11b7c47d4a404ae79d05a66108443fe582f9e2434a717bce1b77f480454c89ecc8eea6dacdffd1d28096403febc336cca8aae5e61cf6da20b64fcbc83187b50c9ecd3b0d111c7a9e41afbe1d5c14c89ce2a4306a878432a1e9c5d6ee77504a72175bd0037d772357ea725dbe264e36f5a345a4bcd248f81472e14f32e1aadf355dfcdf5883eca42a6e1d3985f368c09867ac34f1d592353ceeb17ee3ec6765a3adda4bb454f8972d538fa056ef056af32c6b14275e2dd5257a574650473033f82e272ef160c93aa6f0023976e0cf15f861340f45fd27738552f9cafc13480fa3dbd1356c26eb5c2b927502429da153dcf815f1d04459c84162784714d6f42c4c8d7d307beab2a3cc4ce232eff1b82d5895a3646a1583374ca8bb5758cefe5c0d9b3c44aa989187779cbe12860a77aa229fd5ca1b76dd79fe4edd1287ea1792aee668dd55eb2ca7f1fd6354efd7106f6be1030b0356c9862188d75597574c62af78aae15dee36cfd7cb73d701e4a613b15a5124dcb3fcb1b558b7da2d92b92a5bb6406849c8a9c64d67ebecc27fb3c0c5ffe199c13ef1f6debd6444ae38e7263a9f94db936fee4f675675f89646b71441586a31e7039fc5e787fdc19def3e50b83e11d33b147c81016aa0de0a608ec8fa11020128ddb35c0d2142b3000f1231766f2f151671b0d9c1e59fd81d506d7d72272a9b0746a3dd466c743cea7b475ff48449a6574d28c691dcdfe0c85d91e46d1328e7c356eb724763c39e1514f592cdd46d673f804f7e9b13002731c1da5fec3adfc377cafe3b01212a6a1bf95240b6c0a877e47602c7a5d66222e888b71d999b2743cca95f33020e8223a1b49a09e4fa8c297c9489d41cd6a8c22c347207febd79a2399ed741557ae94a7e122f2db426c9f95980015362151d63c35f0f5e2e5444fab1fa470b35c52b3304534fec3979249b709ee7bbddbce4432eced313cde4a51d1f04c11d7d28e248c638e85e20107ec7de10c638c06e1b1b070c793cedc1a151ea3f5abe1e4a285fa98e2098c1f4fa002716123dcb20e5a3b984bc9c4493469ec6273ccacafca31a303bd1010450e8aee4eed6564ef8dc6c7ccc145d8a5684b81d3211ab96584e205d854d782fba329e769a3a4cb1096e20cf5c5b66a92b13dfba43e66159b944de1f2b24716d3ac515f3cc0bc7290990a8ef9a2c917fe510a9866362b2988cfe0d5b25c13cfd9e97e4ff08852af63928b66d638bd902c052be1a701c0408af91ef5c77edb934e7241a0835cb2ea3b96291d510908a882d767c337b41f077e241f5b8925366b3d6cd92be7b84d6d312d6915ffe50e4bdf69bd6be18a7bb832a50ccc3d2fddd4b05c5a52b79d1f45849231e75a4cd11ff1e4293dc8e3c358471f56f3a9ac2aca9d86b14f329fecfe25b81e47b3cf0b9f83620e11f9624cf8cf57c08dd78103435dee419e066e1c2ac8751bd340c42a962c599b0d3b9231587092b459f1e8d7810615b0c48eb36ad5f6a63e6d832c427777bbc0d439b53de4e0e02f55e6ab545ccc7eab6ca4593c05dae9fd8304a6ce8e9ae387fd69e409f40868e2e0d934b8740fa13832dc84be3294fad58b48fd3e463f45fcfb101599a99c6ca848e47ea70ce94936e1e2d90d418c23ae04d8826c0467b9e3dfe4990e719080d66e70b57d2d17fcbda202a0179be697d0b2c3b0e88b2906b571fce491420ff90dc66192677d5cb6f03a6275196cfd5ec212f99cbada81742ffeec4fed83b18f6f3e8142ae6bd22db49d8bd6ac7838946ac5e58884e57f1c67176dffa6e427827e50043a13925d8c013dcdcb50043c95b1671ec536e8b9787c920576c737711f8b16f15b0822adfbfa613c7a855be56cd913ecc7fe1e57a0b6cb50adb1ace9459e88874b7adf609db89a4634eff80a0814b7bd188c8a292ec8d4e933eb98d80c7826446703eefaf7649c3f74a7eeee30633d652a2b9fae9c69d1f0d1c0fd6c60dc964ef9e53a7e7b3cf043d8739c4249b4e56dc4a1e85dfce513ef54267bd8fe39d9f25702b1458d724979404d75dab7713edaa72a5f976a79ab2291863a21e65e3449c6acdcf278db9a746f15cf3671be41a4ad6e41f9547e6c1d58ef81a31d29eaea2fd205a4969ce82eaf7b64f201fc4492b36fc22a3154193292f3b76225ab441bf73be99993f7ff59ea44a13de5eb93391b39c060fac75b32a493736e0b1e6b042f5620a7e8c4190b8126f079bc64b6170637e1e7760e290177c7a085204a82fa87f82e9ed8f40e67beea7ea6a3b2d86a497813f1f0cd4a27d36fbaed6a6b029a9a916fa0ac41baf7e44d283c6faa872812ee1d091122baead5be63eba4f1bfa536c6092c113435c6b3b5ba96c437bc2e2b461d3cee17795fbe31b8c086e732f4bf71a957f8301913299f5cedbd77612c8fa1bd0f63a59d26d0ce14d9b1cc01a0e9f806a8ef10958341ab4cbd1c4da1ea6ef0e04cf8b8d44d9cb7e00e5c93a508d0bad7a59bef41b7cf0bc1bd90b8699e3790e5f2c331088b2422a97ea8570e4286f60d31e141b7b8f12b9d26fee7c39fc24e1ef5519300873e3eb6f2d0ff858d6894d7b33d821ee918161f438f73b8abcf824073860583b18fe59ad26442bae7cda578a3e9e32b51e57738a62f166faf2dce0254b163d0a6e6bdcca41b2f886b0bbf8b45a0020f7b0098688a29e352760880b4bacec91c15913f15f1df81591bdf1d3ca1f077c49820169854bd115c0355211771b133b30561ca33b57ae3249c2b8c17203fc6beb81cc9b379422580dde718d7133b159d73da4beb332289bd58f80be893cba3a150578f9944e0d825758cd77c977718e7ee59862da1644f73f4cf592b76275269668c23a74e073e0ce0e85d4e23d42960f0a48d5d0c7522b3b3acfb80d133d92123837af5597912e310d243076669c659601018981106b05fddcfe9b32cedb41ddb7e36f61d4d7b4dd23bb743291ed7f22554a9653531e32285620e46f1e4f5a113808a2da11b846c7c195a9aa933a8afe74b366b5a83cef40fdb4fb220496dc0de1b591f87e87322d004b89c4b4f2c36215e3ae22740c7be9615827fb1a0895656be24558a1bdb8210bb1ac7312a507721bb4e5031a7b2c5f5187e06b0d3bce577b23fb99eb9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>上线流程</title>
    <url>/posts/16b3e53b/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，您输入的密码错误，请检查后重新输入。" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3199e76af4e787f14193b7cf358c992c7877271c476a43e61953d1aaf453a178">d0887b061916fa4336825c648648024650420a30bcdcd73b3bacf4e441f5343e63d395ea6231075ece2b248bd588e6daad5e3af9c1572ee714f6d49394efd0af689df74ee856219fa929b74c7d64956434aff81627f12decec9f87b478fe440d53c101d69b22cf81abd857a29a1c62c2a9031523fbb47922568a0e66a3cfc425ec52e590d6c6cdc37f1a191a5a7b0447984e42ff2bb3045d95490368b828792c7874ff64f6570e83a67cd19c913e17d3e43ce9874c96c40d8e5172852f36ea52d3bfbd415277f7f2e1c144f2fbe92b03e4473af91af463497d0fbbef51a87a1fbe520ad6f8e91f2de863b337cc3165c350e2aa0783ca3952ecc7480fa884173d5d45d96fd88484bca2d324629d8d00d5ef1eba938ac684e88a42a570d5cebd9b62a4afbc75d819b54c8bb6b080adb31f88e918a83fc6e75ef2f9ad0b7ae8aefe76913dc64844ccfa74a0865a498beef6c645cbcb3beea3eb3cfb467c033def54f92a199f88ed1d24529362d5f498175261b7a7629c716af8ef1d9d0a4a89a269b9b53e573805bdd3e1f63add8b3e4ad9e2e58c8fa6c615580e336a8df8d60ca1386c144bd7ffd4330cb18ee3bfa91b047c5a040b60b8229b45076f24efbff113bc72562bb525c7fe8c1c6016080f6693b099090430d2c2f5f6f6310818f2319917d067b12970a773090f499db4ba6b2beb547979fdcee32cd4a3b0e96b520d2e78763094d9f5ca6d3f8dfd0e6a568713fdb7793f904be11b7c47d4a404ae79d05a66108443fe582f9e2434a717bce1b77f480454c89ecc8eea6dacdffd1d28096403febc336cca8aae5e61cf6da20b64fcbc83187b50c9ecd3b0d111c7a9e41afbe1d5c14c89ce2a4306a878432a1e9c5d6ee77504a72175bd0037d772357ea725dbe264e36f5a345a4bcd248f81472e14f32e1aadf355dfcdf5883eca42a6e1d3985f368c09867ac34f1d592353ceeb17ee3ec6765a3adda4bb454f8972d538fa056ef056af32c6b14275e2dd5257a574650473033f82e272ef160c93aa6f0023976e0cf15f861340f45fd27738552f9cafc13480fa3dbd1356c26eb5c2b927502429da153dcf815f1d04459c84162784714d6f42c4c8d7d307beab2a3cc4ce232eff1b82d5895a3646a1583374ca8bb5758cefe5c0d9b3c44aa989187779cbe12860a77aa229fd5ca1b76dd79fe4edd1287ea1792aee668dd55eb2ca7f1fd6354efd7106f6be1030b0356c9862188d75597574c62af78aae15dee36cfd7cb73d701e4a613b15a5124dcb3fcb1b558b7da2d92b92a5bb6406849c8a9c64d67ebecc27fb3c0c5ffe199c13ef1f6debd6444ae38e7263a9f94db936fee4f675675f89646b71441586a31e7039fc5e787fdc19def3e50b83e11d33b147c81016aa0de0a608ec8fa11020128ddb35c0d2142b3000f1231766f2f151671b0d9c1e59fd81d506d7d72272a9b0746a3dd466c743cea7b475ff48449a6574d28c691dcdfe0c85d91e46d1328e7c356eb724763c39e1514f592cdd46d673f804f7e9b13002731c1da5fec3adfc377cafe3b01212a6a1bf95240b6c0a877e47602c7a5d66222e888b71d999b2743cca95f33020e8223a1b49a09e4fa8c297c9489d41cd6a8c22c347207febd79a2399ed741557ae94a7e122f2db426c9f95980015362151d63c35f0f5e2e5444fab1fa470b35c52b3304534fec3979249b709ee7bbddbce4432eced313cde4a51d1f04c11d7d28e248c638e85e20107ec7de10c638c06e1b1b070c793cedc1a151ea3f5abe1e4a285fa98e2098c1f4fa002716123dcb20e5a3b984bc9c4493469ec6273ccacafca31a303bd1010450e8aee4eed6564ef8dc6c7ccc145d8a5684b81d3211ab96584e205d854d782fba329e769a3a4cb1096e20cf5c5b66a92b13dfba43e66159b944de1f2b24716d3ac515f3cc0bc7290990a8ef9a2c917fe510a9866362b2988cfe0d5b25c13cfd9e97e4ff08852af63928b66d638bd902c052be1a701c0408af91ef5c77edb934e7241a0835cb2ea3b96291d510908a882d767c337b41f077e241f5b8925366b3d6cd92be7b84d6d312d6915ffe50e4bdf69bd6be18a7bb832a5f61d8d26170b7262b03db1c37716f497563a988afd03e2d718509692850125510077967f927233ea0cedecc1f207d3ca52cf4ac76dfb6082b3d271ccbb3f27016c7d3d3560c72c02e0c0f865eb1098b4bd41809277cc6d50fb45c4fdf8916cc3a24ed9864e14a3b11eb8d0e2c0d332a4d4d2c8194e1e913b7c58ede87d5bd01987ef9ea4b3a6a9d44da8d82885a3cef52993f5d55885ce759b98df065855b4d929470ef8729b92230ee5bf89aac2082469f376fa86af6f812b166db2401cd89c3a9d613c3243888aee26d0779899365ca793777086b9add5d4363a82ac19f4a81ba62a0ff169f6d193bb2c692f00b7da9805ce552a692ee777f8cbda55114f8c352276269230fcef0f1333d5f36eedf70180cce0cd44b8e21360401863fef61b0656ccb3b9a8b6019ef624d39ac92b9a4ad325f0bda906ec7e4d9c10e1058fca9228655369011bebf182435c4c2f80462a9f978426926fc8f4aaca82dbcbdd48656c2f8f8c65ab3b1259c9ab074cc13378a1b0bf17fedcc444dd682b266cfe1002d28a11fc57ef063118b1df18fd78c92daa46d7009cdf11c41680ea0d613d1126140f03c33532b95e12516632082565c4dc31795ff6ab53fb4d8f29dfda62a4740dd0388f2ed04aeb3eefde66cb95efa3496e78c8d1b3f6b79a3de879c82b251efe40a5f78c111dcbaedc82f49a2c94032c2e7fa8c790eaa39f82dd73eb8d6a045c93a03bdfc9c50460a573428ab0d1a2aaf73b9ac9e9c980807c56ca535717067f7c0458a6d5b84b3bf00cdc875a84a2aa2768bf853712d001a07494c2db4178d208b610f8b138ad5ee7816219c928d110deb93544a2a1a35b8df45e3de2998b9b83fe24745174735e52aaf4227b2afda9d7d16b650d95cbd33310fa586818c867826ac13f54468ae010429f36a09fb20357df7e40970b2c5cc44f8b05bb9f99bc2008d578049f8cb9305fd3ed2a32425ef8a9ab30f53e6ca6e5164cb6ab17911b6f7c825abdff9177031e145c09c075c79d3745efcc3c1452d77aaac9c4136e81c3f593e0d31460c0da095be3f3491ceaa255a19783ccefc1b56236f69824572cee15859b158b5cca6f5641cdd9ee9a2bca420cc8ee4d654b0f8625db076b280930f65b033a12b86b5290b44b8bce539b01df496ee1437b537c6ed5041f55b069580072b29760d0f2f9bd444933acc0a8d090f8d3cce13010dd25b278ef6ea22cb82cdf609d308f9437627f347082c305d6a9a5633b7d6ad3048ce6fede624f14bf3e748f42d1e2d3bb072ca8da51c685890b7af682ede42eec514ed08c1119a811828820a8487f107967ffa171e67f8262024ae845086ef7de4fd6a547882218c2f67847458451f65b79eaab3d056b82d773010e6f1149b73886465a156b7a62975ac4b2fef3bd04bf64b93694004c286107852b4f7624eca7a6d845a4d1e1c9cfde9f31a4f102207ff05bd4dd81a513a7a33788dc0d037c99596a4dc61136f8929bc474ec763eb5dbee306fea9a342924237a140c8d6c52a85cc901b83c58bd9765aec4626f0d2541b235aefbd0639db34fa615879b846c19fa48007c9d8eb45a2064714b23970a55a3d5c7f8333be39be44eb0fc642476260350e96a35557885a36b2dfc05dd6e386651c3d2915f784f0555bc9d0cedca568769263960c22e2ff1ecb059fda0fafa9fb6911487ac058a50f25c6236b578b8eff48c5894b8dacdd649781bdd5b699b74073c13c85f3665bfc76120320b89b670a179d040506f05a29fa6b5e814ea397aad205203688f67f6c4a7bcf10699dc5e1b9fd0f33dc712d32df67b613d5cda9342144926eb3e46c6861a58fb644baea38bdef5d92d7f6e2c59d23f6effd1d5bb250e1c06</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">当前文章暂不对外可见，请输入密码后查看！</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>法拍房</title>
    <url>/posts/565f63a6/</url>
    <content><![CDATA[<h1 id="法拍房"><a href="#法拍房" class="headerlink" title="法拍房"></a>法拍房</h1><p>以前玩过法拍房。</p>
<p>答案是：买卖不破租赁，没辙儿。</p>
<p>而且存在租赁的情况法院必然会在拍卖前告知，可能你冲动之下不看仔细就瞎jb拍了。人家租赁合同估计做得也没啥原则性的漏洞（正常情况下房主计划断供之前就准备好一切了，还能等到拍卖完了才想起来临时抱佛脚？），否则你也不会跑来知乎问问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/QYXpiS_20220218115144.png" alt="img"><img src="https://pic1.zhimg.com/80/v2-f9c3fc9a2e3b9fb55e4d44eb4ac8ccfc_1440w.jpg?source=1940ef5c" alt="img">知乎懂哥太多了，民法典上写得清清楚楚的东西还要来杠</p>
<p>给想玩法拍房的人一个建议。</p>
<p>以前我玩法拍房，都是先找银行的熟人把银行的不良贷款列一份名单给我。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/in9h58_20220218115220.png" alt="img"></p>
<p>看上哪套房子，就联系银行把该房的债权买下来，（银行-〉有资质的第三方机构-〉个人，具体步骤结尾有补充）（即房主欠银行的钱变成房主欠我的钱）。银行本来就不是拍卖机构，拍卖周期又可能比较长，银行一般急着回笼资金节约流程巴不得有人把债权买走，还会打折卖。之后自己成了债权人，就可以在拍卖信息上把联系电话留成自己的。</p>
<p>有买家想了解这套房，就会打我的电话，这时我会告诉买家这套房有一些问题，比如就存在题主说的“有超长租赁合同”之类的。买家一听这房子藏雷，就不打算买了。</p>
<p>最后想买的买家全都被我劝退，没有任何人和我竞争，这时我再让合伙人出手竞拍（债权人不能买，所以需要一个合伙人），于是这套房子就被我以起拍价买下来了。</p>
<p>你们要买<a href="https://www.zhihu.com/search?q=%E6%B3%95%E6%8B%8D%E6%88%BF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2336153412%7D">法拍房</a>的可以参考这个方法。</p>
<hr>
<h3 id="没想到这里还有杠精，是因为我把这路子免费分享出来，知道的人多了会挡你财路？"><a href="#没想到这里还有杠精，是因为我把这路子免费分享出来，知道的人多了会挡你财路？" class="headerlink" title="没想到这里还有杠精，是因为我把这路子免费分享出来，知道的人多了会挡你财路？"></a>没想到这里还有杠精，是因为我把这路子免费分享出来，知道的人多了会挡你财路？</h3><h3 id="补充细节："><a href="#补充细节：" class="headerlink" title="补充细节："></a>补充细节：</h3><p>1，债权不能直接从银行到个人，需要经手有资质的第三方机构，比如拍卖行。具体步骤：挑好房子谈好折扣——打款到拍卖行——和银行签债转协议——银行债转公示——<a href="https://www.zhihu.com/search?q=%E5%85%AC%E8%AF%81%E5%A4%84&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2336153412%7D">公证处</a>债权公证——法院出债转文书——诉讼主体变更——接手债权。</p>
<p>2，法拍房如果出现意外情况，处理较繁琐。我以前只出资投债权赚差价，不沾房子本身。不认识熟人的散户建议联系专门的拍卖中介机构，不会多收你几个钱。中介也是按上面说的这些流程走的。</p>
<hr>
<p>最后声明：</p>
<p>知乎杠精太多了。</p>
<p>我回答这个问题仅仅只是因为关注动态里蹦出来了这个问题，而我正好以前在这个领域玩过一段时间，所以顺手答一下。我本人是原神和vtb领域的答主，对金融方面的流量不感兴趣，更何况还是知乎这种公认变现价值低的劣质流量。</p>
<p>另外本人自前年底去年初住建部全国巡视指导发政策后就不再玩房了，不打广告不为自己引流（当然你可以去b站关注一下嘉然），也不接受网友任何投资与资金往来。答主绝不可能以任何形式问你要钱、拉你进任何形式的群聊、让你注册任何形式的账号等等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/oXAOjg_20220218115620.png" alt="img"><img src="https://pic3.zhimg.com/80/v2-dc62303b7e3ec727fb12e80bcb36d58d_1440w.jpg?source=1940ef5c" alt="img"></p>
]]></content>
      <categories>
        <category>挣钱</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>偏门</tag>
      </tags>
  </entry>
  <entry>
    <title>小型无人机系统试验规程</title>
    <url>/posts/dd89734e/</url>
    <content><![CDATA[<p>[toc]</p>
<h1 id="无人机系统组成"><a href="#无人机系统组成" class="headerlink" title="无人机系统组成"></a>无人机系统组成</h1><h2 id="航电系统"><a href="#航电系统" class="headerlink" title="航电系统"></a>航电系统</h2><h2 id="任务载荷系统"><a href="#任务载荷系统" class="headerlink" title="任务载荷系统"></a>任务载荷系统</h2><h2 id="地面系统"><a href="#地面系统" class="headerlink" title="地面系统"></a>地面系统</h2><h2 id="综合保障系统"><a href="#综合保障系统" class="headerlink" title="综合保障系统"></a>综合保障系统</h2><h1 id="试验实施"><a href="#试验实施" class="headerlink" title="试验实施"></a>试验实施</h1><h2 id="照相侦察试验"><a href="#照相侦察试验" class="headerlink" title="照相侦察试验"></a>照相侦察试验</h2><h3 id="试验目的"><a href="#试验目的" class="headerlink" title="试验目的"></a>试验目的</h3><h3 id="试验条件和要求"><a href="#试验条件和要求" class="headerlink" title="试验条件和要求"></a>试验条件和要求</h3><h3 id="试验内容与方法步骤"><a href="#试验内容与方法步骤" class="headerlink" title="试验内容与方法步骤"></a>试验内容与方法步骤</h3><h3 id="试验记录"><a href="#试验记录" class="headerlink" title="试验记录"></a>试验记录</h3><h2 id="电视及红外侦察系统试验"><a href="#电视及红外侦察系统试验" class="headerlink" title="电视及红外侦察系统试验"></a>电视及红外侦察系统试验</h2><h2 id="通信对抗侦查试验"><a href="#通信对抗侦查试验" class="headerlink" title="通信对抗侦查试验"></a>通信对抗侦查试验</h2><h2 id="通信对抗干扰试验"><a href="#通信对抗干扰试验" class="headerlink" title="通信对抗干扰试验"></a>通信对抗干扰试验</h2><h2 id="通信中继试验"><a href="#通信中继试验" class="headerlink" title="通信中继试验"></a>通信中继试验</h2><h2 id="合成孔径雷达侦察试验"><a href="#合成孔径雷达侦察试验" class="headerlink" title="合成孔径雷达侦察试验"></a>合成孔径雷达侦察试验</h2><h2 id="航空辐射侦察系统试验"><a href="#航空辐射侦察系统试验" class="headerlink" title="航空辐射侦察系统试验"></a>航空辐射侦察系统试验</h2><h2 id="隐身性能试验"><a href="#隐身性能试验" class="headerlink" title="隐身性能试验"></a>隐身性能试验</h2><h2 id="操作使用性能试验"><a href="#操作使用性能试验" class="headerlink" title="操作使用性能试验"></a>操作使用性能试验</h2><h2 id="环境适应试验"><a href="#环境适应试验" class="headerlink" title="环境适应试验"></a>环境适应试验</h2><h2 id="安全性试验"><a href="#安全性试验" class="headerlink" title="安全性试验"></a>安全性试验</h2><h1 id="试验测试（2）"><a href="#试验测试（2）" class="headerlink" title="试验测试（2）"></a>试验测试（2）</h1><h2 id="飞行新年试验"><a href="#飞行新年试验" class="headerlink" title="飞行新年试验"></a>飞行新年试验</h2><h2 id="动力装置飞行试验"><a href="#动力装置飞行试验" class="headerlink" title="动力装置飞行试验"></a>动力装置飞行试验</h2><h2 id="无人机发射回收（起飞-x2F-着陆）性能试验"><a href="#无人机发射回收（起飞-x2F-着陆）性能试验" class="headerlink" title="无人机发射回收（起飞&#x2F;着陆）性能试验"></a>无人机发射回收（起飞&#x2F;着陆）性能试验</h2><h2 id="飞行控制系统飞行试验"><a href="#飞行控制系统飞行试验" class="headerlink" title="飞行控制系统飞行试验"></a>飞行控制系统飞行试验</h2><h2 id="导航系统飞行试验"><a href="#导航系统飞行试验" class="headerlink" title="导航系统飞行试验"></a>导航系统飞行试验</h2><h2 id="机载电子电器设备性能飞行试验"><a href="#机载电子电器设备性能飞行试验" class="headerlink" title="机载电子电器设备性能飞行试验"></a>机载电子电器设备性能飞行试验</h2><h2 id="无线电测控与信息传输系统性能飞行试验"><a href="#无线电测控与信息传输系统性能飞行试验" class="headerlink" title="无线电测控与信息传输系统性能飞行试验"></a>无线电测控与信息传输系统性能飞行试验</h2><h2 id="地面控制站飞行操作使用性能试验"><a href="#地面控制站飞行操作使用性能试验" class="headerlink" title="地面控制站飞行操作使用性能试验"></a>地面控制站飞行操作使用性能试验</h2><h2 id="机载侦察任务设备性能飞行试验"><a href="#机载侦察任务设备性能飞行试验" class="headerlink" title="机载侦察任务设备性能飞行试验"></a>机载侦察任务设备性能飞行试验</h2><h2 id="机载通信对抗系统飞行试验"><a href="#机载通信对抗系统飞行试验" class="headerlink" title="机载通信对抗系统飞行试验"></a>机载通信对抗系统飞行试验</h2><h2 id="机载通信中继系统性能飞行试验"><a href="#机载通信中继系统性能飞行试验" class="headerlink" title="机载通信中继系统性能飞行试验"></a>机载通信中继系统性能飞行试验</h2><h2 id="机载合成孔径雷达侦察飞行试验"><a href="#机载合成孔径雷达侦察飞行试验" class="headerlink" title="机载合成孔径雷达侦察飞行试验"></a>机载合成孔径雷达侦察飞行试验</h2><h2 id="航空辐射侦察系统飞行试验"><a href="#航空辐射侦察系统飞行试验" class="headerlink" title="航空辐射侦察系统飞行试验"></a>航空辐射侦察系统飞行试验</h2><h2 id="隐身性能飞行试验"><a href="#隐身性能飞行试验" class="headerlink" title="隐身性能飞行试验"></a>隐身性能飞行试验</h2>]]></content>
      <categories>
        <category>无人机</category>
      </categories>
      <tags>
        <tag>了解</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年工作总结</title>
    <url>/posts/b88ac6ea/</url>
    <content><![CDATA[<h1 id="2020年工作总结"><a href="#2020年工作总结" class="headerlink" title="2020年工作总结"></a>2020年工作总结</h1><h3 id="1-工作内容"><a href="#1-工作内容" class="headerlink" title="1.工作内容"></a>1.工作内容</h3><ul>
<li><p>开发、上线了60多家机构模板</p>
</li>
<li><p>完成64万多历史未走识别模板报告导入athena处理的数据清洗</p>
</li>
<li><p>完成word、ppt、xps等格式报告转pdf功能的调研和开发</p>
</li>
<li><p>日常的机构模板异常、改动的修复</p>
</li>
<li><p>根据相应需求对识别服务做了一些改动和优化</p>
<h3 id="2-收获"><a href="#2-收获" class="headerlink" title="2. 收获"></a>2. 收获</h3></li>
<li><p>对模板可能出现的问题，积累了一定的经验，可以快速的定位解决</p>
</li>
<li><p>对面向对象编程有了更深的理解，分层次展现、分级别访问、封装对象之间各种关系</p>
</li>
<li><p>工作的条理性更加清晰，能够分清主次和轻重缓急。在开发时间仓促的情况下，能够详细计划。</p>
</li>
<li><p>能够更快地理解每个需求背后的逻辑和需要做的一些事情</p>
<h3 id="3-好的、坏的"><a href="#3-好的、坏的" class="headerlink" title="3. 好的、坏的"></a>3. 好的、坏的</h3></li>
</ul>
<p><strong>好的</strong></p>
<ul>
<li>通过学习、调研，能够独立解决一些疑难问题</li>
<li>沟通、做事的逻辑有所提升，能够独立完成一部分工作，承担自己的责任。</li>
<li>代码更加规范了</li>
</ul>
<p><strong>坏的</strong></p>
<ul>
<li><p>业务中所用到的技术，理解得还不够全面</p>
</li>
<li><p>业务开发中遇到的问题，经验欠缺，处理起来还不够熟练</p>
<h3 id="4-计划"><a href="#4-计划" class="headerlink" title="4. 计划"></a>4. 计划</h3></li>
<li><p>一个项目中，涉及的技术很多，有的不懂的需要加强学习</p>
</li>
<li><p>争取明年4月份，识别率能够达到80%吧</p>
</li>
</ul>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>2022</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql获取每组前N条记录</title>
    <url>/posts/c1e8765f/</url>
    <content><![CDATA[<h1 id="Mysql获取每组前N条记录"><a href="#Mysql获取每组前N条记录" class="headerlink" title="Mysql获取每组前N条记录"></a>Mysql获取每组前N条记录</h1><h2 id="Select基础知识"><a href="#Select基础知识" class="headerlink" title="Select基础知识"></a>Select基础知识</h2><p>我们在实现select语句的时候,通用的sql格式如下:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span>columns<span class="operator">*</span> <span class="keyword">from</span> <span class="operator">*</span>tables<span class="operator">*</span></span><br><span class="line">    <span class="keyword">where</span> <span class="operator">*</span>predicae1<span class="operator">*</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> <span class="operator">*</span>columns<span class="operator">*</span></span><br><span class="line">    <span class="keyword">having</span> <span class="operator">*</span>predicae1<span class="operator">*</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">*</span>columns<span class="operator">*</span></span><br><span class="line">    limit <span class="operator">*</span><span class="keyword">start</span><span class="operator">*</span>, <span class="operator">*</span><span class="keyword">offset</span><span class="operator">*</span>;</span><br></pre></td></tr></table></figure>

<p>很多同学想当然的认为select的执行顺序和其书写顺序一致,其实这是非常错误的主观意愿,也导致了很多SQL语句的执行错误.</p>
<p>这里给出SQL语句正确的执行顺序:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> <span class="operator">*</span>tables<span class="operator">*</span></span><br><span class="line"><span class="keyword">where</span> <span class="operator">*</span>predicae1<span class="operator">*</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="operator">*</span>columns<span class="operator">*</span></span><br><span class="line"><span class="keyword">having</span> <span class="operator">*</span>predicae1<span class="operator">*</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span>columns<span class="operator">*</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">*</span>columns<span class="operator">*</span></span><br><span class="line">limit <span class="operator">*</span><span class="keyword">start</span><span class="operator">*</span>, <span class="operator">*</span><span class="keyword">offset</span><span class="operator">*</span>;</span><br></pre></td></tr></table></figure>

<p>举个例子,讲解一下group by和order by联合使用时,大家常犯的错误.</p>
<p>创建一个student的表:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student (Id ine1ger <span class="keyword">primary</span> key autoincrement, Name e1xt, Score ine1ger, ClassId ine1ger);</span><br></pre></td></tr></table></figure>

<p>插入5条虚拟数据:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(Name, Score, ClassId) <span class="keyword">values</span>(&quot;lqh&quot;, <span class="number">60</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(Name, Score, ClassId) <span class="keyword">values</span>(&quot;cs&quot;, <span class="number">99</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(Name, Score, ClassId) <span class="keyword">values</span>(&quot;wzy&quot;, <span class="number">60</span>, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(Name, Score, ClassId) <span class="keyword">values</span>(&quot;zqc&quot;, <span class="number">88</span>, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student(Name, Score, ClassId) <span class="keyword">values</span>(&quot;bll&quot;, <span class="number">100</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<p>表格数据如下:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Score</th>
<th>ClassId</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>lqh</td>
<td>60</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>cs</td>
<td>99</td>
<td>1</td>
</tr>
<tr>
<td>3</td>
<td>wzy</td>
<td>60</td>
<td>1</td>
</tr>
<tr>
<td>4</td>
<td>zqc</td>
<td>88</td>
<td>2</td>
</tr>
<tr>
<td>5</td>
<td>bll</td>
<td>100</td>
<td>2</td>
</tr>
</tbody></table>
<p>我们想找每个组分数排名第一的学生.</p>
<p>大部分SQL语言的初学者可能会写出如下代码:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">group</span> <span class="keyword">by</span> ClassId <span class="keyword">order</span> <span class="keyword">by</span> Score;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Score</th>
<th>ClassId</th>
</tr>
</thead>
<tbody><tr>
<td>3</td>
<td>wzy</td>
<td>60</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>bll</td>
<td>100</td>
<td>2</td>
</tr>
</tbody></table>
<p>明显不是我们想要的结果,大家用上面的执行顺序一分析就知道具体原因了.</p>
<blockquote>
<p>原因: group by 先于order by执行,order by是针对group by之后的结果进行的排序,而我们想要的group by结果其实应该是在order by之后.</p>
</blockquote>
<p>正确的sql语句:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> Score) <span class="keyword">group</span> <span class="keyword">by</span> ClassId;</span><br></pre></td></tr></table></figure>

<p>结果:</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Score</th>
<th>ClassId</th>
</tr>
</thead>
<tbody><tr>
<td>2</td>
<td>cs</td>
<td>99</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>bll</td>
<td>100</td>
<td>2</td>
</tr>
</tbody></table>
<hr>
<h2 id="获取每组的前N个记录"><a href="#获取每组的前N个记录" class="headerlink" title="获取每组的前N个记录"></a>获取每组的前N个记录</h2><p>这里以LeetCode上难度为hard的一道数据库题目为例。</p>
<h2 id="Department-Top-Three-Salaries"><a href="#Department-Top-Three-Salaries" class="headerlink" title="Department Top Three Salaries"></a><a href="https://leetcode.com/problems/department-top-three-salaries/">Department Top Three Salaries</a></h2><h3 id="题目内容"><a href="#题目内容" class="headerlink" title="题目内容"></a>题目内容</h3><p>The Employee table holds all employees. Every employee has an Id, and there is also a column for the department Id.</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
<th>Salary</th>
<th>DepartmentId</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Joe</td>
<td>70000</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>Henry</td>
<td>80000</td>
<td>2</td>
</tr>
<tr>
<td>3</td>
<td>Sam</td>
<td>60000</td>
<td>2</td>
</tr>
<tr>
<td>4</td>
<td>Max</td>
<td>90000</td>
<td>1</td>
</tr>
<tr>
<td>5</td>
<td>Janet</td>
<td>69000</td>
<td>1</td>
</tr>
<tr>
<td>6</td>
<td>Randy</td>
<td>85000</td>
<td>1</td>
</tr>
</tbody></table>
<p>The Department table holds all departments of the company.</p>
<table>
<thead>
<tr>
<th>Id</th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>IT</td>
</tr>
<tr>
<td>2</td>
<td>Sales</td>
</tr>
</tbody></table>
<p>Wrie1 a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows.</p>
<table>
<thead>
<tr>
<th>Department</th>
<th>Employee</th>
<th>Salary</th>
</tr>
</thead>
<tbody><tr>
<td>IT</td>
<td>Max</td>
<td>90000</td>
</tr>
<tr>
<td>IT</td>
<td>Randy</td>
<td>85000</td>
</tr>
<tr>
<td>IT</td>
<td>Joe</td>
<td>70000</td>
</tr>
<tr>
<td>Sales</td>
<td>Henry</td>
<td>80000</td>
</tr>
<tr>
<td>Sales</td>
<td>Sam</td>
<td>60000</td>
</tr>
</tbody></table>
<p>题目的意思是：求每个组中工资最高的三个人。(ps：且每个组中，同一名中允许多个员工存在，因为工资是一样高.)</p>
<h3 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h3><ol>
<li>我们先来获取每个组中的前3名工资最高的员工</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Employee <span class="keyword">as</span> e</span><br><span class="line">    <span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(e1.salary)) <span class="keyword">from</span> Employee <span class="keyword">as</span> e1 <span class="keyword">where</span>  e1.DepartmentId <span class="operator">=</span> e.DepartmentId <span class="keyword">and</span> e1.salary <span class="operator">&gt;</span> e.salary) <span class="operator">&lt;</span> <span class="number">3</span>;<span class="number">12</span></span><br></pre></td></tr></table></figure>

<p>where中的select是保证：遍历所有记录，取每条记录与当前记录做比较，只有当Employee表中同一部门不超过3个人工资比当前员工高时，这个员工才算是工资排行的前三名。</p>
<ol>
<li>有了第一步的基础，接下来我们只需要使用as去构造新表，并且与Department表做个内联，同时注意排序就好了</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> d.Name <span class="keyword">as</span> Department, e.Name <span class="keyword">as</span> Employee, e.Salary <span class="keyword">as</span> Salary</span><br><span class="line">    <span class="keyword">from</span> Employee <span class="keyword">as</span> e <span class="keyword">inner</span> <span class="keyword">join</span> Department <span class="keyword">as</span> d</span><br><span class="line">    <span class="keyword">on</span> e.DepartmentId <span class="operator">=</span> d.Id</span><br><span class="line">    <span class="keyword">where</span> (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span>(e1.Salary)) <span class="keyword">from</span> Employee <span class="keyword">as</span> e1 <span class="keyword">where</span> e1.DepartmentId <span class="operator">=</span> e.DepartmentId <span class="keyword">and</span> e1.Salary <span class="operator">&gt;</span> e.Salary) <span class="operator">&lt;</span> <span class="number">3</span></span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> e.Salary <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>sql</tag>
        <tag>理解</tag>
      </tags>
  </entry>
  <entry>
    <title>git切换分支保存修改的代码的方法</title>
    <url>/posts/b72a0472/</url>
    <content><![CDATA[<h1 id="git切换分支保存修改的代码的方法"><a href="#git切换分支保存修改的代码的方法" class="headerlink" title="git切换分支保存修改的代码的方法"></a>git切换分支保存修改的代码的方法</h1><h2 id="git之-分支切换时相互影响的问题"><a href="#git之-分支切换时相互影响的问题" class="headerlink" title="git之 分支切换时相互影响的问题"></a>git之 分支切换时相互影响的问题</h2><p>git下分支的应用是很方便的一个功能，但是有一个问题，如果我在分支A有工作尚未完成，想要跳到分支B，如果不注意，可能搞乱你的工作。</p>
<p>首先说，如果你的分支A工作区和缓存区是干净的（即你在A分支commit之后再没做任何更改），你随便往别的分支跳都不会有影响的。但是如果你在A分支下有未完成的工作，即你用git status看显示有没有add或者commit的内容，你往B分支checkout的时候，会把你在A分支下的工作带过去，如图：<br><img src="https://img-blog.csdn.net/20161205143114014" alt="这里写图片描述"><br>在命令$git checkout B之后显示的A A1 和A A2意思即为提醒使用者，有未提交的工作也一起跳转到分支B上啦（前面的大写A意味着A1，A2文件是新建且已经git add的文件；如果是大写M则意味着A1，A2文件为内容有更改的原有文件；D则意味着是删除了A1，A2文件）。这个时候你如果在B分支上进行其他工作而不编辑A1，A2文件，目前来说是没问题的。然而，一旦你在B分支上完成了某项工作，运行了commit命令，A1，A2文件之前的更改也会在A分支上进行提交，而git的规矩是，在那个分支上进行的提交，就算哪个分支上的工作。</p>
<p>也就是说，一旦你把A分支上尚未完成的工作带到了B分支上并在B分支上顺利提交，那么你本来希望是在A分支上进行的工作，则会被提交到本地库中B分支上，该部分工作在A分支下用git log命令查看不到但是在B分支下则可以查看到。这在实际的工作中会导致你的两个分支乱掉或者出现提交冲突。不是不能补救，但是会很麻烦，所以要尽量避免。</p>
<p>那么怎么避免呢？事实上，在比较旧的版本的git下，你在分支A下有未完成的工作的情形下，是无法跳转到分支B下的，这就很好的避免了后续的尴尬情况，不过目前版本的git是允许你带着未完成工作进行跳转的，所以你可以通过以下手段来避免这种情况下搞乱你的工作：</p>
<p>1.跳转分支之前git status一下查看是不是有没有add和commit的工作，如果有，可以的话，就都提交掉。（事实上尚未add的工作带到了新分支下如果不继续对该文件进行处理，带过去也是没有影响的，大不了跳回来再带回来嘛，反正木有add过的内容在新分支下commit也不会把这部分工作提交。）<br>2.如果确实有尚未add和commit的工作，但是并未完成不方便进行提交，可以利用git stash进行现场保留，然后跳转。（git stash的用法也是一块比较重要的内容，这里暂不详细介绍了，可以直接百度其用法~）<br>3.如果1.2你都没有做，很不小心地带着未commit的工作跳转到了另一分支下，跳转之后的提示可以让你意识到你把先前分支的工作带过来了，不做任何修改直接再跳回去就好（就又带回去了），然后进行1或2步中所说。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>最近在一个原有的项目上做一次非常大的改版，底层的数据库做了很大的变化，跟现在的版本无法兼容。现在的工作除了开发最新的版本之外还要对原来的版本做例行的维护，修修补补。于是有了在两个分支之间游走切换的问题，最新改版的代码在分支new上，旧版本的代码在分支old上，我在new上开发了一半，忽然有人给了我一个改进的需求，于是我要切换回old去修改代码。在这个场景下，我摸索了三种方法：</p>
<h3 id="及时commit代码"><a href="#及时commit代码" class="headerlink" title="及时commit代码"></a>及时commit代码</h3><p>在new分支上把已经开发完成的部分代码commit掉，不push，然后切换到old分支修改代码，做完了commit，所有分支互不影响，这是一个理想的方法。</p>
<h3 id="使用git-stash"><a href="#使用git-stash" class="headerlink" title="使用git stash"></a>使用git stash</h3><p>有时候写了一半的JAVA代码，都还不能编译通过的，就被叫去改另一个分支的bug了。</p>
<p>在new分支上的时候在命令行输入：</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">git stash</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">git stash save “修改的信息<span class="string">&quot;</span></span><br></pre></td></tr></table></figure>

<p>这样以后你的代码就回到自己上一个commit了，直接git stash的话git stash的栈会直接给你一个hash值作为版本的说明，如果用git stash save “修改的信息”，git stash的栈会把你填写的“修改的信息”作为版本的说明。</p>
<p>接下来你回到old分支修改代码完成，你又再回到new分支，输入：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">git stash <span class="built_in">pop</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git stash list</span><br><span class="line">git stash apply <span class="symbol">stash@</span>&#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>就可以回到保存的版本了。git stash pop的作用是将git stash栈中最后一个版本取出来，git stash apply stash@{0}的作用是可以指定栈中的一个版本，通过git stash list可以看到所有的版本信息：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">stash</span>@&#123;<span class="number">0</span>&#125;: <span class="literal">On</span> order-master-bugfix: <span class="number">22222</span></span><br><span class="line"><span class="attribute">stash</span>@&#123;<span class="number">1</span>&#125;: <span class="literal">On</span> order-master-bugfix: <span class="number">22222</span></span><br></pre></td></tr></table></figure>

<p>然后你可以选择一个你需要的版本执行：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">git stash apply <span class="symbol">stash@</span>&#123;<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这时候你搁置的代码就回来了。</p>
<p>这是一个非常常用的场景,我正在一个分支上修改功能,然后遇到一个bug需要解决,我得切换到其他分支来修改这个bug,但是目前的功能还在开发阶段,还不成熟,还不想执行add和commit,执行这两个后就会在历史中有记录,并不想这样做,于是就有了git stash功能,把我当前的修改暂时保存起来,然后回来的时候再取出来继续开发功能.</p>
<p>git stash是针对整个git工程来进行保存的,也就是说区分不了branch.比如我在a分支git stash save “sss”暂存了一个修改,那么我切换到b分支,我使用git stash pop 就能把在a分支保存的”sss”这个修改同步到了b分支上.所以当我们需要在不同的分支上取出不同的分支上保存的修改,那么就用到了git stash list,这个命令可以把在所有分支上暂存的信息显示出来,然后我们通过 git stash apply stash@{0} 来选择恢复哪个暂存,stash@{0}这个会在list中列出来.</p>
<h2 id="而我们使用Android-studio就太方便了"><a href="#而我们使用Android-studio就太方便了" class="headerlink" title="而我们使用Android studio就太方便了."></a>而我们使用Android studio就太方便了.</h2><p>在当前工程的任何一个文件中,点击右键,选择git–&gt; 选择repository —&gt; 里面会列出stash changes和unstash changes命令,一个是保存修改的命令,一个是恢复修改的命令.</p>
<p>stash changes会让我们给要保存的内容输入一个message,这个和git stash save “”是一样的</p>
<p><img src="https://blog.csdn.net/anhenzhufeng/article/details/78052418" alt="img"></p>
<p>而 unstash changes会列表我们之前保存过的list</p>
<p><img src="https://blog.csdn.net/anhenzhufeng/article/details/78052418" alt="img"></p>
<p>可以很方便的恢复我们之前的保存的内容.</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git对比两个分支</title>
    <url>/posts/1ed54b1d/</url>
    <content><![CDATA[<h1 id="git-对比两个分支差异"><a href="#git-对比两个分支差异" class="headerlink" title="git 对比两个分支差异"></a>git 对比两个分支差异</h1><h3 id="1-显示出branch1和branch2中差异的部分"><a href="#1-显示出branch1和branch2中差异的部分" class="headerlink" title="1. 显示出branch1和branch2中差异的部分"></a>1. 显示出branch1和branch2中差异的部分</h3>  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">diff </span><span class="keyword">branch1 </span><span class="keyword">branch2 </span>--stat</span><br></pre></td></tr></table></figure>

<h3 id="2-显示指定文件的详细差异"><a href="#2-显示指定文件的详细差异" class="headerlink" title="2. 显示指定文件的详细差异"></a>2. 显示指定文件的详细差异</h3>  <figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">git <span class="keyword">diff </span><span class="keyword">branch1 </span><span class="keyword">branch2 </span>具体文件路径</span><br></pre></td></tr></table></figure>

<h3 id="3-显示出所有有差异的文件的详细差异"><a href="#3-显示出所有有差异的文件的详细差异" class="headerlink" title="3. 显示出所有有差异的文件的详细差异"></a>3. 显示出所有有差异的文件的详细差异</h3>  <figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">git diff bra<span class="symbol">nch1</span> bra<span class="symbol">nch2</span></span><br></pre></td></tr></table></figure>

<h3 id="4-查看branch1分支有，而branch2中没有的log"><a href="#4-查看branch1分支有，而branch2中没有的log" class="headerlink" title="4. 查看branch1分支有，而branch2中没有的log"></a>4. 查看branch1分支有，而branch2中没有的log</h3>  <figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">git log bra<span class="symbol">nch1</span> ^bra<span class="symbol">nch2</span></span><br></pre></td></tr></table></figure>

<h3 id="5-查看branch2中比branch1中多提交了哪些内容"><a href="#5-查看branch2中比branch1中多提交了哪些内容" class="headerlink" title="5. 查看branch2中比branch1中多提交了哪些内容"></a>5. 查看branch2中比branch1中多提交了哪些内容</h3>  <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">git</span></span> <span class="built_in">log</span> branch1..branch2`</span><br></pre></td></tr></table></figure>
<p>  <strong>注意，列出来的是两个点后边（此处即dev）多提交的内容。</strong></p>
<h3 id="6-不知道谁提交的多谁提交的少，单纯想知道有是吗不一样"><a href="#6-不知道谁提交的多谁提交的少，单纯想知道有是吗不一样" class="headerlink" title="6. 不知道谁提交的多谁提交的少，单纯想知道有是吗不一样"></a>6. 不知道谁提交的多谁提交的少，单纯想知道有是吗不一样</h3>  <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">git</span></span> <span class="built_in">log</span> branch1...branch2</span><br></pre></td></tr></table></figure>

<h3 id="7-在上述情况下，在显示出没个提交是在哪个分支上"><a href="#7-在上述情况下，在显示出没个提交是在哪个分支上" class="headerlink" title="7. 在上述情况下，在显示出没个提交是在哪个分支上"></a>7. 在上述情况下，在显示出没个提交是在哪个分支上</h3>  <figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">git</span></span> <span class="built_in">log</span> --lefg-right branch1...branch2</span><br></pre></td></tr></table></figure>
<p>  <strong>注意 commit 后面的箭头，根据我们在 –left-right branch1…branch2 的顺序，左箭头 &lt; 表示是 branch1 的，右箭头 &gt; 表示是branch2的。</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git推送文件夹到github仓库</title>
    <url>/posts/e5591b74/</url>
    <content><![CDATA[<h1 id="Git推送文件夹到github仓库"><a href="#Git推送文件夹到github仓库" class="headerlink" title="Git推送文件夹到github仓库"></a>Git推送文件夹到github仓库</h1><p>有时候我们可能会遇到当文件累积到了一定程度的时候，想使用 git 进行版本管理，或者推送到 Github 等远程仓库上。本文介绍如何将一个本地文件夹中已经存在的内容使用 git 进行管理，并推送至远程仓库，以及对其中可能出现的错误进行分析。</p>
<h2 id="创建-git-仓库"><a href="#创建-git-仓库" class="headerlink" title="创建 git 仓库"></a>创建 git 仓库</h2><p>在该文件夹下初始化仓库：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>此时将会在此文件夹下创建一个空的仓库，产生一个 <code>.git</code>文件，会看到以下提示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">Initialized empty Git repository in FOLDERPATH/<span class="selector-class">.git</span>/</span><br></pre></td></tr></table></figure>

<h2 id="将文件添加到暂存区"><a href="#将文件添加到暂存区" class="headerlink" title="将文件添加到暂存区"></a>将文件添加到暂存区</h2><p>使用以下命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git add .	</span><br></pre></td></tr></table></figure>

<p>此操作会将当前文件夹中所有文件添加到 git 仓库暂存区。</p>
<h2 id="将文件提交到仓库"><a href="#将文件提交到仓库" class="headerlink" title="将文件提交到仓库"></a>将文件提交到仓库</h2><p><code>git add</code> 命令仅仅将文件暂存，但实际上还没有提交，实际上仓库中并没有这些文件，使用以下命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure>

<p>此时将会打开一个文件，用于记录提交说明，输入提交说明即可，若说明较为简短，也可以使用以下命令：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git commit -m &quot;YOUR COMMENT&quot;</span><br></pre></td></tr></table></figure>

<h2 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h2><p>使用以下命令添加添加一个远程仓库：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git remote add origin YOUR_REMOTE_REPOSITORY_URL</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git remote set-url origin git<span class="keyword">@github</span>.com:ppreyer/first_app.git</span><br></pre></td></tr></table></figure>

<p>其中 origin 相当于给远程仓库的名称，也就是相当于一个标识符。</p>
<h2 id="推送至远程仓库"><a href="#推送至远程仓库" class="headerlink" title="推送至远程仓库"></a>推送至远程仓库</h2><p>使用以下命令将会将本地仓库中的内容推送至远程仓库的 master 分支：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">git push origin dev:master</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果之前忘记了<code>git commit</code> 的步骤，这里将会出现一个错误提示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">error: src refspec master does not match any.</span><br></pre></td></tr></table></figure>

<p>为什么会有这个报错呢？原因其实很简单，在没有使用 <code>git commit</code> 之前，由于这是一个新创建的<code>git</code>仓库，没有<code>master brench</code>，也就是并没有一个工作树可供推送至远程仓库，所以自然也就出错啦。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>git远程分支</title>
    <url>/posts/53bfd3b2/</url>
    <content><![CDATA[<h1 id="从远程仓库获取最新代码合并到本地分支"><a href="#从远程仓库获取最新代码合并到本地分支" class="headerlink" title="从远程仓库获取最新代码合并到本地分支"></a>从远程仓库获取最新代码合并到本地分支</h1><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ApJp5Nk24a0_20201209094424.jpg" alt="ApJp5Nk24a0"></p>
<p>这里共展示两类三种方式。</p>
<h2 id="1-git-pull：获取最新代码到本地，并自动合并到当前分支"><a href="#1-git-pull：获取最新代码到本地，并自动合并到当前分支" class="headerlink" title="1.git pull：获取最新代码到本地，并自动合并到当前分支"></a>1.git pull：获取最新代码到本地，并自动合并到当前分支</h2><p>命令展示</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">//直接拉取并合并最新代码</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git pull origin master [示例1：拉取远端origin/master分支并合并到当前分支]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git pull origin dev [示例2：拉取远端origin/dev分支并合并到当前分支]12345</span></span><br></pre></td></tr></table></figure>

<p>分析：不推荐这种方式，因为是直接合并，无法提前处理冲突。</p>
<h2 id="2-git-fetch-merge-获取最新代码到本地，然后手动合并分支"><a href="#2-git-fetch-merge-获取最新代码到本地，然后手动合并分支" class="headerlink" title="2.git fetch + merge: 获取最新代码到本地，然后手动合并分支"></a>2.git fetch + merge: 获取最新代码到本地，然后手动合并分支</h2><h3 id="2-1-额外建立本地分支"><a href="#2-1-额外建立本地分支" class="headerlink" title="2.1.额外建立本地分支"></a>2.1.额外建立本地分支</h3><p>代码展示</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">//查看当前远程的版本</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git remote -v</span> </span><br><span class="line">//获取最新代码到本地临时分支(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git fetch origin master:master1  [示例1：在本地建立master1分支，并下载远端的origin/master分支到master1分支中]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git fetch origin dev:dev1[示例1：在本地建立dev1分支，并下载远端的origin/dev分支到dev1分支中]</span></span><br><span class="line">//查看版本差异</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git diff master1 [示例1：查看本地master1分支与当前分支的版本差异]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git diff dev1    [示例2：查看本地dev1分支与当前分支的版本差异]</span></span><br><span class="line">//合并最新分支到本地分支</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git merge master1    [示例1：合并本地分支master1到当前分支]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git merge dev1   [示例2：合并本地分支dev1到当前分支]</span></span><br><span class="line">//删除本地临时分支</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git branch -D master1    [示例1：删除本地分支master1]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git branch -D dev1 [示例1：删除本地分支dev1]1234567891011121314</span></span><br></pre></td></tr></table></figure>

<p>备注：不推荐这种方式，还需要额外对临时分支进行处理。</p>
<h3 id="2-2-不额外建立本地分支"><a href="#2-2-不额外建立本地分支" class="headerlink" title="2.2.不额外建立本地分支"></a>2.2.不额外建立本地分支</h3><p>代码展示</p>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line">//查询当前远程的版本</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git remote -v</span></span><br><span class="line">//获取最新代码到本地(本地当前分支为[branch]，获取的远端的分支为[origin/branch])</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git fetch origin master  [示例1：获取远端的origin/master分支]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git fetch origin dev [示例2：获取远端的origin/dev分支]</span></span><br><span class="line">//查看版本差异</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git <span class="built_in">log</span> -p master..origin/master [示例1：查看本地master与远端origin/master的版本差异]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git <span class="built_in">log</span> -p dev..origin/dev   [示例2：查看本地dev与远端origin/dev的版本差异]</span></span><br><span class="line">//合并最新代码到本地分支</span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git merge origin/master  [示例1：合并远端分支origin/master到当前分支]</span></span><br><span class="line"><span class="meta">$ </span><span class="language-bash">git merge origin/dev [示例2：合并远端分支origin/dev到当前分支]1234567891011</span></span><br></pre></td></tr></table></figure>

<p>备注：推荐这种方</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>idea效率</title>
    <url>/posts/f15ad5a2/</url>
    <content><![CDATA[<h2 id="如何用-IDEA-提升十倍开发效率？"><a href="#如何用-IDEA-提升十倍开发效率？" class="headerlink" title="如何用 IDEA 提升十倍开发效率？"></a>如何用 IDEA 提升十倍开发效率？</h2><p>工欲善其事，必先利其器。想要提升编程开发效率，必须选择一款顺手的开发工具。</p>
<p>JetBrains 公司提供了一系列功能强大、风格统一的开发工具，深受开发者喜爱。其中，IDEA 是<strong>面向 Java 开发的专业 IDE</strong>（集成开发环境），<strong>90% 以上</strong>的企业都在使用 IDEA 进行 Java 开发，而不是用其他的工具如 Eclipse。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcvwx2U5AeITWJkAILg7vibiakaicKaLCJBfLThFqMHk0SxFB0LpVWd360A/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>但是，想要开发效率最大化，仅有好的开发工具是不够的，还要能够熟练地使用它。对于 IDEA 的新用户来说，面对功能如此丰富的开发工具可能会有些迷茫，但又不想花时间去学习如何使用，于是仅仅把它当做能编写代码的记事本了（就是好看点），大材小用。</p>
<p>为大家总结了自己掌握的 IDEA 使用技巧，包括<strong>实用插件、开发技巧和阅读源码的技巧等</strong>。只需花 <strong>5 分钟</strong>的时间阅读，即可提升十倍的开发效率！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcLME1wCCPE25IelWSk6bVMH3yHibSeDsy90jSC1VEMjZ01KKE8giahdpA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>什么，你说 IDEA 太贵用不起？如果还是<strong>学生党</strong>，可以<strong>免费使用</strong> IDEA 及 JetBrains 全系列产品哦~</p>
<p>地址：<a href="https://www.jetbrains.com/shop/eform/students">https://www.jetbrains.com/shop/eform/students</a></p>
<h2 id="快捷-键"><a href="#快捷-键" class="headerlink" title="快捷****键"></a><strong>快捷****键</strong></h2><p>要使用任何 IDE（集成开发环境）提升开发及阅读源码的效率，首先要活用快捷键。</p>
<p>在 IDEA 中，可以在 preferences 的 keymap 设置中查询及设置快捷键，如图：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcwTACzTvQUy7p1rSdUoVAySMhzMnKGHICmmWzzJAC8TYMRSuWFYWNwA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<h2 id="实用插件"><a href="#实用插件" class="headerlink" title="实用插件"></a><strong>实用插件</strong></h2><p><strong>1. Key Promoter X</strong></p>
<p>快捷键提示插件。当你执行鼠标操作时，如果该操作可被快捷键代替，会给出提示，帮助你自然形成使用快捷键的习惯，告别死记硬背。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/9792-key-promoter-x/">https://plugins.jetbrains.com/plugin/9792-key-promoter-x/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcMsTNiaCibYThkgPYdXhpKciaa5wBQfaHQLKP7nsKOX3HEXN8EsVnpOsZA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<p><strong>2. AiXcoder Code Completer</strong></p>
<p>代码提示补全插件。使用 AI 去自动提示和补全代码，比 IDEA 自带的代码补全更加智能化。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/13574-aixcoder-code-completer/">https://plugins.jetbrains.com/plugin/13574-aixcoder-code-completer/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcHGff1pRvHllEQpQvibTyMib5XrndXPNJd9ia8lMapzxJcyht3KPZXYBTA/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<p><strong>3. Arthas Idea</strong></p>
<p>Arthas 命令生成插件。Arthas 是阿里开源的 Java 在线诊断工具，该插件可以自动生成 Arthas 在线 Java 代码诊断命令，不用再到官网翻文档拼命令啦！</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/13581-arthas-idea/">https://plugins.jetbrains.com/plugin/13581-arthas-idea/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcMMViaiczu9vCFZvYJNNAvkUxoSAfZRWoCPQJDMoQ6SF7WutY7ZzmkxJg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>4. Auto filling Java call arguments</strong></p>
<p>代码生成插件。通过快捷键自动补全函数的调用参数，针对包含大量参数的构造函数和方法非常有用！</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/">https://plugins.jetbrains.com/plugin/8638-auto-filling-java-call-arguments/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgczqpTjHHadDFjLcXt6PvqCBHK4KwgEk8Ckk949v2Cr9Lx15fSG7bbjQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>5. GenerateAllSetter</strong></p>
<p>代码生成插件。一键生成指定对象的所有 set 方法调用代码，自动赋值，或者生成某方法的返回值，这在单元测试造假数据时非常有用。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter/">https://plugins.jetbrains.com/plugin/9360-generateallsetter/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcwaiarahjFEkJINMnFQ6zOhR5iaIib47yOeQMg5phOyojZuVgJjNysBW5Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>6. GenerateSerialVersionUID</strong></p>
<p>代码生成插件。一键为实现 Serializable 接口的类生成 SerialVersionUID。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/185-generateserialversionuid/">https://plugins.jetbrains.com/plugin/185-generateserialversionuid/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcnyPeiaicubZ38vu5Fkngo4hMkVjKuSrEuRNtyFc0NchRruP0XwGicNoRQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>7. GsonFormat</strong></p>
<p>代码生成插件。在类中使用，粘贴一段 Json 文本，能自动生成对象的嵌套结构代码。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/7654-gsonformat/">https://plugins.jetbrains.com/plugin/7654-gsonformat/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcQXOF3x0f2zWeXicgWQ3mEeY74ic7Eib6exT4TDxttIrh5Uz9dH8IKevfw/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<p><strong>8. Lombok</strong></p>
<p>代码生成插件。配合 Lombok 依赖及注解使用，能够大大减少 POJO（简单老式 Java 对象）的代码量。</p>
<p>安装插件后还要开启注解支持，可以参照这篇文章进行配置：<a href="https://www.baeldung.com/lombok-ide">https://www.baeldung.com/lombok-ide</a> 。</p>
<p>插件地址：<a href="https://plugins.jetbrains.com/plugin/6317-lombok/">https://plugins.jetbrains.com/plugin/6317-lombok/</a></p>
<p><strong>9. Rainbow Brackets</strong></p>
<p>代码浏览插件。通过颜色区分括号嵌套层级，便于阅读，能够更快地对错误代码进行定位和调整。但是建议不要在代码中出现大量的嵌套哦！</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/">https://plugins.jetbrains.com/plugin/10080-rainbow-brackets/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcTSaUyvibZejE4H1ibGoyalPmdoERkmUx6qC7606mdw7icZUlbTAqwR2rQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>10. CodeGlance</strong></p>
<p>代码浏览小地图插件。在编辑器右侧生成 code minimap，可以拖拽小地图光标快速定位代码，阅读行数很多的代码文件时非常实用。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/7275-codeglance/">https://plugins.jetbrains.com/plugin/7275-codeglance/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcSJ9gErRuVwYreMPWV4T0tqh8Q3eG1DerNdPIjjXFqCgsewUb6LMFUQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>11. GitToolBox</strong></p>
<p>Git 增强插件。在自带的 Git 功能之上，新增了查看 Git 状态、自动拉取代码、提交通知等功能。最好用的是可以查看到每一行代码的最近一次提交信息。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/7499-gittoolbox/">https://plugins.jetbrains.com/plugin/7499-gittoolbox/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcsaib1UVDdTlibrhPb2cBMDFyT7zmmbTFClV2UHc7pJkf7ibEzia7L2qebQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>12. Translation</strong></p>
<p>翻译插件。程序员最痛苦的事莫过于阅读代码时遇到不懂的英文单词，有了这个插件，鼠标选中文本，点击右键即可自动翻译成多国语言。</p>
<p>地址：<a href="https://plugins.jetbrains.com/plugin/8579-translation/">https://plugins.jetbrains.com/plugin/8579-translation/</a></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgca8dnrd9d2P7ymAnqzhOxwEWr3MgJt6oFp2kXMcOMVnGRzTfUhr7dnQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<h2 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a><strong>开发技巧</strong></h2><p>通过插件可以给 IDEA 增加新功能，但是 IDEA 自带的功能也非常强大，有很多实用的开发技巧。</p>
<p>\1. 使用上述代码生成和浏览插件</p>
<p>\2. <strong>熟练使用快捷键</strong>，通过上述 Key Promoter X 插件渐进式熟悉快捷键。</p>
<p>网上对快捷键的整理太多了，此处不再赘述，可以参考这两篇文章：</p>
<p>- IDEA Mac 快捷键指南，地址：<a href="https://www.jianshu.com/p/454c71172c46">https://www.jianshu.com/p/454c71172c46</a></p>
<p>- IDEA Win 常用快捷键，地址：<a href="https://www.jianshu.com/p/5de7cca0fefc">https://www.jianshu.com/p/5de7cca0fefc</a></p>
<p>比较常用的快捷键是<strong>换行、复制&#x2F;删除当前行、代码格式化等</strong>。</p>
<p>\3. <strong>利用快捷键为类快速生成代码</strong>（Win: Alt+Insert，Mac: command + n）</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcn101P6A0h0EaznFgY6uSFb78ahBcicYYhwNVC9mGQRLn5rXjdq0fUMg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>4. 运用代码模板（Live Templates）</strong></p>
<p>代码模板是 IDEA 中非常好用的功能，可以<strong>通过缩写（关键词）来生成指定的代码段</strong>，很多重复的代码都可以用这种方式来快速生成，提高效率的同时降低了出错概率。</p>
<p>示例如下：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcLxyLk8VciaYdnfrAkIuPXRibiabNeOKsNH30gkBPL1O66GXgBw8zKGYeQ/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<p>IDEA 为我们内置了很多代码模板，比如 main：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcQRSWXhESU5fXXKkxH5yrD8JoKxs3Je7YJ4kHfvPcrRgxvRdaTVEicSg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>也可以自己定义缩写和要生成的代码段：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcgE1v6KTIuuoIO3G7w7UhxEgXJaEgsQlQEGZEyFVz2MsuxMp5xDNYEg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>还可以使用预定义变量、自定义变量及使用内置函数，更多高级用法可以参考这篇文章：IDEA 中 live template 的详细使用教程（地址：<a href="https://www.jianshu.com/p/3974df6572af%EF%BC%89">https://www.jianshu.com/p/3974df6572af）</a></p>
<p><strong>5. 使用内置剪切板保存复制历史</strong></p>
<p>写代码的必备技能是复制粘贴，不仅可以提高效率，还可以降低出错率（比如用户、秘钥、地址等信息）。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_gif/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgchDho02HhicKuCibMG7weBzfYWk4f4lq8TBPED1CXUFFByX2JvhwC0F6g/640?wx_fmt=gif&tp=webp&wxfrom=5&wx_lazy=1" alt="图片"></p>
<p>IDEA 内置了剪切板，可以帮助我们保存复制历史，粘贴时按 shift + ctrl + v 即可选择复制。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcUcCwriaOON6VBdFe6c1Vo9qnyCwIjWxv4o7cEpFMYxeic7BIpSgMtwoQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>不满足于内置的剪切板？还可以使用更高级的软件：Ditto（Windows）或 Alfred（Mac）</p>
<p><strong>6. 使用内置的 Git</strong></p>
<p>IDEA 内置了 Git 辅助工具，能够可视化分支管理&#x2F;切换，代码提交&#x2F;更新&#x2F;冲突解决&#x2F;回退，代码历史版本查看等。在顶部菜单 VCS &gt; Git 中可以查看所有功能：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcyVOpl0YjRZzGdHhaBsqEic2tD9LffYGb8SjJXvJAPWy0RcICD4JhFkA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>在底部栏中可以查看 Git 日志：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcstYwYcIqv0eoUWh7bw90VcTACCnX7YyAKtpl0OMnBjplwupxObow4Q/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>7. 使用内置 HTTP Client 测试接口</strong></p>
<p>不需要再使用 Postman 等外置接口测试工具了，IDEA 内置了 HTTP Client，通过编写请求脚本来进行调用，非常灵活。</p>
<p>在顶部菜单的 Tools &gt; HTTP Client 中打开：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcqGuznVmVh62PZVwIvHP0uGjQ3lNibfrT1JYHQo0cIR57ic1ncQicLOiaOA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>编写脚本进行 HTTP 接口测试：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcCPyGGGq87HiciaOq96baL199ZaANK4BXVnK6qpRjQGonIJvWH177vEMA/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>详细用法请阅读官方使用文档，地址：<a href="https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html">https://www.jetbrains.com/help/idea/http-client-in-product-code-editor.html</a></p>
<h2 id="阅读源码技巧"><a href="#阅读源码技巧" class="headerlink" title="阅读源码技巧"></a><strong>阅读源码技巧</strong></h2><p>优秀的程序员一定会阅读很多源码，阅读源码也是有很多技巧的。</p>
<p>通常，根据他人总结的项目文档，先看整体（目录和类图）再看局部（类和函数）。对于 Java 项目，就是先查看包的层级关系，然后分析包中类（接口）之间的关系，包括继承、实现、委托、方法调用等，最后再查看某个类具体的属性和方法的具体实现。</p>
<p>IDEA 为整个阅读源码的过程提供了一系列好用的功能支持，能够大大提高阅读效率。</p>
<p><strong>1. 文件&#x2F;类搜索</strong></p>
<p>根据文件名搜索文件&#x2F;类</p>
<p>快捷键：shift + shift（连按两次）</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgclCpEuIia1Vy5hsW4ebMjXHu0MNVg8dzvmUzUezarbLpjKKpqnPic8icAg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>2. 字段搜索</strong></p>
<p>根据文件内容搜索，可直接定位到目标内容位置，支持局部（当前文件或选中代码段）和全局搜索（项目&#x2F;模块&#x2F;目录&#x2F;作用域等）</p>
<p>局部搜索快捷键：Win: Ctrl + F  Mac: Command + F</p>
<p>全局搜索快捷键：Win: Ctrl + shift + F  Mac: Command + Shift + F</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcEELKK4qM9ibfgvnGagKP3Nz9vIia130ic1Nfgb2srzCQQhkrWevEusRbQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>3. 跳转到上&#x2F;下次光标的位置</strong></p>
<p>查看源码时，经常需要在两个类中来回跳转，这个功能就变得相当实用！</p>
<p>查看上次光标位置快捷键：Win: Alt + ←  Mac: Option + Command + ←</p>
<p>查看下次光标位置快捷键：Win: Alt + →  Mac: Option + Command + →</p>
<p><strong>4. 查看接口的实现类（或接口方法的实现）</strong></p>
<p>如果光标选中接口方法，直接跳转到该方法的具体实现。如果有多个实现，则可以选择跳转到指定的实现类。</p>
<p>快捷键：Win: Ctrl + Alt + B  Mac: Option + Command + B</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcKgjxVDeib0dQe8vFasSkibo3h44Yg9ZyYvtUJJpmvg1iabu0AaaxS6X5w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>5. 查看方法调用树</strong></p>
<p>可以查看指定方法的所有调用方和被调方。</p>
<p>快捷键：Win: Ctrl + Alt + H  Mac: Control + Option + H</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcVquygnoelEZo2vnOYodia8V7QjHZMZHrHjuORkjPTtKr7cO0Hgo5M0w/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>6. 查看类关系图</strong></p>
<p>非常实用的功能，直观清晰地展现类的关系，便于分析。</p>
<p>快捷键：Win: Ctrl + Alt + U  Mac: Shift + Option + Command + U</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgceLhxbicHMPdfkY8mHFdurias0sqYJQhNtAvOCq8QTeoKRd8ibb62ADKmw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>7. 查看类的继承树</strong></p>
<p>能够查看类的父类和子类继承关系。</p>
<p>快捷键：Win: Ctrl + H  Mac: Control + H</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcMibwKrQIuqVhFR6wBlDZXVnthsgI68spYjmLU5NyqbbTQY4RQeQcDibw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>8. 查看定义的变量在哪里被声明&#x2F;调用</strong></p>
<p>如果光标在变量声明处，则查看使用该变量的代码；如果光标在使用变量处，则查看变量的声明位置。</p>
<p>快捷键：Win: Ctrl + B  Mac: Command + B 或按住 Ctrl &#x2F; Command 点击鼠标左键</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcSCXfEdLoiaPIqZthNan2PbkSoel9XcdkNOeKTWArXM7x8exCvcticXxg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>9. 查看定义的变量在哪里被调用</strong></p>
<p>功能和上述功能类似，仅查看变量的调用位置。</p>
<p>快捷键：Win: Ctrl + Alt + F7  Mac: Option + Command + F7</p>
<p><strong>10. 查看类的结构</strong></p>
<p>能够查看某一个类的属性、域、方法、继承方法、匿名类、Lambdas，并快速跳转到指定位置。</p>
<p>快捷键：Win: Alt + 7  Mac: Command + 7</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgcaMDcc95WgUCEUfeNILeYmNlVm9Fuom9oN20JMwSp8F1BpL7awKnMyg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p><strong>11. 查看每行代码的提交信息（需被 Git 管理）</strong></p>
<p>在代码行数列表处右键，点击 Annotate 开启代码提交信息显示：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgc0eMTnhlDJzmMXiboq6rptvcia3RW2WQ4S1A3J4tzpOrL55hqBfeSCNlQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>效果如下，烂代码元凶快快显形！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/mngWTkJEOYIBFQNTIq3T30Ugk7P3vfgc65TOU2LKVdAWCSCE6Riar9GJRvn0QKNptibFUnVQic2BsmrFibNKW0qTKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>以上就是 IDEA 使用技巧啦，快去写几行代码熟悉下吧~</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title>java数据类型</title>
    <url>/posts/dac885d1/</url>
    <content><![CDATA[<h1 id="Java基本类型占用字节数（或-bit数）"><a href="#Java基本类型占用字节数（或-bit数）" class="headerlink" title="Java基本类型占用字节数（或 bit数）"></a>Java基本类型占用字节数（或 bit数）</h1><h3 id="Java-的8大基本类型"><a href="#Java-的8大基本类型" class="headerlink" title="Java 的8大基本类型"></a>Java 的8大基本类型</h3><p>既然说的是 Java 8大基本类型的占用字节数，我们先来聊聊 Java 的8大基本类型</p>
<h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><ul>
<li>int ：整数类型</li>
<li>short ：短整型</li>
<li>long ：长整型</li>
<li>byte ：字节类型</li>
</ul>
<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><ul>
<li>float ：浮点类型（单精度）</li>
<li>double ：浮点类型（双精度）</li>
</ul>
<h5 id="逻辑型"><a href="#逻辑型" class="headerlink" title="逻辑型"></a>逻辑型</h5><ul>
<li>boolean ：布尔型</li>
</ul>
<h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><ul>
<li>char ：字符型</li>
</ul>
<p>基本数据类型自动转换<br>byte -&gt; short<br>char -&gt; int -&gt; long<br>float -&gt; double<br>int -&gt; float<br>long -&gt; double<br>** 重要的一点：小可转大，大转小会失去精度！！！**<br>低数据类型可以直接赋值给高数据类型，反之，高数据类型转换为低数据类型必须强转，即提前制定数据类型，例 int a &#x3D; (int) 0.0F</p>
<h3 id="Java-8大基本类型所占字节数（或-bit-数）"><a href="#Java-8大基本类型所占字节数（或-bit-数）" class="headerlink" title="Java 8大基本类型所占字节数（或 bit 数）"></a>Java 8大基本类型所占字节数（或 bit 数）</h3><table>
<thead>
<tr>
<th>类型</th>
<th>存储需求</th>
<th>bit 数</th>
<th>取值范围</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>4字节</td>
<td>4*8</td>
<td>-2147483648~2147483647</td>
<td>即 (-2)的31次方 ~ (2的31次方) - 1</td>
</tr>
<tr>
<td>short</td>
<td>2字节</td>
<td>2*8</td>
<td>-32768~32767</td>
<td>即 (-2)的15次方 ~ (2的15次方) - 1</td>
</tr>
<tr>
<td>long</td>
<td>8字节</td>
<td>8*8</td>
<td></td>
<td>即 (-2)的63次方 ~ (2的63次方) - 1</td>
</tr>
<tr>
<td>byte</td>
<td>1字节</td>
<td>1*8</td>
<td>-128~127</td>
<td>即 (-2)的7次方 ~ (2的7次方) - 1</td>
</tr>
<tr>
<td>float</td>
<td>4字节</td>
<td>4*8</td>
<td></td>
<td>float 类型的数值有一个后缀 F（例如：3.14F）</td>
</tr>
<tr>
<td>double</td>
<td>8字节</td>
<td>8*8</td>
<td></td>
<td>没有后缀 F 的浮点数值（例如：3.14）默认为 double</td>
</tr>
<tr>
<td>boolean</td>
<td>1字节</td>
<td>1*8</td>
<td>true、false</td>
<td></td>
</tr>
<tr>
<td>char</td>
<td>2字节</td>
<td>2*8</td>
<td></td>
<td>Java中，只要是字符，不管是数字还是英文还是汉字，都占两个字节。</td>
</tr>
</tbody></table>
<p>至于为什么 Java 中 char 无论中英文数字都占用2字节，是因为 Java 中使用 Unicode 字符，所有字符均以2个字节存储。<br>而如果需要识别字符是否为中文，可以使用正则匹配式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">_regex</span> <span class="operator">=</span> <span class="string">&quot;[\\u4e00-\\u9fa5]&quot;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>Java有一个能够表示任意精度的算书包，通常称为“大数值”（big number）。虽然被称为大数值，但它并不是一种Java类型，而是一个Java对象。</p>
<p>如果基本的整数和浮点数精度不能够满足需求，那么可以使用java.math包中的两个很有用的类：<strong>BigInteger、BigDecimal</strong>（Android SDK中也包含了java.math包以及这两个类）这两个类可以处理包含任意长度数字序列的数值。BigInteger类实现了任意精度的整数运算，BigDecimal实现了任意精度的浮点数运算。具体的用法可以参见Java API。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>linux命令which,whereis,locate,find的区别</title>
    <url>/posts/de82442a/</url>
    <content><![CDATA[<h1 id="linux命令which-whereis-locate-find的区别"><a href="#linux命令which-whereis-locate-find的区别" class="headerlink" title="linux命令which,whereis,locate,find的区别"></a>linux命令which,whereis,locate,find的区别</h1><ol>
<li><strong>which</strong>：常用于查找可直接执行的命令。只能查找可执行文件，该命令基本只在$PATH路径中搜索，查找范围最小，查找速度快。默认只返回第一个匹配的文件路径，通过选项 <em>-a</em> 可以返回所有匹配结果。</li>
<li><strong>whereis</strong>：不只可以查找命令，其他文件类型都可以（man中说只能查命令、源文件和man文件，实际测试可以查大多数文件）。在$PATH路径基础上增加了一些系统目录的查找，查找范围比which稍大，查找速度快。可以通过 <em>-b</em> 选项，限定只搜索二进制文件。</li>
<li><strong>locate</strong>：超快速查找任意文件。它会从linux内置的索引数据库查找文件的路径，索引速度超快。刚刚新建的文件可能需要一定时间才能加入该索引数据库，可以通过执行updatedb命令来强制更新一次索引，这样确保不会遗漏文件。该命令通常会返回大量匹配项，可以使用 <em>-r</em> 选项通过正则表达式来精确匹配。</li>
<li><strong>find</strong>：直接搜索整个文件目录，默认直接从根目录开始搜索，建议在以上命令都无法解决问题时才用它，功能最强大但速度超慢。除非你指定一个很小的搜索范围。通过 <em>-name</em> 选项指定要查找的文件名，支持通配符。</li>
</ol>
<p><strong>下面通过一个实际的例子来测试和体会几个命令的差异：</strong></p>
<p>先通过which找到ls命令的位置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tarena@tedu:/$ <span class="built_in">which</span> <span class="built_in">ls</span></span><br><span class="line">/bin/ls</span><br></pre></td></tr></table></figure>

<p>把ls复制到主目录，并把名称修改为newls</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:/$ cp /bin/ls ~/newls</span><br><span class="line">tarena@tedu:/$ cd ~</span><br></pre></td></tr></table></figure>

<p>尝试用which和whereis命令查找newls，由于主目录不在$PATH中（除非你恰巧之前你恰巧把～加入$PATH了），所以都无法找到</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ whereis newls</span><br><span class="line">newls:</span><br><span class="line">tarena@tedu:~$ which newls</span><br><span class="line">tarena@tedu:~$ </span><br></pre></td></tr></table></figure>

<p>执行以下export命令，把～加入$PATH，然后我们cd到根目录，再次尝试查找newls，发现已经可以找到了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ export PATH=$PATH:~</span><br><span class="line">tarena@tedu:~$ echo $PATH</span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin:/home/tarena</span><br><span class="line">tarena@tedu:~$ cd /</span><br><span class="line">tarena@tedu:/$ which newls</span><br><span class="line">/home/tarena/newls</span><br><span class="line">tarena@tedu:/$ whereis newls</span><br><span class="line">newls: /home/tarena/newls</span><br></pre></td></tr></table></figure>

<p>我们再cd到～，然后取消newls的可执行权限</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:/$ cd ~</span><br><span class="line">tarena@tedu:~$ chmod u-x newls</span><br></pre></td></tr></table></figure>

<p>然后我们再次尝试使用which和whereis查找newls，我们发现whereis可以找到，而which找不到newls。因为which只能用来查找可执行文件，whereis没有该限制。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ cd /</span><br><span class="line">tarena@tedu:/$ whereis newls</span><br><span class="line">newls: /home/tarena/newls</span><br><span class="line">tarena@tedu:/$ which newls</span><br></pre></td></tr></table></figure>

<p>这时我们再把newls改名为ls，然后我们尝试用locate命令找出系统中存在的两个ls文件，我们发现会找到大量不是我们要的文件（此处已省略了很多），但这些文件路径中确实包含ls。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ cd ~</span><br><span class="line">tarena@tedu:~$ mv newls ls</span><br><span class="line">/bin/false</span><br><span class="line">/bin/ls</span><br><span class="line">/bin/lsblk</span><br><span class="line">/bin/lsmod</span><br><span class="line">/bin/ntfsls</span><br><span class="line">/boot/grub/i386-pc/cbls.mod</span><br><span class="line">/boot/grub/i386-pc/command.lst</span><br><span class="line">/boot/grub/i386-pc/crypto.lst</span><br><span class="line">/boot/grub/i386-pc/fs.lst</span><br><span class="line">/boot/grub/i386-pc/ls.mod</span><br><span class="line">/boot/grub/i386-pc/lsacpi.mod</span><br><span class="line">/boot/grub/i386-pc/lsapm.mod</span><br><span class="line">/boot/grub/i386-pc/lsmmap.mod</span><br><span class="line">/boot/grub/i386-pc/lspci.mod</span><br><span class="line">/boot/grub/i386-pc/moddep.lst</span><br><span class="line">/boot/grub/i386-pc/partmap.lst</span><br><span class="line">/boot/grub/i386-pc/parttool.lst</span><br><span class="line">/boot/grub/i386-pc/terminal.lst</span><br><span class="line">/boot/grub/i386-pc/video.lst</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>我们尝试用正则表达式缩小匹配范围</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ locate -r &#x27;\bls$&#x27;</span><br><span class="line">/bin/ls</span><br><span class="line">/usr/bin/gvfs-ls</span><br><span class="line">/usr/lib/klibc/bin/ls</span><br><span class="line">/usr/share/bash-completion/completions/gvfs-ls</span><br></pre></td></tr></table></figure>

<p>我们发现只找到了一个ls，另外一个可能因为系统还没有纳入索引数据库，所以没有找到，我们执行updatedb命令，强制更新一下系统索引，然后再执行一遍locate试试，发现现在可以找到了</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ sudo updatedb</span><br><span class="line">/bin/ls</span><br><span class="line">/home/tarena/ls</span><br><span class="line">/usr/bin/gvfs-ls</span><br><span class="line">/usr/lib/klibc/bin/ls</span><br><span class="line">/usr/share/bash-completion/completions/gvfs-ls</span><br></pre></td></tr></table></figure>

<p>find命令全盘查找太慢，所以限制下查找路径，也是同样可以找到</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">tarena@tedu:~$ <span class="keyword">find</span> ~ <span class="regexp">/bin/</span> -name ls</span><br><span class="line"><span class="regexp">/home/</span>tarena/ls</span><br><span class="line"><span class="regexp">/bin/</span>ls</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>理解</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>sql难点记录</title>
    <url>/posts/f1919e86/</url>
    <content><![CDATA[<h1 id="sql难点记录"><a href="#sql难点记录" class="headerlink" title="sql难点记录"></a>sql难点记录</h1><h2 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h2><p>The expression <strong>subject IN (‘Chemistry’,’Physics’)</strong> can be used as a value - it will be <strong>0</strong> or <strong>1</strong>.</p>
<p>Show the 1984 winners and subject ordered by subject and winner name; but list Chemistry and Physics last.</p>
<p>这个题目没有中文，翻译的大概意思是 按照获奖的科学领域跟获奖者的名字来排序，但是 化学和物理要被排在最后</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> winner, subject <span class="keyword">FROM</span> nobel <span class="keyword">where</span> yr<span class="operator">=</span><span class="number">1984</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> subject <span class="keyword">IN</span> (<span class="string">&#x27;Physics&#x27;</span>,<span class="string">&#x27;Chemistry&#x27;</span>),subject <span class="keyword">asc</span>,winner <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> winner, subject <span class="keyword">FROM</span> nobel <span class="keyword">where</span> yr<span class="operator">=</span><span class="number">1984</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span>  <span class="keyword">CASE</span> <span class="keyword">WHEN</span> subject <span class="keyword">IN</span> (<span class="string">&#x27;Physics&#x27;</span>,<span class="string">&#x27;Chemistry&#x27;</span>) <span class="keyword">THEN</span> <span class="number">1</span> </span><br><span class="line">								<span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>,</span><br><span class="line">                subject <span class="keyword">asc</span>,winner <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>
<p>相当于</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> winner, subject <span class="keyword">FROM</span> nobel <span class="keyword">where</span> yr<span class="operator">=</span><span class="number">1984</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ( <span class="keyword">case</span> subject</span><br><span class="line">           <span class="keyword">when</span> <span class="string">&#x27;Chemistry&#x27;</span> <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">           <span class="keyword">when</span> <span class="string">&#x27;Physics&#x27;</span>   <span class="keyword">then</span> <span class="number">1</span></span><br><span class="line">           <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">           <span class="keyword">end</span>),subject <span class="keyword">asc</span>,winner <span class="keyword">asc</span></span><br></pre></td></tr></table></figure>

<p>这里分析一下，以后也用得上，关键在order by subject IN (‘Physics’,’Chemistry’) ,subject asc,winner asc</p>
<p>后两个比较容易理解 字段名加上asc表示按正常排序，难点在 subject in (xxx)这个表达式，</p>
<p>排除后两个表达式，这是一个分组排序，</p>
<p>subject in(xxx)为0的分成一组 排序</p>
<p>subject in(xxx)为1的分成一组 排序</p>
<p>得到结果连接起来就是新的排序表</p>
<p>subject in(xxx) desc ：新的排序表 就在前面</p>
<p>subject in(xxx) asc ：新的排序表 就在后面 （默认asc）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>java线程池</title>
    <url>/posts/98e86a33/</url>
    <content><![CDATA[<h1 id="深入理解java线程池—ThreadPoolExecutor"><a href="#深入理解java线程池—ThreadPoolExecutor" class="headerlink" title="深入理解java线程池—ThreadPoolExecutor"></a>深入理解java线程池—ThreadPoolExecutor</h1><p>几句闲扯：首先，我想说java的线程池真的是很绕，以前一直都感觉新建几个线程一直不退出到底是怎么实现的，也就有了后来学习ThreadPoolExecutor源码。学习源码的过程中，最恶心的其实就是几种状态的转换了，这也是ThreadPoolExecutor的核心。花了将近小一周才大致的弄明白ThreadPoolExecutor的机制，遂记录下来。</p>
<h5 id="线程池有多重要"><a href="#线程池有多重要" class="headerlink" title="线程池有多重要#####"></a>线程池有多重要#####</h5><p>线程是一个程序员一定会涉及到的一个概念，但是线程的创建和切换都是代价比较大的。所以，我们有没有一个好的方案能做到线程的复用呢？这就涉及到一个概念——线程池。合理的使用线程池能够带来3个很明显的好处：<br>1.降低资源消耗：通过重用已经创建的线程来降低线程创建和销毁的消耗<br>2.提高响应速度：任务到达时不需要等待线程创建就可以立即执行。<br>3.提高线程的可管理性：线程池可以统一管理、分配、调优和监控。</p>
<h5 id="java多线程池的支持——ThreadPoolExecutor"><a href="#java多线程池的支持——ThreadPoolExecutor" class="headerlink" title="java多线程池的支持——ThreadPoolExecutor#####"></a>java多线程池的支持——ThreadPoolExecutor#####</h5><p>java的线程池支持主要通过ThreadPoolExecutor来实现，我们使用的ExecutorService的各种线程池策略都是基于ThreadPoolExecutor实现的，所以ThreadPoolExecutor十分重要。要弄明白各种线程池策略，必须先弄明白ThreadPoolExecutor。</p>
<h5 id="1-实现原理"><a href="#1-实现原理" class="headerlink" title="1. 实现原理#####"></a>1. 实现原理#####</h5><p>首先看一个线程池的流程图：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2177145-33c7b5ff75cf2bf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/826/format/webp" alt="img"></p>
<p>Paste_Image.png</p>
<p>step1.调用ThreadPoolExecutor的execute提交线程，首先检查CorePool，如果CorePool内的线程小于CorePoolSize，新创建线程执行任务。<br>step2.如果当前CorePool内的线程大于等于CorePoolSize，那么将线程加入到BlockingQueue。<br>step3.如果不能加入BlockingQueue，在小于MaxPoolSize的情况下创建线程执行任务。<br>step4.如果线程数大于等于MaxPoolSize，那么执行拒绝策略。</p>
<h5 id="2-线程池的创建"><a href="#2-线程池的创建" class="headerlink" title="2.线程池的创建#####"></a>2.线程池的创建#####</h5><p>线程池的创建可以通过ThreadPoolExecutor的构造方法实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new &#123;<span class="doctag">@code</span> ThreadPoolExecutor&#125; with the given initial</span></span><br><span class="line"><span class="comment">    * parameters.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> corePoolSize the number of threads to keep in the pool, even</span></span><br><span class="line"><span class="comment">    *        if they are idle, unless &#123;<span class="doctag">@code</span> allowCoreThreadTimeOut&#125; is set</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> maximumPoolSize the maximum number of threads to allow in the</span></span><br><span class="line"><span class="comment">    *        pool</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> keepAliveTime when the number of threads is greater than</span></span><br><span class="line"><span class="comment">    *        the core, this is the maximum time that excess idle threads</span></span><br><span class="line"><span class="comment">    *        will wait for new tasks before terminating.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> unit the time unit for the &#123;<span class="doctag">@code</span> keepAliveTime&#125; argument</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> workQueue the queue to use for holding tasks before they are</span></span><br><span class="line"><span class="comment">    *        executed.  This queue will hold only the &#123;<span class="doctag">@code</span> Runnable&#125;</span></span><br><span class="line"><span class="comment">    *        tasks submitted by the &#123;<span class="doctag">@code</span> execute&#125; method.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> threadFactory the factory to use when the executor</span></span><br><span class="line"><span class="comment">    *        creates a new thread</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> handler the handler to use when execution is blocked</span></span><br><span class="line"><span class="comment">    *        because the thread bounds and queue capacities are reached</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> IllegalArgumentException if one of the following holds:&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> corePoolSize &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> keepAliveTime &lt; 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt;= 0&#125;&lt;br&gt;</span></span><br><span class="line"><span class="comment">    *         &#123;<span class="doctag">@code</span> maximumPoolSize &lt; corePoolSize&#125;</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> NullPointerException if &#123;<span class="doctag">@code</span> workQueue&#125;</span></span><br><span class="line"><span class="comment">    *         or &#123;<span class="doctag">@code</span> threadFactory&#125; or &#123;<span class="doctag">@code</span> handler&#125; is null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                             <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                             <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                             TimeUnit unit,</span></span><br><span class="line"><span class="params">                             BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                             ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                             RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">       <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">           maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">           keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">       <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">       <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">       <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">       <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">       <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">       <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">       <span class="built_in">this</span>.handler = handler;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>具体解释一下上述参数：</p>
<ol>
<li>corePoolSize 核心线程池大小</li>
<li>maximumPoolSize 线程池最大容量大小</li>
<li>keepAliveTime 线程池空闲时，线程存活的时间</li>
<li>TimeUnit 时间单位</li>
<li>ThreadFactory 线程工厂</li>
<li>BlockingQueue任务队列</li>
<li>RejectedExecutionHandler 线程拒绝策略</li>
</ol>
<h5 id="3-线程的提交"><a href="#3-线程的提交" class="headerlink" title="3.线程的提交#####"></a>3.线程的提交#####</h5><p>ThreadPoolExecutor的构造方法如上所示，但是只是做一些参数的初始化，ThreadPoolExecutor被初始化好之后便可以提交线程任务，线程的提交方法主要是execute和submit。这里主要说execute，submit会在后续的博文中分析。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> Executes the given <span class="language-markdown"><span class="strong"><span class="emphasis">task</span></span></span> sometime in the <span class="language-markdown"><span class="strong"><span class="emphasis">future.  The task</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> may execute in <span class="language-markdown"><span class="strong">a new thread or in an existing pooled thread.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> If</span></span> the task cannot <span class="language-markdown"><span class="strong">be submitted for execution, either because this</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> executor has been <span class="language-markdown"><span class="strong"><span class="emphasis">shutdown or</span></span></span> because its capacity <span class="language-markdown"><span class="strong"><span class="emphasis">has been reached,</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> the task is <span class="language-markdown"><span class="strong">handled by the current &#123;@code RejectedExecutionHandler&#125;.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> @param</span></span> command the task <span class="language-markdown"><span class="strong">to execute</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @throws RejectedExecutionException at discretion of</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>         &#123;@code RejectedExecutionHandler&#125;, if the task</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*         cannot be accepted for execution</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> @throws NullPointerException if &#123;@code command&#125; is null</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span></span><br><span class="line">public <span class="keyword">void</span> execute(Runnable command) &#123;</span><br><span class="line">    <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Proceed in 3 steps:</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class="line"><span class="comment">     * start a new thread with the given command as its first</span></span><br><span class="line"><span class="comment">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class="line"><span class="comment">     * workerCount, and so prevents false alarms that would add</span></span><br><span class="line"><span class="comment">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class="line"><span class="comment">     * 如果当前的线程数小于核心线程池的大小，根据现有的线程作为第一个Worker运行的线程，</span></span><br><span class="line"><span class="comment">     * 新建一个Worker，addWorker自动的检查当前线程池的状态和Worker的数量，</span></span><br><span class="line"><span class="comment">     * 防止线程池在不能添加线程的状态下添加线程</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class="line"><span class="comment">     * to double-check whether we should have added a thread</span></span><br><span class="line"><span class="comment">     * (because existing ones died since last checking) or that</span></span><br><span class="line"><span class="comment">     * the pool shut down since entry into this method. So we</span></span><br><span class="line"><span class="comment">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class="line"><span class="comment">     * stopped, or start a new thread if there are none.</span></span><br><span class="line"><span class="comment">     *  如果线程入队成功，然后还是要进行double-check的，因为线程池在入队之后状态是可能会发生变化的</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class="line"><span class="comment">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class="line"><span class="comment">     * and so reject the task.</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * 如果task不能入队(队列满了)，这时候尝试增加一个新线程，如果增加失败那么当前的线程池状态变化了或者线程池已经满了</span></span><br><span class="line"><span class="comment">     * 然后拒绝task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">    <span class="comment">//当前的Worker的数量小于核心线程池大小时，新建一个Worker。</span></span><br><span class="line">    <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123; </span><br><span class="line">        <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        c = ctl.<span class="keyword">get</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">        <span class="built_in">int</span> recheck = ctl.<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))<span class="comment">//recheck防止线程池状态的突变，如果突变，那么将reject线程，防止workQueue中增加新线程</span></span><br><span class="line">            reject(command);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)<span class="comment">//上下两个操作都有addWorker的操作，但是如果在workQueue.offer的时候Worker变为0，</span></span><br><span class="line">                                            <span class="comment">//那么将没有Worker执行新的task，所以增加一个Worker.</span></span><br><span class="line">            addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果workQueue满了，那么这时候可能还没到线程池的maxnum，所以尝试增加一个Worker</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">        reject(command);<span class="comment">//如果Worker数量到达上限，那么就拒绝此线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里需要明确几个概念：</p>
<ol>
<li>Worker和Task的区别，Worker是当前线程池中的线程，而task虽然是runnable，但是并没有真正执行，只是被Worker调用了run方法，后面会看到这部分的实现。</li>
<li>maximumPoolSize和corePoolSize的区别：这个概念很重要，maximumPoolSize为线程池最大容量，也就是说线程池最多能起多少Worker。corePoolSize是核心线程池的大小，当corePoolSize满了时，同时workQueue full（ArrayBolckQueue是可能满的） 那么此时允许新建Worker去处理workQueue中的Task，但是不能超过maximumPoolSize。超过corePoolSize之外的线程会在空闲超时后终止。</li>
</ol>
<h5 id="核心方法：addWorker"><a href="#核心方法：addWorker" class="headerlink" title="核心方法：addWorker#####"></a>核心方法：addWorker#####</h5><p>Worker的增加和Task的获取以及终止都是在此方法中实现的，也就是这一个方法里面包含了很多东西。在addWorker方法中提到了Status的概念，Status是线程池的核心概念，这里我们先看一段关于status的注释：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 首先ctl是一个原子量，同时它里面包含了两个field，一个是workerCount，另一个是runState</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> workerCount表示当前有效的线程数，也就是Worker的数量</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* runState表示当前线程池的状态</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> The main pool <span class="language-markdown"><span class="strong">control state, ctl, is an atomic integer packing</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* two conceptual fields</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>   workerCount,</span></span> indicating the effective <span class="language-markdown"><span class="strong">number of threads</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*   runState,    indicating whether running, shutting down etc</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> </span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 两者是怎么结合的呢？首先workerCount是占据着一个atomic integer的后29位的，而状态占据了前3位</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 所以，workerCount上限是(2^29)-1。</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* In</span></span></span> order to pack <span class="language-markdown"><span class="strong"><span class="emphasis">them into one int, we limit workerCount to</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> (2^29)-1 (about 500 million)</span></span> threads rather than <span class="language-markdown"><span class="strong">(2^31)-1 (2</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* billion) otherwise representable. If</span></span></span> this is ever <span class="language-markdown"><span class="strong"><span class="emphasis">an issue in</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> the future,</span></span> the variable can <span class="language-markdown"><span class="strong">be changed to be an AtomicLong,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* and the shift/mask</span></span></span> constants below adjusted. <span class="language-markdown"><span class="strong"><span class="emphasis">But until the need</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> arises,</span></span> this code is <span class="language-markdown"><span class="strong">a</span></span> bit faster and <span class="language-markdown"><span class="strong">simpler using an int.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> The workerCount</span></span> is the number <span class="language-markdown"><span class="strong">of</span></span> workers that have <span class="language-markdown"><span class="strong">been</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> permitted to start <span class="language-markdown"><span class="strong"><span class="emphasis">and</span></span></span> not permitted to <span class="language-markdown"><span class="strong"><span class="emphasis">stop.</span></span></span>  The value may <span class="language-markdown"><span class="strong"><span class="emphasis">be</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> transiently different from <span class="language-markdown"><span class="strong">the actual number of live threads,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> for example when <span class="language-markdown"><span class="strong"><span class="emphasis">a ThreadFactory</span></span></span> fails to create <span class="language-markdown"><span class="strong"><span class="emphasis">a thread when</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> asked,</span></span> and when exiting <span class="language-markdown"><span class="strong">threads are still performing</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> bookkeeping before terminating. <span class="language-markdown"><span class="strong"><span class="emphasis">The</span></span></span> user-visible pool size <span class="language-markdown"><span class="strong"><span class="emphasis">is</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> reported as</span></span> the current size <span class="language-markdown"><span class="strong">of the workers set.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> runState是整个线程池的运行生命周期，有如下取值：</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*  1. RUNNING：可以新加线程，同时可以处理queue中的线程。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>  2. SHUTDOWN：不增加新线程，但是处理queue中的线程。</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*  3.STOP 不增加新线程，同时不处理queue中的线程。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>  4.TIDYING 所有的线程都终止了（queue中），同时workerCount为0，那么此时进入TIDYING</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*  5.terminated()方法结束，变为TERMINATED</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> The runState</span></span> provides the main <span class="language-markdown"><span class="strong">lifecyle control, taking on values:</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>   RUNNING:</span></span>  Accept new tasks <span class="language-markdown"><span class="strong">and process queued tasks</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*   SHUTDOWN:</span></span></span> Don&#x27;t accept new <span class="language-markdown"><span class="strong"><span class="emphasis">tasks,</span></span></span> but process queued <span class="language-markdown"><span class="strong"><span class="emphasis">tasks</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>   STOP:</span></span>     Don&#x27;t accept new <span class="language-markdown"><span class="strong">tasks,</span></span> don&#x27;t process queued <span class="language-markdown"><span class="strong">tasks,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span>             and interrupt in-progress <span class="language-markdown"><span class="strong"><span class="emphasis">tasks</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>   TIDYING:</span></span>  All tasks have <span class="language-markdown"><span class="strong">terminated, workerCount is zero,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span>             the thread transitioning <span class="language-markdown"><span class="strong"><span class="emphasis">to state TIDYING</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span>             will run the <span class="language-markdown"><span class="strong">terminated() hook method</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*   TERMINATED: terminated() has completed</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> The numerical order <span class="language-markdown"><span class="strong"><span class="emphasis">among these values matters, to allow</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> ordered comparisons. The <span class="language-markdown"><span class="strong">runState monotonically increases over</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* time,</span></span></span> but need not <span class="language-markdown"><span class="strong"><span class="emphasis">hit</span></span></span> each state. The <span class="language-markdown"><span class="strong"><span class="emphasis">transitions are:</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 状态的转化主要是：</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* RUNNING -&gt; SHUTDOWN（调用shutdown()）</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>    On invocation of shutdown(),</span></span> perhaps implicitly in <span class="language-markdown"><span class="strong">finalize()</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* (RUNNING or SHUTDOWN) -&gt; STOP(调用shutdownNow())</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>    On invocation of shutdownNow()</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* SHUTDOWN -&gt; TIDYING（queue和pool均empty）</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span>    When both queue <span class="language-markdown"><span class="strong">and pool are empty</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* STOP -&gt; TIDYING（pool empty，此时queue已经为empty）</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span>    When pool is <span class="language-markdown"><span class="strong">empty</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* TIDYING -&gt; TERMINATED(调用terminated())</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>    When the terminated()</span></span> hook method has <span class="language-markdown"><span class="strong">completed</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> Threads waiting in <span class="language-markdown"><span class="strong">awaitTermination()</span></span> will return when <span class="language-markdown"><span class="strong">the</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* state reaches TERMINATED.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> Detecting the transition <span class="language-markdown"><span class="strong"><span class="emphasis">from SHUTDOWN to TIDYING is less</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> straightforward than you&#x27;d <span class="language-markdown"><span class="strong">like</span></span> because the queue <span class="language-markdown"><span class="strong">may become</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> empty after non-empty <span class="language-markdown"><span class="strong"><span class="emphasis">and</span></span></span> vice versa during <span class="language-markdown"><span class="strong"><span class="emphasis">SHUTDOWN state, but</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> we</span></span> can only terminate <span class="language-markdown"><span class="strong">if,</span></span> after seeing that <span class="language-markdown"><span class="strong">it is empty, we see</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* that workerCount is 0 (which</span></span></span> sometimes entails a <span class="language-markdown"><span class="strong"><span class="emphasis">recheck -- see</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> below).</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*/</span></span></span></span></span><br></pre></td></tr></table></figure>

<p>下面是状态的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//利用ctl来保证当前线程池的状态和当前的线程的数量。ps：低29位为线程池容量，高3位为线程状态。</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line">    <span class="comment">//设定偏移量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">COUNT_BITS</span> <span class="operator">=</span> Integer.SIZE - <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//确定最大的容量2^29-1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAPACITY</span>   <span class="operator">=</span> (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//几个状态，用Integer的高三位表示</span></span><br><span class="line">    <span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line">    <span class="comment">//111</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RUNNING</span>    <span class="operator">=</span> -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">//000</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">SHUTDOWN</span>   <span class="operator">=</span>  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">//001</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">STOP</span>       <span class="operator">=</span>  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">//010</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TIDYING</span>    <span class="operator">=</span>  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">//011</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TERMINATED</span> <span class="operator">=</span>  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br><span class="line">    <span class="comment">//获取线程池状态，取前三位</span></span><br><span class="line">    <span class="comment">// Packing and unpacking ctl</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line">    <span class="comment">//获取当前正在工作的worker,主要是取后面29位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line">    <span class="comment">//获取ctl</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>

<p>接下来贴上addWorker方法看看：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> Checks if a <span class="language-markdown"><span class="strong"><span class="emphasis">new worker can be</span></span></span> added with respect <span class="language-markdown"><span class="strong"><span class="emphasis">to current</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> pool state and <span class="language-markdown"><span class="strong">the given bound (either core or maximum). If so,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> the worker count <span class="language-markdown"><span class="strong"><span class="emphasis">is adjusted accordingly, and, if possible, a</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> new worker is <span class="language-markdown"><span class="strong">created</span></span> and started running <span class="language-markdown"><span class="strong">firstTask as its</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> first task. This <span class="language-markdown"><span class="strong"><span class="emphasis">method</span></span></span> returns false if <span class="language-markdown"><span class="strong"><span class="emphasis">the</span></span></span> pool is stopped <span class="language-markdown"><span class="strong"><span class="emphasis">or</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> eligible to shut <span class="language-markdown"><span class="strong">down. It</span></span> also returns false <span class="language-markdown"><span class="strong">if the thread</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> factory fails to <span class="language-markdown"><span class="strong"><span class="emphasis">create</span></span></span> a thread when <span class="language-markdown"><span class="strong"><span class="emphasis">asked, which requires a</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> backout of workerCount,</span></span> and a recheck <span class="language-markdown"><span class="strong">for termination, in case</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* the existence of</span></span></span> this worker was <span class="language-markdown"><span class="strong"><span class="emphasis">holding up termination.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @param firstTask</span></span></span> the task the <span class="language-markdown"><span class="strong"><span class="emphasis">new</span></span></span> thread should run <span class="language-markdown"><span class="strong"><span class="emphasis">first (or</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> null if none).</span></span> Workers are created <span class="language-markdown"><span class="strong">with an initial first task</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* (in method execute())</span></span></span> to bypass queuing <span class="language-markdown"><span class="strong"><span class="emphasis">when there are fewer</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> than corePoolSize threads (in which case we always start one),</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* or</span></span></span> when the queue <span class="language-markdown"><span class="strong"><span class="emphasis">is full (in which case we must bypass queue).</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> Initially idle threads <span class="language-markdown"><span class="strong">are usually created via</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* prestartCoreThread or</span></span></span> to replace other <span class="language-markdown"><span class="strong"><span class="emphasis">dying workers.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @param</span></span></span> core if true <span class="language-markdown"><span class="strong"><span class="emphasis">use corePoolSize as bound, else</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> maximumPoolSize. (A</span></span> boolean indicator is <span class="language-markdown"><span class="strong">used</span></span> here rather than <span class="language-markdown"><span class="strong">a</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> value to ensure <span class="language-markdown"><span class="strong"><span class="emphasis">reads of</span></span></span> fresh values after <span class="language-markdown"><span class="strong"><span class="emphasis">checking other pool</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> state).</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @return true if successful</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>/</span></span></span></span><br><span class="line">private boolean addWorker(Runnable firstTask, boolean core) &#123;</span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        <span class="built_in">int</span> rs = runStateOf(c);</span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment"><span class="language-markdown"><span class="strong">/**</span></span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet">         *</span> rs!=Shutdown || fistTask！=null || workCount.isEmpty</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet">         *</span> 如果当前的线程池的状态&gt;SHUTDOWN 那么拒绝Worker的add 如果=SHUTDOWN</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet">         *</span> 那么此时不能新加入不为null的Task，如果在WorkCount为empty的时候不能加入任何类型的Worker，</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="bullet">         *</span> 如果不为empty可以加入task为null的Worker,增加消费的Worker</span></span></span><br><span class="line"><span class="language-markdown"><span class="comment"><span class="code">         */</span></span></span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">               firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="built_in">int</span> wc = workerCountOf(c);</span><br><span class="line">            <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">break</span> retry;</span><br><span class="line">            c = ctl.<span class="keyword">get</span>();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Worker w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">    Thread t = w.thread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">        <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">        <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">        <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        <span class="built_in">int</span> rs = runStateOf(c);</span><br><span class="line">        <span class="comment"><span class="language-markdown"><span class="code">/**</span></span></span></span><br><span class="line"><span class="code"><span class="language-markdown"><span class="comment">         * rs!=SHUTDOWN ||firstTask!=null</span></span></span></span><br><span class="line"><span class="code"><span class="language-markdown"><span class="comment">         * </span></span></span></span><br><span class="line"><span class="code"><span class="language-markdown"><span class="comment">         * 同样检测当rs&gt;SHUTDOWN时直接拒绝减小Wc，同时Terminate，如果为SHUTDOWN同时firstTask不为null的时候也要Terminate</span></span></span></span><br><span class="line"><span class="code"><span class="language-markdown"><span class="comment">         */</span></span></span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span> ||</span><br><span class="line">            (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">             ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                firstTask == <span class="keyword">null</span>))) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            tryTerminate();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        workers.add(w);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">int</span> s = workers.size();</span><br><span class="line">        <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">            largestPoolSize = s;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    t.start();</span><br><span class="line">    <span class="comment">// It is possible (but unlikely) for a thread to have been</span></span><br><span class="line">    <span class="comment">// added to workers, but not yet started, during transition to</span></span><br><span class="line">    <span class="comment">// STOP, which could result in a rare missed interrupt,</span></span><br><span class="line">    <span class="comment">// because Thread.interrupt is not guaranteed to have any effect</span></span><br><span class="line">    <span class="comment">// on a non-yet-started Thread (see Thread#interrupt).</span></span><br><span class="line">    <span class="comment">//Stop或线程Interrupt的时候要中止所有的运行的Worker</span></span><br><span class="line">    <span class="keyword">if</span> (runStateOf(ctl.<span class="keyword">get</span>()) == STOP &amp;&amp; ! t.isInterrupted())</span><br><span class="line">        t.interrupt();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>addWorker中首先进行了一次线程池状态的检测：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">           <span class="built_in">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">           <span class="comment">//判断当前线程池的状态是不是已经shutdown，如果shutdown了拒绝线程加入</span></span><br><span class="line">           <span class="comment">//(rs!=SHUTDOWN || first!=null || workQueue.isEmpty())</span></span><br><span class="line">           <span class="comment">//如果rs不为SHUTDOWN，此时状态是STOP、TIDYING或TERMINATED，所以此时要拒绝请求</span></span><br><span class="line">           <span class="comment">//如果此时状态为SHUTDOWN，而传入一个不为null的线程，那么需要拒绝</span></span><br><span class="line">           <span class="comment">//如果状态为SHUTDOWN，同时队列中已经没任务了，那么拒绝掉</span></span><br><span class="line">           <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">               ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                  firstTask == <span class="literal">null</span> &amp;&amp;</span><br><span class="line">                  ! workQueue.isEmpty()))</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>

<p>其实是比较难懂的，主要在线程池状态判断条件这里：</p>
<ol>
<li>如果是runing，那么跳过if。</li>
<li>如果rs&gt;&#x3D;SHUTDOWN,同时不等于SHUTDOWN，即为SHUTDOWN以上的状态，那么不接受新线程。</li>
<li>如果rs&gt;&#x3D;SHUTDOWN，同时等于SHUTDOWN，同时first！&#x3D;null，那么拒绝新线程，如果first&#x3D;&#x3D;null，那么可能是新增加线程消耗Queue中的线程。但是同时还要检测workQueue是否isEmpty()，如果为Empty，那么队列已空，不需要增加消耗线程，如果队列没有空那么运行增加first&#x3D;null的Worker。<br><strong>从这里是可以看出一些策略的</strong><br><strong>首先，在rs&gt;SHUTDOWN时，拒绝一切线程的增加，因为STOP是会终止所有的线程，同时移除Queue中所有的待执行的线程的，所以也不需要增加first&#x3D;null的Worker了</strong><br><strong>其次，在SHUTDOWN状态时，是不能增加first！&#x3D;null的Worker的，同时即使first&#x3D;null，但是此时Queue为Empty也是不允许增加Worker的，SHUTDOWN下增加的Worker主要用于消耗Queue中的任务。</strong><br><strong>SHUTDOWN状态时，是不允许向workQueue中增加线程的，isRunning(c) &amp;&amp; workQueue.offer(command) 每次在offer之前都要做状态检测，也就是线程池状态变为&gt;&#x3D;SHUTDOWN时不允许新线程进入线程池了。</strong></li>
</ol>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line">    int wc <span class="operator">=</span> workerCountOf(c);</span><br><span class="line">    <span class="comment">//如果当前的数量超过了CAPACITY，或者超过了corePoolSize和maximumPoolSize（试core而定）</span></span><br><span class="line">    <span class="keyword">if</span> (wc <span class="operator">&gt;=</span> <span class="type">CAPACITY</span> <span class="operator">||</span></span><br><span class="line">        wc <span class="operator">&gt;=</span> (core <span class="operator">?</span> corePoolSize : maximumPoolSize))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">//CAS尝试增加线程数，如果失败，证明有竞争，那么重新到retry。</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">        <span class="keyword">break</span> retry;</span><br><span class="line">    c <span class="operator">=</span> ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">    <span class="comment">//判断当前线程池的运行状态</span></span><br><span class="line">    <span class="keyword">if</span> (runStateOf(c) <span class="operator">!=</span> rs)</span><br><span class="line">        <span class="keyword">continue</span> retry;</span><br><span class="line">    <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码做了一个兼容，主要是没有到corePoolSize 或maximumPoolSize上限时，那么允许添加线程，CAS增加Worker的数量后，跳出循环。<br>接下来实例化Worker,实例化Worker其实是很关键的，后面会说。<br>因为workers是HashSet线程不安全的，那么此时需要加锁，所以mainLock.lock(); 之后重新检查线程池的状态，如果状态不正确，那么减小Worker的数量，为什么tryTerminate（）目前不大清楚。如果状态正常，那么添加Worker到workers。最后：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (runStateOf(ctl.<span class="keyword">get</span>()) == STOP &amp;&amp; ! t.isInterrupted())</span><br><span class="line">          t.interrupt();</span><br></pre></td></tr></table></figure>

<p>注释说的很清楚，为了能及时的中断此Worker，因为线程存在未Start的情况，此时是不能响应中断的，如果此时status变为STOP，则不能中断线程。此处用作中断线程之用。<br>接下来我们看Worker的方法：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Creates with given first task and thread from ThreadFactory.</span></span><br><span class="line"><span class="comment">        * <span class="doctag">@param</span> firstTask the first task (null if none)</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       Worker(Runnable firstTask) &#123;</span><br><span class="line">           <span class="keyword">this</span>.firstTask = firstTask;</span><br><span class="line">           <span class="keyword">this</span>.thread = getThreadFactory().newThread(<span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看出Worker是对firstTask的包装，并且Worker本身就是Runnable的，看上去真心很流氓的感觉~~~<br>通过ThreadFactory为Worker自己构建一个线程。<br>因为Worker是Runnable类型的，所以是有run方法的,上面也看到了会调用t.start() 其实就是执行了run方法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Delegates main run loop to outer runWorker  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">runWorker</span>(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>调用了runWorker:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> Main worker run <span class="language-markdown"><span class="strong"><span class="emphasis">loop.</span></span></span>  Repeatedly gets tasks <span class="language-markdown"><span class="strong"><span class="emphasis">from queue and</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> executes them,</span></span> while coping with <span class="language-markdown"><span class="strong">a number of issues:</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 1 Worker可能还是执行一个初始化的task——firstTask。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>    但是有时也不需要这个初始化的task（可以为null）,只要pool在运行，就会</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*   通过getTask从队列中获取Task，如果返回null，那么worker退出。</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>   另一种就是external抛出异常导致worker退出。</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 1. We</span></span></span> may start out <span class="language-markdown"><span class="strong"><span class="emphasis">with an initial task,</span></span></span> in which case <span class="language-markdown"><span class="strong"><span class="emphasis">we</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> don&#x27;t need to <span class="language-markdown"><span class="strong">get</span></span> the first one. <span class="language-markdown"><span class="strong">Otherwise, as long as pool is</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* running, we</span></span></span> get tasks from <span class="language-markdown"><span class="strong"><span class="emphasis">getTask. If</span></span></span> it returns null <span class="language-markdown"><span class="strong"><span class="emphasis">then the</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> worker exits due <span class="language-markdown"><span class="strong">to</span></span> changed pool state <span class="language-markdown"><span class="strong">or configuration</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* parameters.</span></span></span>  Other exits result <span class="language-markdown"><span class="strong"><span class="emphasis">from exception throws in</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> external code,</span></span> in which case <span class="language-markdown"><span class="strong">completedAbruptly holds, which</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* usually leads processWorkerExit</span></span></span> to replace this <span class="language-markdown"><span class="strong"><span class="emphasis">thread.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> </span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 2 在运行任何task之前，都需要对worker加锁来防止other pool中断worker。</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*   clearInterruptsForTaskRun保证除了线程池stop，那么现场都没有中断标志</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 2.</span></span> Before running any <span class="language-markdown"><span class="strong">task,</span></span> the lock is <span class="language-markdown"><span class="strong">acquired to prevent</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> other pool interrupts <span class="language-markdown"><span class="strong"><span class="emphasis">while</span></span></span> the task is <span class="language-markdown"><span class="strong"><span class="emphasis">executing, and</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> clearInterruptsForTaskRun</span></span> called to ensure <span class="language-markdown"><span class="strong">that unless pool is</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* stopping,</span></span></span> this thread does <span class="language-markdown"><span class="strong"><span class="emphasis">not</span></span></span> have its interrupt <span class="language-markdown"><span class="strong"><span class="emphasis">set.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 3.</span></span></span> Each task run <span class="language-markdown"><span class="strong"><span class="emphasis">is preceded by</span></span></span> a call to <span class="language-markdown"><span class="strong"><span class="emphasis">beforeExecute, which</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> might throw an exception,</span></span> in which case <span class="language-markdown"><span class="strong">we</span></span> cause thread to <span class="language-markdown"><span class="strong">die</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* (breaking loop with completedAbruptly true) without processing</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> the task.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 4. Assuming beforeExecute completes normally, we run the task,</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* gathering any of</span></span></span> its thrown exceptions <span class="language-markdown"><span class="strong"><span class="emphasis">to send to</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> afterExecute. We separately handle RuntimeException, Error</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* (both of</span></span></span> which the specs <span class="language-markdown"><span class="strong"><span class="emphasis">guarantee that we trap) and arbitrary</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> Throwables.  Because we</span></span> cannot rethrow Throwables <span class="language-markdown"><span class="strong">within</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* Runnable.run, we</span></span></span> wrap them within <span class="language-markdown"><span class="strong"><span class="emphasis">Errors</span></span></span> on the way <span class="language-markdown"><span class="strong"><span class="emphasis">out (to the</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> thread&#x27;s UncaughtExceptionHandler).</span></span>  Any thrown exception <span class="language-markdown"><span class="strong">also</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> conservatively causes thread <span class="language-markdown"><span class="strong"><span class="emphasis">to die.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 5. After task.run completes, we call afterExecute, which may</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> also throw an exception,</span></span> which will also <span class="language-markdown"><span class="strong">cause thread to</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> die. According to <span class="language-markdown"><span class="strong"><span class="emphasis">JLS Sec 14.20,</span></span></span> this exception is <span class="language-markdown"><span class="strong"><span class="emphasis">the one that</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> will be</span></span> in effect even <span class="language-markdown"><span class="strong">if task.run throws.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span> The net effect <span class="language-markdown"><span class="strong">of</span></span> the exception mechanics <span class="language-markdown"><span class="strong">is that afterExecute</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> and the thread&#x27;s <span class="language-markdown"><span class="strong"><span class="emphasis">UncaughtExceptionHandler have as accurate</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> information as we</span></span> can provide about <span class="language-markdown"><span class="strong">any problems encountered by</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* user code.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* @param w the worker</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>/</span></span></span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">void</span> runWorker(Worker w) &#123;</span><br><span class="line">        Runnable task = w.firstTask;</span><br><span class="line">        w.firstTask = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//标识线程是不是异常终止的</span></span><br><span class="line">        boolean completedAbruptly = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//task不为null情况是初始化worker时，如果task为null，则去队列中取线程---&gt;getTask()</span></span><br><span class="line">            <span class="keyword">while</span> (task != <span class="keyword">null</span> || (task = getTask()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                w.lock();</span><br><span class="line">                <span class="comment">//获取woker的锁，防止线程被其他线程中断</span></span><br><span class="line">                clearInterruptsForTaskRun();<span class="comment">//清楚所有中断标记</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    beforeExecute(w.thread, task);<span class="comment">//线程开始执行之前执行此方法，可以实现Worker未执行退出，本类中未实现</span></span><br><span class="line">                    Throwable thrown = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        task.run();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (RuntimeException x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Error x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Throwable x) &#123;</span><br><span class="line">                        thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> Error(x);</span><br><span class="line">                    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                        afterExecute(task, thrown);<span class="comment">//线程执行后执行，可以实现标识Worker异常中断的功能，本类中未实现</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    task = <span class="keyword">null</span>;<span class="comment">//运行过的task标null</span></span><br><span class="line">                    w.completedTasks++;</span><br><span class="line">                    w.unlock();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            completedAbruptly = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//处理worker退出的逻辑</span></span><br><span class="line">            processWorkerExit(w, completedAbruptly);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>从上面代码可以看出，execute的Task是被“包装 ”了一层，线程启动时是内部调用了Task的run方法。<br>接下来所有的核心集中在getTask()方法上：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* Performs blocking or</span></span></span> timed wait for <span class="language-markdown"><span class="strong"><span class="emphasis">a task, depending on</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> current configuration settings, or</span></span> returns null if <span class="language-markdown"><span class="strong">this worker</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span> must exit because <span class="language-markdown"><span class="strong"><span class="emphasis">of any of:</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 1.</span></span> There are more <span class="language-markdown"><span class="strong">than maximumPoolSize workers (due to</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span>    a call to <span class="language-markdown"><span class="strong"><span class="emphasis">setMaximumPoolSize).</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 2.</span></span> The pool is <span class="language-markdown"><span class="strong">stopped.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* 3.</span></span></span> The pool is <span class="language-markdown"><span class="strong"><span class="emphasis">shutdown</span></span></span> and the queue <span class="language-markdown"><span class="strong"><span class="emphasis">is empty.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span> 4.</span></span> This worker timed <span class="language-markdown"><span class="strong">out</span></span> waiting for a <span class="language-markdown"><span class="strong">task, and timed-out</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span>    workers are subject <span class="language-markdown"><span class="strong"><span class="emphasis">to termination (that is,</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>    &#123;@code allowCoreThreadTimeOut || workerCount &gt; corePoolSize&#125;)</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*</span></span></span>    both before and <span class="language-markdown"><span class="strong"><span class="emphasis">after the timed wait.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">* @return task, or</span></span></span> null if the <span class="language-markdown"><span class="strong"><span class="emphasis">worker must exit, in which case</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>         workerCount is decremented</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*         </span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>         </span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">     <span class="emphasis">*  队列中获取线程</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">     *</span>/</span></span></span></span><br><span class="line">    private Runnable getTask() &#123;</span><br><span class="line">        boolean timedOut = <span class="keyword">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">        retry:</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">            <span class="built_in">int</span> rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">            <span class="comment">//当前状态为&gt;stop时，不处理workQueue中的任务，同时减小worker的数量所以返回null，如果为shutdown 同时workQueue已经empty了，同样减小worker数量并返回null</span></span><br><span class="line">            <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">                decrementWorkerCount();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            boolean timed;      <span class="comment">// Are workers subject to culling?</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="built_in">int</span> wc = workerCountOf(c);</span><br><span class="line">                timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (wc &lt;= maximumPoolSize &amp;&amp; ! (timedOut &amp;&amp; timed))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                c = ctl.<span class="keyword">get</span>();  <span class="comment">// Re-read ctl</span></span><br><span class="line">                <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                    <span class="keyword">continue</span> retry;</span><br><span class="line">                <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Runnable r = timed ?</span><br><span class="line">                    workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                    workQueue.take();</span><br><span class="line">                <span class="keyword">if</span> (r != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> r;</span><br><span class="line">                timedOut = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">                timedOut = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>这段代码十分关键，首先看几个局部变量：<br>boolean timedOut &#x3D; false;<br>主要是判断后面的poll是否要超时<br>boolean timed;<br>主要是标识着当前Worker超时是否要退出。wc &gt; corePoolSize时需要减小空闲的Worker数，那么timed为true，但是wc &lt;&#x3D; corePoolSize时，不能减小核心线程数timed为false。<br>timedOut初始为false，如果timed为true那么使用poll取线程。如果正常返回，那么返回取到的task。如果超时，证明worker空闲，同时worker超过了corePoolSize，需要删除。返回r&#x3D;null。则 timedOut &#x3D; true。此时循环到wc &lt;&#x3D; maximumPoolSize &amp;&amp; ! (timedOut &amp;&amp; timed)时，减小worker数，并返回null，导致worker退出。如果线程数&lt;&#x3D; corePoolSize，那么此时调用 workQueue.take()，没有线程获取到时将一直阻塞，知道获取到线程或者中断，关于中断后面Shutdown的时候会说。</p>
<p>至此线程执行过程就分析完了~~~~</p>
<hr>
<h5 id="关于终止线程池"><a href="#关于终止线程池" class="headerlink" title="关于终止线程池#####"></a>关于终止线程池#####</h5><p>我个人认为，如果想了解明白线程池，那么就一定要理解好各个状态之间的转换，想理解转换，线程池的终止机制是很好的一个途径。对于关闭线程池主要有两个方法shutdown()和shutdownNow():<br>首先从shutdown()方法开始：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* Initiates an</span></span></span> orderly shutdown in <span class="language-markdown"><span class="strong"><span class="emphasis">which previously submitted</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> tasks are executed, but no</span></span> new tasks will <span class="language-markdown"><span class="strong">be accepted.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* Invocation has no</span></span></span> additional effect if <span class="language-markdown"><span class="strong"><span class="emphasis">already shut down.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>This</span></span></span> method does not <span class="language-markdown"><span class="strong"><span class="emphasis">wait</span></span></span> for previously submitted <span class="language-markdown"><span class="strong"><span class="emphasis">tasks to</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> complete execution.  Use &#123;@link #awaitTermination awaitTermination&#125;</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* to do that.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @throws SecurityException &#123;@inheritDoc&#125;</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>/</span></span></span></span><br><span class="line">public <span class="keyword">void</span> shutdown() &#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否可以操作目标线程</span></span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        <span class="comment">//设置线程池状态为SHUTDOWN,此处之后，线程池中不会增加新Task</span></span><br><span class="line">        advanceRunState(SHUTDOWN);</span><br><span class="line">        <span class="comment">//中断所有的空闲线程</span></span><br><span class="line">        interruptIdleWorkers();</span><br><span class="line">        onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//转到Terminate</span></span><br><span class="line">    tryTerminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>shutdown做了几件事：<br><strong>1. 检查是否能操作目标线程</strong><br><strong>2. 将线程池状态转为SHUTDOWN</strong><br><strong>3. 中断所有空闲线程</strong><br>这里就引发了一个问题，什么是空闲线程？<br>这需要接着看看interruptIdleWorkers是怎么回事。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">interruptIdleWorkers</span><span class="params">(<span class="type">boolean</span> onlyOne)</span> &#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">mainLock</span> <span class="operator">=</span> <span class="built_in">this</span>.mainLock;</span><br><span class="line">       mainLock.lock();</span><br><span class="line">       <span class="comment">//这里的意图很简单，遍历workers 对所有worker做中断处理。</span></span><br><span class="line">       <span class="comment">// w.tryLock()对Worker加锁，这保证了正在运行执行Task的Worker不会被中断，那么能中断哪些线程呢？</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">               <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> w.thread;</span><br><span class="line">               <span class="keyword">if</span> (!t.isInterrupted() &amp;&amp; w.tryLock()) &#123;</span><br><span class="line">                   <span class="keyword">try</span> &#123;</span><br><span class="line">                       t.interrupt();</span><br><span class="line">                   &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">                   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                       w.unlock();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (onlyOne)</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           mainLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>这里主要是为了中断worker，但是中断之前需要先获取锁，这就意味着正在运行的Worker不能中断。但是上面的代码有w.tryLock()，那么获取不到锁就不会中断，shutdown的Interrupt只是对所有的空闲Worker（正在从workQueue中取Task，此时Worker没有加锁）发送中断信号。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (task != <span class="literal">null</span> || (task = <span class="title function_">getTask</span>()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    w.<span class="title function_">lock</span>();</span><br><span class="line">    <span class="comment">//获取woker的锁，防止线程被其他线程中断</span></span><br><span class="line">    <span class="title function_">clearInterruptsForTaskRun</span>();<span class="comment">//清楚所有中断标记</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="title function_">beforeExecute</span>(w.<span class="property">thread</span>, task);<span class="comment">//线程开始执行之前执行此方法，可以实现Worker未执行退出，本类中未实现</span></span><br><span class="line">        <span class="title class_">Throwable</span> thrown = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            task.<span class="title function_">run</span>();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">RuntimeException</span> x) &#123;</span><br><span class="line">            thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Error</span> x) &#123;</span><br><span class="line">            thrown = x; <span class="keyword">throw</span> x;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="title class_">Throwable</span> x) &#123;</span><br><span class="line">            thrown = x; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(x);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="title function_">afterExecute</span>(task, thrown);<span class="comment">//线程执行后执行，可以实现标识Worker异常中断的功能，本类中未实现</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        task = <span class="literal">null</span>;<span class="comment">//运行过的task标null</span></span><br><span class="line">        w.<span class="property">completedTasks</span>++;</span><br><span class="line">        w.<span class="title function_">unlock</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在runWorker中，每一个Worker getTask成功之后都要获取Worker的锁之后运行，也就是说运行中的Worker不会中断。因为核心线程一般在空闲的时候会一直阻塞在获取Task上，也只有中断才可能导致其退出。这些阻塞着的Worker就是空闲的线程（当然，非核心线程，并且阻塞的也是空闲线程）。在getTask方法中：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Runnable getTask() &#123;</span><br><span class="line">    boolean timedOut = <span class="literal">false</span>; <span class="comment">// Did the last poll() time out?</span></span><br><span class="line"></span><br><span class="line">    retry:</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        int c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        int rs = runStateOf(c);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">        <span class="comment">//当前状态为&gt;stop时，不处理workQueue中的任务，同时减小worker的数量所以返回null，如果为shutdown 同时workQueue已经empty了，同样减小worker数量并返回null</span></span><br><span class="line">        <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp; (rs &gt;= STOP || workQueue.isEmpty())) &#123;</span><br><span class="line">            decrementWorkerCount();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolean timed;      <span class="comment">// Are workers subject to culling?</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//allowCoreThreadTimeOu是判断CoreThread是否会超时的，true为会超时，false不会超时。默认为false</span></span><br><span class="line">            int wc = workerCountOf(c);</span><br><span class="line">            timed = allowCoreThreadTimeOut || wc &gt; corePoolSize;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (wc &lt;= maximumPoolSize &amp;&amp; ! (timedOut &amp;&amp; timed))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (compareAndDecrementWorkerCount(c))</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            c = ctl.<span class="keyword">get</span>();  <span class="comment">// Re-read ctl</span></span><br><span class="line">            <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                <span class="keyword">continue</span> retry;</span><br><span class="line">            <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runnable r = timed ?</span><br><span class="line">                workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS) :</span><br><span class="line">                workQueue.take();</span><br><span class="line">            <span class="keyword">if</span> (r != <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">return</span> r;</span><br><span class="line">            timedOut = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException retry) &#123;</span><br><span class="line">            timedOut = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会有两阶段的Worker：</p>
<ol>
<li>刚进入getTask()，还没进行状态判断。</li>
<li>block在poll或者take上的Worker。</li>
</ol>
<p>当调用ShutDown方法时，首先设置了线程池的状态为ShutDown，此时1阶段的worker进入到状态判断时会返回null，此时Worker退出。<br>因为getTask的时候是不加锁的，所以在shutdown时可以调用worker.Interrupt.此时会中断退出，Loop到状态判断时，同时workQueue为empty。那么抛出中断异常，导致重新Loop，在检测线程池状态时，Worker退出。如果workQueue不为null就不会退出，此处有些疑问，因为没有看见中断标志位清除的逻辑，那么这里就会不停的循环直到workQueue为Empty退出。<br><strong>这里也能看出来SHUTDOWN只是清除一些空闲Worker，并且拒绝新Task加入，对于workQueue中的线程还是继续处理的。</strong><br>对于shutdown中获取mainLock而addWorker中也做了mainLock的获取，这么做主要是因为Works是HashSet类型的，是线程不安全的，我们也看到在addWorker后面也是对线程池状态做了判断，将Worker添加和中断逻辑分离开。<br>接下来做了tryTerminate()操作，这操作是进行了后面状态的转换，在shutdownNow后面说。<br>接下来看看shutdownNow：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> Attempts to stop <span class="language-markdown"><span class="strong"><span class="emphasis">all actively executing tasks, halts the</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> processing of waiting tasks,</span></span> and returns a <span class="language-markdown"><span class="strong">list of the tasks</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> that were awaiting <span class="language-markdown"><span class="strong"><span class="emphasis">execution.</span></span></span> These tasks are <span class="language-markdown"><span class="strong"><span class="emphasis">drained (removed)</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> from the task <span class="language-markdown"><span class="strong">queue</span></span> upon return from <span class="language-markdown"><span class="strong">this method.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>This</span></span> method does not <span class="language-markdown"><span class="strong">wait</span></span> for actively executing <span class="language-markdown"><span class="strong">tasks to</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* terminate.  Use &#123;@link #awaitTermination awaitTermination&#125; to</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> do that.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span>There are no</span></span> guarantees beyond best-effort <span class="language-markdown"><span class="strong">attempts to stop</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> processing actively executing <span class="language-markdown"><span class="strong"><span class="emphasis">tasks.  This implementation</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> cancels tasks via <span class="language-markdown"><span class="strong">&#123;@link Thread#interrupt&#125;,</span></span> so any task <span class="language-markdown"><span class="strong">that</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> fails to respond <span class="language-markdown"><span class="strong"><span class="emphasis">to</span></span></span> interrupts may never <span class="language-markdown"><span class="strong"><span class="emphasis">terminate.</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* @throws SecurityException &#123;@inheritDoc&#125;</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span>/</span></span></span></span><br><span class="line">public <span class="built_in">List</span>&lt;Runnable&gt; shutdownNow() &#123;</span><br><span class="line">    <span class="built_in">List</span>&lt;Runnable&gt; tasks;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        checkShutdownAccess();</span><br><span class="line">        advanceRunState(STOP);</span><br><span class="line">        interruptWorkers();</span><br><span class="line">        tasks = drainQueue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    tryTerminate();</span><br><span class="line">    <span class="keyword">return</span> tasks;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>shutdownNow和shutdown代码类似，但是实现却很不相同。首先是设置线程池状态为STOP，前面的代码我们可以看到，是对SHUTDOWN有一些额外的判断逻辑，但是对于&gt;&#x3D;STOP,基本都是reject，STOP也是比SHUTDOWN更加严格的一种状态。此时不会有新Worker加入，所有刚执行完一个线程后去GetTask的Worker都会退出。<br>之后调用interruptWorkers：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Interrupts all threads, even if active. Ignores SecurityExceptions</span></span><br><span class="line"><span class="comment"> * (in which case some threads may remain uninterrupted).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">interruptWorkers</span>()</span> &#123;</span><br><span class="line">    final ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">    mainLock.<span class="keyword">lock</span>();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Worker w : workers) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                w.thread.interrupt();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (SecurityException ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        mainLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里可以看出来，此方法目的是中断所有的Worker，而不是像shutdown中那样只中断空闲线程。这样体现了STOP的特点，中断所有线程，同时workQueue中的Task也不会执行了。所以接下来drainQueue：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">  <span class="emphasis">*</span></span></span> Drains the task <span class="language-markdown"><span class="strong"><span class="emphasis">queue</span></span></span> into a new <span class="language-markdown"><span class="strong"><span class="emphasis">list, normally using</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">  *</span> drainTo.</span></span> But if the <span class="language-markdown"><span class="strong">queue is a DelayQueue or</span></span> any other kind <span class="language-markdown"><span class="strong">of</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">  <span class="emphasis">*</span></span></span> queue for which <span class="language-markdown"><span class="strong"><span class="emphasis">poll or drainTo</span></span></span> may fail to <span class="language-markdown"><span class="strong"><span class="emphasis">remove some</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment">  *</span> elements,</span></span> it deletes them <span class="language-markdown"><span class="strong">one by one.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment">  <span class="emphasis">*/</span></span></span></span></span><br><span class="line"> private <span class="built_in">List</span>&lt;Runnable&gt; drainQueue() &#123;</span><br><span class="line">     BlockingQueue&lt;Runnable&gt; q = workQueue;</span><br><span class="line">     <span class="built_in">List</span>&lt;Runnable&gt; taskList = <span class="keyword">new</span> ArrayList&lt;Runnable&gt;();</span><br><span class="line">     q.drainTo(taskList);</span><br><span class="line">     <span class="keyword">if</span> (!q.isEmpty()) &#123;</span><br><span class="line">         <span class="keyword">for</span> (Runnable r : q.toArray(<span class="keyword">new</span> Runnable[<span class="number">0</span>])) &#123;</span><br><span class="line">             <span class="keyword">if</span> (q.remove(r))</span><br><span class="line">                 taskList.add(r);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> taskList;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>获取所有没有执行的Task，并且返回。<br>这也体现了STOP的特点：<br><strong>拒绝所有新Task的加入，同时中断所有线程，WorkerQueue中没有执行的线程全部抛弃。所以此时Pool是空的，WorkerQueue也是空的。</strong><br>这之后就是进行到TIDYING和TERMINATED的转化了：</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment"><span class="language-markdown">/<span class="strong">**</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* Transitions to TERMINATED</span></span></span> state if either <span class="language-markdown"><span class="strong"><span class="emphasis">(SHUTDOWN and pool</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> and queue empty) or (STOP and pool empty).  If otherwise</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> eligible to terminate <span class="language-markdown"><span class="strong"><span class="emphasis">but workerCount is nonzero, interrupts an</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> idle worker to <span class="language-markdown"><span class="strong">ensure</span></span> that shutdown signals <span class="language-markdown"><span class="strong">propagate. This</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">* method must be</span></span></span> called following any <span class="language-markdown"><span class="strong"><span class="emphasis">action that might make</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span> termination possible --</span></span> reducing worker count <span class="language-markdown"><span class="strong">or removing tasks</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*</span></span></span> from the queue <span class="language-markdown"><span class="strong"><span class="emphasis">during</span></span></span> shutdown. The method <span class="language-markdown"><span class="strong"><span class="emphasis">is non-private to</span></span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="language-markdown"><span class="comment"> *</span></span></span> allow access from <span class="language-markdown"><span class="strong">ScheduledThreadPoolExecutor.</span></span></span></span><br><span class="line"><span class="strong"><span class="language-markdown"><span class="comment"> <span class="emphasis">*/</span></span></span></span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> tryTerminate() &#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) ||</span><br><span class="line">            runStateAtLeast(c, TIDYING) ||</span><br><span class="line">            (runStateOf(c) == SHUTDOWN &amp;&amp; ! workQueue.isEmpty()))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) != <span class="number">0</span>) &#123; <span class="comment">// Eligible to terminate</span></span><br><span class="line">            interruptIdleWorkers(ONLY_ONE);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (ctl.compareAndSet(c, ctlOf(TIDYING, <span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    terminated();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    ctl.<span class="keyword">set</span>(ctlOf(TERMINATED, <span class="number">0</span>));</span><br><span class="line">                    termination.signalAll();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else retry on failed CAS</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码其实很有意思有几种状态是不能转化到TIDYING的:</p>
<ol>
<li>RUNNING状态</li>
<li>TIDYING或TERMINATED</li>
<li>SHUTDOWN状态，但是workQueue不为空</li>
</ol>
<p>也说明了两点：<br><strong>1. SHUTDOWN想转化为TIDYING，需要workQueue为空，同时workerCount为0。</strong><br><strong>2. STOP转化为TIDYING，需要workerCount为0</strong><br>如果满足上面的条件（一般一定时间后都会满足的），那么CAS成TIDYING，TIDYING也只是个过度状态，最终会转化为TERMINATED。</p>
<p>至此，ThreadPoolExecutor一些核心思想就介绍完了，想分析清楚实在是不容易，对于ThreadPoolExecutor我还是有些不懂地方，以上只是我对源码的片面的见解，如果有不正确之处，希望大神能不吝赐教。同时也希望给正在研究ThreadPoolExecutor的童鞋提供一点帮助。</p>
<p>勿忘初心，方得始终。晚安~~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>tool.html</title>
    <url>/posts/78971d1/</url>
    <content><![CDATA[<!doctype html>
<html>
<head>
<meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'>
<title>tool</title><style type='text/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; }
html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }
body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }
iframe { margin: auto; }
a.url { word-break: break-all; }
a:active, a:hover { outline: 0px; }
.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }
#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; }
#write.first-line-indent p { text-indent: 2em; }
#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }
#write.first-line-indent li { margin-left: 2em; }
.for-image #write { padding-left: 8px; padding-right: 8px; }
body.typora-export { padding-left: 30px; padding-right: 30px; }
.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }
.typora-export .task-list-item input { pointer-events: none; }
@media screen and (max-width: 500px) {
  body.typora-export { padding-left: 0px; padding-right: 0px; }
  #write { padding-left: 20px; padding-right: 20px; }
  .CodeMirror-sizer { margin-left: 0px !important; }
  .CodeMirror-gutters { display: none !important; }
}
#write li > figure:last-child { margin-bottom: 0.5rem; }
#write ol, #write ul { position: relative; }
img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }
button, input, select, textarea { color: inherit; font: inherit; }
input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }
*, ::after, ::before { box-sizing: border-box; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }
p { line-height: inherit; }
h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }
p { orphans: 4; }
h1 { font-size: 2rem; }
h2 { font-size: 1.8rem; }
h3 { font-size: 1.6rem; }
h4 { font-size: 1.4rem; }
h5 { font-size: 1.2rem; }
h6 { font-size: 1rem; }
.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }
.hidden { display: none; }
.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }
a { cursor: pointer; }
sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }
sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }
#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }
figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }
figure > table { margin: 0px; }
tr { break-inside: avoid; break-after: auto; }
thead { display: table-header-group; }
table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }
table.md-table td { min-width: 32px; }
.CodeMirror-gutters { border-right: 0px; background-color: inherit; }
.CodeMirror-linenumber { user-select: none; }
.CodeMirror { text-align: left; }
.CodeMirror-placeholder { opacity: 0.3; }
.CodeMirror pre { padding: 0px 4px; }
.CodeMirror-lines { padding: 0px; }
div.hr:focus { cursor: none; }
#write pre { white-space: pre-wrap; }
#write.fences-no-line-wrapping pre { white-space: pre; }
#write pre.ty-contain-cm { white-space: normal; }
.CodeMirror-gutters { margin-right: 4px; }
.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }
.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }
#write .md-fences.mock-cm { white-space: pre-wrap; }
.md-fences.md-fences-with-lineno { padding-left: 0px; }
#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }
.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }
.CodeMirror-line, twitterwidget { break-inside: avoid; }
.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }
.footnotes + .footnotes { margin-top: 0px; }
.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }
li div { padding-top: 0px; }
blockquote { margin: 1rem 0px; }
li .mathjax-block, li p { margin: 0.5rem 0px; }
li { margin: 0px; position: relative; }
blockquote > :last-child { margin-bottom: 0px; }
blockquote > :first-child, li > :first-child { margin-top: 0px; }
.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }
#write .footnote-line { white-space: pre-wrap; }
@media print {
  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }
  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }
  .typora-export * { -webkit-print-color-adjust: exact; }
  html.blink-to-pdf { font-size: 13px; }
  .typora-export #write { break-after: avoid; }
  .typora-export #write::after { height: 0px; }
  .is-mac table { break-inside: avoid; }
}
.footnote-line { margin-top: 0.714em; font-size: 0.7em; }
a img, img a { cursor: pointer; }
pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }
p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }
#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }
p > .md-image:only-child { display: inline-block; width: 100%; }
#write .MathJax_Display { margin: 0.8em 0px 0px; }
.md-math-block { width: 100%; }
.md-math-block:not(:empty)::after { display: none; }
[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }
.md-task-list-item { position: relative; list-style-type: none; }
.task-list-item.md-task-list-item { padding-left: 0px; }
.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }
.math { font-size: 1rem; }
.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }
.md-toc-content { position: relative; margin-left: 0px; }
.md-toc-content::after, .md-toc::after { display: none; }
.md-toc-item { display: block; color: rgb(65, 131, 196); }
.md-toc-item a { text-decoration: none; }
.md-toc-inner:hover { text-decoration: underline; }
.md-toc-inner { display: inline-block; cursor: pointer; }
.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }
.md-toc-h2 .md-toc-inner { margin-left: 2em; }
.md-toc-h3 .md-toc-inner { margin-left: 4em; }
.md-toc-h4 .md-toc-inner { margin-left: 6em; }
.md-toc-h5 .md-toc-inner { margin-left: 8em; }
.md-toc-h6 .md-toc-inner { margin-left: 10em; }
@media screen and (max-width: 48em) {
  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }
  .md-toc-h4 .md-toc-inner { margin-left: 5em; }
  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }
  .md-toc-h6 .md-toc-inner { margin-left: 8em; }
}
a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }
.footnote-line a:not(.reversefootnote) { color: inherit; }
.md-attr { display: none; }
.md-fn-count::after { content: "."; }
code, pre, samp, tt { font-family: var(--monospace); }
kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }
.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }
code { text-align: left; vertical-align: initial; }
a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }
.md-inline-math .MathJax_SVG .noError { display: none !important; }
.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }
.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }
.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }
.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }
.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }
.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }
.MathJax_SVG * { transition: none 0s ease 0s; }
.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }
.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }
.md-diagram-panel > svg { max-width: 100%; }
[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }
[lang="mermaid"] .node text { font-size: 1rem; }
table tr th { border-bottom: 0px; }
video { max-width: 100%; display: block; margin: 0px auto; }
iframe { max-width: 100%; width: 100%; border: none; }
.highlight td, .highlight tr { border: 0px; }
svg[id^="mermaidChart"] { line-height: 1em; }
mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }
.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }
mark .md-meta { color: rgb(0, 0, 0); opacity: 0.3 !important; }
@media print {
  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }
}


/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
@font-face {
    font-family: 'Source Sans Pro';
    font-style: normal;
    font-weight: 600;
    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('file:///C://Users//Shanzhen//AppData//Roaming//Typora/themes/vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2') format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}@import '';

:root {
    --side-bar-bg-color: #fff;
    --control-text-color: #777;
    --font-sans-serif: 'Ubuntu', 'Source Sans Pro', sans-serif !important;
    --font-monospace: 'Fira Code', 'Roboto Mono', monospace !important;
}

html {
    font-size: 16px;
}

body {
    font-family: var(--font-sans-serif);
    color: #34495e;
    -webkit-font-smoothing: antialiased;
    line-height: 1.6rem;
    letter-spacing: 0;
    margin: 0;
    overflow-x: hidden;
}

#write {
    max-width: 860px;
    margin: 0 auto;
    padding: 20px 30px 100px;
}

#write p {
    line-height: 1.6rem;
    word-spacing: .05rem;
}

#write ol li {
    padding-left: 0.5rem;
}

#write > ul:first-child,
#write > ol:first-child {
    margin-top: 30px;
}

body > *:first-child {
    margin-top: 0 !important;
}

body > *:last-child {
    margin-bottom: 0 !important;
}

a {
    color: #42b983;
    font-weight: 600;
    padding: 0 2px;
    text-decoration: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    position: relative;
    margin-top: 1rem;
    margin-bottom: 1rem;
    font-weight: bold;
    line-height: 1.4;
    cursor: text;
}

h1:hover a.anchor,
h2:hover a.anchor,
h3:hover a.anchor,
h4:hover a.anchor,
h5:hover a.anchor,
h6:hover a.anchor {
    text-decoration: none;
}

h1 tt,
h1 code {
    font-size: inherit !important;
}

h2 tt,
h2 code {
    font-size: inherit !important;
}

h3 tt,
h3 code {
    font-size: inherit !important;
}

h4 tt,
h4 code {
    font-size: inherit !important;
}

h5 tt,
h5 code {
    font-size: inherit !important;
}

h6 tt,
h6 code {
    font-size: inherit !important;
}

h2 a,
h3 a {
    color: #34495e;
}

h1 {
    padding-bottom: .4rem;
    font-size: 2.2rem;
    line-height: 1.3;
}

h2 {
    font-size: 1.75rem;
    line-height: 1.225;
    margin: 35px 0 15px;
    padding-bottom: 0.5em;
    border-bottom: 1px solid #ddd;
}

h3 {
    font-size: 1.4rem;
    line-height: 1.43;
    margin: 20px 0 7px;
}

h4 {
    font-size: 1.2rem;
}

h5 {
    font-size: 1rem;
}

h6 {
    font-size: 1rem;
    color: #777;
}

p,
blockquote,
ul,
ol,
dl,
table {
    margin: 0.8em 0;
}

li > ol,
li > ul {
    margin: 0 0;
}

hr {
    height: 2px;
    padding: 0;
    margin: 16px 0;
    background-color: #e7e7e7;
    border: 0 none;
    overflow: hidden;
    box-sizing: content-box;
}

body > h2:first-child {
    margin-top: 0;
    padding-top: 0;
}

body > h1:first-child {
    margin-top: 0;
    padding-top: 0;
}

body > h1:first-child + h2 {
    margin-top: 0;
    padding-top: 0;
}

body > h3:first-child,
body > h4:first-child,
body > h5:first-child,
body > h6:first-child {
    margin-top: 0;
    padding-top: 0;
}

a:first-child h1,
a:first-child h2,
a:first-child h3,
a:first-child h4,
a:first-child h5,
a:first-child h6 {
    margin-top: 0;
    padding-top: 0;
}

h1 p,
h2 p,
h3 p,
h4 p,
h5 p,
h6 p {
    margin-top: 0;
}

li p.first {
    display: inline-block;
}

ul,
ol {
    padding-left: 30px;
}

ul:first-child,
ol:first-child {
    margin-top: 0;
}

ul:last-child,
ol:last-child {
    margin-bottom: 0;
}

blockquote {
    border-left: 4px solid #42b983;
    padding: 10px 15px;
    color: #777;
    background-color: rgba(66, 185, 131, .1);
}

table {
    padding: 0;
    word-break: initial;
}

table tr {
    border-top: 1px solid #dfe2e5;
    margin: 0;
    padding: 0;
}

table tr:nth-child(2n),
thead {
    background-color: #fafafa;
}

table tr th {
    font-weight: bold;
    border: 1px solid #dfe2e5;
    border-bottom: 0;
    text-align: left;
    margin: 0;
    padding: 6px 13px;
}

table tr td {
    border: 1px solid #dfe2e5;
    text-align: left;
    margin: 0;
    padding: 6px 13px;
}

table tr th:first-child,
table tr td:first-child {
    margin-top: 0;
}

table tr th:last-child,
table tr td:last-child {
    margin-bottom: 0;
}

#write strong {
    padding: 0 1px;
}

#write em {
    padding: 0 5px 0 2px;
}

#write table thead th {
    background-color: #f2f2f2;
}

#write .CodeMirror-gutters {
    border-right: none;
}

#write .md-fences {
    border: 1px solid #F4F4F4;
    -webkit-font-smoothing: initial;
    margin: 0.8rem 0 !important;
    padding: 0.3rem 0 !important;
    line-height: 1.43rem;
    background-color: #F8F8F8 !important;
    border-radius: 2px;
    font-family: var(--font-monospace);
    font-size: 0.85rem;
    word-wrap: normal;
}

#write .CodeMirror-wrap .CodeMirror-code pre {
    padding-left: 12px;
}

#write code, tt {
    padding: 2px 4px;
    border-radius: 2px;
    font-family: var(--font-monospace);
    font-size: 0.92rem;
    color: #e96900;
    background-color: #f8f8f8;
}

tt {
    margin: 0 2px;
}

#write .md-footnote {
    background-color: #f8f8f8;
    color: #e96900;
}

/* heighlight. */
#write mark {
    background-color: #EBFFEB;
    border-radius: 2px;
    padding: 2px 4px;
    margin: 0 2px;
    color: #222;
    font-weight: 500;
}

#write del {
    padding: 1px 2px;
}

.cm-s-inner .cm-link,
.cm-s-inner.cm-link {
    color: #22a2c9;
}

.cm-s-inner .cm-string {
    color: #22a2c9;
}

.md-task-list-item > input {
    margin-left: -1.3em;
}

@media print {
    html {
        font-size: 13px;
    }

    table,
    pre {
        page-break-inside: avoid;
    }

    pre {
        word-wrap: break-word;
    }
}

.md-fences {
    background-color: #f8f8f8;
}

#write pre.md-meta-block {
    padding: 1rem;
    font-size: 85%;
    line-height: 1.45;
    background-color: #f7f7f7;
    border: 0;
    border-radius: 3px;
    color: #777777;
    margin-top: 0 !important;
}

.mathjax-block > .code-tooltip {
    bottom: .375rem;
}

#write > h3.md-focus:before {
    left: -1.5625rem;
    top: .375rem;
}

#write > h4.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

#write > h5.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

#write > h6.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

.md-image > .md-meta {
    border-radius: 3px;
    font-family: var(--font-monospace);
    padding: 2px 0 0 4px;
    font-size: 0.9em;
    color: inherit;
}

.md-tag {
    color: inherit;
}

.md-toc {
    margin-top: 20px;
    padding-bottom: 20px;
}

.sidebar-tabs {
    border-bottom: none;
}

#typora-quick-open {
    border: 1px solid #ddd;
    background-color: #f8f8f8;
}

#typora-quick-open-item {
    background-color: #FAFAFA;
    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;
    border-style: solid;
    border-width: 1px;
}

#md-notification:before {
    top: 10px;
}

/** focus mode */

.on-focus-mode blockquote {
    border-left-color: rgba(85, 85, 85, 0.12);
}

header,
.context-menu,
.megamenu-content,
footer {
    font-family: var(--font-sans-serif);
}

.file-node-content:hover .file-node-icon,
.file-node-content:hover .file-node-open-state {
    visibility: visible;
}

.mac-seamless-mode #typora-sidebar {
    background-color: var(--side-bar-bg-color);
}

.md-lang {
    color: #b4654d;
}

.html-for-mac .context-menu {
    --item-hover-bg-color: #E6F0FE;
}



</style>
</head>
<body class='typora-export os-windows'>
<div id='write'  class=''><h2><a name="软件推荐" class="md-header-anchor"></a><span>软件推荐</span></h2><blockquote><h3><a name="文本编辑软件" class="md-header-anchor"></a><span>文本编辑软件</span></h3></blockquote><h4><a name="vscodenotepad" class="md-header-anchor"></a><span>vscode/notepad++</span></h4><h5><a name="---jstool" class="md-header-anchor"></a><span>-- JSTool</span></h5><blockquote><h3><a name="utools-效率提升工具" class="md-header-anchor"></a><span>utools-效率提升工具</span></h3></blockquote><ul><li><p><span>-- 书签</span></p><ul><li><span>快捷书签打开，支持拼音、url、书签名搜索</span></li><li><span>书签很多的时候很好用</span></li></ul></li><li><p><span>-- jetbrains</span></p><ul><li><span>快捷打开jetbrain的项目</span></li></ul></li><li><p><span>-- find</span></p><ul><li><span>内嵌everything</span></li><li><span>搜索速度很快</span></li></ul></li><li><p><span>-- 网页快开</span></p><ul><li><span>快捷打开某些常用的搜索软件，拼接了查询query，如果百度、google、stackoverflow等</span></li></ul></li><li><p><span>-- 剪切板</span></p><ul><li><span>历史的剪切板内容</span></li></ul></li></ul><blockquote><h3><a name="drawiohttpsappdiagramsnet--流程图绘制" class="md-header-anchor"></a><a href='https://app.diagrams.net/'><span>draw.io</span></a><span>--流程图绘制</span></h3></blockquote><p><span>开源、功能强大、社区活跃。</span></p><p><span>丰富的客户端支持，在线、win、mac</span></p><p><span>支持多种存储方式：云存储、本地、浏览器…</span></p><p><span>备选：processon、visio</span></p><blockquote><h3><a name="blogdocumentnote" class="md-header-anchor"></a><span>blog&amp;document&amp;note</span></h3></blockquote><p><span>  -- </span><a href='https://www.gitbook.com/' target='_blank' class='url'>https://www.gitbook.com/</a>
<span>  -- Typora/markdown</span>
<span>  -- onenote</span>
<span>  -- csdn</span></p><blockquote><h3><a name="科学上网" class="md-header-anchor"></a><span>科学上网</span></h3></blockquote><h5><a name="sockboomhttpssockboomart" class="md-header-anchor"></a><a href='https://sockboom.art/'><span>sockboom</span></a></h5><p><a href='https://sakura.cat/auth/login'><span>樱猫</span></a></p><blockquote><h3><a name="ftp" class="md-header-anchor"></a><span>ftp</span></h3></blockquote><ul><li><p><span>FileZillaClient</span></p></li><li><p><span>FileZillaServer</span></p><ul><li><span>搭建个人ftp使用，局域网内共享大文件使用</span></li></ul></li></ul><blockquote><h3><a name="redis" class="md-header-anchor"></a><span>redis</span></h3></blockquote><ul><li><p><span>Redis DeskTop</span></p><ul><li><span>redis管理终端，使用简单</span></li></ul></li></ul><blockquote><h3><a name="sql" class="md-header-anchor"></a><span>sql</span></h3></blockquote><ul><li><p><span>navicat/dataGrip/sqlyog</span></p><ul><li><span>常用的sql客户端，常用navicat，支持多种数据库如mongo</span></li></ul></li><li><p><span>PDMan</span></p><ul><li><span>可以建立表之间的逻辑关联关系</span></li><li><span>支持导出建表语句</span></li></ul></li></ul><blockquote><h3><a name="terminal" class="md-header-anchor"></a><span>terminal</span></h3></blockquote><ul><li><p><span>mobaxterm</span></p><ul><li><span>免费</span></li><li><span>直接建立Sftp，方便文件管理</span></li><li><span>性能稍差</span></li></ul></li><li><p><span>xhsell</span></p><ul><li><span>收费，免费版限制较多，限制终端开启数量</span></li></ul></li><li><p><span>Cmder/GitBash</span></p><ul><li><span>windows端的终端</span></li><li><span>直接一些bash指令，模拟linux操作win，比如tail、less等等，比win cmd及powershell稍微好用些</span></li></ul></li></ul><blockquote><h3><a name="onedrive--office" class="md-header-anchor"></a><span>onedrive + office</span></h3></blockquote><ul><li><span>家庭版共享性价比很高，1T云存储</span></li></ul><h2><a name="开发办公" class="md-header-anchor"></a><span>开发办公</span></h2><blockquote><h3><a name="idea" class="md-header-anchor"></a><span>idea</span></h3></blockquote><ul><li><h5><a name="破解和注册" class="md-header-anchor"></a><span>破解和注册</span></h5><ul><li><h5><a name="教育邮箱免费注册专业版本jetbrain全家桶）" class="md-header-anchor"></a><span>教育邮箱，免费注册专业版本（jetbrain全家桶）</span></h5></li><li><h5><a name="读书成诗公众号破解补丁" class="md-header-anchor"></a><span>读书成诗公众号，破解补丁</span></h5></li></ul></li><li><h5><a name="插件推荐" class="md-header-anchor"></a><span>插件推荐</span></h5><ul><li><h5><a name="1easycode" class="md-header-anchor"></a><code>1、easycode</code></h5><ul><li><h5><a name="sqlmap模板代码生成插件模板自定义语法较为简单上手容易" class="md-header-anchor"></a><span>sqlmap模板代码生成插件，模板自定义，语法较为简单，上手容易</span></h5></li></ul></li><li><p><code>2、easyyapi</code></p><ul><li><span>接口文档生成插件</span></li><li><span>支持http、dubbo接口</span></li><li><span>可导出至yapi、postman、本地markdown</span></li></ul></li><li><p><code>3、 camelcase</code></p><ul><li><span>大小写转换工具，驼峰、下划线等多种类型切换</span></li><li><span>常用于从数据库中复制的字段转换成驼峰</span></li></ul></li><li><p><code>4、alibaba cloud toolkit</code></p><ul><li><span>远程部署</span></li><li><span>一般本地测试直接部署到本地tomcat，开发环境联调需要部署，可以使用该功能</span></li></ul></li><li><p><code>5、codeglance</code><span> </span></p><ul><li><span>代码概览，类似vscode的右边导览，在文件较长时（看源码）时浏览方便</span></li></ul></li></ul></li><li><h5><a name="常用快捷操作和命令" class="md-header-anchor"></a><span>常用快捷操作和命令</span></h5><ul><li><p><code>1、文本操作</code><span> （常用于数据清洗，批量操作数据或是批量修改代码）</span></p><ul><li><span>扩大/减小选取，ctrl alt up/down</span></li><li><span>多光标，alt shift leftmouse</span></li><li><span>选区转光标，alt shift insert</span></li><li><span>正则替换</span></li></ul></li><li><p><code>2、重构操作</code></p><ul><li><span>change singature 修改方法签名：alt shift c</span></li><li><span>重命名变量/方法：alt shift r</span></li></ul></li></ul></li><li><h5><a name="debug" class="md-header-anchor"></a><span>debug </span></h5><ul><li><p><span>evaluate</span></p></li><li><p><span>watch</span></p></li><li><p><span>remote debug</span></p><ul><li><span>远程连接服务器debug，可以用于开发环境debug使用</span></li></ul></li></ul></li></ul><blockquote><h3><a name="飞书" class="md-header-anchor"></a><span>飞书</span></h3></blockquote><ul><li><p><span>infobot</span></p><ul><li><span>消息推送，webhook直接推送，使用简单</span></li></ul></li><li><p><span>捷径</span></p><ul><li><span>配合infobot可以实现一些个人的快捷功能</span></li></ul></li></ul><blockquote><h3><a name="远程桌面" class="md-header-anchor"></a><span>远程桌面</span></h3></blockquote><ul><li><p><span>teamview</span></p><ul><li><span>免费，一旦检测到商业使用，会限制连接时长，基本无法继续使用</span></li><li><span>稳定，基于P2P或teamview服务器连接</span></li></ul></li><li><p><span>remotedesktop</span></p><ul><li><span>支持多平台客户端</span></li><li><span>配合vpn或是nat使用效果很好，连接质量比teamview高，基本可以达到与使用本机相同的体验</span></li><li><span>使用nat时，一定要做好安全控制</span></li></ul></li></ul><p>&nbsp;</p><h2><a name="常用站点" class="md-header-anchor"></a><span>常用站点</span></h2><h4><a name="内部" class="md-header-anchor"></a><span>内部</span></h4><ul><li><p><a href='http://47.97.67.85:3000/group/87'><span>yapi</span></a></p><ul><li><span>接口文档共享</span></li></ul></li><li><p><a href='http://118.178.190.205/zabbix/zabbix.php?action=dashboard.view'><span>zabbix</span></a></p><ul><li><span>生产服务器运行监控，服务器的cpu、内存、tomcat gc等查看</span></li><li><span>可以查看消息队列的消息长度，用于判断生产消息队列的消费者消费能力</span></li></ul></li><li><p><a href='http://114.55.248.113/login?next=%2F#?_g=()'><span>kibana</span></a></p><ul><li><span>日志检索平台</span></li><li><span>多台服务器部署的应用，日志查询</span></li></ul></li><li><p><a href='http://118.178.137.55:8081/nexus/content/repositories/releases/'><span>nexus</span></a></p><ul><li><span>maven仓库管理</span></li><li><span>可以查询公司目前已有的jar包，常用于内部jar包版本问题排查</span></li></ul></li><li><p><a href='http://118.178.190.205:3000/group/deploy'><span>rocketchat</span></a></p></li><li><p><a href='http://114.55.248.113:8202/main'><span>pinpoint</span></a></p><ul><li><span>APM监控工具</span></li><li><span>慢sql排查，服务性能问题排查，服务调用监控</span></li></ul></li><li><p><a href='http://118.31.104.127:8070/'><span>apollo配置中心</span></a></p><ul><li><span>分布式配置中心</span></li><li><span>一般用于配置信息查询</span></li></ul></li><li><p><a href='http://106.15.251.60:8071/#/service?filter=%2a&amp;pattern=service'><span>dubbo admin</span></a></p><ul><li><span>查看dubbo服务的注册与订阅信息</span></li><li><span>查询对应zk上已经注册的服务</span></li><li><span>服务治理、统计查询、服务mock</span></li></ul></li><li><p><a href='http://47.100.94.134:15672/'><span>rabbitMQ</span></a></p><ul><li><span>rabbitmq管理页面</span></li><li><span>可以操作队列、查询队列消息长度，消息内容，手动发送消息等</span></li></ul></li><li><p><a href='http://47.100.94.134:9000/'><span>jenkins</span></a></p><ul><li><span>部署记录、日志查看；部署操作（dev、fat）</span></li></ul></li><li><p><a href='http://nbs.wayyue.com/mysql-backup-delay.html'><span>备库延迟检测</span></a></p><ul><li><span>生产备库延迟检测</span></li><li><span>有时候更新了生产数据，但发现没有变化，此时可以看一下备库延迟</span></li></ul></li><li><p><a href='https://dataquery.shanzhen.me/login'><span>dataquery</span></a></p><ul><li><span>数据查询平台，需要找俊博注册开通，查询生产备库数据</span></li></ul></li></ul><h4><a name="其他站点" class="md-header-anchor"></a><span>其他站点</span></h4><ul><li><p><span>正则</span></p><ul><li><a href='https://regex101.com/'><span>在线测试</span></a></li><li><a href='https://www.regular-expressions.info/'><span>语法介绍</span></a></li></ul></li><li><p><a href='https://mvnrepository.com/' target='_blank' class='url'>https://mvnrepository.com/</a></p></li><li><p><a href='https://www.codota.com/code' target='_blank' class='url'>https://www.codota.com/code</a></p><ul><li><span>相似代码搜索</span></li></ul></li><li><p><span>数据结构演示</span></p><ul><li><a href='http://ds.fmdca380.com/' target='_blank' class='url'>http://ds.fmdca380.com/</a></li><li><a href='https://www.cs.usfca.edu/~galles/visualization/Algorithms.html' target='_blank' class='url'>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li></ul></li></ul></div>
</body>
</html>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具.html</title>
    <url>/posts/625ce9d3/</url>
    <content><![CDATA[<!doctype html>
<html>
<head>
<meta charset='UTF-8'><meta name='viewport' content='width=device-width initial-scale=1'>
<title>tool</title><style type='text/css'>html {overflow-x: initial !important;}:root { --bg-color:#ffffff; --text-color:#333333; --select-text-bg-color:#B5D6FC; --select-text-font-color:auto; --monospace:"Lucida Console",Consolas,"Courier",monospace; }
html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }
body { margin: 0px; padding: 0px; height: auto; bottom: 0px; top: 0px; left: 0px; right: 0px; font-size: 1rem; line-height: 1.42857; overflow-x: hidden; background: inherit; tab-size: 4; }
iframe { margin: auto; }
a.url { word-break: break-all; }
a:active, a:hover { outline: 0px; }
.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }
#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 40px; }
#write.first-line-indent p { text-indent: 2em; }
#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }
#write.first-line-indent li { margin-left: 2em; }
.for-image #write { padding-left: 8px; padding-right: 8px; }
body.typora-export { padding-left: 30px; padding-right: 30px; }
.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }
.typora-export .task-list-item input { pointer-events: none; }
@media screen and (max-width: 500px) {
  body.typora-export { padding-left: 0px; padding-right: 0px; }
  #write { padding-left: 20px; padding-right: 20px; }
  .CodeMirror-sizer { margin-left: 0px !important; }
  .CodeMirror-gutters { display: none !important; }
}
#write li > figure:last-child { margin-bottom: 0.5rem; }
#write ol, #write ul { position: relative; }
img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }
button, input, select, textarea { color: inherit; font: inherit; }
input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }
*, ::after, ::before { box-sizing: border-box; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }
p { line-height: inherit; }
h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }
p { orphans: 4; }
h1 { font-size: 2rem; }
h2 { font-size: 1.8rem; }
h3 { font-size: 1.6rem; }
h4 { font-size: 1.4rem; }
h5 { font-size: 1.2rem; }
h6 { font-size: 1rem; }
.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }
.hidden { display: none; }
.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }
a { cursor: pointer; }
sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }
sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }
#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }
figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }
figure > table { margin: 0px; }
tr { break-inside: avoid; break-after: auto; }
thead { display: table-header-group; }
table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }
table.md-table td { min-width: 32px; }
.CodeMirror-gutters { border-right: 0px; background-color: inherit; }
.CodeMirror-linenumber { user-select: none; }
.CodeMirror { text-align: left; }
.CodeMirror-placeholder { opacity: 0.3; }
.CodeMirror pre { padding: 0px 4px; }
.CodeMirror-lines { padding: 0px; }
div.hr:focus { cursor: none; }
#write pre { white-space: pre-wrap; }
#write.fences-no-line-wrapping pre { white-space: pre; }
#write pre.ty-contain-cm { white-space: normal; }
.CodeMirror-gutters { margin-right: 4px; }
.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background: inherit; position: relative !important; }
.md-diagram-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }
#write .md-fences.mock-cm { white-space: pre-wrap; }
.md-fences.md-fences-with-lineno { padding-left: 0px; }
#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }
.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }
.CodeMirror-line, twitterwidget { break-inside: avoid; }
.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }
.footnotes + .footnotes { margin-top: 0px; }
.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; background: 0px 0px; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; -webkit-tap-highlight-color: transparent; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; }
li div { padding-top: 0px; }
blockquote { margin: 1rem 0px; }
li .mathjax-block, li p { margin: 0.5rem 0px; }
li { margin: 0px; position: relative; }
blockquote > :last-child { margin-bottom: 0px; }
blockquote > :first-child, li > :first-child { margin-top: 0px; }
.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }
#write .footnote-line { white-space: pre-wrap; }
@media print {
  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }
  #write { margin-top: 0px; padding-top: 0px; border-color: transparent !important; }
  .typora-export * { -webkit-print-color-adjust: exact; }
  html.blink-to-pdf { font-size: 13px; }
  .typora-export #write { break-after: avoid; }
  .typora-export #write::after { height: 0px; }
  .is-mac table { break-inside: avoid; }
}
.footnote-line { margin-top: 0.714em; font-size: 0.7em; }
a img, img a { cursor: pointer; }
pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background: rgb(204, 204, 204); display: block; overflow-x: hidden; }
p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }
#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }
p > .md-image:only-child { display: inline-block; width: 100%; }
#write .MathJax_Display { margin: 0.8em 0px 0px; }
.md-math-block { width: 100%; }
.md-math-block:not(:empty)::after { display: none; }
[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }
.md-task-list-item { position: relative; list-style-type: none; }
.task-list-item.md-task-list-item { padding-left: 0px; }
.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }
.math { font-size: 1rem; }
.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }
.md-toc-content { position: relative; margin-left: 0px; }
.md-toc-content::after, .md-toc::after { display: none; }
.md-toc-item { display: block; color: rgb(65, 131, 196); }
.md-toc-item a { text-decoration: none; }
.md-toc-inner:hover { text-decoration: underline; }
.md-toc-inner { display: inline-block; cursor: pointer; }
.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }
.md-toc-h2 .md-toc-inner { margin-left: 2em; }
.md-toc-h3 .md-toc-inner { margin-left: 4em; }
.md-toc-h4 .md-toc-inner { margin-left: 6em; }
.md-toc-h5 .md-toc-inner { margin-left: 8em; }
.md-toc-h6 .md-toc-inner { margin-left: 10em; }
@media screen and (max-width: 48em) {
  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }
  .md-toc-h4 .md-toc-inner { margin-left: 5em; }
  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }
  .md-toc-h6 .md-toc-inner { margin-left: 8em; }
}
a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }
.footnote-line a:not(.reversefootnote) { color: inherit; }
.md-attr { display: none; }
.md-fn-count::after { content: "."; }
code, pre, samp, tt { font-family: var(--monospace); }
kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }
.md-comment { color: rgb(162, 127, 3); opacity: 0.8; font-family: var(--monospace); }
code { text-align: left; vertical-align: initial; }
a.md-print-anchor { white-space: pre !important; border-width: initial !important; border-style: none !important; border-color: initial !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; background: 0px 0px !important; text-decoration: initial !important; text-shadow: initial !important; }
.md-inline-math .MathJax_SVG .noError { display: none !important; }
.html-for-mac .inline-math-svg .MathJax_SVG { vertical-align: 0.2px; }
.md-math-block .MathJax_SVG_Display { text-align: center; margin: 0px; position: relative; text-indent: 0px; max-width: none; max-height: none; min-height: 0px; min-width: 100%; width: auto; overflow-y: hidden; display: block !important; }
.MathJax_SVG_Display, .md-inline-math .MathJax_SVG_Display { width: auto; margin: inherit; display: inline-block !important; }
.MathJax_SVG .MJX-monospace { font-family: var(--monospace); }
.MathJax_SVG .MJX-sans-serif { font-family: sans-serif; }
.MathJax_SVG { display: inline; font-style: normal; font-weight: 400; line-height: normal; zoom: 90%; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }
.MathJax_SVG * { transition: none 0s ease 0s; }
.MathJax_SVG_Display svg { vertical-align: middle !important; margin-bottom: 0px !important; margin-top: 0px !important; }
.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }
.md-diagram-panel > svg { max-width: 100%; }
[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }
[lang="mermaid"] .node text { font-size: 1rem; }
table tr th { border-bottom: 0px; }
video { max-width: 100%; display: block; margin: 0px auto; }
iframe { max-width: 100%; width: 100%; border: none; }
.highlight td, .highlight tr { border: 0px; }
svg[id^="mermaidChart"] { line-height: 1em; }
mark { background: rgb(255, 255, 0); color: rgb(0, 0, 0); }
.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }
mark .md-meta { color: rgb(0, 0, 0); opacity: 0.3 !important; }
@media print {
  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }
}


/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
/* cyrillic-ext */
/* cyrillic */
/* greek-ext */
/* greek */
/* vietnamese */
/* latin-ext */
/* latin */
@font-face {
    font-family: 'Source Sans Pro';
    font-style: normal;
    font-weight: 600;
    src: local('Source Sans Pro SemiBold'), local('SourceSansPro-SemiBold'), url('file:///C://Users//Shanzhen//AppData//Roaming//Typora/themes/vue/6xKydSBYKcSV-LCoeQqfX1RYOo3i54rwlxdu.woff2') format('woff2');
    unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}@import '';

:root {
    --side-bar-bg-color: #fff;
    --control-text-color: #777;
    --font-sans-serif: 'Ubuntu', 'Source Sans Pro', sans-serif !important;
    --font-monospace: 'Fira Code', 'Roboto Mono', monospace !important;
}

html {
    font-size: 16px;
}

body {
    font-family: var(--font-sans-serif);
    color: #34495e;
    -webkit-font-smoothing: antialiased;
    line-height: 1.6rem;
    letter-spacing: 0;
    margin: 0;
    overflow-x: hidden;
}

#write {
    max-width: 860px;
    margin: 0 auto;
    padding: 20px 30px 100px;
}

#write p {
    line-height: 1.6rem;
    word-spacing: .05rem;
}

#write ol li {
    padding-left: 0.5rem;
}

#write > ul:first-child,
#write > ol:first-child {
    margin-top: 30px;
}

body > *:first-child {
    margin-top: 0 !important;
}

body > *:last-child {
    margin-bottom: 0 !important;
}

a {
    color: #42b983;
    font-weight: 600;
    padding: 0 2px;
    text-decoration: none;
}

h1,
h2,
h3,
h4,
h5,
h6 {
    position: relative;
    margin-top: 1rem;
    margin-bottom: 1rem;
    font-weight: bold;
    line-height: 1.4;
    cursor: text;
}

h1:hover a.anchor,
h2:hover a.anchor,
h3:hover a.anchor,
h4:hover a.anchor,
h5:hover a.anchor,
h6:hover a.anchor {
    text-decoration: none;
}

h1 tt,
h1 code {
    font-size: inherit !important;
}

h2 tt,
h2 code {
    font-size: inherit !important;
}

h3 tt,
h3 code {
    font-size: inherit !important;
}

h4 tt,
h4 code {
    font-size: inherit !important;
}

h5 tt,
h5 code {
    font-size: inherit !important;
}

h6 tt,
h6 code {
    font-size: inherit !important;
}

h2 a,
h3 a {
    color: #34495e;
}

h1 {
    padding-bottom: .4rem;
    font-size: 2.2rem;
    line-height: 1.3;
}

h2 {
    font-size: 1.75rem;
    line-height: 1.225;
    margin: 35px 0 15px;
    padding-bottom: 0.5em;
    border-bottom: 1px solid #ddd;
}

h3 {
    font-size: 1.4rem;
    line-height: 1.43;
    margin: 20px 0 7px;
}

h4 {
    font-size: 1.2rem;
}

h5 {
    font-size: 1rem;
}

h6 {
    font-size: 1rem;
    color: #777;
}

p,
blockquote,
ul,
ol,
dl,
table {
    margin: 0.8em 0;
}

li > ol,
li > ul {
    margin: 0 0;
}

hr {
    height: 2px;
    padding: 0;
    margin: 16px 0;
    background-color: #e7e7e7;
    border: 0 none;
    overflow: hidden;
    box-sizing: content-box;
}

body > h2:first-child {
    margin-top: 0;
    padding-top: 0;
}

body > h1:first-child {
    margin-top: 0;
    padding-top: 0;
}

body > h1:first-child + h2 {
    margin-top: 0;
    padding-top: 0;
}

body > h3:first-child,
body > h4:first-child,
body > h5:first-child,
body > h6:first-child {
    margin-top: 0;
    padding-top: 0;
}

a:first-child h1,
a:first-child h2,
a:first-child h3,
a:first-child h4,
a:first-child h5,
a:first-child h6 {
    margin-top: 0;
    padding-top: 0;
}

h1 p,
h2 p,
h3 p,
h4 p,
h5 p,
h6 p {
    margin-top: 0;
}

li p.first {
    display: inline-block;
}

ul,
ol {
    padding-left: 30px;
}

ul:first-child,
ol:first-child {
    margin-top: 0;
}

ul:last-child,
ol:last-child {
    margin-bottom: 0;
}

blockquote {
    border-left: 4px solid #42b983;
    padding: 10px 15px;
    color: #777;
    background-color: rgba(66, 185, 131, .1);
}

table {
    padding: 0;
    word-break: initial;
}

table tr {
    border-top: 1px solid #dfe2e5;
    margin: 0;
    padding: 0;
}

table tr:nth-child(2n),
thead {
    background-color: #fafafa;
}

table tr th {
    font-weight: bold;
    border: 1px solid #dfe2e5;
    border-bottom: 0;
    text-align: left;
    margin: 0;
    padding: 6px 13px;
}

table tr td {
    border: 1px solid #dfe2e5;
    text-align: left;
    margin: 0;
    padding: 6px 13px;
}

table tr th:first-child,
table tr td:first-child {
    margin-top: 0;
}

table tr th:last-child,
table tr td:last-child {
    margin-bottom: 0;
}

#write strong {
    padding: 0 1px;
}

#write em {
    padding: 0 5px 0 2px;
}

#write table thead th {
    background-color: #f2f2f2;
}

#write .CodeMirror-gutters {
    border-right: none;
}

#write .md-fences {
    border: 1px solid #F4F4F4;
    -webkit-font-smoothing: initial;
    margin: 0.8rem 0 !important;
    padding: 0.3rem 0 !important;
    line-height: 1.43rem;
    background-color: #F8F8F8 !important;
    border-radius: 2px;
    font-family: var(--font-monospace);
    font-size: 0.85rem;
    word-wrap: normal;
}

#write .CodeMirror-wrap .CodeMirror-code pre {
    padding-left: 12px;
}

#write code, tt {
    padding: 2px 4px;
    border-radius: 2px;
    font-family: var(--font-monospace);
    font-size: 0.92rem;
    color: #e96900;
    background-color: #f8f8f8;
}

tt {
    margin: 0 2px;
}

#write .md-footnote {
    background-color: #f8f8f8;
    color: #e96900;
}

/* heighlight. */
#write mark {
    background-color: #EBFFEB;
    border-radius: 2px;
    padding: 2px 4px;
    margin: 0 2px;
    color: #222;
    font-weight: 500;
}

#write del {
    padding: 1px 2px;
}

.cm-s-inner .cm-link,
.cm-s-inner.cm-link {
    color: #22a2c9;
}

.cm-s-inner .cm-string {
    color: #22a2c9;
}

.md-task-list-item > input {
    margin-left: -1.3em;
}

@media print {
    html {
        font-size: 13px;
    }

    table,
    pre {
        page-break-inside: avoid;
    }

    pre {
        word-wrap: break-word;
    }
}

.md-fences {
    background-color: #f8f8f8;
}

#write pre.md-meta-block {
    padding: 1rem;
    font-size: 85%;
    line-height: 1.45;
    background-color: #f7f7f7;
    border: 0;
    border-radius: 3px;
    color: #777777;
    margin-top: 0 !important;
}

.mathjax-block > .code-tooltip {
    bottom: .375rem;
}

#write > h3.md-focus:before {
    left: -1.5625rem;
    top: .375rem;
}

#write > h4.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

#write > h5.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

#write > h6.md-focus:before {
    left: -1.5625rem;
    top: .285714286rem;
}

.md-image > .md-meta {
    border-radius: 3px;
    font-family: var(--font-monospace);
    padding: 2px 0 0 4px;
    font-size: 0.9em;
    color: inherit;
}

.md-tag {
    color: inherit;
}

.md-toc {
    margin-top: 20px;
    padding-bottom: 20px;
}

.sidebar-tabs {
    border-bottom: none;
}

#typora-quick-open {
    border: 1px solid #ddd;
    background-color: #f8f8f8;
}

#typora-quick-open-item {
    background-color: #FAFAFA;
    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;
    border-style: solid;
    border-width: 1px;
}

#md-notification:before {
    top: 10px;
}

/** focus mode */

.on-focus-mode blockquote {
    border-left-color: rgba(85, 85, 85, 0.12);
}

header,
.context-menu,
.megamenu-content,
footer {
    font-family: var(--font-sans-serif);
}

.file-node-content:hover .file-node-icon,
.file-node-content:hover .file-node-open-state {
    visibility: visible;
}

.mac-seamless-mode #typora-sidebar {
    background-color: var(--side-bar-bg-color);
}

.md-lang {
    color: #b4654d;
}

.html-for-mac .context-menu {
    --item-hover-bg-color: #E6F0FE;
}



</style>
</head>
<body class='typora-export os-windows'>
<div id='write'  class=''><h2><a name="软件推荐" class="md-header-anchor"></a><span>软件推荐</span></h2><blockquote><h3><a name="文本编辑软件" class="md-header-anchor"></a><span>文本编辑软件</span></h3></blockquote><ul><li><h4><a name="vscode" class="md-header-anchor"></a><span>vscode</span></h4><ul><li><span>性能较好，资源占用较低，功能强大，社区活跃，性能稳定，插件丰富</span></li></ul></li><li><h4><a name="notepad" class="md-header-anchor"></a><span>notepad++</span></h4><ul><li><span>推荐插件JSTool</span></li><li><span>性能较差，文本行数多时，操作可能会崩溃</span></li></ul></li><li><p><strong><span>Emedit</span></strong></p><ul><li><span>速度快，多文件查找， 正则处理， 各种字符编码转换。</span></li><li><span>大文件处理性能好</span></li></ul></li></ul><blockquote><h3><a name="utools-效率提升工具" class="md-header-anchor"></a><span>utools-效率提升工具</span></h3></blockquote><ul><li><p><span>-- 书签</span></p><ul><li><span>快捷书签打开，支持拼音、url、书签名搜索</span></li><li><span>书签很多的时候很好用</span></li></ul></li><li><p><span>-- jetbrains</span></p><ul><li><span>快捷打开jetbrain的项目</span></li></ul></li><li><p><span>-- find</span></p><ul><li><span>内嵌everything</span></li><li><span>搜索速度很快</span></li></ul></li><li><p><span>-- 网页快开</span></p><ul><li><span>快捷打开某些常用的搜索软件，拼接了查询query，如果百度、google、stackoverflow等</span></li></ul></li><li><p><span>-- 剪切板</span></p><ul><li><span>历史的剪切板内容</span></li></ul></li></ul><blockquote><h3><a name="drawiohttpsappdiagramsnet--流程图绘制" class="md-header-anchor"></a><a href='https://app.diagrams.net/'><span>draw.io</span></a><span>--流程图绘制</span></h3></blockquote><p><span>开源、功能强大、社区活跃。</span></p><p><span>丰富的客户端支持，在线、win、mac</span></p><p><span>支持多种存储方式：云存储、本地、浏览器…</span></p><p><span>备选：processon、visio</span></p><blockquote><h3><a name="blogdocumentnote" class="md-header-anchor"></a><span>blog&amp;document&amp;note</span></h3></blockquote><ul><li><p><span>笔记工具</span></p><ul><li><span>Typora（markdown）</span></li><li><span>onenote</span></li></ul></li><li><p><span>博客系统</span></p><ul><li><a href='https://www.gitbook.com/' target='_blank' class='url'>https://www.gitbook.com/</a></li><li><span>csdn</span></li></ul></li><li><p><span>自建博客</span></p><ul><li><span>halo</span></li><li><em><span>WordPress</span></em></li></ul></li></ul><blockquote><h3><a name="科学上网" class="md-header-anchor"></a><span>科学上网</span></h3></blockquote><h5><a name="sockboomhttpssockboomart" class="md-header-anchor"></a><a href='https://sockboom.art/'><span>sockboom</span></a></h5><p><a href='https://sakura.cat/auth/login'><span>樱猫</span></a></p><blockquote><h3><a name="ftp" class="md-header-anchor"></a><span>ftp</span></h3></blockquote><ul><li><p><span>FileZillaClient</span></p></li><li><p><span>FileZillaServer</span></p><ul><li><span>搭建个人ftp使用，局域网内共享大文件使用</span></li></ul></li></ul><blockquote><h3><a name="redis" class="md-header-anchor"></a><span>redis</span></h3></blockquote><ul><li><p><span>Redis DeskTop</span></p><ul><li><span>redis管理终端，使用简单</span></li></ul></li></ul><blockquote><h3><a name="sql" class="md-header-anchor"></a><span>sql</span></h3></blockquote><ul><li><p><span>navicat/dataGrip/sqlyog</span></p><ul><li><span>常用的sql客户端，常用navicat，支持多种数据库如mongo</span></li></ul></li><li><p><span>PDMan</span></p><ul><li><span>可以建立表之间的逻辑关联关系</span></li><li><span>支持导出建表语句</span></li></ul></li></ul><blockquote><h3><a name="terminal" class="md-header-anchor"></a><span>terminal</span></h3></blockquote><ul><li><p><span>mobaxterm</span></p><ul><li><span>免费</span></li><li><span>直接建立Sftp，方便文件管理</span></li><li><span>性能稍差</span></li></ul></li><li><p><span>xhsell</span></p><ul><li><span>收费，免费版限制较多，限制终端开启数量</span></li></ul></li><li><p><span>Cmder/GitBash</span></p><ul><li><span>windows端的终端</span></li><li><span>直接一些bash指令，模拟linux操作win，比如tail、less等等，比win cmd及powershell稍微好用些</span></li></ul></li></ul><blockquote><h3><a name="onedrive--office" class="md-header-anchor"></a><span>onedrive + office</span></h3></blockquote><ul><li><span>家庭版共享性价比很高，1T云存储</span></li></ul><p>&nbsp;</p><h2><a name="开发办公" class="md-header-anchor"></a><span>开发办公</span></h2><blockquote><h3><a name="idea" class="md-header-anchor"></a><span>idea</span></h3></blockquote><ul><li><h5><a name="破解和注册" class="md-header-anchor"></a><span>破解和注册</span></h5><ul><li><h5><a name="教育邮箱免费注册专业版本jetbrain全家桶）" class="md-header-anchor"></a><span>教育邮箱，免费注册专业版本（jetbrain全家桶）</span></h5></li><li><h5><a name="读书成诗公众号破解补丁" class="md-header-anchor"></a><span>读书成诗公众号，破解补丁</span></h5></li></ul></li><li><h5><a name="插件推荐" class="md-header-anchor"></a><span>插件推荐</span></h5><ul><li><h5><a name="1easycode" class="md-header-anchor"></a><code>1、easycode</code></h5><ul><li><h5><a name="sqlmap模板代码生成插件模板自定义语法较为简单上手容易" class="md-header-anchor"></a><span>sqlmap模板代码生成插件，模板自定义，语法较为简单，上手容易</span></h5></li></ul></li><li><p><code>2、easyyapi</code></p><ul><li><span>接口文档生成插件</span></li><li><span>支持http、dubbo接口</span></li><li><span>可导出至yapi、postman、本地markdown</span></li></ul></li><li><p><code>3、 camelcase</code></p><ul><li><span>大小写转换工具，驼峰、下划线等多种类型切换</span></li><li><span>常用于从数据库中复制的字段转换成驼峰</span></li></ul></li><li><p><code>4、alibaba cloud toolkit</code></p><ul><li><span>远程部署</span></li><li><span>一般本地测试直接部署到本地tomcat，开发环境联调需要部署，可以使用该功能</span></li></ul></li><li><p><code>5、codeglance</code><span> </span></p><ul><li><span>代码概览，类似vscode的右边导览，在文件较长时（看源码）时浏览方便</span></li></ul></li></ul></li><li><h5><a name="常用快捷操作和命令" class="md-header-anchor"></a><span>常用快捷操作和命令</span></h5><ul><li><p><code>1、文本操作</code><span> （常用于数据清洗，批量操作数据或是批量修改代码）</span></p><ul><li><span>扩大/减小选取，ctrl alt up/down</span></li><li><span>多光标，alt shift leftmouse</span></li><li><span>选区转光标，alt shift insert</span></li><li><span>正则替换</span></li></ul></li><li><p><code>2、重构操作</code></p><ul><li><span>change singature 修改方法签名：alt shift c</span></li><li><span>重命名变量/方法：alt shift r</span></li></ul></li></ul></li><li><h5><a name="debug" class="md-header-anchor"></a><span>debug </span></h5><ul><li><p><span>evaluate</span></p></li><li><p><span>watch</span></p></li><li><p><span>remote debug</span></p><ul><li><span>远程连接服务器debug，可以用于开发环境debug使用</span></li></ul></li></ul></li></ul><blockquote><h3><a name="飞书" class="md-header-anchor"></a><span>飞书</span></h3></blockquote><ul><li><p><span>infobot</span></p><ul><li><span>消息推送，webhook直接推送，使用简单</span></li></ul></li><li><p><span>捷径</span></p><ul><li><span>配合infobot可以实现一些个人的快捷功能</span></li></ul></li></ul><blockquote><h3><a name="远程桌面" class="md-header-anchor"></a><span>远程桌面</span></h3></blockquote><ul><li><p><span>teamview</span></p><ul><li><span>免费，一旦检测到商业使用，会限制连接时长，基本无法继续使用</span></li><li><span>稳定，基于P2P或teamview服务器连接</span></li></ul></li><li><p><span>向日葵</span></p><ul><li><span>免费、不会商业检测限制</span></li></ul></li><li><p><span>remotedesktop</span></p><ul><li><span>支持多平台客户端</span></li><li><span>配合vpn或是nat使用效果很好，连接质量比teamview高，基本可以达到与使用本机相同的体验</span></li><li><span>使用nat时，一定要做好安全控制</span></li></ul></li></ul><p>&nbsp;</p><h2><a name="常用站点" class="md-header-anchor"></a><span>常用站点</span></h2><blockquote><h4><a name="内部" class="md-header-anchor"></a><span>内部</span></h4></blockquote><ul><li><p><a href='http://47.97.67.85:3000/group/87'><span>yapi</span></a></p><ul><li><span>接口文档共享</span></li></ul></li><li><p><a href='http://118.178.190.205/zabbix/zabbix.php?action=dashboard.view'><span>zabbix</span></a></p><ul><li><span>生产服务器运行监控，服务器的cpu、内存、tomcat gc等查看</span></li><li><span>可以查看消息队列的消息长度，用于判断生产消息队列的消费者消费能力</span></li></ul></li><li><p><a href='http://114.55.248.113/login?next=%2F#?_g=()'><span>kibana</span></a></p><ul><li><span>日志检索平台</span></li><li><span>多台服务器部署的应用，日志查询</span></li></ul></li><li><p><a href='http://118.178.137.55:8081/nexus/content/repositories/releases/'><span>nexus</span></a></p><ul><li><span>maven仓库管理</span></li><li><span>可以查询公司目前已有的jar包，常用于内部jar包版本问题排查</span></li></ul></li><li><p><a href='http://118.178.190.205:3000/group/deploy'><span>rocketchat</span></a></p></li><li><p><a href='http://114.55.248.113:8202/main'><span>pinpoint</span></a></p><ul><li><span>APM监控工具</span></li><li><span>慢sql排查，服务性能问题排查，服务调用监控</span></li></ul></li><li><p><a href='http://118.31.104.127:8070/'><span>apollo配置中心</span></a></p><ul><li><span>分布式配置中心</span></li><li><span>一般用于配置信息查询</span></li></ul></li><li><p><a href='http://106.15.251.60:8071/#/service?filter=%2a&amp;pattern=service'><span>dubbo admin</span></a></p><ul><li><span>查看dubbo服务的注册与订阅信息</span></li><li><span>查询对应zk上已经注册的服务</span></li><li><span>服务治理、统计查询、服务mock</span></li></ul></li><li><p><a href='http://47.100.94.134:15672/'><span>rabbitMQ</span></a></p><ul><li><span>rabbitmq管理页面</span></li><li><span>可以操作队列、查询队列消息长度，消息内容，手动发送消息等</span></li></ul></li><li><p><a href='http://47.100.94.134:9000/'><span>jenkins</span></a></p><ul><li><span>部署记录、日志查看；部署操作（dev、fat）</span></li></ul></li><li><p><a href='http://nbs.wayyue.com/mysql-backup-delay.html'><span>备库延迟检测</span></a></p><ul><li><span>生产备库延迟检测</span></li><li><span>有时候更新了生产数据，但发现没有变化，此时可以看一下备库延迟</span></li></ul></li><li><p><a href='https://dataquery.shanzhen.me/login'><span>dataquery</span></a></p><ul><li><span>数据查询平台，需要找俊博注册开通，查询生产备库数据</span></li></ul></li></ul><blockquote><h4><a name="其他站点" class="md-header-anchor"></a><span>其他站点</span></h4></blockquote><ul><li><p><span>正则</span></p><ul><li><p><a href='https://regex101.com/'><span>在线测试</span></a></p><ul><li><span>语法解释，匹配展示，其他语法推荐等等</span></li></ul></li></ul></li><li><p><a href='https://www.regular-expressions.info/'><span>语法介绍</span></a></p><ul><li><span>正则教程，特殊语法、不同语言版本的正则实现</span></li></ul></li><li><p><a href='https://mvnrepository.com/'><span>maven</span></a></p><ul><li><span>maven中央仓库，java开发必备</span></li></ul></li><li><p><a href='https://www.codota.com/code'><span>codota</span></a></p><ul><li><span>相似代码搜索</span></li></ul></li><li><p><span>数据结构演示</span></p><ul><li><a href='http://ds.fmdca380.com/' target='_blank' class='url'>http://ds.fmdca380.com/</a></li><li><a href='https://www.cs.usfca.edu/~galles/visualization/Algorithms.html' target='_blank' class='url'>https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a></li></ul></li><li><p><span>算法题目</span></p><ul><li><p><a href='https://leetcode-cn.com/problemset/all/'><span>leetcode</span></a></p><ul><li><span>中文社区，题目多</span></li><li><a href='https://leetcode-cn.com/contest/'><span>每周末周赛</span></a><span>，每日一题</span></li></ul></li><li><p><a href='https://app.codility.com/programmers/lessons/1-iterations/'><span>codility</span></a></p><ul><li><span>复杂度分析</span></li><li><span>题目较少</span></li></ul></li></ul></li></ul></div>
</body>
</html>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>流程图</title>
    <url>/posts/7f59c40c/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[横向流程图]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[方形] --&gt;B(圆角)</span><br><span class="line">    B --&gt; C&#123;条件a&#125;</span><br><span class="line">    C --&gt;|a=1| D[结果1]</span><br><span class="line">    C --&gt;|a=2| E[结果2]</span><br><span class="line">    F[竖向流程图]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>画图</tag>
      </tags>
  </entry>
  <entry>
    <title>精度问题</title>
    <url>/posts/f8e34911/</url>
    <content><![CDATA[<h1 id="Java中float和double中溢值问题和浮点数的储存问题"><a href="#Java中float和double中溢值问题和浮点数的储存问题" class="headerlink" title="Java中float和double中溢值问题和浮点数的储存问题"></a>Java中float和double中溢值问题和浮点数的储存问题</h1><p><img src="https://pic2.zhimg.com/v2-7ccba9dfc4e14a87fb480f8b89f7062c_1440w.jpg?source=172ae18b" alt="Java中float和double中溢值问题和浮点数的储存问题"></p>
<p>记录一下初学Java出现的问题。</p>
<p>以为之前是从Python起步的，最初了解到Java的数据类型有float和double这两个东西，就尝试相加这两个</p>
<p><img src="https://pic3.zhimg.com/80/v2-58d94b038de5826bd6b794c8728b81ea_720w.jpg" alt="img"></p>
<p>这里返回的结果：32.45000076293945</p>
<p>这个返回值看的我一脸懵</p>
<p>要理解这个问题要先知道浮点数在计算机中是以什么形式储存的</p>
<p>首先要知道计算机能懂的只有0和1</p>
<p>每一个0和1都占一个位 bit (比特)(Binary Digits)：存放一位<a href="https://link.zhihu.com/?target=https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a>数，最小的存储单位。</p>
<p>所以，<strong>整数部分：</strong></p>
<p>22 &#x2F; 2 &#x3D; 11 余<strong>0</strong></p>
<p>11 &#x2F; 2 &#x3D; 5 余<strong>1</strong></p>
<p>5 &#x2F; 2 &#x3D; 2 余<strong>1</strong></p>
<p>2 &#x2F; 2 &#x3D; 1 余<strong>0</strong></p>
<p>1 &#x2F; 2 &#x3D; 0 余<strong>1</strong></p>
<p><strong>22的二进制转换就是10110</strong></p>
<p><strong>小数部分：</strong></p>
<p>0.45 * 2 &#x3D; 0.9 0</p>
<p>0.9 * 2 &#x3D; 1.8 1</p>
<p>0.8 * 2 &#x3D; 1.6 1</p>
<p>0.6 * 2 &#x3D; 1.2 1</p>
<p>0.2 * 2 &#x3D; 0.4 0</p>
<p>0.4 * 2 &#x3D; 0.8 0</p>
<p>0.8 * 2 &#x3D; 1.6 1</p>
<p>0.6 * 2 &#x3D; 1.2 1</p>
<p>0.2 * 2 &#x3D; 0.4 0</p>
<p>……</p>
<p>我们可以发现0.45转化成二进制的时候是无限循环的</p>
<p>二进制转换完成，<strong>22.45 –&gt; 10110.011100110……</strong></p>
<p>得到这个二进制浮点数之后，计算机是怎么把他表示为没有小数点的字符呢？</p>
<p>就要用到小学学过的<strong>科学记数法</strong>：</p>
<p>10110.011100110可以写为</p>
<p>1.0110011100110 <img src="https://www.zhihu.com/equation?tex=%5Ctimes" alt="[公式]"> <img src="https://www.zhihu.com/equation?tex=2%5E%7B4%7D" alt="[公式]"></p>
<p>过程中我们发现，小数的转换有可能会产生无限循环的情况，想要做的最精确的记录22.45，计算机需要无限大的空间来记录</p>
<p>那么<strong>IEEE754标准</strong>就规定：</p>
<p><strong>32位单精度</strong>（java中的<strong>float</strong>），使用32位（bit）来存储</p>
<p><strong>64位双精度</strong>（<strong>double</strong>）， 使用64位储存</p>
<p>那采用什么样的格式呢</p>
<p>|S| Exp | Fraction |</p>
<p>+-+——–+———————–+</p>
<p><strong>S</strong>：符号位（正0负1）</p>
<p><strong>EXP</strong>：指数位</p>
<p><strong>Fraction</strong>：有效数字</p>
<p><img src="https://pic4.zhimg.com/80/v2-75dac8cba2a0c6f341a23f320ef80eeb_720w.jpg" alt="img"></p>
<p>单精度(<strong>float</strong>)就是</p>
<p>|1(bit)| 8(bit) | 23(bit) |</p>
<p>+-+——–+———————–+</p>
<p>双精度(<strong>double</strong>)</p>
<p>|1(bit)| 11(bit) | 52(bit) |</p>
<p>+-+——–+———————–+</p>
<p>以22.45为例：</p>
<p>1.0110011100110 <img src="https://www.zhihu.com/equation?tex=%5Ctimes" alt="[公式]"><img src="https://www.zhihu.com/equation?tex=2%5E%7B4%7D" alt="[公式]">(二进制科学记数)</p>
<p><strong>S</strong> &#x3D; <strong>0</strong></p>
<p><strong>EXP</strong> &#x3D; 4+127 &#x3D;131 –&gt; <strong>10000011</strong></p>
<p>这里为什么是131而不是直接的4呢？</p>
<p>0000 0000八个位来表示指数，最大值就是1111 1111 –&gt; 十进制就是 255</p>
<p>指数会有正负数两种情况，所以分两半，255 &#x2F; 2 &#x3D; 127.5</p>
<p>0~127用于负数</p>
<p>127~255用于正数</p>
<p>127相当于一个指数是0，所以表示正指数就 + 同理 -</p>
<p><strong>Fraction</strong> &#x3D; 0110011100110(这里只有13(bit))</p>
<p>&#x3D; <strong>01100111001100110011010</strong>(接着算了10(bit)补齐23(bit))</p>
<p>所以22.45在计算机里就是 <strong>S</strong>+<strong>EXP</strong>+<strong>Fraction &#x3D; 01000001101100111001100110011010</strong></p>
<p>同理<strong>双精度（double）</strong>有64位来记录</p>
<p><img src="https://pic2.zhimg.com/80/v2-7578d5eb4ea4b7ccd4a6ad8b3041026d_720w.jpg" alt="img"></p>
<p>System.<em>out</em>.println(Integer.<em>toBinaryString</em>(Float.<em>floatToIntBits</em>(x)));</p>
<p>这行代码可以查看22.45的二进位表达</p>
<p><img src="https://pic4.zhimg.com/80/v2-37d1b25e2fcb6f6744a15d16ce403347_720w.jpg" alt="img"></p>
<p>为什么没有0，因为01 跟1是一样的，所以0就不会显示了</p>
<p><strong>这是-22.45</strong></p>
<p><img src="https://pic3.zhimg.com/80/v2-2f0ea9b5de4996dfe41721c33fec509a_720w.jpg" alt="img"></p>
<p>&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</p>
<p>了解了IEEE二进位浮点数，知道了float和double记录的浮点<strong>精确度</strong>不一样我们再看一下问题。</p>
<p><img src="https://pic3.zhimg.com/80/v2-09cf00e6b2661928de9a33d34cc584ea_720w.jpg" alt="img"></p>
<p>从输出的结果看 32.45000076293945 是一个double类型，精确的表示了小数点后14位</p>
<p><strong>所以float + double 是从float赋值到double</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-ac85c685344dcc6c42ab80c54c98e3fd_720w.jpg" alt="img"></p>
<p>输出结果：22.450000762939453</p>
<p>可是如果float(单精度)赋值到double(双精度)出现精度丢失可以理解，但是会什么会溢值呢？</p>
<p>我们可以从二进制推回十进制来看一看</p>
<p>0 | 10000011 | 01100111001100110011010</p>
<p>正| 指数&#x3D;4 |有效数字</p>
<p>1.01100111001100110011010 <img src="https://www.zhihu.com/equation?tex=%5Ctimes" alt="[公式]"><img src="https://www.zhihu.com/equation?tex=2%5E%7B4%7D" alt="[公式]"> &#x3D; 10110.<strong>0111001100110011010</strong></p>
<p>后面这个<strong>0.0111001100110011010</strong>表示小数位</p>
<p>我们可以通过把<strong>0.0111001100110011010</strong>换成十进制来看看</p>
<p>小数的二进制到十进制的方法是</p>
<p>从小数点后依次乘以2的负一次方，2的负二次方，2的负三次方等</p>
<p>0.0111001100110011010</p>
<p><img src="https://www.zhihu.com/equation?tex=0%5Ctimes+2%5E%7B-1%7D+++1%5Ctimes+2%5E%7B-2%7D+++1%5Ctimes+2%5E%7B-3%7D+..." alt="[公式]"></p>
<p>可以直接用python一算</p>
<p><img src="https://pic4.zhimg.com/80/v2-a0e98538e9455550d26ca6aabfaccf87_720w.jpg" alt="img"></p>
<p>同这个结果，我们可以看出，由于<strong>float单精度只能选取 无限循环的二进制小数的23位</strong></p>
<p><strong>导致了十进制浮点数在存储时的不够精准</strong></p>
<p><strong>当我们把已经储存好的32二进制格式转换成64位时</strong></p>
<p><img src="https://pic2.zhimg.com/80/v2-4ab767461ea0bd9250e47357d4c81531_720w.jpg" alt="img"></p>
<p>输出结果：</p>
<p><img src="https://pic4.zhimg.com/80/v2-6561f67dbd731bf7ad0e8fc8f58bb573_720w.jpg" alt="img"></p>
<p><strong>可以看出Java并没有重新计算小数点后的更多位， 而是用0来补位</strong></p>
<p>所以转换成double后，之前<strong>float没有精确到的位数就会显示出来。</strong></p>
<p>要解决这个问题就需要使用java.math中提供的API类BigDecimal</p>
<p>注：（BigDecimal用String 或Integer 初始化，double初始化会有舍入精度问题）</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>理解</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池</title>
    <url>/posts/de7c53fe/</url>
    <content><![CDATA[<h1 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h1><p>ThreadPool源码学习<br>zodiac ·2020-12-10 ·20 次阅读</p>
<p>ThreadPoolExecutor<br>jdk1.5在juc包里提供了方便快捷的线程池api，并提供了基于工厂模式的Executors工具类用于快捷创建线程池，在实际开发过程中，需要使用线程池时，应当优先考虑使用Executors</p>
<p>1、类继承关系</p>
<p>Executor为顶级接口，其主要目标是将任务、任务的提交与任务的执行解耦</p>
<p>ExecutorService接口则定义了正常的线程池应该有的功能与行为，诸如任务提交，异步执行等等</p>
<p>ScheduledExecutorService接口则定义了一些定时的特性</p>
<p>2、Executor<br>Executor执行提交的任务（Runnable），该接口提供了一种将任务提交与任务执行（包括执行细节：线程、定时等）解耦的途径。</p>
<p>通过Executor包装的线程（Thread）对象，避免直接使用Thread对象来执行任务，可以有效将线程信息屏蔽，避免直接对线程的操作。</p>
<p>Executor本身并不强制要求执行的任务必须是异步执行</p>
<p>用于执行任务的执行器，而Runnable则表示可以用于执行的任务。</p>
<p>&#x2F;**</p>
<ul>
<li>在未来某个时刻执行给定的指令，命令可以在新的线程中、线程池或调用线程中执行</li>
<li>实际情况取决于Executor的实现</li>
</ul>
<p> *&#x2F;<br>void execute(Runnable command);<br>3、ExecutorService<br>能够管理任务终止、能够产生追踪一个或多个异步任务处理进度的Future的执行器（Executor）</p>
<p>接口的核心定义：</p>
<p>提交任务</p>
<p><T> Future<T> submit(Callable<T> task);<br><T> Future<T> submit(Runnable task, T result);<br>Future&lt;?&gt; submit(Runnable task);<br>第一种提交Callable<T> task类型的任务较好理解，任务完成时会将task的结果放至Future中。</p>
<p>第二种方式，Runnable task和 T result作为参数，实际上内部通过包装将入参result作为返回值与Runnable task一同包装为一个Callable，最后任务完成时将Callable结果放至Future中。因此通过这种方式，入参result，返回结果则是可能在任务中被修改的result。</p>
<p>AbstractExecutorService</p>
<p>public Future&lt;?&gt; submit(Runnable task) {<br>    if (task &#x3D;&#x3D; null) throw new NullPointerException();<br>    RunnableFuture<Void> ftask &#x3D; newTaskFor(task, null);&#x2F;&#x2F;生成一个RunnableFuture作为任务<br>    execute(ftask);<br>    return ftask;<br>}</p>
<p>&#x2F;&#x2F;异步任务的抽象，内部封装了实际的任务、任务状态、真正的执行线程以及等待任务完成的线程等细节<br>&#x2F;&#x2F;实际上是调用FutureTask.run()的线程被阻塞，作为真正的执行线程<br>protected <T> RunnableFuture<T> newTaskFor(Runnable runnable, T value) {<br>    return new FutureTask<T>(runnable, value);&#x2F;&#x2F;创建FutureTask<br>}<br>FutureTask</p>
<p>public FutureTask(Runnable runnable, V result) {<br>    this.callable &#x3D; Executors.callable(runnable, result);&#x2F;&#x2F;将Runnable适配为Callable<br>    this.state &#x3D; NEW;       &#x2F;&#x2F; ensure visibility of callable<br>}<br>Tips：</p>
<p>FutureTask里有很多特性（比如对等待任务完成的线程进行阻塞，任务完成后对等待线程的唤醒，防止任务被并发调用等等）都可以使用AbstractQueuedSynchronizer，但在JDK1.8中的源码却没有发现AQS的痕迹，想想这是为何？</p>
<p>早期FutureTask确实是使用AQS实现，后续修改为了目前的样子（很多通过内存直接修改对象的操作，Unsafe类），核心是为了性能。这一部分可以再单独深入看看</p>
<p>Executors.RunnableAdapter</p>
<p>&#x2F;&#x2F;简单的适配，将Runnable包装为Callable<br>static final class RunnableAdapter<T> implements Callable<T> {<br>    final Runnable task;<br>    final T result;<br>    RunnableAdapter(Runnable task, T result) {<br>        this.task &#x3D; task;<br>        this.result &#x3D; result;<br>    }<br>    public T call() {<br>        task.run();<br>        return result;<br>    }<br>}<br>第三种方式，与第二种类似，会创一个result 为 null的Runnable适配器。</p>
<p>异步执行任务</p>
<p>通过任务提交、invokeAny、invokeAll</p>
<p>等待任一&#x2F;全部任务执行完成</p>
<p>invokeAny()<br>一次性提交批量任务，有任一任务完成时返回该任务的处理结果，调用线程阻塞。</p>
<p>private <T> T doInvokeAny(Collection&lt;? extends Callable<T>&gt; tasks,<br>                              boolean timed, long nanos)<br>            throws InterruptedException, ExecutionException, TimeoutException {<br>    if (tasks &#x3D;&#x3D; null)<br>        throw new NullPointerException();<br>    int ntasks &#x3D; tasks.size();<br>    if (ntasks &#x3D;&#x3D; 0)<br>        throw new IllegalArgumentException();<br>    ArrayList&lt;Future<T>&gt; futures &#x3D; new ArrayList&lt;Future<T>&gt;(ntasks);<br>    ExecutorCompletionService<T> ecs &#x3D;<br>        new ExecutorCompletionService<T>(this);&#x2F;&#x2F;Wrapper或Decorator模式（组合模式？？），增强了对已完成任务的管理能力</p>
<pre><code>try &#123;
    ExecutionException ee = null;
    final long deadline = timed ? System.nanoTime() + nanos : 0L;
    Iterator&lt;? extends Callable&lt;T&gt;&gt; it = tasks.iterator();
    //1、提交第一个任务
    futures.add(ecs.submit(it.next()));
    --ntasks;
    int active = 1;
    for (; ; ) &#123;
        //2、判断任务是否完成
        Future&lt;T&gt; f = ecs.poll();
        if (f == null) &#123;
            //3、没有完成，且还有任务可以提交时，继续提交
            if (ntasks &gt; 0) &#123;
                --ntasks;
                futures.add(ecs.submit(it.next()));
                ++active;
            &#125; else if (active == 0)//4、没有完成、没有任务可以提交、无处理中任务跳出
                break;
            else if (timed) &#123;//5、无任务提交，任务在处理中时，设置等待任务完成
                f = ecs.poll(nanos, TimeUnit.NANOSECONDS);
                if (f == null)
                    throw new TimeoutException();
                nanos = deadline - System.nanoTime();
            &#125; else//6、无限期阻塞，等待完成任务的队列有完成任务可以获得
                f = ecs.take();
        &#125;
        if (f != null) &#123;//7、获取到完成任务
            --active;
            try &#123;
                return f.get();//8、返回完成任务的结果
            &#125; catch (ExecutionException eex) &#123;
                ee = eex;
            &#125; catch (RuntimeException rex) &#123;
                ee = new ExecutionException(rex);
            &#125;
        &#125;
    &#125;
 
    if (ee == null)
        ee = new ExecutionException();
    throw ee;
&#125; finally &#123;//9、最终取消所有任务
    for (int i = 0, size = futures.size(); i &lt; size; i++)
        futures.get(i).cancel(true);//FutureTask.cancel()只有当未NEW状态才会取消
&#125;
</code></pre>
<p>}<br>invokeAll<br>如果无超时时间（较为简单）</p>
<p> 则遍历FutureTask，通过FutureTask.get()方法阻塞调用线程即可。</p>
<p>如果存在超时时间</p>
<p> 遍历FutureTask，每提交一次任务检查一次是否超时。任务提交完成后，遍历未结束Future，调用Future.get(timeout)，最终返回结果，任务清理。</p>
<p>public <T> List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks,<br>                                         long timeout, TimeUnit unit)<br>    throws InterruptedException {<br>    if (tasks &#x3D;&#x3D; null)<br>        throw new NullPointerException();<br>    long nanos &#x3D; unit.toNanos(timeout);<br>    ArrayList&lt;Future<T>&gt; futures &#x3D; new ArrayList&lt;Future<T>&gt;(tasks.size());<br>    boolean done &#x3D; false;<br>    try {<br>        for (Callable<T> t : tasks)<br>            futures.add(newTaskFor(t));</p>
<pre><code>    final long deadline = System.nanoTime() + nanos;
    final int size = futures.size();
 
    // Interleave time checks and calls to execute in case
    // executor doesn&#39;t have any/much parallelism.
    for (int i = 0; i &lt; size; i++) &#123;
        execute((Runnable)futures.get(i));//执行任务，executor不保证异步执行
        nanos = deadline - System.nanoTime();//检测超时时间
        if (nanos &lt;= 0L)
            return futures;//超时间内未提交的任务，不会再被执行
    &#125;
 
    for (int i = 0; i &lt; size; i++) &#123;
        Future&lt;T&gt; f = futures.get(i);
        if (!f.isDone()) &#123;//未完成future
            if (nanos &lt;= 0L)//阻塞前先判断一次是否超时
                return futures;
            try &#123;
                f.get(nanos, TimeUnit.NANOSECONDS);//超时时间内获取
            &#125; catch (CancellationException ignore) &#123;
            &#125; catch (ExecutionException ignore) &#123;
            &#125; catch (TimeoutException toe) &#123;
                return futures;
            &#125;
            nanos = deadline - System.nanoTime();//更新超时时间
        &#125;
    &#125;
    done = true;
    return futures;
&#125; finally &#123;
    if (!done)
        for (int i = 0, size = futures.size(); i &lt; size; i++)
            futures.get(i).cancel(true);//最终未完成的任务，不会再被执行
&#125;
</code></pre>
<p>}<br>终止任务提交</p>
<p>shutdown()</p>
<p>已提交的任务，仍将被执行，但新的任务不再被接收。如果已经被shutdown，再次调用无影响</p>
<p>终止任务执行</p>
<p>List<Runnable> shutdownNow();</p>
<p>立即尝试停止所有正在执行的任务，返回等待执行的任务，不会等待正在执行的任务终结。</p>
<p>该方法会尝试尽最大努力终结执行中的任务，但无法保证正在执行的任务被终结，因此，如果有任务终结失败，该任务也许永远无法被终止。</p>
<p>等待执行器进入终止状态</p>
<p>boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException;</p>
<p>当调用了showdown()后，在超时间内、调用线程被中断前阻塞调用线程等待已提交任务完成。</p>
<p>4、AbstractExecutorService<br>通过模板模式的设计模式，对ExecutorService接口中定义的某些方法，进行了通用实现。</p>
<p>public Future&lt;?&gt; submit(Runnable task){…}<br>public <T> Future<T> submit(Runnable task, T result) {…}<br>public <T> Future<T> submit(Callable<T> task) {…}</p>
<p>public <T> T invokeAny(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException, ExecutionException {…}<br>public <T> List&lt;Future<T>&gt; invokeAll(Collection&lt;? extends Callable<T>&gt; tasks) throws InterruptedException {…}<br>submit(…)：</p>
<p>主要逻辑：</p>
<p>1、包装Callable、Runnable、result为RunnableFuture（实际默认实现是FutureTask，适配Runable接口）</p>
<p>2、调用实现类execute()方法执行RunnableFuture</p>
<p>invokeAny(…)</p>
<p>invokeAll(…)</p>
<p>上述方法的具体源码可以参见ExecutorService部分</p>
<p>5、ThreadPoolExecutor<br>虽然AbstractExecutorService进行了一些通用实现，但诸如execute()、shutdown()等依赖实际执行路径与执行器内部状态的方法并未被实现，因此这些方法的实现逻辑将是对Executor进行区分的重要因素。</p>
<p>ThreadPoolExecutor直译为线程池执行器，该类通过维护内线程池，最大程度复用线程，减少线程创建、销毁与维护的开销，提高任务的执行效率。通常会作为系统的一个异步处理模块出现，最大程度降低系统对硬件资源的占用。同时也提供了友善的api，通过对线程池核心参数的设计，可以设计出不同类型的线程池，扩展线程池的可应用场景。</p>
<p>基础概念<br>包含线程控制状态、作业队列、工人（worker）、工人集合（worker set）、工人数量（worker count）、终止条件、线程工厂、任务拒绝处理器、核心池大小、最大池大小等等</p>
<p>控制状态、工人数量</p>
<p>控制状态：</p>
<p>标记了执行器的生命周期，记录线程池的当前状态，分为RUNNING、SHUTDOWN、STOP、TIDYING、TERMINATED，主要是为了实现shutdown()等涉及到执行器状态的方法，如果不存在控制状态，则无法实现类似：拒绝新任务的添加、终结执行器等功能。</p>
<p>阶段    说明    状态转换<br>RUNING    任务执行中，此时可以接收新的任务    SHUTDOWN：调用shutdown()<br>STOP：调用shutdownNow()<br>SHUTDOWN    任务执行中，但不再接收新的任务    STOP：调用shutdownNow()<br>TIDYING：任务完成、线程池清空<br>STOP    执行中的任务将被终止，且不再接收新的任务，不再继续处理任务    TIDYING：线程池清空<br>TIDYING    整理阶段，主要是回收资源与收尾工作。所有的任务已经结束，工人数量为0（线程已经完成回收），在该阶段对应线程将调用钩子函数terminated()告知子类即将要终结    TERMINATED：terminated()执行后<br>TERMINATED    terminated()完成<br>ThreadPoolExecutor实现中将线程池状态与工人数量整合到一个Integer内，为了保证并发安全，Integer使用AtomicInteger。控制状态一共5种，在设计中通过保证各个状态在状态空间中的有序，直接使用数值的方式判断当前状态。</p>
<p>工人数量（workerCount）：</p>
<p>记录当前线程池中的有效线程数量，主要用于状态变更、判断是否需要新增线程、线程数量是否已达设定值等。</p>
<p>状态字段：</p>
<p>private final AtomicInteger ctl &#x3D; new AtomicInteger(ctlOf(RUNNING, 0));<br>private static final int COUNT_BITS &#x3D; Integer.SIZE - 3;&#x2F;&#x2F;29<br>private static final int CAPACITY   &#x3D; (1 &lt;&lt; COUNT_BITS) - 1;&#x2F;&#x2F;0001111111111…</p>
<p>&#x2F;&#x2F; runState is stored in the high-order bits<br>private static final int RUNNING    &#x3D; -1 &lt;&lt; COUNT_BITS;&#x2F;&#x2F;RUNING状态下，ctl&lt;0<br>private static final int SHUTDOWN   &#x3D;  0 &lt;&lt; COUNT_BITS;&#x2F;&#x2F;SHUTDOWN状态下，当workercount&#x3D;0时，ctl&#x3D;0<br>private static final int STOP       &#x3D;  1 &lt;&lt; COUNT_BITS;<br>private static final int TIDYING    &#x3D;  2 &lt;&lt; COUNT_BITS;<br>private static final int TERMINATED &#x3D;  3 &lt;&lt; COUNT_BITS;</p>
<p>&#x2F;&#x2F; Packing and unpacking ctl<br>private static int runStateOf(int c)     { return c &amp; ~CAPACITY; }&#x2F;&#x2F;取高三位的结果<br>private static int workerCountOf(int c)  { return c &amp; CAPACITY; }&#x2F;&#x2F;低位即wokerCount<br>private static int ctlOf(int rs, int wc) { return rs | wc; }<br>作业队列(workQueue)-BlockingQueue</p>
<p>用于保存待处理任务并将任务移交给工作线程。声明类型为阻塞队列（BlockingQueue）</p>
<p>不要求poll()返回null时代表队列为空（isEmpty），在决定是否进行线程池状态转移时（比如由SHUTDOWN转移为TIDYING需要判断任务队列是否为空）使用isEmpty判断队列是否为空。这种设计就可以让workQueue使用一些特殊设计的队列，比如延迟队列（DelayQueue，即便poll()为null，但延迟一段时间后可以返回non-null，即无法通过poll()是否为null判断队列是否为空），ThreadPoolExecutor通过isEmpty而非poll() &#x3D;&#x3D; null 的方式判断队列是否为空，能够对工作队列的实现类型更加包容。</p>
<p>ThreadPoolExecutor并没有为BlokingQueue提供默认实现（声明时没有指定实例，且所有的构造方法没有为其提供默认实现），但使用Executors创建ThreadPoolExecutors时默认会使用LinkedBlockedQueue作为默认实现。</p>
<p>关于阻塞队列（BlockingQueue）</p>
<p>合适的阻塞队列，当队列空时会阻塞消费者，队列满时阻塞生产者。</p>
<p>如果不适用阻塞队列，可以使用线程安全队列+标志锁实现~（但自己实现的方式可能会存在很多细节问题，有空可以把这个细节深入研究一下）</p>
<p>工人（worker）</p>
<p>保存了所有在线程池中的工作线程的集合</p>
<p>private final HashSet<Worker> workers &#x3D; new HashSet<Worker>();<br>该声明并未使用线程安全的Set类，而是使用了最为简单的HashSet，因此其内部要求，任何对该集合的访问都需要获取private final ReentrantLock mainLock &#x3D; new ReentrantLock();的锁权限。</p>
<p>Worker类属于ThreadPoolExecutor的私有内部类，因此只有ThreadPoolExecutor能够创建该类的实例，作为内部类，该类的实例能够直接访问ThreadPoolExecutor的属性与方法。</p>
<p>Woker源码：</p>
<p>private final class Worker extends AbstractQueuedSynchronizer implements Runnable {<br>    &#x2F;&#x2F;通过ThreadPoolExecutor内的ThreadFactory生成的执行线程<br>    &#x2F;&#x2F;woker持有该thread，主要是为了保证可以获取到是哪个线程是该woker的运行线程<br>    final Thread thread;<br>    &#x2F;&#x2F;该woker的第一个任务，可能为null<br>    Runnable firstTask;<br>    &#x2F;&#x2F;该woker完成的任务总量<br>    volatile long completedTasks;</p>
<pre><code>//AQS中state标志位，0：无锁状态，1：被持有锁状态，&gt;=0：可被中断状态
Worker(Runnable firstTask) &#123;
    setState(-1); // 禁止中断该worker
    this.firstTask = firstTask;
    this.thread = getThreadFactory().newThread(this);//worker也是runnable，将worker作为其执行线程的target，当其执行线程start()时，JVM会调用worker.run()
&#125;
 
//该方法表明woker是个Runnable，当其执行线程start时，会调用该方法
public void run() &#123;
    runWorker(this);//将自己作为参数，运行自己
&#125;
 
protected boolean isHeldExclusively() &#123;
    return getState() != 0;
&#125;
 
protected boolean tryAcquire(int unused) &#123;
    if (compareAndSetState(0, 1)) &#123;
        setExclusiveOwnerThread(Thread.currentThread());
        return true;
    &#125;
    return false;
&#125;
 
protected boolean tryRelease(int unused) &#123;
    setExclusiveOwnerThread(null);
    setState(0);
    return true;
&#125;
 
public void lock() &#123;
    acquire(1);
&#125;
 
public boolean tryLock() &#123;
    return tryAcquire(1);
&#125;
 
public void unlock() &#123;
    release(1);
&#125;
 
public boolean isLocked() &#123;
    return isHeldExclusively();
&#125;
 
//仅当woker线程运行时，允许中断
void interruptIfStarted() &#123;
    Thread t;
    //getState() &gt;= 0 通过判断state是否大于0，初始情况下state=-1
    //当state &lt; 0，即state = -1时，其执行线程尚未start，因此无需中断其执行线程
    //并不要求获取了woker的锁
    if (getState() &gt;= 0 &amp;&amp; (t = thread) != null &amp;&amp; !t.isInterrupted()) &#123;
        try &#123;
            t.interrupt();//中断执行线程
        &#125; catch (SecurityException ignore) &#123;
        &#125;
    &#125;
&#125;
</code></pre>
<p>}<br>ThreadPoolExecutor.runWoker()</p>
<p>final void runWorker(ThreadPoolExecutor.Worker w) {<br>    &#x2F;&#x2F;runWoker（）方法只会被Woker.run()调用，而Woker.run()只会在其执行线程start后由jvm调用，因此runWoker（）必定只会被对应Worker的执行线程调用<br>    Thread wt &#x3D; Thread.currentThread();&#x2F;&#x2F;所以这里当前线程就是w.thread，也就是woker的执行线程<br>    Runnable task &#x3D; w.firstTask;<br>    w.firstTask &#x3D; null;<br>    w.unlock();&#x2F;&#x2F;此时woker的执行线程已经启动，允许外部进行中断，因此将woker的state置为0<br>    boolean completedAbruptly &#x3D; true;<br>    try {<br>        &#x2F;&#x2F;getTask()重点，内部其实是从任务队列里获取任务，包含了线程阻塞、挂起、淘汰等一系列逻辑<br>        &#x2F;&#x2F;正常情况下就是该线程不断从任务队列里取任务<br>        while (task !&#x3D; null || (task &#x3D; getTask()) !&#x3D; null) {<br>            &#x2F;&#x2F;这里的这个lock很有意思<br>            &#x2F;&#x2F;如果仅仅是执行线程执行任务的话，其实执行线程获取woker锁并无太大意义，一方面是因为该方法(runWoker(…))只会运行在执行线程中，不可能有并发情况，另一方面woker本身没有可以共享的资源（这个地方可以再考虑一下：获取的任务、本身执行的线程是否算可共享资源呢），没必要获取这个锁，但这个地方有个隐藏逻辑，就是一旦woker在执行任务，则woker必定是被其执行线程锁住的，因此通过woker锁的状态可以判断woker是否在执行任务。当外部线程想要让worker正常执行完任务，然后再停止woker时，就必须获取该woker的锁，如此就能够保证woker当前正在执行的任务被正常完成<br>            w.lock();<br>            &#x2F;&#x2F;简短的代码，逻辑复杂，具体分析参见“Worker检测ThreadPoolExecutor是否Stoping及线程状态机制”<br>            if ((runStateAtLeast(ctl.get(), STOP) ||<br>                    (Thread.interrupted() &amp;&amp;<br>                            runStateAtLeast(ctl.get(), STOP))) &amp;&amp;<br>                    !wt.isInterrupted())<br>                wt.interrupt();<br>            try {<br>                beforeExecute(wt, task);&#x2F;&#x2F;单个任务执行之前的钩子函数<br>                Throwable thrown &#x3D; null;<br>                try {<br>                    task.run();&#x2F;&#x2F;真正的执行任务<br>                } catch (RuntimeException x) {<br>                    thrown &#x3D; x;<br>                    throw x;<br>                } catch (Error x) {<br>                    thrown &#x3D; x;<br>                    throw x;<br>                } catch (Throwable x) {<br>                    thrown &#x3D; x;<br>                    throw new Error(x);<br>                } finally {<br>                    afterExecute(task, thrown);&#x2F;&#x2F;任务执行之后的钩子函数<br>                }<br>            } finally {<br>                task &#x3D; null;<br>                w.completedTasks++;&#x2F;&#x2F;完成任务计数<br>                w.unlock();&#x2F;&#x2F;释放锁，表明当前worker已经完成某个任务的执行<br>            }<br>        }<br>        completedAbruptly &#x3D; false;&#x2F;&#x2F;表明线程正常执行完任务，如果为true，则说明执行形成可能中途被中断，或是用户任务发生了异常<br>    } finally {<br>        &#x2F;* *处理将要结束的worker的收尾工作。<br>        * 1、将当前worker从workerSet中移除<br>        * 2、尝试将线程池过度为Terminated状态<br>        * 3、在线程池仍然需要执行任务的状态下（RUNING、SHUTDOWN），判断是否需要添加新的worker至线程池，添加条件为：1）当前worker为突然终止；2）当前线程池的线程数量小于最小需求线程数量<br>        * 4、走到这行代码一般有两种场景：1）无任务可做，且不会有新任务来了；2）用户任务执行期间发生了异常<br>        *&#x2F;<br>        processWorkerExit(w, completedAbruptly);<br>    }<br>}<br>Worker检测ThreadPoolExecutor是否Stoping及线程状态机制</p>
<p>1、如果ThreadPool处于Stop、Tidying或Terminated，且当前线程未被中断，则中断当前线程；2、如果处理Runing、Shutdown状态，则清除当前中断标志位，返回之前的中断标志，如果之前是中断的，且ThreadPool状态变为了Stop、Tidying或Terminated，则再次中断执行线程；3、这段逻辑保证了：如果当前ThreadPoolExecutor处于RUNING、SHUTDOWN，则中断标志位被清除；否则，直接中断执行线程。4、进一步思考：如果不这样实现会有什么问题？</p>
<p>下图为实际的判断逻辑，如果没有红框部分逻辑，则之前的清除中断标志位可能会导致在箭头处插入的ShutdownNow事件被忽略。</p>
<p>处理woker结束的工作</p>
<p>private void processWorkerExit(Worker w, boolean completedAbruptly) {<br>    if (completedAbruptly) &#x2F;&#x2F; If abrupt, then workerCount wasn’t adjusted<br>        &#x2F;&#x2F;正常结束不需要再去减少workerCount，原因是在getTask()的地方已经预先减过了<br>        decrementWorkerCount();</p>
<pre><code>final ReentrantLock mainLock = this.mainLock;
mainLock.lock();
try &#123;
    completedTaskCount += w.completedTasks;
    workers.remove(w);
&#125; finally &#123;
    mainLock.unlock();
&#125;
 
tryTerminate();
 
int c = ctl.get();
if (runStateLessThan(c, STOP)) &#123;
    if (!completedAbruptly) &#123;
        int min = allowCoreThreadTimeOut ? 0 : corePoolSize;
        if (min == 0 &amp;&amp; ! workQueue.isEmpty())
            min = 1;
        if (workerCountOf(c) &gt;= min)
            return; // replacement not needed
    &#125;
    addWorker(null, false);
&#125;
</code></pre>
<p>}<br>线程池里的线程创建与销毁</p>
<p>失效场景：1、空闲worker（当前worker数量超过corePoolSize，且线程keepAliveTime时间内未获取到任务，这也是线程池控制worker超时失效的机制）；2、用户程序异常；3、任务完全处理完成</p>
<p>线程池在处理失效线程时，如果仍然需要增加线程，那么会再次通过ThreadFactory创建一个新的线程。</p>
<p>假设如下场景：线程池持续接收新任务，如果新的任务正常执行，那么执行该任务的线程还会继续服役，处理后续的新任务，但是如果新的任务无法正常执行，抛出了异常，那么该线程将由于该异常而而终结，线程池会创建新的线程继续处理后续任务。所以当所有的新任务都抛出异常时，可能会导致线程池单个线程的寿命极短，频繁创建线程，事实上导致线程池失效。</p>
<p>实际上呢？</p>
<p>通过submit()提交给线程池的RunnableTask都被包装为FutureTask了，而FutureTask在run（）的时候，对异常进行包装，将outCome输出为Exception，也就是说正常的用户异常根本不会抛出到Worker的runWoker loop里…</p>
<p>但是如果直接调用ThreadPoolExecutor.execute()方法，则不会使用FutureTask包装该Runnable了，包装的过程都是在AbstractExecutorService里完成的，直接通过execute执行任务的话，则会产生之前所述的场景，线程将频繁创建</p>
<p>ThreadPoolExecutor executorService &#x3D; (ThreadPoolExecutor) Executors.newFixedThreadPool(5, new NamedThreadFactory());<br>while (true) {<br>    try {<br>        Thread.sleep(100);<br>    } catch (InterruptedException e) {<br>        e.printStackTrace();<br>    }<br>    executorService.execute(() -&gt; {&#x2F;&#x2F;使用Executor.execute（）执行，则会出现频繁创建线程池的情况，使用submit（）则不会，但其实execute与submit都是异步执行<br>        throw new RuntimeException();<br>    });<br>}<br>6、总结<br>线程池的核心其实是一个基于BlockingQueue的任务生产消费模型，任务的生产方为ThreadPool的使用方，通过submit与execute生产Runnable任务，任务的消费方则为ThreadPool内部的Worker。TheadPool做了很多关于线程池特性的控制：比如核心线程池大小、最大线程池大小、空闲线程的最大存活时间等等，主要就是通过Worker从BlockingQueue中获取任务的状态来控制Worker的销毁。</p>
<p>源码十分精巧，部分代码写的相当简练，但包含了很深的关于状态定义、任务生产、任务消费、超时控制、同步控制、空闲线程销毁、新增线程等一系列特性的实现逻辑，每一步的动作都值得进一步思考。</p>
<p>如果让自己去实现一遍这样的线程池，该如何去实现呢？</p>
<p>最后附上向ThreadPoolExecutor submit任务的执行流程图~</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>正则</title>
    <url>/posts/73169f18/</url>
    <content><![CDATA[<h1 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h1><p>abcdefghijklmnopqurtuvwxyz<br>ABCDEFGHIJKLMNOPQRSTUVWXYZa<br>abced<br>abd</p>
<p>A[A-Z]{24}Z<br>abbabbbc<br>abbc<br>abc<br>ac</p>
<p>ab{5}c</p>
<p>ab((ce)?d)?</p>
<p>10^6ml<br>10^9ML<br>10E9 ML</p>
<p>10[^E][369] ?(ml|ML)</p>
<p>ad<br>1234567890<br>[^\s]<br>Ha HaHa<br>.转义<br>[abc]<br>[^abc]<br>[a-z]<br>[^a-z]<br>[a-zA-Z]<br>.<br>\s\S space<br>\w\W word<br>\d\D digit<br>(a|b)<br>a? 0-1次<br>a* 0-任意次<br>a+ 1-任意次<br>a{3} 3次<br>a{3,6} 三到六次<br>a{,6} 至多6次<br>a{3,} 至少三次<br>(a{3}|a{6}) 3次或6次<br>^ 开头<br>$ 结尾</p>
<p>MetaCharacters (Need to be escaped):<br>.[{()^$|?*+</p>
<p>coreyms.com<br>[-a-zA-Z0-9.&#x2F;]+.[a-zA-Z]+&#x2F;?</p>
<p>\d{3}[.-]\d{3}[.-]\d{4}</p>
<p>192.168.0.1<br>255.255.255.255</p>
<p>[1-9]?\d|1\d{2}|2([0-4]\d|5[0-5])</p>
<p>(([1-9]?\d|1\d{2}|2([0-4]\d|5[0-5])).){3}([1-9]?\d|1\d{2}|2([0-4]\d|5[0-5])))</p>
<p>321-555-4321<br>123.555.1234</p>
<p>Mr. Schafer<br>Mr Smith<br>Ms Davis<br>Mrs. Robinson<br>Mr. T<br>Mr. t</p>
<p>M(s|r|rs).? [A-Z][a-z]*</p>
<p><a href="https://deerchao.net/tutorials/regex/regex.htm">https://deerchao.net/tutorials/regex/regex.htm</a><br><a href="https://regex101.com/">https://regex101.com/</a><br><a href="https://www.regular-expressions.info/">https://www.regular-expressions.info/</a></p>
<h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><p>Dave Martin<br>615-555-7164<br>173 Main St., Springfield RI 55924<br><a href="mailto:&#x64;&#97;&#x76;&#101;&#109;&#97;&#114;&#116;&#105;&#110;&#x40;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x64;&#97;&#x76;&#101;&#109;&#97;&#114;&#116;&#105;&#110;&#x40;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Charles Harris<br>800-555-5669<br>969 High St., Atlantis VA 34075<br><a href="mailto:&#x63;&#104;&#97;&#114;&#x6c;&#101;&#115;&#104;&#x61;&#x72;&#114;&#105;&#x73;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#x63;&#104;&#97;&#114;&#x6c;&#101;&#115;&#104;&#x61;&#x72;&#114;&#105;&#x73;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></p>
<p>Eric Williams<br>560-555-5153<br>806 1st St., Faketown AK 86847<br><a href="mailto:&#x6c;&#x61;&#117;&#114;&#97;&#x77;&#x69;&#108;&#108;&#x69;&#97;&#109;&#115;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#x6c;&#x61;&#117;&#114;&#97;&#x77;&#x69;&#108;&#108;&#x69;&#97;&#109;&#115;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Corey Jefferson<br>900-555-9340<br>826 Elm St., Epicburg NE 10671<br><a href="mailto:&#x63;&#111;&#x72;&#x65;&#x79;&#106;&#101;&#102;&#x66;&#x65;&#114;&#x73;&#111;&#110;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;">&#x63;&#111;&#x72;&#x65;&#x79;&#106;&#101;&#102;&#x66;&#x65;&#114;&#x73;&#111;&#110;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#x69;&#108;&#46;&#99;&#111;&#109;</a></p>
<p>Jennifer Martin-White<br>714-555-7405<br>212 Cedar St., Sunnydale CT 74983<br><a href="mailto:&#106;&#101;&#x6e;&#x6e;&#105;&#102;&#x65;&#x72;&#119;&#104;&#x69;&#x74;&#x65;&#x40;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#106;&#101;&#x6e;&#x6e;&#105;&#102;&#x65;&#x72;&#119;&#104;&#x69;&#x74;&#x65;&#x40;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>
<p>Erick Davis<br>800-555-6771<br>519 Washington St., Olympus TN 32425<br><a href="mailto:&#x74;&#x6f;&#x6d;&#100;&#97;&#118;&#105;&#115;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#x74;&#x6f;&#x6d;&#100;&#97;&#118;&#105;&#115;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>
<p>Neil Patterson<br>783-555-4799<br>625 Oak St., Dawnstar IL 61914<br><a href="mailto:&#x6e;&#x65;&#x69;&#x6c;&#112;&#x61;&#116;&#116;&#x65;&#x72;&#x73;&#111;&#110;&#x40;&#98;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x6e;&#x65;&#x69;&#x6c;&#112;&#x61;&#116;&#116;&#x65;&#x72;&#x73;&#111;&#110;&#x40;&#98;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Laura Jefferson<br>516-555-4615<br>890 Main St., Pythonville LA 29947<br><a href="mailto:&#108;&#97;&#117;&#114;&#97;&#x6a;&#x65;&#102;&#102;&#101;&#x72;&#115;&#111;&#110;&#64;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;">&#108;&#97;&#117;&#114;&#97;&#x6a;&#x65;&#102;&#102;&#101;&#x72;&#115;&#111;&#110;&#64;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#109;</a></p>
<p>Maria Johnson<br>127-555-1867<br>884 High St., Braavos‎ ME 43597<br><a href="mailto:&#109;&#x61;&#x72;&#105;&#97;&#106;&#111;&#x68;&#x6e;&#x73;&#111;&#x6e;&#64;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#109;&#x61;&#x72;&#105;&#97;&#106;&#111;&#x68;&#x6e;&#x73;&#111;&#x6e;&#64;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Michael Arnold<br>608-555-4938<br>249 Elm St., Quahog OR 90938<br><a href="mailto:&#109;&#105;&#x63;&#104;&#97;&#101;&#x6c;&#97;&#x72;&#110;&#111;&#108;&#100;&#x40;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#109;&#105;&#x63;&#104;&#97;&#101;&#x6c;&#97;&#x72;&#110;&#111;&#108;&#100;&#x40;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a></p>
<p>Michael Smith<br>568-555-6051<br>619 Park St., Winterfell VA 99000<br><a href="mailto:&#x6d;&#105;&#x63;&#x68;&#97;&#x65;&#x6c;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;">&#x6d;&#105;&#x63;&#x68;&#97;&#x65;&#x6c;&#x73;&#x6d;&#105;&#x74;&#104;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#108;&#46;&#x63;&#111;&#109;</a></p>
<p>Erik Stuart<br>292-555-1875<br>220 Cedar St., Lakeview NY 87282<br><a href="mailto:&#x72;&#111;&#98;&#x65;&#x72;&#116;&#115;&#116;&#x75;&#x61;&#114;&#116;&#x40;&#x62;&#111;&#103;&#x75;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#x72;&#111;&#98;&#x65;&#x72;&#116;&#115;&#116;&#x75;&#x61;&#114;&#116;&#x40;&#x62;&#111;&#103;&#x75;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></p>
<p>Laura Martin<br>900-555-3205<br>391 High St., Smalltown WY 28362<br><a href="mailto:&#x6c;&#97;&#117;&#x72;&#97;&#109;&#97;&#x72;&#116;&#x69;&#110;&#x40;&#98;&#x6f;&#x67;&#117;&#x73;&#x65;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x6c;&#97;&#117;&#x72;&#97;&#109;&#97;&#x72;&#116;&#x69;&#110;&#x40;&#98;&#x6f;&#x67;&#117;&#x73;&#x65;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>Barbara Martin<br>614-555-1166<br>121 Hill St., Braavos‎ UT 92474<br><a href="mailto:&#98;&#x61;&#x72;&#x62;&#97;&#114;&#97;&#109;&#97;&#x72;&#x74;&#x69;&#110;&#x40;&#x62;&#111;&#x67;&#x75;&#115;&#101;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#98;&#x61;&#x72;&#x62;&#97;&#114;&#97;&#109;&#97;&#x72;&#x74;&#x69;&#110;&#x40;&#x62;&#111;&#x67;&#x75;&#115;&#101;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
<p>Linda Jackson<br>530-555-2676<br>433 Elm St., Westworld TX 61967<br><a href="mailto:&#x6c;&#x69;&#x6e;&#100;&#97;&#x6a;&#97;&#99;&#x6b;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;">&#x6c;&#x69;&#x6e;&#100;&#97;&#x6a;&#97;&#99;&#x6b;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Eric Miller<br>470-555-2750<br>838 Main St., Balmora MT 56526<br><a href="mailto:&#115;&#x74;&#x65;&#x76;&#x65;&#109;&#105;&#108;&#108;&#101;&#x72;&#x40;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#115;&#x74;&#x65;&#x76;&#x65;&#109;&#105;&#108;&#108;&#101;&#x72;&#x40;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Dave Arnold<br>800-555-6089<br>732 High St., Valyria KY 97152<br><a href="mailto:&#100;&#97;&#x76;&#101;&#97;&#x72;&#x6e;&#x6f;&#108;&#x64;&#x40;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#100;&#97;&#x76;&#101;&#97;&#x72;&#x6e;&#x6f;&#108;&#x64;&#x40;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>Jennifer Jacobs<br>880-555-8319<br>217 High St., Old-town IA 82767<br><a href="mailto:&#x6a;&#101;&#110;&#110;&#105;&#x66;&#x65;&#114;&#x6a;&#97;&#x63;&#x6f;&#98;&#115;&#64;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6a;&#101;&#110;&#110;&#105;&#x66;&#x65;&#114;&#x6a;&#97;&#x63;&#x6f;&#98;&#115;&#64;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Neil Wilson<br>777-555-8378<br>191 Main St., Mordor IL 72160<br><a href="mailto:&#x6e;&#101;&#105;&#108;&#119;&#x69;&#108;&#115;&#x6f;&#x6e;&#64;&#98;&#111;&#103;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#x6e;&#101;&#105;&#108;&#119;&#x69;&#108;&#115;&#x6f;&#x6e;&#64;&#98;&#111;&#103;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>
<p>Kurt Jackson<br>998-555-7385<br>607 Washington St., Blackwater NH 97183<br><a href="mailto:&#107;&#117;&#114;&#116;&#x6a;&#97;&#99;&#x6b;&#x73;&#111;&#x6e;&#x40;&#98;&#111;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;">&#107;&#117;&#114;&#116;&#x6a;&#97;&#99;&#x6b;&#x73;&#111;&#x6e;&#x40;&#98;&#111;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>Mary Jacobs<br>800-555-7100<br>478 Oak St., Bedrock IA 58176<br><a href="mailto:&#109;&#97;&#114;&#121;&#x6a;&#97;&#99;&#111;&#x62;&#115;&#x40;&#x62;&#111;&#103;&#x75;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#109;&#97;&#114;&#121;&#x6a;&#97;&#99;&#111;&#x62;&#115;&#x40;&#x62;&#111;&#103;&#x75;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Michael White<br>903-555-8277<br>906 Elm St., Mordor TX 89212<br><a href="mailto:&#109;&#x69;&#99;&#104;&#x61;&#101;&#108;&#119;&#x68;&#105;&#x74;&#101;&#x40;&#x62;&#x6f;&#x67;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;">&#109;&#x69;&#99;&#104;&#x61;&#101;&#108;&#119;&#x68;&#105;&#x74;&#101;&#x40;&#x62;&#x6f;&#x67;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#109;</a></p>
<p>Jennifer Jenkins<br>196-555-5674<br>949 Main St., Smalltown SC 96962<br><a href="mailto:&#106;&#101;&#x6e;&#110;&#105;&#102;&#x65;&#114;&#106;&#x65;&#110;&#x6b;&#105;&#110;&#115;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#106;&#101;&#x6e;&#110;&#105;&#102;&#x65;&#114;&#106;&#x65;&#110;&#x6b;&#105;&#110;&#115;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Sam Wright<br>900-555-5118<br>835 Pearl St., Smalltown ND 77737<br><a href="mailto:&#x73;&#x61;&#x6d;&#119;&#114;&#x69;&#x67;&#x68;&#x74;&#x40;&#x62;&#x6f;&#103;&#x75;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;">&#x73;&#x61;&#x6d;&#119;&#114;&#x69;&#x67;&#x68;&#x74;&#x40;&#x62;&#x6f;&#103;&#x75;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#99;&#x6f;&#x6d;</a></p>
<p>John Davis<br>905-555-1630<br>451 Lake St., Bedrock GA 34615<br><a href="mailto:&#x6a;&#x6f;&#104;&#110;&#100;&#x61;&#118;&#105;&#115;&#x40;&#98;&#111;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x6a;&#x6f;&#104;&#110;&#100;&#x61;&#118;&#105;&#115;&#x40;&#98;&#111;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>Eric Davis<br>203-555-3475<br>419 Lake St., Balmora OR 30826<br><a href="mailto:&#x6e;&#101;&#x69;&#108;&#x64;&#x61;&#x76;&#105;&#x73;&#x40;&#98;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#x6e;&#101;&#x69;&#108;&#x64;&#x61;&#x76;&#105;&#x73;&#x40;&#98;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>Laura Jackson<br>884-555-8444<br>443 Maple St., Quahog MS 29348<br><a href="mailto:&#x6c;&#x61;&#117;&#x72;&#x61;&#x6a;&#x61;&#x63;&#107;&#115;&#111;&#110;&#x40;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#x6c;&#x61;&#117;&#x72;&#x61;&#x6a;&#x61;&#x63;&#107;&#115;&#111;&#110;&#x40;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>John Williams<br>904-555-8559<br>756 Hill St., Valyria KY 94854<br><a href="mailto:&#x6a;&#x6f;&#x68;&#110;&#x77;&#105;&#x6c;&#108;&#105;&#97;&#109;&#x73;&#64;&#98;&#111;&#103;&#117;&#x73;&#101;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x6a;&#x6f;&#x68;&#110;&#x77;&#105;&#x6c;&#108;&#105;&#97;&#109;&#x73;&#64;&#98;&#111;&#103;&#117;&#x73;&#101;&#109;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>Michael Martin<br>889-555-7393<br>216 High St., Olympus NV 21888<br><a href="mailto:&#109;&#x69;&#99;&#x68;&#x61;&#x65;&#108;&#x6d;&#x61;&#114;&#x74;&#x69;&#110;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#109;&#x69;&#99;&#x68;&#x61;&#x65;&#108;&#x6d;&#x61;&#114;&#x74;&#x69;&#110;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>Maggie Brown<br>195-555-2405<br>806 Lake St., Lakeview MD 59348<br><a href="mailto:&#x6d;&#97;&#x67;&#x67;&#105;&#x65;&#98;&#x72;&#x6f;&#119;&#x6e;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x6d;&#97;&#x67;&#x67;&#105;&#x65;&#98;&#x72;&#x6f;&#119;&#x6e;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Erik Wilson<br>321-555-9053<br>354 Hill St., Mordor FL 74122<br><a href="mailto:&#107;&#x75;&#114;&#116;&#x77;&#105;&#x6c;&#x73;&#x6f;&#x6e;&#64;&#98;&#111;&#x67;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#107;&#x75;&#114;&#116;&#x77;&#105;&#x6c;&#x73;&#x6f;&#x6e;&#64;&#98;&#111;&#x67;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>Elizabeth Arnold<br>133-555-1711<br>805 Maple St., Winterfell NV 99431<br><a href="mailto:&#x65;&#x6c;&#105;&#122;&#x61;&#x62;&#x65;&#x74;&#104;&#x61;&#114;&#x6e;&#111;&#108;&#100;&#x40;&#x62;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#x65;&#x6c;&#105;&#122;&#x61;&#x62;&#x65;&#x74;&#104;&#x61;&#114;&#x6e;&#111;&#108;&#100;&#x40;&#x62;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></p>
<p>Jane Martin<br>900-555-5428<br>418 Park St., Metropolis ID 16576<br><a href="mailto:&#x6a;&#97;&#x6e;&#x65;&#109;&#x61;&#x72;&#x74;&#x69;&#110;&#64;&#98;&#x6f;&#103;&#x75;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#x6a;&#97;&#x6e;&#x65;&#109;&#x61;&#x72;&#x74;&#x69;&#110;&#64;&#98;&#x6f;&#103;&#x75;&#115;&#101;&#109;&#97;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Travis Johnson<br>760-555-7147<br>749 Washington St., Braavos‎ SD 25668<br><a href="mailto:&#116;&#114;&#97;&#x76;&#105;&#115;&#106;&#x6f;&#104;&#110;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#x67;&#117;&#115;&#x65;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;">&#116;&#114;&#97;&#x76;&#105;&#115;&#106;&#x6f;&#104;&#110;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#x67;&#117;&#115;&#x65;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#x6d;</a></p>
<p>Laura Jefferson<br>391-555-6621<br>122 High St., Metropolis ME 29540<br><a href="mailto:&#108;&#x61;&#117;&#x72;&#x61;&#x6a;&#101;&#102;&#102;&#x65;&#x72;&#115;&#111;&#110;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#108;&#x61;&#117;&#x72;&#x61;&#x6a;&#101;&#102;&#102;&#x65;&#x72;&#115;&#111;&#110;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Tom Williams<br>932-555-7724<br>610 High St., Old-town FL 60758<br><a href="mailto:&#116;&#x6f;&#109;&#119;&#x69;&#108;&#108;&#x69;&#x61;&#x6d;&#115;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#116;&#x6f;&#109;&#119;&#x69;&#108;&#108;&#x69;&#x61;&#x6d;&#115;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>Jennifer Taylor<br>609-555-7908<br>332 Main St., Pythonville OH 78172<br><a href="mailto:&#106;&#x65;&#110;&#x6e;&#x69;&#x66;&#x65;&#x72;&#x74;&#97;&#x79;&#108;&#x6f;&#x72;&#64;&#98;&#111;&#x67;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#106;&#x65;&#110;&#x6e;&#x69;&#x66;&#x65;&#x72;&#x74;&#97;&#x79;&#108;&#x6f;&#x72;&#64;&#98;&#111;&#x67;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>Erick Wright<br>800-555-8810<br>858 Hill St., Blackwater NC 79714<br><a href="mailto:&#x6a;&#x65;&#110;&#x6e;&#105;&#x66;&#101;&#x72;&#x77;&#114;&#x69;&#103;&#104;&#116;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x6a;&#x65;&#110;&#x6e;&#105;&#x66;&#101;&#x72;&#x77;&#114;&#x69;&#103;&#104;&#116;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Steve Doe<br>149-555-7657<br>441 Elm St., Atlantis MS 87195<br><a href="mailto:&#x73;&#116;&#x65;&#x76;&#x65;&#100;&#111;&#101;&#64;&#x62;&#111;&#103;&#x75;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#x73;&#116;&#x65;&#x76;&#x65;&#100;&#111;&#101;&#64;&#x62;&#111;&#103;&#x75;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Kurt Davis<br>130-555-9709<br>404 Oak St., Atlantis ND 85386<br><a href="mailto:&#x6b;&#117;&#114;&#x74;&#x64;&#97;&#x76;&#x69;&#x73;&#64;&#x62;&#111;&#x67;&#x75;&#x73;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x6b;&#117;&#114;&#x74;&#x64;&#97;&#x76;&#x69;&#x73;&#64;&#x62;&#111;&#x67;&#x75;&#x73;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Corey Harris<br>143-555-9295<br>286 Pearl St., Vice City TX 57112<br><a href="mailto:&#99;&#x6f;&#114;&#x65;&#x79;&#104;&#x61;&#x72;&#x72;&#x69;&#115;&#64;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#99;&#x6f;&#114;&#x65;&#x79;&#104;&#x61;&#x72;&#x72;&#x69;&#115;&#64;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Nicole Taylor<br>903-555-9878<br>465 Hill St., Old-town LA 64102<br><a href="mailto:&#x6e;&#105;&#99;&#x6f;&#108;&#x65;&#116;&#x61;&#121;&#x6c;&#111;&#114;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#x6e;&#105;&#99;&#x6f;&#108;&#x65;&#116;&#x61;&#121;&#x6c;&#111;&#114;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Elizabeth Davis<br>574-555-3194<br>151 Lake St., Eerie SD 17880<br><a href="mailto:&#101;&#108;&#x69;&#122;&#x61;&#98;&#x65;&#116;&#x68;&#100;&#x61;&#x76;&#105;&#x73;&#x40;&#98;&#111;&#103;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#101;&#108;&#x69;&#122;&#x61;&#98;&#x65;&#116;&#x68;&#100;&#x61;&#x76;&#105;&#x73;&#x40;&#98;&#111;&#103;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>Maggie Jenkins<br>496-555-7533<br>504 Lake St., Gotham PA 46692<br><a href="mailto:&#x6d;&#97;&#x67;&#x67;&#x69;&#101;&#x6a;&#x65;&#110;&#107;&#105;&#110;&#x73;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6d;&#97;&#x67;&#x67;&#x69;&#101;&#x6a;&#x65;&#110;&#107;&#105;&#110;&#x73;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Linda Davis<br>210-555-3757<br>201 Pine St., Vice City AR 78455<br><a href="mailto:&#108;&#x69;&#110;&#x64;&#97;&#100;&#97;&#118;&#x69;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;">&#108;&#x69;&#110;&#x64;&#97;&#100;&#97;&#118;&#x69;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#46;&#99;&#111;&#109;</a></p>
<p>Dave Moore<br>900-555-9598<br>251 Pine St., Old-town OK 29087<br><a href="mailto:&#x64;&#x61;&#x76;&#x65;&#109;&#111;&#x6f;&#114;&#101;&#64;&#98;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;">&#x64;&#x61;&#x76;&#x65;&#109;&#111;&#x6f;&#114;&#101;&#64;&#98;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#x6d;</a></p>
<p>Linda Jenkins<br>866-555-9844<br>117 High St., Bedrock NE 11899<br><a href="mailto:&#x6c;&#105;&#x6e;&#x64;&#x61;&#106;&#x65;&#x6e;&#x6b;&#105;&#110;&#115;&#x40;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#x6c;&#105;&#x6e;&#x64;&#x61;&#106;&#x65;&#x6e;&#x6b;&#105;&#110;&#115;&#x40;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>Eric White<br>669-555-7159<br>650 Oak St., Smalltown TN 43281<br><a href="mailto:&#x73;&#97;&#x6d;&#119;&#x68;&#105;&#116;&#x65;&#64;&#x62;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;">&#x73;&#97;&#x6d;&#119;&#x68;&#105;&#116;&#x65;&#64;&#x62;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#109;</a></p>
<p>Laura Robinson<br>152-555-7417<br>377 Pine St., Valyria NC 78036<br><a href="mailto:&#108;&#x61;&#x75;&#114;&#97;&#114;&#111;&#x62;&#105;&#110;&#x73;&#111;&#110;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#108;&#x61;&#x75;&#114;&#97;&#114;&#111;&#x62;&#105;&#110;&#x73;&#111;&#110;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Charles Patterson<br>893-555-9832<br>416 Pearl St., Valyria AK 62260<br><a href="mailto:&#99;&#x68;&#97;&#x72;&#108;&#101;&#x73;&#112;&#x61;&#x74;&#x74;&#101;&#114;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#x65;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#99;&#x68;&#97;&#x72;&#108;&#101;&#x73;&#112;&#x61;&#x74;&#x74;&#101;&#114;&#115;&#x6f;&#x6e;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#x65;&#109;&#x61;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Joe Jackson<br>217-555-7123<br>683 Cedar St., South Park KS 66724<br><a href="mailto:&#x6a;&#x6f;&#101;&#x6a;&#x61;&#x63;&#107;&#115;&#x6f;&#110;&#x40;&#x62;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x6a;&#x6f;&#101;&#x6a;&#x61;&#x63;&#107;&#115;&#x6f;&#110;&#x40;&#x62;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Michael Johnson<br>786-555-6544<br>288 Hill St., Smalltown AZ 18586<br><a href="mailto:&#109;&#x69;&#99;&#104;&#97;&#101;&#x6c;&#x6a;&#x6f;&#x68;&#110;&#115;&#x6f;&#110;&#64;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;">&#109;&#x69;&#99;&#104;&#97;&#101;&#x6c;&#x6a;&#x6f;&#x68;&#110;&#115;&#x6f;&#110;&#64;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>Corey Miller<br>780-555-2574<br>286 High St., Springfield IA 16272<br><a href="mailto:&#99;&#111;&#114;&#101;&#121;&#x6d;&#x69;&#x6c;&#108;&#101;&#x72;&#x40;&#98;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;">&#99;&#111;&#114;&#101;&#121;&#x6d;&#x69;&#x6c;&#108;&#101;&#x72;&#x40;&#98;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#109;</a></p>
<p>James Moore<br>926-555-8735<br>278 Main St., Gotham KY 89569<br><a href="mailto:&#106;&#97;&#109;&#101;&#115;&#109;&#111;&#x6f;&#x72;&#101;&#64;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#106;&#97;&#109;&#101;&#115;&#109;&#111;&#x6f;&#x72;&#101;&#64;&#x62;&#111;&#103;&#x75;&#115;&#x65;&#x6d;&#97;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>
<p>Jennifer Stuart<br>895-555-3539<br>766 Hill St., King’s Landing GA 54999<br><a href="mailto:&#106;&#101;&#110;&#110;&#105;&#102;&#101;&#x72;&#x73;&#116;&#x75;&#97;&#x72;&#116;&#x40;&#98;&#x6f;&#103;&#x75;&#115;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;">&#106;&#101;&#110;&#110;&#105;&#102;&#101;&#x72;&#x73;&#116;&#x75;&#97;&#x72;&#116;&#x40;&#98;&#x6f;&#103;&#x75;&#115;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>
<p>Charles Martin<br>874-555-3949<br>775 High St., Faketown PA 89260<br><a href="mailto:&#x63;&#x68;&#97;&#114;&#x6c;&#101;&#115;&#109;&#x61;&#x72;&#x74;&#105;&#110;&#64;&#98;&#111;&#103;&#117;&#115;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;">&#x63;&#x68;&#97;&#114;&#x6c;&#101;&#115;&#109;&#x61;&#x72;&#x74;&#105;&#110;&#64;&#98;&#111;&#103;&#117;&#115;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>Eric Wilks<br>800-555-2420<br>885 Main St., Blackwater OH 61275<br><a href="mailto:&#x6a;&#111;&#101;&#x77;&#105;&#108;&#x6b;&#115;&#x40;&#98;&#111;&#103;&#117;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6a;&#111;&#101;&#x77;&#105;&#108;&#x6b;&#115;&#x40;&#98;&#111;&#103;&#117;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Elizabeth Arnold<br>936-555-6340<br>528 Hill St., Atlantis NH 88289<br><a href="mailto:&#x65;&#x6c;&#105;&#122;&#x61;&#x62;&#x65;&#x74;&#104;&#97;&#x72;&#110;&#111;&#108;&#x64;&#x40;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#x65;&#x6c;&#105;&#122;&#x61;&#x62;&#x65;&#x74;&#104;&#97;&#x72;&#110;&#111;&#108;&#x64;&#x40;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>John Miller<br>372-555-9809<br>117 Cedar St., Thundera NM 75205<br><a href="mailto:&#106;&#111;&#x68;&#110;&#x6d;&#x69;&#x6c;&#108;&#101;&#114;&#64;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#106;&#111;&#x68;&#110;&#x6d;&#x69;&#x6c;&#108;&#101;&#114;&#64;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Corey Jackson<br>890-555-5618<br>115 Oak St., Gotham UT 36433<br><a href="mailto:&#x63;&#x6f;&#114;&#101;&#121;&#x6a;&#x61;&#x63;&#x6b;&#x73;&#111;&#x6e;&#64;&#x62;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;">&#x63;&#x6f;&#114;&#101;&#121;&#x6a;&#x61;&#x63;&#x6b;&#x73;&#111;&#x6e;&#64;&#x62;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#x61;&#105;&#108;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Sam Thomas<br>670-555-3005<br>743 Lake St., Springfield MS 25473<br><a href="mailto:&#115;&#x61;&#x6d;&#116;&#x68;&#x6f;&#109;&#x61;&#x73;&#x40;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;">&#115;&#x61;&#x6d;&#116;&#x68;&#x6f;&#109;&#x61;&#x73;&#x40;&#x62;&#x6f;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Patricia Thomas<br>509-555-5997<br>381 Hill St., Blackwater CT 30958<br><a href="mailto:&#112;&#97;&#116;&#114;&#105;&#x63;&#105;&#97;&#116;&#x68;&#111;&#109;&#x61;&#x73;&#64;&#x62;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#112;&#97;&#116;&#114;&#105;&#x63;&#105;&#97;&#116;&#x68;&#111;&#109;&#x61;&#x73;&#64;&#x62;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Jennifer Davis<br>721-555-5632<br>125 Main St., Smalltown MT 62155<br><a href="mailto:&#x6a;&#x65;&#x6e;&#x6e;&#x69;&#102;&#101;&#114;&#x64;&#x61;&#x76;&#105;&#115;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x6a;&#x65;&#x6e;&#x6e;&#x69;&#102;&#101;&#114;&#x64;&#x61;&#x76;&#105;&#115;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Patricia Brown<br>900-555-3567<br>292 Hill St., Gotham WV 57680<br><a href="mailto:&#x70;&#x61;&#x74;&#x72;&#105;&#x63;&#105;&#x61;&#x62;&#x72;&#x6f;&#x77;&#110;&#x40;&#98;&#x6f;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#x70;&#x61;&#x74;&#x72;&#105;&#x63;&#105;&#x61;&#x62;&#x72;&#x6f;&#x77;&#110;&#x40;&#98;&#x6f;&#x67;&#117;&#115;&#101;&#109;&#x61;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Barbara Williams<br>147-555-6830<br>514 Park St., Balmora NV 55462<br><a href="mailto:&#98;&#97;&#x72;&#98;&#97;&#x72;&#97;&#119;&#105;&#108;&#108;&#105;&#97;&#x6d;&#x73;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#98;&#97;&#x72;&#98;&#97;&#x72;&#97;&#119;&#105;&#108;&#108;&#105;&#97;&#x6d;&#x73;&#64;&#x62;&#111;&#103;&#x75;&#x73;&#x65;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>James Taylor<br>582-555-3426<br>776 Hill St., Dawnstar MA 51312<br><a href="mailto:&#106;&#97;&#109;&#101;&#115;&#x74;&#x61;&#x79;&#x6c;&#x6f;&#x72;&#64;&#98;&#x6f;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#106;&#97;&#109;&#101;&#115;&#x74;&#x61;&#x79;&#x6c;&#x6f;&#x72;&#64;&#98;&#x6f;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Eric Harris<br>400-555-1706<br>421 Elm St., Smalltown NV 72025<br><a href="mailto:&#x62;&#97;&#114;&#x62;&#97;&#x72;&#x61;&#x68;&#x61;&#114;&#114;&#x69;&#x73;&#x40;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;">&#x62;&#97;&#114;&#x62;&#97;&#x72;&#x61;&#x68;&#x61;&#114;&#114;&#x69;&#x73;&#x40;&#98;&#111;&#x67;&#117;&#115;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Travis Anderson<br>525-555-1793<br>937 Cedar St., Thundera WA 78862<br><a href="mailto:&#116;&#x72;&#97;&#x76;&#x69;&#115;&#97;&#x6e;&#100;&#x65;&#114;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#116;&#x72;&#97;&#x76;&#x69;&#115;&#97;&#x6e;&#100;&#x65;&#114;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Sam Robinson<br>317-555-6700<br>417 Pine St., Lakeview MD 13147<br><a href="mailto:&#115;&#97;&#109;&#114;&#x6f;&#98;&#x69;&#x6e;&#115;&#x6f;&#x6e;&#x40;&#x62;&#111;&#x67;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#115;&#97;&#109;&#114;&#x6f;&#98;&#x69;&#x6e;&#115;&#x6f;&#x6e;&#x40;&#x62;&#111;&#x67;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Steve Robinson<br>974-555-8301<br>478 Park St., Springfield NM 92369<br><a href="mailto:&#115;&#x74;&#x65;&#118;&#101;&#x72;&#111;&#x62;&#105;&#110;&#115;&#x6f;&#x6e;&#x40;&#98;&#111;&#103;&#x75;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#115;&#x74;&#x65;&#118;&#101;&#x72;&#111;&#x62;&#105;&#110;&#115;&#x6f;&#x6e;&#x40;&#98;&#111;&#103;&#x75;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a></p>
<p>Mary Wilson<br>800-555-3216<br>708 Maple St., Braavos‎ UT 29551<br><a href="mailto:&#109;&#x61;&#114;&#x79;&#119;&#x69;&#108;&#115;&#x6f;&#110;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#109;&#x61;&#114;&#x79;&#119;&#x69;&#108;&#115;&#x6f;&#110;&#64;&#98;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Sam Wilson<br>746-555-4094<br>557 Pearl St., Westworld KS 23225<br><a href="mailto:&#x73;&#97;&#x6d;&#x77;&#105;&#x6c;&#115;&#111;&#x6e;&#x40;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#x73;&#97;&#x6d;&#x77;&#105;&#x6c;&#115;&#111;&#x6e;&#x40;&#x62;&#111;&#x67;&#x75;&#x73;&#x65;&#x6d;&#x61;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
<p>Charles Jones<br>922-555-1773<br>855 Hill St., Olympus HI 81427<br><a href="mailto:&#99;&#x68;&#x61;&#x72;&#x6c;&#x65;&#x73;&#106;&#111;&#110;&#x65;&#x73;&#x40;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#99;&#x68;&#x61;&#x72;&#x6c;&#x65;&#x73;&#106;&#111;&#110;&#x65;&#x73;&#x40;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#109;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Laura Brown<br>711-555-4427<br>980 Maple St., Smalltown MO 96421<br><a href="mailto:&#x6c;&#97;&#117;&#x72;&#x61;&#98;&#x72;&#111;&#x77;&#x6e;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#109;">&#x6c;&#97;&#117;&#x72;&#x61;&#98;&#x72;&#111;&#x77;&#x6e;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#105;&#108;&#x2e;&#99;&#111;&#109;</a></p>
<p>Tom Harris<br>355-555-1872<br>676 Hill St., Blackwater AR 96698<br><a href="mailto:&#116;&#111;&#109;&#x68;&#x61;&#114;&#114;&#x69;&#115;&#x40;&#x62;&#111;&#103;&#117;&#x73;&#101;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;">&#116;&#111;&#109;&#x68;&#x61;&#114;&#114;&#x69;&#115;&#x40;&#x62;&#111;&#103;&#117;&#x73;&#101;&#109;&#x61;&#105;&#108;&#46;&#99;&#111;&#x6d;</a></p>
<p>Patricia Taylor<br>852-555-6521<br>588 Pine St., Olympus FL 98412<br><a href="mailto:&#112;&#x61;&#x74;&#x72;&#x69;&#x63;&#105;&#x61;&#x74;&#97;&#121;&#x6c;&#x6f;&#114;&#x40;&#x62;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;">&#112;&#x61;&#x74;&#x72;&#x69;&#x63;&#105;&#x61;&#x74;&#97;&#121;&#x6c;&#x6f;&#114;&#x40;&#x62;&#x6f;&#103;&#x75;&#x73;&#101;&#109;&#x61;&#x69;&#x6c;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Barbara Williams<br>691-555-5773<br>351 Elm St., Sunnydale GA 26245<br><a href="mailto:&#98;&#x61;&#x72;&#98;&#97;&#114;&#97;&#x77;&#105;&#x6c;&#x6c;&#105;&#x61;&#109;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;">&#98;&#x61;&#x72;&#98;&#97;&#114;&#97;&#x77;&#105;&#x6c;&#x6c;&#105;&#x61;&#109;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#111;&#x6d;</a></p>
<p>Maggie Johnson<br>332-555-5441<br>948 Cedar St., Quahog DE 56449<br><a href="mailto:&#109;&#97;&#103;&#x67;&#105;&#x65;&#106;&#x6f;&#x68;&#110;&#x73;&#x6f;&#x6e;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;">&#109;&#97;&#103;&#x67;&#105;&#x65;&#106;&#x6f;&#x68;&#110;&#x73;&#x6f;&#x6e;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Kurt Miller<br>900-555-7755<br>381 Hill St., Quahog AL 97503<br><a href="mailto:&#107;&#x75;&#x72;&#x74;&#109;&#x69;&#x6c;&#x6c;&#x65;&#x72;&#x40;&#x62;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;">&#107;&#x75;&#x72;&#x74;&#109;&#x69;&#x6c;&#x6c;&#x65;&#x72;&#x40;&#x62;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#46;&#99;&#x6f;&#x6d;</a></p>
<p>Neil Stuart<br>379-555-3685<br>496 Cedar St., Sunnydale RI 49113<br><a href="mailto:&#x6e;&#x65;&#x69;&#x6c;&#115;&#116;&#x75;&#97;&#x72;&#116;&#x40;&#x62;&#111;&#103;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#x6e;&#x65;&#x69;&#x6c;&#115;&#116;&#x75;&#97;&#x72;&#116;&#x40;&#x62;&#111;&#103;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;</a></p>
<p>Linda Patterson<br>127-555-9682<br>736 Cedar St., Lakeview KY 47472<br><a href="mailto:&#108;&#x69;&#110;&#x64;&#97;&#x70;&#x61;&#x74;&#x74;&#101;&#114;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x69;&#110;&#x64;&#97;&#x70;&#x61;&#x74;&#x74;&#101;&#114;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#x75;&#x73;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Charles Davis<br>789-555-7032<br>678 Lake St., Mordor MN 11845<br><a href="mailto:&#99;&#x68;&#97;&#x72;&#x6c;&#x65;&#x73;&#100;&#x61;&#118;&#105;&#x73;&#64;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;">&#99;&#x68;&#97;&#x72;&#x6c;&#x65;&#x73;&#100;&#x61;&#118;&#105;&#x73;&#64;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#108;&#x2e;&#99;&#x6f;&#109;</a></p>
<p>Jennifer Jefferson<br>783-555-5135<br>289 Park St., Sunnydale WA 74526<br><a href="mailto:&#106;&#x65;&#x6e;&#x6e;&#x69;&#102;&#x65;&#114;&#106;&#101;&#x66;&#102;&#x65;&#114;&#115;&#x6f;&#x6e;&#64;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;">&#106;&#x65;&#x6e;&#x6e;&#x69;&#102;&#x65;&#114;&#106;&#101;&#x66;&#102;&#x65;&#114;&#115;&#x6f;&#x6e;&#64;&#98;&#x6f;&#x67;&#117;&#x73;&#101;&#109;&#x61;&#x69;&#108;&#46;&#x63;&#x6f;&#109;</a></p>
<p>Erick Taylor<br>315-555-6507<br>245 Washington St., Bedrock IL 26941<br><a href="mailto:&#99;&#111;&#x72;&#x65;&#121;&#116;&#x61;&#121;&#108;&#111;&#x72;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;">&#99;&#111;&#x72;&#x65;&#121;&#116;&#x61;&#121;&#108;&#111;&#x72;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#x6d;&#x61;&#105;&#x6c;&#x2e;&#99;&#111;&#x6d;</a></p>
<p>Robert Wilks<br>481-555-5835<br>573 Elm St., Sunnydale IL 47182<br><a href="mailto:&#114;&#x6f;&#98;&#101;&#x72;&#x74;&#119;&#x69;&#x6c;&#107;&#x73;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;">&#114;&#x6f;&#98;&#101;&#x72;&#x74;&#119;&#x69;&#x6c;&#107;&#x73;&#x40;&#98;&#x6f;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#x6c;&#46;&#99;&#x6f;&#109;</a></p>
<p>Travis Jackson<br>365-555-8287<br>851 Lake St., Metropolis PA 22772<br><a href="mailto:&#116;&#114;&#97;&#x76;&#105;&#115;&#106;&#97;&#x63;&#x6b;&#115;&#111;&#110;&#64;&#x62;&#111;&#103;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#116;&#114;&#97;&#x76;&#105;&#115;&#106;&#97;&#x63;&#x6b;&#115;&#111;&#110;&#64;&#x62;&#111;&#103;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Travis Jackson<br>911-555-7535<br>489 Oak St., Atlantis HI 73725<br><a href="mailto:&#116;&#114;&#x61;&#x76;&#x69;&#115;&#x6a;&#x61;&#x63;&#107;&#115;&#x6f;&#x6e;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;">&#116;&#114;&#x61;&#x76;&#x69;&#115;&#x6a;&#x61;&#x63;&#107;&#115;&#x6f;&#x6e;&#64;&#98;&#x6f;&#x67;&#x75;&#x73;&#x65;&#109;&#x61;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>Laura Wilks<br>681-555-2460<br>371 Pearl St., Smalltown SC 47466<br><a href="mailto:&#108;&#x61;&#x75;&#114;&#x61;&#x77;&#105;&#x6c;&#x6b;&#x73;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#108;&#x61;&#x75;&#114;&#x61;&#x77;&#105;&#x6c;&#x6b;&#x73;&#64;&#x62;&#111;&#x67;&#117;&#115;&#101;&#x6d;&#x61;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Neil Arnold<br>274-555-9800<br>504 Oak St., Faketown PA 73860<br><a href="mailto:&#x6e;&#101;&#x69;&#x6c;&#x61;&#114;&#110;&#x6f;&#x6c;&#x64;&#x40;&#x62;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;">&#x6e;&#101;&#x69;&#x6c;&#x61;&#114;&#110;&#x6f;&#x6c;&#x64;&#x40;&#x62;&#111;&#103;&#117;&#115;&#x65;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#x6f;&#109;</a></p>
<p>Linda Johnson<br>800-555-1372<br>667 High St., Balmora IN 82473<br><a href="mailto:&#108;&#105;&#x6e;&#100;&#x61;&#x6a;&#111;&#104;&#x6e;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;">&#108;&#105;&#x6e;&#100;&#x61;&#x6a;&#111;&#104;&#x6e;&#115;&#x6f;&#110;&#x40;&#98;&#111;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#x69;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
<p>Jennifer Wilson<br>300-555-7821<br>266 Pine St., Westworld DC 58720<br><a href="mailto:&#106;&#x65;&#110;&#110;&#x69;&#x66;&#x65;&#114;&#x77;&#x69;&#108;&#x73;&#x6f;&#110;&#64;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;">&#106;&#x65;&#110;&#110;&#x69;&#x66;&#x65;&#114;&#x77;&#x69;&#108;&#x73;&#x6f;&#110;&#64;&#98;&#111;&#x67;&#117;&#x73;&#101;&#109;&#97;&#105;&#x6c;&#46;&#x63;&#111;&#109;</a></p>
<p>Nicole White<br>133-555-3889<br>276 High St., Braavos‎ IL 57764<br><a href="mailto:&#110;&#x69;&#99;&#111;&#x6c;&#101;&#x77;&#x68;&#x69;&#x74;&#x65;&#x40;&#98;&#111;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#110;&#x69;&#99;&#111;&#x6c;&#101;&#x77;&#x68;&#x69;&#x74;&#x65;&#x40;&#98;&#111;&#103;&#117;&#115;&#101;&#x6d;&#97;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Maria Arnold<br>705-555-6863<br>491 Elm St., Metropolis PA 31836<br><a href="mailto:&#x6d;&#97;&#114;&#105;&#x61;&#x61;&#114;&#110;&#111;&#108;&#100;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#x6d;&#97;&#114;&#105;&#x61;&#x61;&#114;&#110;&#111;&#108;&#100;&#64;&#98;&#x6f;&#103;&#x75;&#x73;&#x65;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Jennifer Davis<br>215-555-9449<br>859 Cedar St., Old-town MT 31169<br><a href="mailto:&#x6a;&#x65;&#x6e;&#110;&#105;&#x66;&#x65;&#x72;&#100;&#97;&#118;&#105;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;">&#x6a;&#x65;&#x6e;&#110;&#105;&#x66;&#x65;&#x72;&#100;&#97;&#118;&#105;&#115;&#64;&#98;&#x6f;&#x67;&#x75;&#115;&#x65;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#111;&#109;</a></p>
<p>Mary Patterson<br>988-555-6112<br>956 Park St., Valyria CT 81541<br><a href="mailto:&#109;&#x61;&#114;&#121;&#x70;&#97;&#x74;&#x74;&#x65;&#x72;&#115;&#x6f;&#x6e;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;">&#109;&#x61;&#114;&#121;&#x70;&#97;&#x74;&#x74;&#x65;&#x72;&#115;&#x6f;&#x6e;&#64;&#x62;&#x6f;&#103;&#x75;&#115;&#x65;&#109;&#97;&#105;&#108;&#46;&#99;&#x6f;&#109;</a></p>
<p>Jane Stuart<br>623-555-3006<br>983 Oak St., Old-town RI 15445<br><a href="mailto:&#106;&#x61;&#x6e;&#x65;&#x73;&#116;&#x75;&#x61;&#x72;&#116;&#64;&#x62;&#111;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;">&#106;&#x61;&#x6e;&#x65;&#x73;&#116;&#x75;&#x61;&#x72;&#116;&#64;&#x62;&#111;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#108;&#46;&#x63;&#111;&#x6d;</a></p>
<p>Robert Davis<br>192-555-4977<br>789 Maple St., Mordor IN 22215<br><a href="mailto:&#114;&#x6f;&#98;&#x65;&#x72;&#x74;&#x64;&#x61;&#x76;&#x69;&#x73;&#x40;&#x62;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;">&#114;&#x6f;&#98;&#x65;&#x72;&#x74;&#x64;&#x61;&#x76;&#x69;&#x73;&#x40;&#x62;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#109;</a></p>
<p>James Taylor<br>178-555-4899<br>439 Hill St., Olympus NV 39308<br><a href="mailto:&#x6a;&#x61;&#109;&#x65;&#x73;&#116;&#x61;&#121;&#x6c;&#111;&#114;&#64;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;">&#x6a;&#x61;&#109;&#x65;&#x73;&#116;&#x61;&#121;&#x6c;&#111;&#114;&#64;&#x62;&#x6f;&#x67;&#117;&#x73;&#101;&#x6d;&#97;&#105;&#x6c;&#46;&#99;&#111;&#x6d;</a></p>
<p>Eric Stuart<br>952-555-3089<br>777 High St., King’s Landing AZ 16547<br><a href="mailto:&#106;&#x6f;&#x68;&#110;&#115;&#116;&#117;&#x61;&#114;&#x74;&#x40;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;">&#106;&#x6f;&#x68;&#110;&#115;&#116;&#117;&#x61;&#114;&#x74;&#x40;&#98;&#x6f;&#103;&#117;&#x73;&#x65;&#x6d;&#97;&#105;&#108;&#x2e;&#x63;&#x6f;&#x6d;</a></p>
<p>Charles Miller<br>900-555-6426<br>207 Washington St., Blackwater MA 24886<br><a href="mailto:&#99;&#x68;&#x61;&#114;&#x6c;&#101;&#x73;&#109;&#x69;&#x6c;&#108;&#101;&#114;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;">&#99;&#x68;&#x61;&#114;&#x6c;&#101;&#x73;&#109;&#x69;&#x6c;&#108;&#101;&#114;&#x40;&#98;&#x6f;&#x67;&#x75;&#115;&#101;&#x6d;&#x61;&#105;&#108;&#46;&#x63;&#x6f;&#x6d;</a></p>
<ul>
<li>ip正则：<br>(((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5])).){3}((\d{1,2})|(1\d{2})|(2[0-4]\d)|(25[0-5]))</li>
</ul>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>问答系统总结1</title>
    <url>/posts/ca06b5a9/</url>
    <content><![CDATA[<h1 id="问答系统总结"><a href="#问答系统总结" class="headerlink" title="问答系统总结"></a>问答系统总结</h1><h2 id="1-开发工具GIt，idea"><a href="#1-开发工具GIt，idea" class="headerlink" title="1.开发工具GIt，idea"></a>1.开发工具GIt，idea</h2><ul>
<li>我是把代码放到github上的，以便于代码版本管理，不能拷贝来拷贝去</li>
<li>java语言&#x2F;规范最基础，要研究jvm，垃圾回收算法思路，根据什么样的规则，怎么回收申请的一些对象；参数可以配置，怎么配置，对应的后台运行又是怎么样的<h2 id="2-Spring-Boot，Velocity"><a href="#2-Spring-Boot，Velocity" class="headerlink" title="2.Spring Boot，Velocity"></a>2.Spring Boot，Velocity</h2></li>
</ul>
<ul>
<li><p>spring框架：spring是怎么做的，view、controller、service是怎么连在一起的：spring是控制反转、依赖注入，解决了数据数据初始化一些问题，能够吧代码写得很简洁，然后脱颖而出，核心是怎么做的，数据初始化是怎么做的。面向切面的编程可以用在什么地方，spring的一般框架是mvc<br>：层是controller、中间层是service、底层是dao。为什么这么分？他比其他的区别是什么？对一些request包装了<br>   找spring一两点深入研究：我不仅仅是用了spring，我还研究了他某一个组件，他是怎么实现的？讲讲(闪光点）</p>
</li>
<li><p>velocity（模板语言）<br> 我用了velocity，我发现了velocity里的很多东西和我学的java、c++都是一样的，他这个框架他把一些公用的都提取出来，前面的spring boot是个java框架，为什么要用velocity，因为我要前后端分离，view和后面的数据要分离，data是怎么传过来的，怎么解析的，他支持什么东西？（不仅仅用了这个东西，还有思想，解耦）</p>
<h2 id="3-mybatis"><a href="#3-mybatis" class="headerlink" title="3.mybatis"></a>3.mybatis</h2></li>
<li><p>怎么把数据库的一些前后的读取给做了，怎么把xml里的多重条件，怎么做文法的解析，然后把这些条件给处理掉。</p>
<h2 id="4-登录-x2F-注册"><a href="#4-登录-x2F-注册" class="headerlink" title="4.登录&#x2F;注册"></a>4.登录&#x2F;注册</h2></li>
<li><p>网站安全（salt）：密码为什么加了一个salt就变得安全？</p>
</li>
<li><p>通过拦截器来实现的：拦截器的思想、框架，留好接口;拦截器实现登录注册：我在cookie里放了一个token，token怎么处理用户登录注册的：在用户登录注册的时候，会下发一个token，把token与用户信息关联起来，关联起来之后我为了优化token信息，把token放到数据库里（redis），设计一个分布式的统一登录系统，现在的互联网产品都是统一登录的，比如，登录qq之后，登录网页就不需要登录了，qq登录过的token直接注入到网页上去。这是个ssension共享问题：、</p>
</li>
<li><p>保证数据安全：验证（邮件激活）</p>
<h2 id="5-前缀树"><a href="#5-前缀树" class="headerlink" title="5.前缀树"></a>5.前缀树</h2></li>
<li><p>构造一个前缀树，通过一个有限状态机来实现一传文本是不是包含敏感词，繁杂度是多少 很重要：优点有哪些？为什么不用kmp，文本查找算法：<br>可以很快的加一些词汇过来；有扩展性，以及性能更提高</p>
<h2 id="6-redis"><a href="#6-redis" class="headerlink" title="6.redis"></a>6.redis</h2></li>
<li><p>数据结构：跳列表，哈希，优先队列，list：我了解redis底层是怎么实现的，为什么他的效率很高，他的字符串是怎么保存的，做这个工程的时候我用在的异步队列上、排序上、异步框架</p>
<h2 id="7-异步框架"><a href="#7-异步框架" class="headerlink" title="7.异步框架"></a>7.异步框架</h2></li>
<li><p>思路：我这个网站附带的每一步操作可能附带的操作都非常多，为了更快的吧结果返回给用户，所以采用异步框架，自己写的，数据结构：使用redis的队列，因为redis能够保证线程同步；除了用队列，我还想过用有优先队列，这样我的异步框架能够把紧急的任务线处理掉。我这个异步框架：有消息的发射，消息的处理，事件的模型定义以及具体执行的eventhandle，我定义了一些公共接口把这些实现了。</p>
<h2 id="8-邮件（smtp协议）"><a href="#8-邮件（smtp协议）" class="headerlink" title="8.邮件（smtp协议）"></a>8.邮件（smtp协议）</h2></li>
<li><p>做了一个简单邮件，怎么连接上服务器，我当时做这个的时候，ssl问题<br>，ssl理解，服务器需要ssl链接，为了安全服务器是怎么做的；java sdk 1.7 1.8的问题，1.8是需要换一个jar包的</p>
</li>
<li><p>豆瓣电影排序：好的问题能挑选出来，互动越多，时间越新，评分越高。</p>
<h2 id="9-timeline（时间轴）"><a href="#9-timeline（时间轴）" class="headerlink" title="9.timeline（时间轴）"></a>9.timeline（时间轴）</h2></li>
<li><p>肯定会问：为什么用推拉模式，用推实时性高能让好友快速得到消息，用拉能节省僵尸号、不是活跃用户的存储空间。怎么区分？最后把timeline组合起来‘timeline模板系统，每个新鲜事展向不一样，和velocity结合起来，后台存储的都是核心数据，每个数据对应的是一个模板，我把模板结合起来，我就能快速的把时间轴展示出来。</p>
<h2 id="10-爬虫"><a href="#10-爬虫" class="headerlink" title="10.爬虫"></a>10.爬虫</h2><h2 id="11-solr搜索"><a href="#11-solr搜索" class="headerlink" title="11.solr搜索"></a>11.solr搜索</h2></li>
<li><p>搜索去重：对比相似度，敏感哈希算法，哈希算法：两个字符串稍微有一点点不一样，结构就是不一样的。可能头尾是不一样的，内容一样：采用敏感哈希算法把相似度求出来，区别：敏感哈希算法两个文档相似度很高，他生成的哈希值的比例是很相似的。</p>
<h2 id="12-单元测试-x2F-部署"><a href="#12-单元测试-x2F-部署" class="headerlink" title="12.单元测试&#x2F;部署"></a>12.单元测试&#x2F;部署</h2></li>
<li><p>部署：运维，llinux nigix反向代理，与正向对比。负载均衡：为什么要负载均衡。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>问答系统总结2</title>
    <url>/posts/530fe413/</url>
    <content><![CDATA[<h1 id="问答系统总结2"><a href="#问答系统总结2" class="headerlink" title="问答系统总结2"></a>问答系统总结2</h1><h2 id="1-开发工具GIt，idea"><a href="#1-开发工具GIt，idea" class="headerlink" title="1.开发工具GIt，idea"></a>1.开发工具GIt，idea</h2><ul>
<li>我是把代码放到github上的，以便于代码版本管理，不能拷贝来拷贝去</li>
<li>java语言&#x2F;规范最基础，要研究jvm，垃圾回收算法思路，根据什么样的规则，怎么回收申请的一些对象；参数可以配置，怎么配置，对应的后台运行又是怎么样的<h2 id="2-Spring-Boot，Velocity"><a href="#2-Spring-Boot，Velocity" class="headerlink" title="2.Spring Boot，Velocity"></a>2.Spring Boot，Velocity</h2></li>
<li>spring框架：spring是怎么做的，view、controller、service是怎么连在一起的：spring是控制反转、依赖注入，解决了数据数据初始化一些问题，能够吧代码写得很简洁，然后脱颖而出，核心是怎么做的，数据初始化是怎么做的。面向切面的编程可以用在什么地方，spring的一般框架是mvc<br>：层是controller、中间层是service、底层是dao。为什么这么分？他比其他的区别是什么？对一些request包装了<br>   找spring一两点深入研究：我不仅仅是用了spring，我还研究了他某一个组件，他是怎么实现的？讲讲(闪光点）</li>
<li>velocity（模板语言）<br> 我用了velocity，我发现了velocity里的很多东西和我学的java、c++都是一样的，他这个框架他把一些公用的都提取出来，前面的spring boot是个java框架，为什么要用velocity，因为我要前后端分离，view和后面的数据要分离，data是怎么传过来的，怎么解析的，他支持什么东西？（不仅仅用了这个东西，还有思想，解耦）<h2 id="3-mybatis"><a href="#3-mybatis" class="headerlink" title="3.mybatis"></a>3.mybatis</h2></li>
<li>怎么把数据库的一些前后的读取给做了，怎么把xml里的多重条件，怎么做文法的解析，然后把这些条件给处理掉。<h2 id="4-登录-x2F-注册"><a href="#4-登录-x2F-注册" class="headerlink" title="4.登录&#x2F;注册"></a>4.登录&#x2F;注册</h2></li>
<li>网站安全（salt）：密码为什么加了一个salt就变得安全？</li>
<li>通过拦截器来实现的：拦截器的思想、框架，留好接口;拦截器实现登录注册：我在cookie里放了一个token，token怎么处理用户登录注册的：在用户登录注册的时候，会下发一个token，把token与用户信息关联起来，关联起来之后我为了优化token信息，把token放到数据库里（redis），设计一个分布式的统一登录系统，现在的互联网产品都是统一登录的，比如，登录qq之后，登录网页就不需要登录了，qq登录过的token直接注入到网页上去。这是个ssension共享问题：、</li>
<li>保证数据安全：验证（邮件激活）<h2 id="5-前缀树"><a href="#5-前缀树" class="headerlink" title="5.前缀树"></a>5.前缀树</h2></li>
<li>构造一个前缀树，通过一个有限状态机来实现一传文本是不是包含敏感词，繁杂度是多少 很重要：优点有哪些？为什么不用kmp，文本查找算法：<br>可以很快的加一些词汇过来；有扩展性，以及性能更提高<h2 id="6-redis"><a href="#6-redis" class="headerlink" title="6.redis"></a>6.redis</h2></li>
<li>数据结构：跳列表，哈希，优先队列，list：我了解redis底层是怎么实现的，为什么他的效率很高，他的字符串是怎么保存的，做这个工程的时候我用在的异步队列上、排序上、异步框架<h2 id="7-异步框架"><a href="#7-异步框架" class="headerlink" title="7.异步框架"></a>7.异步框架</h2></li>
</ul>
<p>*思路：我这个网站附带的每一步操作可能附带的操作都非常多，为了更快的吧结果返回给用户，所以采用异步框架，自己写的，数据结构：使用redis的队列，因为redis能够保证线程同步；除了用队列，我还想过用有优先队列，这样我的异步框架能够把紧急的任务线处理掉。我这个异步框架：有消息的发射，消息的处理，事件的模型定义以及具体执行的eventhandle，我定义了一些公共接口把这些实现了。</p>
<h2 id="8-邮件（smtp协议）"><a href="#8-邮件（smtp协议）" class="headerlink" title="8.邮件（smtp协议）"></a>8.邮件（smtp协议）</h2><ul>
<li>做了一个简单邮件，怎么连接上服务器，我当时做这个的时候，ssl问题<br>，ssl理解，服务器需要ssl链接，为了安全服务器是怎么做的；java sdk 1.7 1.8的问题，1.8是需要换一个jar包的</li>
<li>豆瓣电影排序：好的问题能挑选出来，互动越多，时间越新，评分越高。<h2 id="9-timeline（时间轴）"><a href="#9-timeline（时间轴）" class="headerlink" title="9.timeline（时间轴）"></a>9.timeline（时间轴）</h2></li>
<li>肯定会问：为什么用推拉模式，用推实时性高能让好友快速得到消息，用拉能节省僵尸号、不是活跃用户的存储空间。怎么区分？最后把timeline组合起来‘timeline模板系统，每个新鲜事展向不一样，和velocity结合起来，后台存储的都是核心数据，每个数据对应的是一个模板，我把模板结合起来，我就能快速的把时间轴展示出来。<h2 id="10-爬虫"><a href="#10-爬虫" class="headerlink" title="10.爬虫"></a>10.爬虫</h2><h2 id="11-solr搜索"><a href="#11-solr搜索" class="headerlink" title="11.solr搜索"></a>11.solr搜索</h2></li>
<li>搜索去重：对比相似度，敏感哈希算法，哈希算法：两个字符串稍微有一点点不一样，结构就是不一样的。可能头尾是不一样的，内容一样：采用敏感哈希算法把相似度求出来，区别：敏感哈希算法两个文档相似度很高，他生成的哈希值的比例是很相似的。<h2 id="12-单元测试-x2F-部署"><a href="#12-单元测试-x2F-部署" class="headerlink" title="12.单元测试&#x2F;部署"></a>12.单元测试&#x2F;部署</h2></li>
<li>部署：运维，llinux nigix反向代理，与正向对比。负载均衡：为什么要负载均衡。</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式2</title>
    <url>/posts/88317e3e/</url>
    <content><![CDATA[<h1 id="设计模式2"><a href="#设计模式2" class="headerlink" title="设计模式2"></a>设计模式2</h1><h2 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1.观察者模式"></a>1.观察者模式</h2><ul>
<li>定义：在对象之间定义了一对多的依赖，这样的话，当一个对象改变状态，依赖他的对象会受到通知并自动更新。（其实就是发布订阅模式：发布者发布信息，订阅者获取信息，订阅了就能收到消息，没订阅的就收不到消息）</li>
</ul>
<h2 id="2-访问者模式"><a href="#2-访问者模式" class="headerlink" title="2.访问者模式"></a>2.访问者模式</h2><ul>
<li>定义：封装作用于某种数据结构中各元素的操作，它可在不改变数据结构的前提下定义作用于这些元素的新的操作。</li>
</ul>
<h2 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h2><ul>
<li>定义：发送者和接收者之间引入了一个命令对象，将发送者的请求封装在命令对象中，再通过命令对象来调用接受者的方法。</li>
<li>spring框架：spring是怎么做的，view、controller、service是怎么连在一起的：spring是控制反转、依赖注入，解决了数据数据初始化一些问题，能够吧代码写得很简洁，然后脱颖而出，核心是怎么做的，数据初始化是怎么做的。面向切面的编程可以用在什么地方，spring的一般框架是mvc<br>：层是controller、中间层是service、底层是dao。为什么这么分？他比其他的区别是什么？对一些request包装了<br>   找spring一两点深入研究：我不仅仅是用了spring，我还研究了他某一个组件，他是怎么实现的？讲讲(闪光点）</li>
<li>velocity（模板语言）<br> 我用了velocity，我发现了velocity里的很多东西和我学的java、c++都是一样的，他这个框架他把一些公用的都提取出来，前面的spring boot是个java框架，为什么要用velocity，因为我要前后端分离，view和后面的数据要分离，data是怎么传过来的，怎么解析的，他支持什么东西？（不仅仅用了这个东西，还有思想，解耦）<h2 id="3-mybatis"><a href="#3-mybatis" class="headerlink" title="3.mybatis"></a>3.mybatis</h2></li>
<li>怎么把数据库的一些前后的读取给做了，怎么把xml里的多重条件，怎么做文法的解析，然后把这些条件给处理掉。<h2 id="4-登录-x2F-注册"><a href="#4-登录-x2F-注册" class="headerlink" title="4.登录&#x2F;注册"></a>4.登录&#x2F;注册</h2></li>
<li>网站安全（salt）：密码为什么加了一个salt就变得安全？</li>
<li>通过拦截器来实现的：拦截器的思想、框架，留好接口;拦截器实现登录注册：我在cookie里放了一个token，token怎么处理用户登录注册的：在用户登录注册的时候，会下发一个token，把token与用户信息关联起来，关联起来之后我为了优化token信息，把token放到数据库里（redis），设计一个分布式的统一登录系统，现在的互联网产品都是统一登录的，比如，登录qq之后，登录网页就不需要登录了，qq登录过的token直接注入到网页上去。这是个ssension共享问题：、</li>
<li>保证数据安全：验证（邮件激活）<h2 id="5-前缀树"><a href="#5-前缀树" class="headerlink" title="5.前缀树"></a>5.前缀树</h2></li>
<li>构造一个前缀树，通过一个有限状态机来实现一传文本是不是包含敏感词，繁杂度是多少 很重要：优点有哪些？为什么不用kmp，文本查找算法：<br>可以很快的加一些词汇过来；有扩展性，以及性能更提高<h2 id="6-redis"><a href="#6-redis" class="headerlink" title="6.redis"></a>6.redis</h2></li>
<li>数据结构：跳列表，哈希，优先队列，list：我了解redis底层是怎么实现的，为什么他的效率很高，他的字符串是怎么保存的，做这个工程的时候我用在的异步队列上、排序上、异步框架<h2 id="7-异步框架"><a href="#7-异步框架" class="headerlink" title="7.异步框架"></a>7.异步框架</h2></li>
</ul>
<p>*思路：我这个网站附带的每一步操作可能附带的操作都非常多，为了更快的吧结果返回给用户，所以采用异步框架，自己写的，数据结构：使用redis的队列，因为redis能够保证线程同步；除了用队列，我还想过用有优先队列，这样我的异步框架能够把紧急的任务线处理掉。我这个异步框架：有消息的发射，消息的处理，事件的模型定义以及具体执行的eventhandle，我定义了一些公共接口把这些实现了。</p>
<h2 id="8-邮件（smtp协议）"><a href="#8-邮件（smtp协议）" class="headerlink" title="8.邮件（smtp协议）"></a>8.邮件（smtp协议）</h2><ul>
<li>做了一个简单邮件，怎么连接上服务器，我当时做这个的时候，ssl问题<br>，ssl理解，服务器需要ssl链接，为了安全服务器是怎么做的；java sdk 1.7 1.8的问题，1.8是需要换一个jar包的</li>
<li>豆瓣电影排序：好的问题能挑选出来，互动越多，时间越新，评分越高。<h2 id="9-timeline（时间轴）"><a href="#9-timeline（时间轴）" class="headerlink" title="9.timeline（时间轴）"></a>9.timeline（时间轴）</h2></li>
<li>肯定会问：为什么用推拉模式，用推实时性高能让好友快速得到消息，用拉能节省僵尸号、不是活跃用户的存储空间。怎么区分？最后把timeline组合起来‘timeline模板系统，每个新鲜事展向不一样，和velocity结合起来，后台存储的都是核心数据，每个数据对应的是一个模板，我把模板结合起来，我就能快速的把时间轴展示出来。<h2 id="10-爬虫"><a href="#10-爬虫" class="headerlink" title="10.爬虫"></a>10.爬虫</h2><h2 id="11-solr搜索"><a href="#11-solr搜索" class="headerlink" title="11.solr搜索"></a>11.solr搜索</h2></li>
<li>搜索去重：对比相似度，敏感哈希算法，哈希算法：两个字符串稍微有一点点不一样，结构就是不一样的。可能头尾是不一样的，内容一样：采用敏感哈希算法把相似度求出来，区别：敏感哈希算法两个文档相似度很高，他生成的哈希值的比例是很相似的。<h2 id="12-单元测试-x2F-部署"><a href="#12-单元测试-x2F-部署" class="headerlink" title="12.单元测试&#x2F;部署"></a>12.单元测试&#x2F;部署</h2></li>
<li>部署：运维，llinux nigix反向代理，与正向对比。负载均衡：为什么要负载均衡。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/posts/364ea8cc/</url>
    <content><![CDATA[<h1 id="常用设计模式"><a href="#常用设计模式" class="headerlink" title="常用设计模式"></a>常用设计模式</h1><h2 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1.观察者模式"></a>1.观察者模式</h2><ul>
<li>定义：在对象之间定义了一对多的依赖，这样的话，当一个对象改变状态，依赖他的对象会受到通知并自动更新。（其实就是发布订阅模式：发布者发布信息，订阅者获取信息，订阅了就能收到消息，没订阅的就收不到消息）</li>
</ul>
<h2 id="2-访问者模式"><a href="#2-访问者模式" class="headerlink" title="2.访问者模式"></a>2.访问者模式</h2><ul>
<li>定义：封装作用于某种数据结构中各元素的操作，它可在不改变数据结构的前提下定义作用于这些元素的新的操作。</li>
</ul>
<h2 id="3-命令模式"><a href="#3-命令模式" class="headerlink" title="3.命令模式"></a>3.命令模式</h2><ul>
<li>定义：发送者和接收者之间引入了一个命令对象，将发送者的请求封装在命令对象中，再通过命令对象来调用接受者的方法。</li>
<li>spring框架：spring是怎么做的，view、controller、service是怎么连在一起的：spring是控制反转、依赖注入，解决了数据数据初始化一些问题，能够吧代码写得很简洁，然后脱颖而出，核心是怎么做的，数据初始化是怎么做的。面向切面的编程可以用在什么地方，spring的一般框架是mvc<br>：层是controller、中间层是service、底层是dao。为什么这么分？他比其他的区别是什么？对一些request包装了<br>   找spring一两点深入研究：我不仅仅是用了spring，我还研究了他某一个组件，他是怎么实现的？讲讲(闪光点）</li>
<li>velocity（模板语言）<br> 我用了velocity，我发现了velocity里的很多东西和我学的java、c++都是一样的，他这个框架他把一些公用的都提取出来，前面的spring boot是个java框架，为什么要用velocity，因为我要前后端分离，view和后面的数据要分离，data是怎么传过来的，怎么解析的，他支持什么东西？（不仅仅用了这个东西，还有思想，解耦）</li>
</ul>
<h2 id="3-mybatis"><a href="#3-mybatis" class="headerlink" title="3.mybatis"></a>3.mybatis</h2><ul>
<li>怎么把数据库的一些前后的读取给做了，怎么把xml里的多重条件，怎么做文法的解析，然后把这些条件给处理掉。</li>
</ul>
<h2 id="4-登录-x2F-注册"><a href="#4-登录-x2F-注册" class="headerlink" title="4.登录&#x2F;注册"></a>4.登录&#x2F;注册</h2><ul>
<li>网站安全（salt）：密码为什么加了一个salt就变得安全？</li>
<li>通过拦截器来实现的：拦截器的思想、框架，留好接口;拦截器实现登录注册：我在cookie里放了一个token，token怎么处理用户登录注册的：在用户登录注册的时候，会下发一个token，把token与用户信息关联起来，关联起来之后我为了优化token信息，把token放到数据库里（redis），设计一个分布式的统一登录系统，现在的互联网产品都是统一登录的，比如，登录qq之后，登录网页就不需要登录了，qq登录过的token直接注入到网页上去。这是个ssension共享问题：、</li>
<li>保证数据安全：验证（邮件激活）</li>
</ul>
<h2 id="5-前缀树"><a href="#5-前缀树" class="headerlink" title="5.前缀树"></a>5.前缀树</h2><ul>
<li>构造一个前缀树，通过一个有限状态机来实现一传文本是不是包含敏感词，繁杂度是多少 很重要：优点有哪些？为什么不用kmp，文本查找算法：<br>可以很快的加一些词汇过来；有扩展性，以及性能更提高</li>
</ul>
<h2 id="6-redis"><a href="#6-redis" class="headerlink" title="6.redis"></a>6.redis</h2><ul>
<li>数据结构：跳列表，哈希，优先队列，list：我了解redis底层是怎么实现的，为什么他的效率很高，他的字符串是怎么保存的，做这个工程的时候我用在的异步队列上、排序上、异步框架</li>
</ul>
<h2 id="7-异步框架"><a href="#7-异步框架" class="headerlink" title="7.异步框架"></a>7.异步框架</h2><p>*思路：我这个网站附带的每一步操作可能附带的操作都非常多，为了更快的吧结果返回给用户，所以采用异步框架，自己写的，数据结构：使用redis的队列，因为redis能够保证线程同步；除了用队列，我还想过用有优先队列，这样我的异步框架能够把紧急的任务线处理掉。我这个异步框架：有消息的发射，消息的处理，事件的模型定义以及具体执行的eventhandle，我定义了一些公共接口把这些实现了。</p>
<h2 id="8-邮件（smtp协议）"><a href="#8-邮件（smtp协议）" class="headerlink" title="8.邮件（smtp协议）"></a>8.邮件（smtp协议）</h2><ul>
<li>做了一个简单邮件，怎么连接上服务器，我当时做这个的时候，ssl问题<br>，ssl理解，服务器需要ssl链接，为了安全服务器是怎么做的；java sdk 1.7 1.8的问题，1.8是需要换一个jar包的</li>
<li>豆瓣电影排序：好的问题能挑选出来，互动越多，时间越新，评分越高。</li>
</ul>
<h2 id="9-timeline（时间轴）"><a href="#9-timeline（时间轴）" class="headerlink" title="9.timeline（时间轴）"></a>9.timeline（时间轴）</h2><ul>
<li>肯定会问：为什么用推拉模式，用推实时性高能让好友快速得到消息，用拉能节省僵尸号、不是活跃用户的存储空间。怎么区分？最后把timeline组合起来‘timeline模板系统，每个新鲜事展向不一样，和velocity结合起来，后台存储的都是核心数据，每个数据对应的是一个模板，我把模板结合起来，我就能快速的把时间轴展示出来。</li>
</ul>
<h2 id="10-爬虫"><a href="#10-爬虫" class="headerlink" title="10.爬虫"></a>10.爬虫</h2><h2 id="11-solr搜索"><a href="#11-solr搜索" class="headerlink" title="11.solr搜索"></a>11.solr搜索</h2><ul>
<li>搜索去重：对比相似度，敏感哈希算法，哈希算法：两个字符串稍微有一点点不一样，结构就是不一样的。可能头尾是不一样的，内容一样：采用敏感哈希算法把相似度求出来，区别：敏感哈希算法两个文档相似度很高，他生成的哈希值的比例是很相似的。</li>
</ul>
<h2 id="12-单元测试-x2F-部署"><a href="#12-单元测试-x2F-部署" class="headerlink" title="12.单元测试&#x2F;部署"></a>12.单元测试&#x2F;部署</h2><ul>
<li>部署：运维，llinux nigix反向代理，与正向对比。负载均衡：为什么要负载均衡。</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>算法中文手册</title>
    <url>/posts/513a500a/</url>
    <content><![CDATA[<p>[toc]</p>
<h3 id="开篇词"><a href="#开篇词" class="headerlink" title="开篇词"></a>开篇词</h3><h2 id="第零章、必读系列"><a href="#第零章、必读系列" class="headerlink" title="第零章、必读系列"></a>第零章、必读系列</h2><h3 id="学习算法和刷题的框架思维"><a href="#学习算法和刷题的框架思维" class="headerlink" title="学习算法和刷题的框架思维"></a>学习算法和刷题的框架思维</h3><h3 id="动态规划解题套路框架"><a href="#动态规划解题套路框架" class="headerlink" title="动态规划解题套路框架"></a>动态规划解题套路框架</h3><h3 id="回溯算法解题套路框架"><a href="#回溯算法解题套路框架" class="headerlink" title="回溯算法解题套路框架"></a>回溯算法解题套路框架</h3><h3 id="BFS-算法解题套路框架"><a href="#BFS-算法解题套路框架" class="headerlink" title="BFS 算法解题套路框架"></a>BFS 算法解题套路框架</h3><h3 id="我写了首诗，让你闭着眼睛也能写对二分搜索"><a href="#我写了首诗，让你闭着眼睛也能写对二分搜索" class="headerlink" title="我写了首诗，让你闭着眼睛也能写对二分搜索"></a>我写了首诗，让你闭着眼睛也能写对二分搜索</h3><h3 id="我写了首诗，把滑动窗口算法算法变成了默写题"><a href="#我写了首诗，把滑动窗口算法算法变成了默写题" class="headerlink" title="我写了首诗，把滑动窗口算法算法变成了默写题"></a>我写了首诗，把滑动窗口算法算法变成了默写题</h3><h3 id="一个方法团灭-LeetCode-股票买卖问题"><a href="#一个方法团灭-LeetCode-股票买卖问题" class="headerlink" title="一个方法团灭 LeetCode 股票买卖问题"></a>一个方法团灭 LeetCode 股票买卖问题</h3><h3 id="一个方法团灭-LeetCode-打家劫舍问题"><a href="#一个方法团灭-LeetCode-打家劫舍问题" class="headerlink" title="一个方法团灭 LeetCode 打家劫舍问题"></a>一个方法团灭 LeetCode 打家劫舍问题</h3><h3 id="一个方法团灭-nSum-问题"><a href="#一个方法团灭-nSum-问题" class="headerlink" title="一个方法团灭 nSum 问题"></a>一个方法团灭 nSum 问题</h3><h3 id="经典动态规划-高楼扔鸡蛋"><a href="#经典动态规划-高楼扔鸡蛋" class="headerlink" title="经典动态规划:高楼扔鸡蛋"></a>经典动态规划:高楼扔鸡蛋</h3><h3 id="经典动态规划-子集背包问题"><a href="#经典动态规划-子集背包问题" class="headerlink" title="经典动态规划:子集背包问题"></a>经典动态规划:子集背包问题</h3><h3 id="经典动态规划-完全背包问题"><a href="#经典动态规划-完全背包问题" class="headerlink" title="经典动态规划:完全背包问题"></a>经典动态规划:完全背包问题</h3><h3 id="表达式求值算法-实现计算器"><a href="#表达式求值算法-实现计算器" class="headerlink" title="表达式求值算法:实现计算器"></a>表达式求值算法:实现计算器</h3><h2 id="第一章、动态规划系列"><a href="#第一章、动态规划系列" class="headerlink" title="第一章、动态规划系列"></a>第一章、动态规划系列</h2><h3 id="动态规划解题套路框架-1"><a href="#动态规划解题套路框架-1" class="headerlink" title="动态规划解题套路框架"></a>动态规划解题套路框架</h3><h3 id="动态规划答疑篇"><a href="#动态规划答疑篇" class="headerlink" title="动态规划答疑篇"></a>动态规划答疑篇</h3><h3 id="动态规划和回溯算法到底谁是谁爹"><a href="#动态规划和回溯算法到底谁是谁爹" class="headerlink" title="动态规划和回溯算法到底谁是谁爹?"></a>动态规划和回溯算法到底谁是谁爹?</h3><h3 id="动态规划设计-最⻓递增子序列"><a href="#动态规划设计-最⻓递增子序列" class="headerlink" title="动态规划设计:最⻓递增子序列"></a>动态规划设计:最⻓递增子序列</h3><h3 id="动态规划设计-最大子数组"><a href="#动态规划设计-最大子数组" class="headerlink" title="动态规划设计:最大子数组"></a>动态规划设计:最大子数组</h3><h3 id="经典动态规划-0-1-背包问题"><a href="#经典动态规划-0-1-背包问题" class="headerlink" title="经典动态规划:0-1 背包问题"></a>经典动态规划:0-1 背包问题</h3><h3 id="经典动态规划-子集背包问题-1"><a href="#经典动态规划-子集背包问题-1" class="headerlink" title="经典动态规划:子集背包问题"></a>经典动态规划:子集背包问题</h3><h3 id="经典动态规划-完全背包问题-1"><a href="#经典动态规划-完全背包问题-1" class="headerlink" title="经典动态规划:完全背包问题"></a>经典动态规划:完全背包问题</h3><h3 id="经典动态规划-编辑距离"><a href="#经典动态规划-编辑距离" class="headerlink" title="经典动态规划:编辑距离"></a>经典动态规划:编辑距离</h3><h3 id="经典动态规划-高楼扔鸡蛋-1"><a href="#经典动态规划-高楼扔鸡蛋-1" class="headerlink" title="经典动态规划:高楼扔鸡蛋"></a>经典动态规划:高楼扔鸡蛋</h3><h3 id="经典动态规划-高楼扔鸡蛋-进阶"><a href="#经典动态规划-高楼扔鸡蛋-进阶" class="headerlink" title="经典动态规划:高楼扔鸡蛋(进阶)"></a>经典动态规划:高楼扔鸡蛋(进阶)</h3><h3 id="经典动态规划-戳气球"><a href="#经典动态规划-戳气球" class="headerlink" title="经典动态规划:戳气球"></a>经典动态规划:戳气球</h3><h3 id="经典动态规划-最⻓公共子序列"><a href="#经典动态规划-最⻓公共子序列" class="headerlink" title="经典动态规划:最⻓公共子序列"></a>经典动态规划:最⻓公共子序列</h3><h3 id="动态规划之子序列问题解题模板"><a href="#动态规划之子序列问题解题模板" class="headerlink" title="动态规划之子序列问题解题模板"></a>动态规划之子序列问题解题模板</h3><h3 id="动态规划之博弈问题"><a href="#动态规划之博弈问题" class="headerlink" title="动态规划之博弈问题"></a>动态规划之博弈问题</h3><h3 id="动态规划之正则表达"><a href="#动态规划之正则表达" class="headerlink" title="动态规划之正则表达"></a>动态规划之正则表达</h3><h3 id="动态规划之四键键盘"><a href="#动态规划之四键键盘" class="headerlink" title="动态规划之四键键盘"></a>动态规划之四键键盘</h3><h3 id="动态规划之KMP字符匹配算法"><a href="#动态规划之KMP字符匹配算法" class="headerlink" title="动态规划之KMP字符匹配算法"></a>动态规划之KMP字符匹配算法</h3><h3 id="贪心算法之区间调度问题"><a href="#贪心算法之区间调度问题" class="headerlink" title="贪心算法之区间调度问题"></a>贪心算法之区间调度问题</h3><h3 id="团灭-LeetCode-股票买卖问题"><a href="#团灭-LeetCode-股票买卖问题" class="headerlink" title="团灭 LeetCode 股票买卖问题"></a>团灭 LeetCode 股票买卖问题</h3><h3 id="团灭-LeetCode-打家劫舍问题"><a href="#团灭-LeetCode-打家劫舍问题" class="headerlink" title="团灭 LeetCode 打家劫舍问题"></a>团灭 LeetCode 打家劫舍问题</h3><h2 id="第二章、数据结构系列"><a href="#第二章、数据结构系列" class="headerlink" title="第二章、数据结构系列"></a>第二章、数据结构系列</h2><h3 id="学习数据结构和算法读什么书"><a href="#学习数据结构和算法读什么书" class="headerlink" title="学习数据结构和算法读什么书"></a>学习数据结构和算法读什么书</h3><h3 id="算法学习之路"><a href="#算法学习之路" class="headerlink" title="算法学习之路"></a>算法学习之路</h3><h3 id="二叉堆详解实现优先级队列"><a href="#二叉堆详解实现优先级队列" class="headerlink" title="二叉堆详解实现优先级队列"></a>二叉堆详解实现优先级队列</h3><h3 id="LRU算法详解"><a href="#LRU算法详解" class="headerlink" title="LRU算法详解"></a>LRU算法详解</h3><h3 id="二叉搜索树操作集锦"><a href="#二叉搜索树操作集锦" class="headerlink" title="二叉搜索树操作集锦"></a>二叉搜索树操作集锦</h3><h3 id="如何计算完全二叉树的节点数"><a href="#如何计算完全二叉树的节点数" class="headerlink" title="如何计算完全二叉树的节点数"></a>如何计算完全二叉树的节点数</h3><h3 id="特殊数据结构-单调栈"><a href="#特殊数据结构-单调栈" class="headerlink" title="特殊数据结构:单调栈"></a>特殊数据结构:单调栈</h3><h3 id="特殊数据结构-单调队列"><a href="#特殊数据结构-单调队列" class="headerlink" title="特殊数据结构:单调队列"></a>特殊数据结构:单调队列</h3><h3 id="设计Twitter-递归反转链表的一部分"><a href="#设计Twitter-递归反转链表的一部分" class="headerlink" title="设计Twitter 递归反转链表的一部分"></a>设计Twitter 递归反转链表的一部分</h3><h3 id="队列实现栈-栈实现队列"><a href="#队列实现栈-栈实现队列" class="headerlink" title="队列实现栈|栈实现队列"></a>队列实现栈|栈实现队列</h3><h2 id="第三章、算法思维系列"><a href="#第三章、算法思维系列" class="headerlink" title="第三章、算法思维系列"></a>第三章、算法思维系列</h2><h3 id="学习算法和刷题的思路指南"><a href="#学习算法和刷题的思路指南" class="headerlink" title="学习算法和刷题的思路指南"></a>学习算法和刷题的思路指南</h3><h3 id="回溯算法解题套路框架-1"><a href="#回溯算法解题套路框架-1" class="headerlink" title="回溯算法解题套路框架"></a>回溯算法解题套路框架</h3><h3 id="回溯算法团灭子集、排列、组合问题"><a href="#回溯算法团灭子集、排列、组合问题" class="headerlink" title="回溯算法团灭子集、排列、组合问题"></a>回溯算法团灭子集、排列、组合问题</h3><h3 id="回溯算法最佳实践-解数独"><a href="#回溯算法最佳实践-解数独" class="headerlink" title="回溯算法最佳实践:解数独"></a>回溯算法最佳实践:解数独</h3><h3 id="回溯算法最佳实践-括号生成"><a href="#回溯算法最佳实践-括号生成" class="headerlink" title="回溯算法最佳实践:括号生成"></a>回溯算法最佳实践:括号生成</h3><h3 id="二分查找详解"><a href="#二分查找详解" class="headerlink" title="二分查找详解"></a>二分查找详解</h3><h3 id="双指针技巧总结"><a href="#双指针技巧总结" class="headerlink" title="双指针技巧总结"></a>双指针技巧总结</h3><h3 id="滑动窗口技巧"><a href="#滑动窗口技巧" class="headerlink" title="滑动窗口技巧"></a>滑动窗口技巧</h3><h3 id="twoSum问题的核心思想"><a href="#twoSum问题的核心思想" class="headerlink" title="twoSum问题的核心思想"></a>twoSum问题的核心思想</h3><h3 id="常用的位操作"><a href="#常用的位操作" class="headerlink" title="常用的位操作"></a>常用的位操作</h3><h3 id="拆解复杂问题-实现计算器"><a href="#拆解复杂问题-实现计算器" class="headerlink" title="拆解复杂问题:实现计算器"></a>拆解复杂问题:实现计算器</h3><h3 id="烧饼排序"><a href="#烧饼排序" class="headerlink" title="烧饼排序"></a>烧饼排序</h3><h3 id="前缀和技巧"><a href="#前缀和技巧" class="headerlink" title="前缀和技巧"></a>前缀和技巧</h3><h3 id="字符串乘法"><a href="#字符串乘法" class="headerlink" title="字符串乘法"></a>字符串乘法</h3><h3 id="FloodFill算法详解及应用"><a href="#FloodFill算法详解及应用" class="headerlink" title="FloodFill算法详解及应用"></a>FloodFill算法详解及应用</h3><h3 id="区间调度之区间合并问题"><a href="#区间调度之区间合并问题" class="headerlink" title="区间调度之区间合并问题"></a>区间调度之区间合并问题</h3><h3 id="区间调度之区间交集问题"><a href="#区间调度之区间交集问题" class="headerlink" title="区间调度之区间交集问题"></a>区间调度之区间交集问题</h3><h3 id="信封嵌套问题"><a href="#信封嵌套问题" class="headerlink" title="信封嵌套问题"></a>信封嵌套问题</h3><h3 id="几个反直觉的概率问题"><a href="#几个反直觉的概率问题" class="headerlink" title="几个反直觉的概率问题"></a>几个反直觉的概率问题</h3><h2 id="第四章、高频面试系列"><a href="#第四章、高频面试系列" class="headerlink" title="第四章、高频面试系列"></a>第四章、高频面试系列</h2><h3 id="如何实现LRU算法"><a href="#如何实现LRU算法" class="headerlink" title="如何实现LRU算法"></a>如何实现LRU算法</h3><h3 id="如何用-BFS-算法秒杀各种智力题"><a href="#如何用-BFS-算法秒杀各种智力题" class="headerlink" title="如何用 BFS 算法秒杀各种智力题"></a>如何用 BFS 算法秒杀各种智力题</h3><h3 id="如何高效寻找素数"><a href="#如何高效寻找素数" class="headerlink" title="如何高效寻找素数"></a>如何高效寻找素数</h3><h3 id="如何高效进行模幂运算"><a href="#如何高效进行模幂运算" class="headerlink" title="如何高效进行模幂运算"></a>如何高效进行模幂运算</h3><h3 id="如何计算编辑距离"><a href="#如何计算编辑距离" class="headerlink" title="如何计算编辑距离"></a>如何计算编辑距离</h3><h3 id="如何运用二分查找算法"><a href="#如何运用二分查找算法" class="headerlink" title="如何运用二分查找算法"></a>如何运用二分查找算法</h3><h3 id="如何高效解决接雨水问题"><a href="#如何高效解决接雨水问题" class="headerlink" title="如何高效解决接雨水问题"></a>如何高效解决接雨水问题</h3><h3 id="如何去除有序数组的重复元素"><a href="#如何去除有序数组的重复元素" class="headerlink" title="如何去除有序数组的重复元素"></a>如何去除有序数组的重复元素</h3><h3 id="如何寻找最⻓回文子串"><a href="#如何寻找最⻓回文子串" class="headerlink" title="如何寻找最⻓回文子串"></a>如何寻找最⻓回文子串</h3><h3 id="如何运用贪心思想玩跳跃游戏"><a href="#如何运用贪心思想玩跳跃游戏" class="headerlink" title="如何运用贪心思想玩跳跃游戏"></a>如何运用贪心思想玩跳跃游戏</h3><h3 id="如何k个一组反转链表"><a href="#如何k个一组反转链表" class="headerlink" title="如何k个一组反转链表"></a>如何k个一组反转链表</h3><h3 id="如何判定括号合法性"><a href="#如何判定括号合法性" class="headerlink" title="如何判定括号合法性"></a>如何判定括号合法性</h3><h3 id="如何寻找缺失的元素"><a href="#如何寻找缺失的元素" class="headerlink" title="如何寻找缺失的元素"></a>如何寻找缺失的元素</h3><h3 id="如何同时寻找缺失和重复的元素"><a href="#如何同时寻找缺失和重复的元素" class="headerlink" title="如何同时寻找缺失和重复的元素"></a>如何同时寻找缺失和重复的元素</h3><h3 id="如何判断回文链表"><a href="#如何判断回文链表" class="headerlink" title="如何判断回文链表"></a>如何判断回文链表</h3><h3 id="如何在无限序列中随机抽取元素"><a href="#如何在无限序列中随机抽取元素" class="headerlink" title="如何在无限序列中随机抽取元素"></a>如何在无限序列中随机抽取元素</h3><h3 id="如何调度考生的座位"><a href="#如何调度考生的座位" class="headerlink" title="如何调度考生的座位"></a>如何调度考生的座位</h3><h3 id="Union-Find算法详解"><a href="#Union-Find算法详解" class="headerlink" title="Union-Find算法详解"></a>Union-Find算法详解</h3><h3 id="Union-Find算法应用"><a href="#Union-Find算法应用" class="headerlink" title="Union-Find算法应用"></a>Union-Find算法应用</h3><h3 id="一行代码就能解决的算法题"><a href="#一行代码就能解决的算法题" class="headerlink" title="一行代码就能解决的算法题"></a>一行代码就能解决的算法题</h3><h3 id="二分查找高效判定子序列"><a href="#二分查找高效判定子序列" class="headerlink" title="二分查找高效判定子序列"></a>二分查找高效判定子序列</h3><h2 id="第五章、技术文章系列"><a href="#第五章、技术文章系列" class="headerlink" title="第五章、技术文章系列"></a>第五章、技术文章系列</h2><h3 id="Linux的进程、线程、文件描述符是什么"><a href="#Linux的进程、线程、文件描述符是什么" class="headerlink" title="Linux的进程、线程、文件描述符是什么"></a>Linux的进程、线程、文件描述符是什么</h3><h3 id="关于-Linux-shell-你必须知道的"><a href="#关于-Linux-shell-你必须知道的" class="headerlink" title="关于 Linux shell 你必须知道的"></a>关于 Linux shell 你必须知道的</h3><h3 id="Linux-shell-的实用小技巧"><a href="#Linux-shell-的实用小技巧" class="headerlink" title="Linux shell 的实用小技巧"></a>Linux shell 的实用小技巧</h3><h3 id="一文看懂-session-和-cookie"><a href="#一文看懂-session-和-cookie" class="headerlink" title="一文看懂 session 和 cookie"></a>一文看懂 session 和 cookie</h3><h3 id="加密算法的前身今世"><a href="#加密算法的前身今世" class="headerlink" title="加密算法的前身今世"></a>加密算法的前身今世</h3><h3 id="我用四个命令概括了-Git-的所有套路"><a href="#我用四个命令概括了-Git-的所有套路" class="headerlink" title="我用四个命令概括了 Git 的所有套路"></a>我用四个命令概括了 Git 的所有套路</h3><h3 id="Git-x2F-SQL-x2F-正则表达式的在线练习平台"><a href="#Git-x2F-SQL-x2F-正则表达式的在线练习平台" class="headerlink" title="Git&#x2F;SQL&#x2F;正则表达式的在线练习平台"></a>Git&#x2F;SQL&#x2F;正则表达式的在线练习平台</h3>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>使用java8实现List中对象属性的去重</title>
    <url>/posts/c77b99c1/</url>
    <content><![CDATA[<h1 id="使用java8实现List中对象属性的去重"><a href="#使用java8实现List中对象属性的去重" class="headerlink" title="使用java8实现List中对象属性的去重"></a>使用java8实现List中对象属性的去重</h1><p>今天在工作的时候遇到了一个问题，就是List的去重，不想用双重for，感觉太low，不想用for+Map，感觉应该有更好的方法，于是，google之。发现java8的stream流能完美解决这个问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;BookInfoVo&gt; list</span><br></pre></td></tr></table></figure>
<p>比如在 BookInfoVo 中有一个 recordId 属性,现在需要对此去重.</p>
<p>怎么办呢?</p>
<p>有两种方法:</p>
<ul>
<li>第一种: 不使用java8 的 Stream<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;BookInfoVo&gt; <span class="title function_">removeDupliByRecordId</span><span class="params">(List&lt;BookInfoVo&gt; books)</span> &#123;</span><br><span class="line">	Set&lt;BookInfoVo&gt; bookSet = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;((o1, o2)-&gt;o1.getRecordId().compareTo(o2.getRecordId()));</span><br><span class="line">          personSet.addAll(books);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;BookInfoVo&gt;(bookSet);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
这也是大多数人第一想到的,借助 TreeSet 去重,其中 TreeSet 的其中一个构造函数接收一个排序的算法,同时这也会用到 TreeSet 的去重策略上.<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Constructs a new, empty tree set, sorted according to the specified</span></span><br><span class="line"><span class="comment">     * comparator.  All elements inserted into the set must be &lt;i&gt;mutually</span></span><br><span class="line"><span class="comment">     * comparable&lt;/i&gt; by the specified comparator: &#123;<span class="doctag">@code</span> comparator.compare(e1,</span></span><br><span class="line"><span class="comment">     * e2)&#125; must not throw a &#123;<span class="doctag">@code</span> ClassCastException&#125; for any elements</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> e1&#125; and &#123;<span class="doctag">@code</span> e2&#125; in the set.  If the user attempts to add</span></span><br><span class="line"><span class="comment">     * an element to the set that violates this constraint, the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> add&#125; call will throw a &#123;<span class="doctag">@code</span> ClassCastException&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> comparator the comparator that will be used to order this set.</span></span><br><span class="line"><span class="comment">     *        If &#123;<span class="doctag">@code</span> null&#125;, the &#123;<span class="doctag">@linkplain</span> Comparable natural</span></span><br><span class="line"><span class="comment">     *        ordering&#125; of the elements will be used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">TreeSet</span><span class="params">(Comparator&lt;? <span class="built_in">super</span> E&gt; comparator)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;(comparator));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li>第二种: 炫酷的java8写法]<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*方法二:炫酷的java8写法*/</span></span><br><span class="line">ArrayList&lt;BookInfoVo&gt; distinctLiost = list.stream()</span><br><span class="line">                  .collect(</span><br><span class="line">                          Collectors.collectingAndThen(</span><br><span class="line">                                  Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparingLong(BookInfoVo::getRecordId))), ArrayList::<span class="keyword">new</span>)</span><br><span class="line">                  );</span><br></pre></td></tr></table></figure>
当然也可以根据多个属性去重<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;BookInfoVo&gt; distinctLiost = list.stream().collect(Collectors.collectingAndThen(</span><br><span class="line">  Collectors.toCollection(() -&gt; <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;(Comparator.comparing(o -&gt; o.getName() + <span class="string">&quot;;&quot;</span> + o.getAuthor()))), ArrayList::<span class="keyword">new</span>)</span><br></pre></td></tr></table></figure>
如果没有第一种方法做铺垫,我们很可能一脸懵逼.</li>
</ul>
<p>其实理解起来也不难:</p>
<p>关键在于Collectors.collectingAndThen( Collectors.toCollection(() -&gt; new TreeSet&lt;&gt;(Comparator.comparingLong(BookInfoVo::getRecordId))), ArrayList::new)的理解,</p>
<p>collectingAndThen 这个方法的意思是: 将收集的结果转换为另一种类型: collectingAndThen,</p>
<p>因此上面的方法可以理解为,把 new TreeSet&lt;&gt;(Comparator.comparingLong(BookInfoVo::getRecordId))这个set转换为 ArrayList,这个结合第一种方法不难理解.</p>
<p>可以看到java8这种写法真是炫酷又强大!!!</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>注释书写</title>
    <url>/posts/f0b74f41/</url>
    <content><![CDATA[<h1 id="注释书写规范"><a href="#注释书写规范" class="headerlink" title="注释书写规范"></a>注释书写规范</h1><ul>
<li>一般情况下，源程序有效注释量必须在30％以上。注释的原则是有助于对程序的阅读理解，在该加的地方都加了，注释不宜太多也不能太少，注释语言必须准确、易懂、简洁。可以用注释统计工具来统计。<h2 id="一、类和接口的注释"><a href="#一、类和接口的注释" class="headerlink" title="一、类和接口的注释"></a>一、类和接口的注释</h2></li>
</ul>
<p><strong>1. 类外注释</strong></p>
<blockquote>
<p>该注释放在 package 关键字之后，class 或者 interface 关键字之前。</p>
</blockquote>
<ul>
<li>说明：方便JavaDoc收集。<br>示例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.huawei.msg.relay.comm;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注释内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommManager</span></span><br></pre></td></tr></table></figure>
<ul>
<li>类和接口的注释内容：类的注释主要是一句话功能简述、功能详细描述。<br>格式：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉</span></span><br><span class="line"><span class="comment"> * 〈功能详细描述〉</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
<li>描述部分说明该类或者接口的功能、作用、使用方法和注意事项。<br>示例：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LogManager 类集中控制对日志读写的操作。</span></span><br><span class="line"><span class="comment"> * 全部为静态变量和静态方法，对外提供统一接口。分配对应日志类型的读写器，</span></span><br><span class="line"><span class="comment"> * 读取或写入符合条件的日志纪录。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>2. 类内注释</strong></p>
<blockquote>
<p>类属性、公有和保护方法必须写注释。geter、seter方法不用写注释</p>
</blockquote>
<p>  示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注释内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String logType;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注释内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">()</span></span><br></pre></td></tr></table></figure>
<p>1).成员变量注释内容：成员变量的意义、目的、功能，可能被用到的地方。<br>2).公有和保护方法注释内容：列出方法的一句话功能    简述、功能详细描述、输入参数、输出参数、返回值、违例等。<br>格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 〈一句话功能简述〉</span></span><br><span class="line"><span class="comment"> * 〈功能详细描述〉</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [参数1] [in或out]  [参数1说明]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  [参数2] [in或out]  [参数2说明]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> [返回类型说明]</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@exception</span>/throws [违例类型] [违例说明]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>说明： @exception或throws 列出可能仍出的异常。<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用MD5算法计算输入字符串的32位摘要</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sIn [in] 待处理的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sOut [out] sIn的32为摘要，调用函数负责new sOut对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">getMd5</span><span class="params">(String sIn, StringBuffer sOut)</span> </span><br></pre></td></tr></table></figure>
<p>说明：<br>1）.注释应与其描述的代码相近，对代码的注释应放在其上方或右方（对单条语句的注释）相邻位置，不可放在下面，如放于上方则需与其上面的代码用空行隔开。<br>2）.注释与所描述内容进行同样的缩排。<br>3）.将注释与其上面的代码用空行隔开。<br>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释</span></span><br><span class="line">program code <span class="title function_">one</span></span><br><span class="line"><span class="params">(空一格)</span>   </span><br><span class="line"><span class="comment">//注释</span></span><br><span class="line">program code two</span><br></pre></td></tr></table></figure>
<h2 id="二、方法与复杂逻辑的注释"><a href="#二、方法与复杂逻辑的注释" class="headerlink" title="二、方法与复杂逻辑的注释"></a>二、方法与复杂逻辑的注释</h2><blockquote>
<p>对变量的定义和分支语句（条件分支、循环语句等）对复杂的分支必须编写注释，如果时间允许，建议对所有分支语句写注释。</p>
</blockquote>
<p>说明：这些语句往往是程序实现某一特定功能的关键，对于维护人员来说，良好的注释帮助更好的理解程序，有时甚至优于看设计文档。</p>
<ol>
<li>switch语句</li>
</ol>
<ul>
<li>switch语句下的case语句，如果因为特殊情况需要处理完一个case后进入下一个case处理，必须在该case语句处理完、下一个case语句前加上明确的注释。</li>
<li>说明：这样比较清楚程序编写者的意图，有效防止无故遗漏break语句。</li>
</ul>
<ol start="2">
<li>边写代码边注释</li>
</ol>
<ul>
<li>修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。</li>
</ul>
<ol start="3">
<li>避免在注释中使用缩写</li>
</ol>
<ul>
<li>在使用缩写时或之前，应对缩写进行必要的说明，特别是不常用缩写。</li>
</ul>
<ol start="4">
<li>用中文注释，禁止用英文写注释。<h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2></li>
<li>避免在一行代码或表达式的中间插入注释。</li>
</ol>
<ul>
<li>说明：除非必要，不应在代码或表达中间插入注释，否则容易使代码可理解性变差。</li>
</ul>
<ol start="2">
<li>通过对函数或过程、变量、结构等正确的命名以及合理地组织代码的结构，使代码成为自注释的。</li>
</ol>
<ul>
<li>说明：清晰准确的函数、变量等的命名，可增加代码可读性，并减少不必要的注释。</li>
</ul>
<ol start="3">
<li>在代码的功能、意图层次上进行注释，提供有用、额外的信息。</li>
</ol>
<ul>
<li>说明：注释的目的是解释代码的目的、功能和采用的方法，提供代码以外的信息，帮助读者理解代码，防止没必要的重复注释信息。</li>
<li>示例：如下注释意义不大。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果 receiveFlag 为真</span></span><br><span class="line"><span class="keyword">if</span> (receiveFlag)</span><br></pre></td></tr></table></figure></li>
<li>而如下的注释则给出了额外有用的信息。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果从连结收到消息 </span></span><br><span class="line"><span class="keyword">if</span> (receiveFlag)</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="4">
<li>在程序块的结束行右方加注释标记，以表明某程序块的结束。</li>
</ol>
<ul>
<li>说明：当代码段较长，特别是多重嵌套时，这样做可以使代码更清晰，更便于阅读。</li>
<li>示例：参见如下例子。<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (...)</span><br><span class="line">&#123;</span><br><span class="line">    program code1</span><br><span class="line">    <span class="title function_">while</span> <span class="params">(index &lt; MAX_INDEX)</span></span><br><span class="line">    &#123;</span><br><span class="line">        program code2</span><br><span class="line">    &#125; <span class="comment">// end of while (index &lt; MAX_INDEX) // 指明该条while语句结束</span></span><br><span class="line">&#125; <span class="comment">// end of  if (...) // 指明是哪条if语句结束</span></span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="5">
<li>方法内的单行注释使用 &#x2F;&#x2F;。</li>
</ol>
<ul>
<li>说明：调试程序的时候可以方便的使用 &#x2F;* 。。。*&#x2F; 注释掉一长段程序。</li>
</ul>
<ol start="6">
<li>注释使用中文注释和中文标点，不得用英文写注释。方法和类描述的第一句话尽量使用简洁明了的话概括一下功能，然后加以句号。接下来的部分可以详细描述。</li>
</ol>
<ul>
<li>说明：JavaDoc工具收集简介的时候使用选取第一句话。</li>
</ul>
<ol start="7">
<li>顺序实现流程的说明使用1、2、3、4在每个实现步骤部分的代码前面进行注释。</li>
</ol>
<ul>
<li>示例：如下是对设置属性的流程注释<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1、 判断输入参数是否有效。</span></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 2、设置本地变量。</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="8">
<li>一些复杂的算法代码需要说明。</li>
</ol>
<ul>
<li>示例：这里主要是对闰年算法的说明。<br><code>java //1. 如果能被4整除，是闰年； //2. 如果能被100整除，不是闰年.； //3. 如果能被400整除，是闰年.。 </code>星期五, 23. 八月 2019 07:42下午</li>
</ul>
<p>**</p>
<hr>
<p>**</p>
]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>java8类型互转</title>
    <url>/posts/74cfd586/</url>
    <content><![CDATA[<h1 id="java8类型互转"><a href="#java8类型互转" class="headerlink" title="java8类型互转"></a>java8类型互转</h1><h2 id="List-lt-Integer-gt-、int-、Integer-相互转换"><a href="#List-lt-Integer-gt-、int-、Integer-相互转换" class="headerlink" title="List&lt; Integer &gt;、int[ ]、Integer[ ]相互转换"></a>List&lt; Integer &gt;、int[ ]、Integer[ ]相互转换</h2><p>[toc]</p>
<p>下文中出现的list、ints、integers分别代表一个列表、一个int数组、一个Integer数组。<br>它们之间所谓的转化，其实是 复制数据，互不干扰，可以理解为深拷贝。</p>
<h3 id="int-转-List-lt-Integer-gt"><a href="#int-转-List-lt-Integer-gt" class="headerlink" title="int[ ] 转 List&lt; Integer &gt;"></a>int[ ] 转 List&lt; Integer &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.stream(ints).boxed().collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<p>Arrays.stream(ints) 之后返回的类型是 IntStream，IntStream 是一个接口继承自 BaseStream，BaseStream 又继承自AutoCloseable。所以我把IntStream看成一个方便对每个整数做操作的数据流。</p>
<p>之后调用了 boxed()，它的作用是对每个整数进行装箱，基本类型流转换为对象流，返回的是 Stream<Integer>，Stream 也是继承自 BaseStream。所以这一步的作用是把 IntStream 转换成了 Stream<Integer>。</p>
<p>最后通过collect方法将数据流 (Stream<Integer>) 收集成了集合 ( List<Integer>)，这里 collect 方法里传入的是一个收集器 (Collector)，它通过 Collectors.toList() 产生。</p>
<p>小结：</p>
<ol>
<li>Arrays.stream(ints) 将基本类型数组转换为基本类型流。 int[ ] &#x3D;&gt; IntStream</li>
<li>.boxed() 将基本类型流转换为对象流。 &#x3D;&gt; Stream&lt; Integer &gt;</li>
<li>.collect(Collectors.toList()) 将对象流收集为集合。 &#x3D;&gt; List&lt; Integer &gt;</li>
</ol>
<h3 id="int-转-List-lt-List-lt-Integer-gt-gt"><a href="#int-转-List-lt-List-lt-Integer-gt-gt" class="headerlink" title="int[ ] [ ] 转 List&lt;  List &lt; Integer &gt;  &gt;"></a>int[ ] [ ] 转 List&lt;  List &lt; Integer &gt;  &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> Arrays.deepToString(fooArr).replaceAll(<span class="string">&quot;\\[&quot;</span>,<span class="string">&quot;&quot;</span>).replaceAll(<span class="string">&quot;\\]&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line">List&lt;String&gt; fooList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="string">&quot;,&quot;</span>)); <span class="comment">//不对</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; collect2 = Arrays.Stream(ints1).map(ar -&gt; Arrays.stream(ar).boxed().collect(Collectors.toList())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="int-转-Integer"><a href="#int-转-Integer" class="headerlink" title="int[ ] 转 Integer[ ]"></a>int[ ] 转 Integer[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] integers = Arrays.stream(ints).boxed().toArray(Integer[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<p>一样的内容就不重复了，toArray(T[ ] :: new) 方法返回基本类型数组。<br>小结：</p>
<ol>
<li>Arrays.stream(ints) 将基本类型数组转换为基本类型流。 int[ ] &#x3D;&gt; IntStream</li>
<li>.boxed() 将基本类型流转换为对象流。&#x3D;&gt; Stream&lt; Integer &gt;</li>
<li>.toArray(Integer[ ]::new) 将对象流转换为对象数组。&#x3D;&gt; Integer[ ]</li>
</ol>
<h3 id="int-转-Integer-1"><a href="#int-转-Integer-1" class="headerlink" title="int[ ] [ ]转 Integer[ ] [ ]"></a>int[ ] [ ]转 Integer[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[][] integers3 = Arrays.stream(ints1).map(ints -&gt; Arrays.stream(ints).boxed().toArray(Integer[]::<span class="keyword">new</span>)).toArray(Integer[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Integer-转-List-lt-Integer-gt"><a href="#Integer-转-List-lt-Integer-gt" class="headerlink" title="Integer[ ] 转 List&lt; Integer &gt;"></a>Integer[ ] 转 List&lt; Integer &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(integers);</span><br></pre></td></tr></table></figure>

<p>这个就很简单了，通过Arrays类里的asList方法将数组装换为List。值得注意：</p>
<p>asList 返回的是 Arrays 里的静态私有类 ArrayList，而不是 java.util 里的 ArrayList，它无法自动扩容。</p>
<p>可以用下面2种方法生成可扩容的ArrayList：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(Arrays.asList(integers)); </span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(); </span><br><span class="line">Collections.addAll(list, integers);</span><br></pre></td></tr></table></figure>

<h3 id="Integer-转-List-lt-List-lt-Integer-gt-gt"><a href="#Integer-转-List-lt-List-lt-Integer-gt-gt" class="headerlink" title="Integer[ ] [ ]转 List&lt; List &lt; Integer &gt; &gt;"></a>Integer[ ] [ ]转 List&lt; List &lt; Integer &gt; &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;&#125;;</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; lists = Arrays.stream(a).map(Arrays::asList).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="Integer-转-int"><a href="#Integer-转-int" class="headerlink" title="Integer[ ] 转 int[ ]"></a>Integer[ ] 转 int[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ints = Arrays.stream(integers).mapToInt(Integer::valueOf).toArray();</span><br></pre></td></tr></table></figure>

<p>map的意思是把每一个元素进行同样的操作。mapToInt的意思是把每一个元素转换为int。mapToInt(Integer::valueOf)方法返回的是IntStream。<br>小结：</p>
<ol>
<li>Arrays.stream(integers) 将对象数组转换为对象流。 Integer[ ] &#x3D;&gt; Stream&lt; Integer &gt;</li>
<li>.mapToInt(Integer::valueOf) 将对象流转换成基本类型流。&#x3D;&gt; IntStream</li>
<li>.toArray() 将基本类型流转换为基本类型数组。 &#x3D;&gt; int[ ]</li>
</ol>
<h3 id="Integer-转-int-1"><a href="#Integer-转-int-1" class="headerlink" title="Integer[ ] [ ]转 int[ ] [ ]"></a>Integer[ ] [ ]转 int[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;&#125;;      </span><br><span class="line"><span class="type">int</span>[][] ints1 = Arrays.stream(a).map(a1 -&gt; Arrays.stream(a1).mapToInt(Integer::valueOf).toArray()).toArray(<span class="type">int</span>[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Integer-gt-转-int"><a href="#List-lt-Integer-gt-转-int" class="headerlink" title="List&lt; Integer &gt; 转 int[ ]"></a>List&lt; Integer &gt; 转 int[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[] ints = list.stream().mapToInt(Integer::valueOf).toArray();</span><br></pre></td></tr></table></figure>

<p>经过上面的说明，相信这里已经很好理解了，直接小结。<br>小结：</p>
<ol>
<li>list.stream() 将列表转换为对象流。List&lt; Integer &gt; &#x3D;&gt; Stream&lt; Integer &gt;</li>
<li>.mapToInt(Integer::valueOf) 将对象流转换为基本数据类型流。&#x3D;&gt; IntStream</li>
<li>.toArray() 将基本数据类型流转换为基本类型数组。&#x3D;&gt;int[ ]</li>
</ol>
<h3 id="List-lt-List-lt-Integer-gt-gt-转-int"><a href="#List-lt-List-lt-Integer-gt-gt-转-int" class="headerlink" title="List&lt; List &lt; Integer &gt; &gt; 转 int[ ] [ ]"></a>List&lt; List &lt; Integer &gt; &gt; 转 int[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; lists = ...;</span><br><span class="line"><span class="type">int</span>[][] arrays = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">        .map(list -&gt; list.stream().mapToInt(i -&gt; i).toArray()) <span class="comment">// Stream&lt;int[]&gt;</span></span><br><span class="line">        .toArray(<span class="type">int</span>[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Integer-gt-转-Integer"><a href="#List-lt-Integer-gt-转-Integer" class="headerlink" title="List&lt; Integer &gt; 转 Integer[ ]"></a>List&lt; Integer &gt; 转 Integer[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] integers = list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[list.size()]);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[] integers = list.stream().toArray(Integer[]::<span class="keyword">new</span>); <span class="comment">//不推荐</span></span><br></pre></td></tr></table></figure>

<p>这个也很简单，方法里的参数是一个数组，所以要规定长度。也有无参的方法，但是要进行转型，所以不推荐使用。</p>
<h3 id="List-lt-List-lt-Integer-gt-gt-转-Integer"><a href="#List-lt-List-lt-Integer-gt-gt-转-Integer" class="headerlink" title="List&lt; List &lt; Integer &gt; &gt; 转 Integer[ ] [ ]"></a>List&lt; List &lt; Integer &gt; &gt; 转 Integer[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; lists = ...;</span><br><span class="line">Integer[][] arrays = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">        .map(list -&gt; list.toArray(<span class="keyword">new</span> <span class="title class_">Integer</span>[list.size()])) <span class="comment">// Stream&lt;Integer[]&gt;</span></span><br><span class="line">        .toArray(Integer[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[][] arrays = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">        .map(l -&gt; l.stream().toArray(String[]::<span class="keyword">new</span>)) <span class="comment">// Stream&lt;Integer[]&gt;</span></span><br><span class="line">        .toArray(Integer[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer[][] arrays = lists.stream().map(List::toArray).toArray(Integer[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>



<h2 id="List-lt-Character-gt-、char-、Character-相互转换"><a href="#List-lt-Character-gt-、char-、Character-相互转换" class="headerlink" title="List&lt; Character &gt;、char[ ]、Character[ ]相互转换"></a>List&lt; Character &gt;、char[ ]、Character[ ]相互转换</h2><h3 id="char-转-List-lt-Character-gt"><a href="#char-转-List-lt-Character-gt" class="headerlink" title="char[ ] 转 List&lt; Character &gt;"></a>char[ ] 转 List&lt; Character &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">List&lt;Character&gt; collect = <span class="keyword">new</span> <span class="title class_">String</span>(chars).chars().mapToObj(i -&gt; (<span class="type">char</span>) i).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="char-转-List-lt-List-lt-Character-gt-gt"><a href="#char-转-List-lt-List-lt-Character-gt-gt" class="headerlink" title="char[ ] [ ] 转 List&lt;  List &lt; Character &gt;  &gt;"></a>char[ ] [ ] 转 List&lt;  List &lt; Character &gt;  &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Character&gt;&gt; collect2 = Arrays.stream(ints1).map(chars1 -&gt; <span class="keyword">new</span> <span class="title class_">String</span>(chars1).chars().mapToObj(i -&gt; (<span class="type">char</span>) i).collect(Collectors.toList())).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="char-转-Character"><a href="#char-转-Character" class="headerlink" title="char[ ] 转 Character[ ]"></a>char[ ] 转 Character[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] chars = &#123;<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>&#125;;</span><br><span class="line">Character[] characters1 = <span class="keyword">new</span> <span class="title class_">String</span>(chars).chars().mapToObj(i -&gt; (<span class="type">char</span>) i).toArray(Character[]::<span class="keyword">new</span>);     </span><br></pre></td></tr></table></figure>

<h3 id="char-转-Character-1"><a href="#char-转-Character-1" class="headerlink" title="char[ ] [ ]转 Character[ ] [ ]"></a>char[ ] [ ]转 Character[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[][] integers3 = Arrays.stream(ints1).map(chars -&gt; <span class="keyword">new</span> <span class="title class_">String</span>(chars).chars().mapToObj(i-&gt;(<span class="type">char</span>)i).toArray(Character[]::<span class="keyword">new</span>)).toArray(Character[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Character-转-List-lt-Character-gt"><a href="#Character-转-List-lt-Character-gt" class="headerlink" title="Character[ ] 转 List&lt; Character &gt;"></a>Character[ ] 转 List&lt; Character &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Character&gt; collect2 = Arrays.stream(characters).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="Character-转-List-lt-List-lt-Character-gt-gt"><a href="#Character-转-List-lt-List-lt-Character-gt-gt" class="headerlink" title="Character[ ] [ ]转 List&lt; List &lt; Character &gt; &gt;"></a>Character[ ] [ ]转 List&lt; List &lt; Character &gt; &gt;</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Character&gt;&gt; lists = Arrays.stream(a).map(Arrays::asList).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="Character-转-char"><a href="#Character-转-char" class="headerlink" title="Character[ ] 转 char[ ]"></a>Character[ ] 转 char[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] chars4 = Arrays.stream(characters1).map(String::valueOf).collect(Collectors.joining()).toCharArray();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Character-转-char-1"><a href="#Character-转-char-1" class="headerlink" title="Character[ ] [ ]转 char[ ] [ ]"></a>Character[ ] [ ]转 char[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[][] ints1 = Arrays.stream(a).map(a1 -&gt; Arrays.stream(a1).map(String::valueOf).collect(Collectors.joining()).toCharArray()).toArray(<span class="type">char</span>[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Character-gt-转-char"><a href="#List-lt-Character-gt-转-char" class="headerlink" title="List&lt; Character &gt; 转 char[ ]"></a>List&lt; Character &gt; 转 char[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[] value = characters.stream().map(String::valueOf).collect(Collectors.joining()).toCharArray();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[] charArr = characters.toArray(<span class="keyword">new</span> <span class="title class_">Character</span>[characters.size()]);</span><br><span class="line"><span class="type">char</span>[] value = ArrayUtils.toPrimitive(charArr);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-List-lt-Character-gt-gt-转-char"><a href="#List-lt-List-lt-Character-gt-gt-转-char" class="headerlink" title="List&lt; List &lt; Character &gt; &gt; 转 char[ ] [ ]"></a>List&lt; List &lt; Character &gt; &gt; 转 char[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>[][] arrays = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">                .map(list -&gt; list.stream().map(String::valueOf).collect(Collectors.joining()).toCharArray()) <span class="comment">// Stream&lt;int[]&gt;</span></span><br><span class="line">                .toArray(<span class="type">char</span>[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-Character-gt-转-Character"><a href="#List-lt-Character-gt-转-Character" class="headerlink" title="List&lt; Character &gt; 转 Character[ ]"></a>List&lt; Character &gt; 转 Character[ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[] characters2 = Arrays.stream(characters1).toArray(Character[]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<h3 id="List-lt-List-lt-Character-gt-gt-转-Character"><a href="#List-lt-List-lt-Character-gt-gt-转-Character" class="headerlink" title="List&lt; List &lt; Character &gt; &gt; 转 Character[ ] [ ]"></a>List&lt; List &lt; Character &gt; &gt; 转 Character[ ] [ ]</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[][] integers1 = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">               .map(list -&gt; list.toArray(<span class="keyword">new</span> <span class="title class_">Character</span>[list.size()])).toArray(Character[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[][] integers2 = lists.stream()                                <span class="comment">// Stream&lt;List&lt;Integer&gt;&gt;</span></span><br><span class="line">                .map(l -&gt; l.stream().toArray(Character[]::<span class="keyword">new</span>))</span><br><span class="line">                .toArray(Character[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Character[][] integers = lists.stream().map(List::toArray).toArray(Character[][]::<span class="keyword">new</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>语法</category>
      </categories>
      <tags>
        <tag>java8</tag>
      </tags>
  </entry>
  <entry>
    <title>java 名词</title>
    <url>/posts/22472e9c/</url>
    <content><![CDATA[<h1 id="java-名词"><a href="#java-名词" class="headerlink" title="java 名词"></a>java 名词</h1><h2 id="“吃人”的那些Java名词：对象、引用、堆、栈️"><a href="#“吃人”的那些Java名词：对象、引用、堆、栈️" class="headerlink" title="“吃人”的那些Java名词：对象、引用、堆、栈️"></a>“吃人”的那些Java名词：对象、引用、堆、栈️</h2><p>经验都是慢慢积累的，天才不多｜ 第170篇</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/z40lCFUAHpmSC3DSh9MC8QiaZiakWP0mHCnSvS20HavA8udLNlNaImXlzYmA6TlVIxe00l1BkfXKvJoAIQsVWaEg/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>记得中学的课本上，有一篇名为《狂人日记》课文；那时候根本理解不了鲁迅写这篇文章要表达的中心思想，只觉得满篇的“<strong>吃人</strong>”令人心情压抑；老师在讲台上慷慨激昂的讲，大多数的同学同我一样，在课本面前“痴痴”的发呆。</p>
<p>作为一个有着8年Java编程经验的IT老兵，说起来很惭愧，我被Java当中的四五个名词一直困扰着：<strong>对象、引用、堆、栈、堆栈</strong>（栈可同堆栈，因此是四个名词，也是五个名词）。每次我看到这几个名词，都隐隐约约觉得自己在被一只无形的大口慢慢地吞噬，只剩下满地的衣服碎屑（为什么不是骨头，因为骨头也好吃）。</p>
<p>十几年后，再读《狂人日记》，恍然如梦：</p>
<blockquote>
<p>鲁迅先生以狂人的口吻，再现了动乱时期下中国人的精神状态，视角新颖，文笔细腻又不乏辛辣之味。<br>当时的中国，混乱成了主色调。以清廷和孔教为主的封建旧思想还在潜移默化地影响着人们的思想，与此同时以革命和新思潮为主的现代思想已经开始了对大众灵魂的洗涤和冲击。</p>
</blockquote>
<p>最近，和沉默王二技术交流群（120926808）的群友们交流后，Java中那四五个会吃人的名词：对象、引用、堆、栈、堆栈，似乎在脑海中也清晰了起来，尽管疑惑有时候仍然会在阴云密布时跑出来——正鉴于此，这篇文章恰好做一下归纳。</p>
<h3 id="一、对象和引用"><a href="#一、对象和引用" class="headerlink" title="一、对象和引用"></a>一、对象和引用</h3><p><strong>在Java中，尽管一切都可以看做是对象，但计算机操作的并非对象本身，而是对象的引用。</strong> 这话乍眼一看，似懂非懂。究竟什么是对象，什么又是引用呢？</p>
<p>先来看对象的定义：按照通俗的说法，<strong>每个对象都是某个类（class）的一个实例（instance）</strong>。那么，实例化的过程怎么描述呢？来看代码（类是String）：</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;我是对象张三&quot;</span>);</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;我是对象李四&quot;</span>);</span><br></pre></td></tr></table></figure>

<p><strong>在Java中，实例化指的就是通过关键字“new”来创建对象的过程</strong>。以上代码在运行时就会创建两个对象——“我是对象张三”和”我是对象李四”；现在，该怎么操作他们呢？</p>
<p>我们都去过公园，见过几个大爷，他们很有一番本领——个个都能把风筝飞得老高老高，徒留我们眼馋的份！风筝飞那么高，没办法直接用手拽着飞啊，全要靠一根长长的看不见的结实的绳子来牵引！操作Java对象也是这个理，得有一根绳——也就是接下来要介绍的“引用”（我们肉眼也常常看不见它）。</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> zhangsan, lisi;</span><br><span class="line">zhangsan = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;我是对象张三&quot;</span>);</span><br><span class="line">lisi = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;我是对象李四&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>这三行代码该怎么理解呢？</p>
<p>先来看第一行代码：<code>String zhangsan, lisi;</code>——声明了两个变量zhangsan和lisi，他们的类型为String。</p>
<p>①、歧义：zhangsan和lisi此时被称为引用。</p>
<p>你也许听过这样一句古文：“<strong>神之于形，犹利之于刀；未闻刀没而利存，岂容形亡而神在？</strong>”这是无神论者范缜（zhen）的名言，大致的意思就是：灵魂对于肉体来说，就像刀刃对于刀身；从没听说过刀身都没了刀刃还存在，那么怎么可能允许肉体死亡了而灵魂还在呢？</p>
<p><strong>“引用”之于对象，就好比刀刃之于刀身，对象还没有创建，又怎么存在对象的“引用”呢？</strong></p>
<p>如果zhangsan和lisi此时不能被称为“引用”，那么他们是什么呢？答案很简单，就是变量啊！（鄙人理解）</p>
<p>②、误解：zhangsan和lisi此时的默认值为<code>null</code>。</p>
<p>应该说zhangsan和lisi此时的值为<code>undefined</code>——借用JavaScript的关键字；也就是未定义；或者应该是一个新的关键字<code>uninitialized</code>——未初始化。但不管是<code>undefined</code>还是<code>uninitialized</code>，都与<code>null</code>不同。</p>
<p>既然没有初始化，zhangsan和lisi此时就不能被使用。假如强行使用的话，编译器就会报错，提醒zhangsan和lisi还没有出生（初始化）；见下图。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/z40lCFUAHpmSC3DSh9MC8QiaZiakWP0mHCNHs3SgxauYqH7dfThPqpXLcy1XmBFqk8KS6V6V2N1xjWTy3QtZKgjQ/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>如果把zhangsan和lisi初始化为<code>null</code>，编译器是认可的（见下图）；由此可见，zhangsan和lisi此时的默认值不为<code>null</code>。</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/z40lCFUAHpmSC3DSh9MC8QiaZiakWP0mHCtBhECcmKL8DW8nGZ8pZWGOic829gaf3Ro8wqibHII0ldETvciaYHtKFKg/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>再来看第二行代码：<code>zhangsan = new String(&quot;我是对象张三&quot;);</code>——创建“我是对象张三”的String类对象，并将其赋值给zhangsan这个变量。</p>
<p>此时，zhangsan就是”我是对象张三”的引用；“&#x3D;”操作符赋予了zhangsan这样神圣的权利。</p>
<p>第三行代码<code>lisi = new String(&quot;我是对象李四&quot;);</code>和第二行代码<code>zhangsan = new String(&quot;我是对象张三&quot;);</code>同理。</p>
<p>现在，我可以下这样一个结论了——<strong>对象是通过<code>new</code>关键字创建的；引用是依赖于对象的；<code>=</code>操作符把对象赋值给了引用</strong>。</p>
<p>我们再来看这样一段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String zhangsan, lisi;</span><br><span class="line">zhangsan = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我是对象张三&quot;</span>);</span><br><span class="line">lisi = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;我是对象李四&quot;</span>);</span><br><span class="line">zhangsan = lisi;</span><br></pre></td></tr></table></figure>

<p>当<code>zhangsan = lisi;</code>执行过后，zhangsan就不再是”我是对象张三”的引用了；zhangsan和lisi指向了同一个对象（”我是对象李四”）；因此，你知道<code>System.out.println(zhangsan == lisi);</code>打印的是<code>false</code>还是<code>true</code>了吗？</p>
<h3 id="二、堆、栈、堆栈"><a href="#二、堆、栈、堆栈" class="headerlink" title="二、堆、栈、堆栈"></a>二、堆、栈、堆栈</h3><p>谁来告诉我，为什么有很多地方（书、博客等等）把栈叫做堆栈，把堆栈叫做栈？搞得我都头晕目眩了——绕着门柱估计转了80圈，不晕才怪！</p>
<p>我查了一下金山词霸，结果如下：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/z40lCFUAHpmSC3DSh9MC8QiaZiakWP0mHCj8OO5nupmycuwht01HibVPgN2UysUiaic5CViaKzAsBBdhBAIeBHpAzx2g/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>我的天呐，更晕了，有没有！怎么才能不晕呢？我这里有几招武功秘籍，你们尽管拿去一睹为快：</p>
<p>1）以后再<strong>看到堆、栈、堆栈三个在一起打牌的时候，直接把“堆栈”踢出去</strong>；这仨人不适合在一起玩，因为堆和栈才是老相好；你“堆栈”来这插一脚算怎么回事；这世界上只存在“堆、栈”或者“堆栈”（标点符号很重要哦）。</p>
<p>2）<strong>堆是在程序运行时在内存中申请的空间（可理解为动态的过程）；切记，不是在编译时</strong>；因此，Java中的对象就放在这里，这样做的好处就是：</p>
<blockquote>
<p>当需要一个对象时，只需要通过new关键字写一行代码即可，当执行这行代码时，会自动在内存的“堆”区分配空间——这样就很灵活。</p>
</blockquote>
<p>另外，需要记住，<strong>堆遵循“先进后出”的规则</strong>。就好像，一个和尚去挑了一担水，然后把一担水装缸里面，等到他口渴的时候他再用瓢舀出来喝。请放肆地打开你的脑洞脑补一下这个流程：缸底的水是先进去的，但后出来的。所以，我建议这位和尚在缸上贴个标签——保质期90天，过期饮用，后果自负！</p>
<p>还是记不住，看下图：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/z40lCFUAHpmSC3DSh9MC8QiaZiakWP0mHCfOjwjLfkibbAfhjPM8rUFuFGFsEu6YY8DUAhYHPbDBGgBuHqfCxLACA/640?wx_fmt=jpeg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片">不好意思，这是鼎，不是缸，将就一下哈</p>
<p>3）栈，又名堆栈（简直了，完全不符合程序员的思维啊，我们陈许愿习惯说一就是一，说二就是二嘛），能够和处理器（CPU，也就是脑子）直接关联，因此访问速度更快；举个十分不恰当的例子哈——<strong>眼睛相对嘴巴是离脑子近的一方，因此，你可以一目十行，但绝对做不到一开口就读十行字，哪怕十个字也做不到</strong>。</p>
<p>既然访问速度快，要好好利用啊！<strong>Java就把对象的引用放在栈里</strong>。为什么呢？因为引用的使用频率高吗？</p>
<p>不是的，<strong>因为Java在编译程序时，必须明确的知道存储在栈里的东西的生命周期</strong>，否则就没法释放旧的内存来开辟新的内存空间存放引用——空间就那么大，前浪要把后浪拍死在沙滩上啊。</p>
<p>现在清楚堆、栈和堆栈了吧？</p>
<h3 id="三、特殊的“对象”"><a href="#三、特殊的“对象”" class="headerlink" title="三、特殊的“对象”"></a>三、特殊的“对象”</h3><p>先来看《Java编程思想》中的一段话：</p>
<blockquote>
<p>在程序设计中经常用到一系列类型，他们需要特殊对待。之所以特殊对待，是因为new将对象存储于“堆”中，故用new创建一个对象──特别小、简单的变量，往往不是很有效。因此，不用new来创建这类变量，而是创建一个并非是引用的变量，这个变量直接存储值，并置于栈中，因此更加高效。</p>
</blockquote>
<p>在Java中，这些基本类型有：boolean、char、byte、short、int、long、float、double和void；还有与之对应的包装器：Boolean、Character、Byte、Short、Integer、Long、Float、Double和Void；他们之间涉及到装箱和拆箱，我们有机会再聊。</p>
<p>看两行简单的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<p>这两行代码在编译的时候是什么样子呢？</p>
<p>编译器当然是先处理<code>int a = 3;</code>，不然还能跳过吗？编译器在处理<code>int a = 3;</code>时在栈中创建了一个变量为a的内存空间，然后查找有没有字面值为3的地址，没找到，就开辟一个存放3这个字面值的地址，然后将a指向3的地址。</p>
<p>编译器忙完了<code>int a = 3;</code>，就来接着处理<code>int b = 3;</code>；在创建完b的变量后，由于栈中已经有3这个字面值，就将b直接指向3的地址；就不需要再开辟新的空间了。</p>
<p>依据上面的概述，我们假设在定义完a与b的值后，再令a&#x3D;4，此时b是等于3呢，还是4呢？</p>
<p>思考一下，再看答案哈。</p>
<p>答案揭晓：当编译器遇到<code>a = 4;</code>时，它会重新搜索栈中是否有4的字面值，如果没有，重新开辟地址存放4的值；如果已经有了，则直接将a指向4这个地址；因此a值的改变不会影响到b的值哦。</p>
<p>最后，留个作业吧，下面这段代码在运行时会输出什么呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(a);</span><br><span class="line">        System.out.println(b);</span><br><span class="line"></span><br><span class="line">        <span class="type">TT</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TT</span>(<span class="string">&quot;T&quot;</span>);</span><br><span class="line">        <span class="type">TT</span> <span class="variable">t1</span> <span class="operator">=</span> t;</span><br><span class="line">        t.setName(<span class="string">&quot;TT&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(t.getName());</span><br><span class="line">        System.out.println(t1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TT</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TT</span> <span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java泛型类型擦除以及类型擦除带来的问题</title>
    <url>/posts/3a533665/</url>
    <content><![CDATA[<h1 id="Java泛型类型擦除以及类型擦除带来的问题"><a href="#Java泛型类型擦除以及类型擦除带来的问题" class="headerlink" title="Java泛型类型擦除以及类型擦除带来的问题"></a>Java泛型类型擦除以及类型擦除带来的问题</h1><h2 id="1-Java泛型的实现方法：类型擦除"><a href="#1-Java泛型的实现方法：类型擦除" class="headerlink" title="1.Java泛型的实现方法：类型擦除"></a>1.Java泛型的实现方法：类型擦除</h2><p>大家都知道，Java的泛型是伪泛型，这是因为Java在编译期间，所有的泛型信息都会被擦掉，正确理解泛型概念的首要前提是理解类型擦除。Java的泛型基本上都是在编译器这个层次上实现的，在生成的字节码中是不包含泛型中的类型信息的，使用泛型的时候加上类型参数，在编译器编译的时候会去掉，这个过程成为类型擦除。</p>
<p>如在代码中定义 <code>List&lt;Object&gt;</code>和 <code>List&lt;String&gt;</code>等类型，在编译后都会变成 <code>List</code>，JVM看到的只是List，而由泛型附加的类型信息对JVM是看不到的。Java编译器会在编译时尽可能的发现可能出错的地方，但是仍然无法在运行时刻出现的类型转换异常的情况，类型擦除也是Java的泛型与C++模板机制实现方式之间的重要区别。</p>
<h3 id="1-1-通过两个例子证明Java类型的类型擦除"><a href="#1-1-通过两个例子证明Java类型的类型擦除" class="headerlink" title="1-1.通过两个例子证明Java类型的类型擦除"></a>1-1.通过两个例子证明Java类型的类型擦除</h3><p>例1.原始类型相等</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list1.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line">        list2.add(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list1.getClass() == list2.getClass());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个例子中，我们定义了两个 <code>ArrayList</code>数组，不过一个是 <code>ArrayList&lt;String&gt;</code>泛型类型的，只能存储字符串；一个是 <code>ArrayList&lt;Integer&gt;</code>泛型类型的，只能存储整数，最后，我们通过 <code>list1</code>对象和 <code>list2</code>对象的 <code>getClass()</code>方法获取他们的类的信息，最后发现结果为 <code>true</code>。说明泛型类型 <code>String</code>和 <code>Integer</code>都被擦除掉了，只剩下原始类型。</p>
<p>例2.通过反射添加其它类型元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">1</span>);  <span class="comment">//这样调用add方法只能存储整形，因为泛型类型的实例为Integer</span></span><br><span class="line"></span><br><span class="line">        list.getClass().getMethod(<span class="string">&quot;add&quot;</span>, Object.class).invoke(list, <span class="string">&quot;asd&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在程序中定义了一个 <code>ArrayList</code>泛型类型实例化为 <code>Integer</code>对象，如果直接调用 <code>add()</code>方法，那么只能存储整数数据，不过当我们利用反射调用 <code>add()</code>方法的时候，却可以存储字符串，这说明了 <code>Integer</code>泛型实例在编译之后被擦除掉了，只保留了原始类型。</p>
<h2 id="2-类型擦除后保留的原始类型"><a href="#2-类型擦除后保留的原始类型" class="headerlink" title="2.类型擦除后保留的原始类型"></a>2.类型擦除后保留的原始类型</h2><p>在上面，两次提到了原始类型，什么是原始类型？</p>
<p><strong>原始类型</strong> 就是擦除去了泛型信息，最后在字节码中的类型变量的真正类型，无论何时定义一个泛型，相应的原始类型都会被自动提供，类型变量擦除，并使用其限定类型（无限定的变量用Object）替换。</p>
<p>例3.原始类型Object</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span>&lt;t&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> T value;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(T  value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Pair的原始类型为:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(Object  value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为在 <code>Pair&lt;t&gt;&lt;/t&gt;</code>中，T 是一个无限定的类型变量，所以用 <code>Object</code>替换，其结果就是一个普通的类，如同泛型加入Java语言之前的已经实现的样子。在程序中可以包含不同类型的 <code>Pair</code>，如 <code>Pair&lt;String&gt;</code>或 <code>Pair&lt;Integer&gt;</code>，但是擦除类型后他们的就成为原始的 <code>Pair</code>类型了，原始类型都是 <code>Object</code>。</p>
<p>从上面的例2中，我们也可以明白 <code>ArrayList&lt;Integer&gt;</code>被擦除类型后，<strong>原始类型</strong>也变为 <code>Object</code>，所以通过反射我们就可以存储字符串了。</p>
<p>如果类型变量有限定，那么<strong>原始类型</strong>就用<strong>第一个边界的类型变量类</strong>替换。</p>
<p>比如: Pair这样声明的话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pair</span>&lt;t <span class="keyword">extends</span> <span class="title class_">comparable</span>&gt; &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>那么<strong>原始类型</strong>就是 <code>Comparable</code>。</p>
<p>要区分原始类型和泛型变量的类型。</p>
<p>在调用泛型方法时，可以指定泛型，也可以不指定泛型。</p>
<ul>
<li>在不指定泛型的情况下，泛型变量的类型为该方法中的几种类型的同一父类的最小级，直到Object</li>
<li>在指定泛型的情况下，该方法的几种类型必须是该泛型的实例的类型或者其子类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**不指定泛型的时候**/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//这两个参数都是Integer，所以T为Integer类型  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">f</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="number">1.2</span>); <span class="comment">//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Number  </span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Test.add(<span class="number">1</span>, <span class="string">&quot;asd&quot;</span>); <span class="comment">//这两个参数一个是Integer，以风格是Float，所以取同一父类的最小级，为Object  </span></span><br><span class="line"></span><br><span class="line">       <span class="comment">/**指定泛型的时候*/</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">//指定了Integer，所以只能为Integer类型或者其子类  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> Test.&lt;Integer&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//编译错误，指定了Integer，不能为Float  </span></span><br><span class="line">        <span class="type">Number</span> <span class="variable">c</span> <span class="operator">=</span> Test.&lt;number&gt;add(<span class="number">1</span>, <span class="number">2.2</span>); <span class="comment">//指定为Number，所以可以为Integer和Float  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是一个简单的泛型方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;t&gt; T <span class="title function_">add</span><span class="params">(T x,T y)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实在泛型类中，不指定泛型的时候，也差不多，只不过这个时候的泛型为 <code>Object</code>，就比如 <code>ArrayList</code>中，如果不指定泛型，那么这个 <code>ArrayList</code>可以存储任意的对象。</p>
<p>例4.Object泛型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    list.add(<span class="number">1</span>);</span><br><span class="line">    list.add(<span class="string">&quot;121&quot;</span>);</span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-类型擦除引起的问题及解决方法"><a href="#3-类型擦除引起的问题及解决方法" class="headerlink" title="3.类型擦除引起的问题及解决方法"></a>3.类型擦除引起的问题及解决方法</h2><p>因为种种原因，Java不能实现真正的泛型，只能使用类型擦除来实现伪泛型，这样虽然不会有类型膨胀问题，但是也引起来许多新问题，所以，SUN对这些问题做出了种种限制，避免我们发生各种错误。</p>
<h3 id="3-1-先检查，再编译以及编译的对象和引用传递问题"><a href="#3-1-先检查，再编译以及编译的对象和引用传递问题" class="headerlink" title="3-1.先检查，再编译以及编译的对象和引用传递问题"></a>3-1.先检查，再编译以及编译的对象和引用传递问题</h3><p>Q: 既然说类型变量会在编译的时候擦除掉，那为什么我们往 ArrayList 创建的对象中添加整数会报错呢？不是说泛型变量String会在编译的时候变为Object类型吗？为什么不能存别的类型呢？既然类型擦除了，如何保证我们只能使用泛型变量限定的类型呢？</p>
<p>A: Java编译器是通过先检查代码中泛型的类型，然后再进行类型擦除，再进行编译。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span>  <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">    ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">    list.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">    list.add(<span class="number">123</span>);<span class="comment">//编译错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的程序中，使用 <code>add</code>方法添加一个整型，在IDE中，直接会报错，说明这就是在编译之前的检查，因为如果是在编译之后检查，类型擦除后，原始类型为 <code>Object</code>，是应该允许任意引用类型添加的。可实际上却不是这样的，这恰恰说明了关于泛型变量的使用，是会在编译之前检查的。</p>
<p>那么，这个<strong>类型检查是针对谁的</strong>呢？我们先看看参数化类型和原始类型的兼容。</p>
<p>以 ArrayList举例子，以前的写法:</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">ArrayList list <span class="operator">=</span> new ArrayList()<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>现在的写法:</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;<span class="keyword">String</span>&gt; list = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;<span class="keyword">String</span>&gt;();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>如果是与以前的代码兼容，各种引用传值之间，必然会出现如下的情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">//第一种情况</span></span><br><span class="line"><span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//第二种情况</span></span><br></pre></td></tr></table></figure>

<p>这样是没有错误的，不过会有个编译时警告。</p>
<p>不过在第一种情况，可以实现与完全使用泛型参数一样的效果，第二种则没有效果。</p>
<p>因为类型检查就是编译时完成的， <code>new ArrayList()</code>只是在内存中开辟了一个存储空间，可以存储任何类型对象，而<strong>真正设计类型检查的是它的引用</strong>，因为我们是使用它引用 <code>list1</code>来调用它的方法，比如说调用 <code>add</code>方法，所以 <code>list1</code>引用能完成泛型类型的检查。而引用 <code>list2</code>没有使用泛型，所以不行。</p>
<p>举例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        list1.add(<span class="string">&quot;1&quot;</span>); <span class="comment">//编译通过</span></span><br><span class="line">        list1.add(<span class="number">1</span>); <span class="comment">//编译错误</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> list1.get(<span class="number">0</span>); <span class="comment">//返回类型就是String</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ArrayList</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">        list2.add(<span class="string">&quot;1&quot;</span>); <span class="comment">//编译通过</span></span><br><span class="line">        list2.add(<span class="number">1</span>); <span class="comment">//编译通过</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">object</span> <span class="operator">=</span> list2.get(<span class="number">0</span>); <span class="comment">//返回类型就是Object</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().add(<span class="string">&quot;11&quot;</span>); <span class="comment">//编译通过</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().add(<span class="number">22</span>); <span class="comment">//编译错误</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;().get(<span class="number">0</span>); <span class="comment">//返回类型就是String</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过上面的例子，我们可以明白，类型检查就是针对引用的，谁是一个引用，<strong>用这个引用调用泛型方法</strong>，就会对这个引用调用的方法进行类型检测，而无关它真正引用的对象。</p>
<p><strong>泛型中参数化类型为什么不考虑继承关系</strong>？</p>
<p>在Java中，像下面形式的引用传递是不允许的:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;object&gt;(); <span class="comment">//编译错误 ArrayList&lt;Object&gt;</span></span><br><span class="line">ArrayList&lt;object&gt; list2 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;(); <span class="comment">//编译错误 ArrayList&lt;String&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们先看第一种情况，将第一种情况拓展成下面的形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;object&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;object&gt;();</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">ArrayList&lt;String&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>

<p>实际上，在第4行代码的时候，就会有编译错误。那么，我们先假设它编译没错。那么当我们使用 <code>list2</code>引用用 <code>get()</code>方法取值的时候，返回的都是 <code>String</code>类型的对象（上面提到了，类型检测是根据引用来决定的），可是它里面实际上已经被我们存放了 <code>Object</code>类型的对象，这样就会有 <code>ClassCastException</code>了。所以为了避免这种极易出现的错误，Java不允许进行这样的引用传递。（这也是泛型出现的原因，就是<strong>为了解决类型转换的问题</strong>，我们不能违背它的初衷）。</p>
<p>再看第二种情况，将第二种情况拓展成下面的形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());</span><br><span class="line">list1.add(<span class="keyword">new</span> <span class="title class_">String</span>());</span><br><span class="line"></span><br><span class="line">ArrayList&lt;object&gt; list2 = list1; <span class="comment">//编译错误</span></span><br></pre></td></tr></table></figure>

<p>没错，这样的情况比第一种情况好的多，最起码，在我们用 <code>list2</code>取值的时候不会出现 <code>ClassCastException</code>，因为是从 <code>String</code>转换为 <code>Object</code>。可是，这样做有什么意义呢，泛型出现的原因，就是为了解决类型转换的问题。我们使用了泛型，到头来，还是要自己强转，违背了泛型设计的初衷。所以java不允许这么干。再说，你如果又用 <code>list2</code>往里面 <code>add()</code>新的对象，那么到时候取得时候，我怎么知道我取出来的到底是 <code>String</code>类型的，还是 <code>Object</code>类型的呢？</p>
<p><strong>所以，要格外注意，泛型中的引用传递的问题。</strong></p>
<h3 id="3-2-自动类型转换"><a href="#3-2-自动类型转换" class="headerlink" title="3-2.自动类型转换"></a>3-2.自动类型转换</h3><p>因为类型擦除的问题，所以所有的泛型类型变量最后都会被替换为原始类型。</p>
<p>既然都被替换为原始类型，那么为什么我们在获取的时候，不需要进行强制类型转换呢？</p>
<p>看下 <code>ArrayList.get()</code>方法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> E <span class="keyword">get</span>(<span class="type">int</span> <span class="keyword">index</span>) &#123;</span><br><span class="line"></span><br><span class="line">    Range<span class="keyword">Check</span>(<span class="keyword">index</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (E) elementData[<span class="keyword">index</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看到，在 <code>return</code>之前，会根据泛型变量进行强转。假设泛型类型变量为 <code>Date</code>，虽然泛型信息会被擦除掉，但是会将 <code>(E) elementData[index]</code>，编译为 <code>(Date)elementData[index]</code>。所以我们不用自己进行强转。当存取一个泛型域时也会自动插入强制类型转换。假设 <code>Pair</code>类的 <code>value</code>域是 <code>public</code>的，那么表达式：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span> <span class="built_in">Date</span> = <span class="built_in">pair</span>.value;</span><br></pre></td></tr></table></figure>

<p>也会自动地在结果字节码中插入强制类型转换。</p>
<h3 id="3-3-类型擦除与多态的冲突和解决方法"><a href="#3-3-类型擦除与多态的冲突和解决方法" class="headerlink" title="3-3.类型擦除与多态的冲突和解决方法"></a>3-3.类型擦除与多态的冲突和解决方法</h3><p>现在有这样一个泛型类：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Pair</span>&lt;<span class="title">t</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">value</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getValue</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span>(<span class="params">T <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">value</span> = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们想要一个子类继承它。</p>
<figure class="highlight scala"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DateInter</span> <span class="keyword">extends</span> <span class="title">Pair&lt;Date&gt;</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public void setValue(<span class="type">Date</span> value) &#123;</span><br><span class="line">        <span class="keyword">super</span>.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    public <span class="type">Date</span> getValue() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个子类中，我们设定父类的泛型类型为 <code>Pair&lt;Date&gt;</code>，在子类中，我们覆盖了父类的两个方法，我们的原意是这样的：将父类的泛型类型限定为 <code>Date</code>，那么父类里面的两个方法的参数都为 <code>Date</code>类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title class_">Date</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setValue</span>(<span class="params"><span class="built_in">Date</span> value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以，我们在子类中重写这两个方法一点问题也没有，实际上，从他们的 <code>@Override</code>标签中也可以看到，一点问题也没有，实际上是这样的吗？</p>
<p>分析：实际上，类型擦除后，父类的的泛型类型全部变为了原始类型 <code>Object</code>，所以父类编译之后会变成下面的样子：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Object</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Object</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setValue</span>(<span class="params"><span class="built_in">Object</span>  value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再看子类的两个重写的方法的类型：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setValue</span>(<span class="params"><span class="built_in">Date</span> value</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">setValue</span>(value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="title class_">Date</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">getValue</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>先来分析 <code>setValue</code>方法，父类的类型是 <code>Object</code>，而子类的类型是 <code>Date</code>，参数类型不一样，这如果是在普通的继承关系中，根本就不会是<strong>重写</strong>，而是<strong>重载</strong>。</p>
<p>我们在一个main方法测试一下：</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> void main(<span class="keyword">String</span>[] args) throws ClassNotFoundException &#123;</span><br><span class="line">        DateInter DateInter = <span class="keyword">new</span> <span class="type">DateInter</span>();</span><br><span class="line">        DateInter.setValue(<span class="keyword">new</span> <span class="type">Date</span>());</span><br><span class="line">        DateInter.setValue(<span class="keyword">new</span> <span class="type">Object</span>()); <span class="comment">//编译出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是重载，那么子类中两个 <code>setValue</code>方法，一个是参数 <code>Object</code>类型，一个是 <code>Date</code>类型，可是我们发现，根本就没有这样的一个子类继承自父类的Object类型参数的方法。所以说，确实是<strong>重写</strong>了，而不是<strong>重载</strong>了。</p>
<p>为什么会这样呢？</p>
<p>原因是这样的，我们传入父类的泛型类型是 <code>Date， Pair&lt;Date&gt;</code>，我们的本意是将泛型类变为如下：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Pair</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title class_">Date</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Date</span> <span class="title function_">getValue</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setValue</span>(<span class="params"><span class="built_in">Date</span> value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在子类中重写参数类型为Date的那两个方法，实现继承中的多态。</p>
<p>可是由于种种原因，虚拟机并不能将泛型类型变为 <code>Date</code>，只能将类型擦除掉，变为原始类型 <code>Object</code>。这样，我们的本意是进行重写，实现多态。可是类型擦除后，只能变为了重载。这样，类型擦除就和多态有了冲突。JVM知道你的本意吗？<strong>知道</strong>！！！可是它能<strong>直接实现</strong>吗，<strong>不能</strong>！！！如果真的不能的话，那我们怎么去重写我们想要的 <code>Date</code>类型参数的方法啊。</p>
<p>于是JVM采用了一个特殊的方法，来完成这项功能，那就是<strong>桥方法</strong>。</p>
<p>首先，我们用 <code>javap -c className</code>的方式反编译下 <code>DateInter</code>子类的字节码，结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.tao.test.DateInter <span class="keyword">extends</span> <span class="title class_">com</span>.tao.test.Pair&lt;java.util.Date&gt; &#123;</span><br><span class="line">  com.tao.test.DateInter();</span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">8</span>                  <span class="comment">// Method com/tao/test/Pair.&quot;&lt;init&gt;&quot;:()V</span></span><br><span class="line">       <span class="number">4</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(java.util.Date)</span>;  <span class="comment">//我们重写了setValue方法</span></span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: aload_1</span><br><span class="line">       <span class="number">2</span>: invokespecial #<span class="number">16</span>                 <span class="comment">// Method com/tao/test/Pair.setValue:(Ljava/lang/Object;)V</span></span><br><span class="line">       <span class="number">5</span>: <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.util.Date <span class="title function_">getValue</span><span class="params">()</span>;    <span class="comment">//我们重写了getValue方法</span></span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokespecial #<span class="number">23</span>                 <span class="comment">// Method com/tao/test/Pair.getValue:()Ljava/lang/Object;</span></span><br><span class="line">       <span class="number">4</span>: checkcast     #<span class="number">26</span>                 <span class="comment">// class java/util/Date</span></span><br><span class="line">       <span class="number">7</span>: areturn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> java.lang.Object <span class="title function_">getValue</span><span class="params">()</span>;     <span class="comment">//编译时有编译器生成的桥方法</span></span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: invokevirtual #<span class="number">28</span>                 <span class="comment">// Method getValue:()Ljava/util/Date;去调用我们重写的setValue方法；</span></span><br><span class="line">       <span class="number">4</span>: areturn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(java.lang.Object)</span>;   <span class="comment">//编译时有编译器生成的桥方法</span></span><br><span class="line">    Code:</span><br><span class="line">       <span class="number">0</span>: aload_0</span><br><span class="line">       <span class="number">1</span>: aload_1</span><br><span class="line">       <span class="number">2</span>: checkcast     #<span class="number">26</span>                 <span class="comment">// class java/util/Date</span></span><br><span class="line">       <span class="number">5</span>: invokevirtual #<span class="number">30</span>                 <span class="comment">// Method setValue:(Ljava/util/Date;去调用我们重写的setValue方法）V</span></span><br><span class="line">       <span class="number">8</span>: <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从编译的结果来看，我们本意重写 <code>setValue</code>和 <code>getValue</code>方法的子类，<strong>竟然有4个方法</strong>，其实不用惊奇，最后的两个方法，就是<strong>编译器自己生成的桥方法</strong>。可以看到桥方法的<strong>参数类型都是Object</strong>，也就是说，子类中真正覆盖父类两个方法的就是这两个我们看不到的桥方法。而打在我们自己定义的 <code>setvalue</code>和 <code>getValue</code>方法上面的 <code>@Override</code>只不过是假象。而<strong>桥方法的内部实现，就只是去调用我们自己重写的那两个方法</strong>。</p>
<p>所以，虚拟机巧妙的使用了桥方法，来解决了类型擦除和多态的冲突。</p>
<p>不过，要提到一点，这里面的 <code>setValue</code>和 <code>getValue</code>这两个桥方法的意义又有不同。</p>
<p><code>setValue</code>方法是为了解决类型擦除与多态之间的冲突。</p>
<p>而 <code>getValue</code>却有普遍的意义，怎么说呢，如果这是一个普通的继承关系：</p>
<p>那么父类的 <code>setValue</code>方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>而子类重写的方法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Date <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">super</span>.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其实这在普通的类继承中也是普遍存在的重写，这就是协变。</p>
<p>关于协变：。。。。。。</p>
<p>并且，还有一点也许会有疑问，子类中的桥方法 <code>Object getValue()</code>和 <code>Date getValue()</code>是同 时存在的，可是如果是常规的两个方法，他们的方法签名是一样的，也就是说虚拟机根本不能分别这两个方法。如果是我们自己编写Java代码，这样的代码是无法通过编译器的检查的，但是虚拟机却是允许这样做的，因为虚拟机通过参数类型和返回类型来确定一个方法，所以编译器为了实现泛型的多态允许自己做这个看起来”不合法”的事情，然后交给虚拟器去区别。</p>
<h3 id="3-4-泛型类型变量不能是基本数据类型"><a href="#3-4-泛型类型变量不能是基本数据类型" class="headerlink" title="3-4.泛型类型变量不能是基本数据类型"></a>3-4.泛型类型变量不能是基本数据类型</h3><p>不能用类型参数替换基本类型。就比如，没有 <code>ArrayList&lt;double&gt;</code>，只有 <code>ArrayList&lt;Double&gt;</code>。因为当类型擦除后， <code>ArrayList</code>的原始类型变为 <code>Object</code>，但是 <code>Object</code>类型不能存储 <code>double</code>值，只能引用 <code>Double</code>的值。</p>
<h3 id="3-5-编译时集合的instanceof"><a href="#3-5-编译时集合的instanceof" class="headerlink" title="3-5.编译时集合的instanceof"></a>3-5.编译时集合的instanceof</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arrayList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<p>因为类型擦除之后， <code>ArrayList&lt;String&gt;</code>只剩下原始类型，泛型信息 <code>String</code>不存在了。</p>
<p>那么，编译时进行类型查询的时候使用下面的方法是错误的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( arrayList <span class="keyword">instanceof</span> ArrayList&lt;String&gt;)</span><br></pre></td></tr></table></figure>

<h3 id="3-6-泛型在静态方法和静态类中的问题"><a href="#3-6-泛型在静态方法和静态类中的问题" class="headerlink" title="3-6.泛型在静态方法和静态类中的问题"></a>3-6.泛型在静态方法和静态类中的问题</h3><p>泛型类中的静态方法和静态变量不可以使用泛型类所声明的泛型类型参数</p>
<p>举例说明：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> T one;   <span class="comment">//编译错误</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span>  T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//编译错误</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为泛型类中的泛型参数的实例化的时候确定，而静态变量和静态方法不需要使用对象来调用。对象都没有创建，如何确定这个泛型参数是何种类型，所以当然是错误的。</p>
<p>但是要注意区分下面的一种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;T <span class="title function_">show</span><span class="params">(T one)</span>&#123; <span class="comment">//这是正确的</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为这是一个泛型方法，在泛型方法中使用的T是自己在方法中定义的 T，而不是泛型类中的T。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存模型2</title>
    <url>/posts/2a3a86ee/</url>
    <content><![CDATA[<h1 id="Java内存模型2"><a href="#Java内存模型2" class="headerlink" title="Java内存模型2"></a>Java内存模型2</h1><p>Spring、Netty、Mybatis 等框架的代码中大量运用了 Java 多线程编程技巧。并发编程处理的恰当与否，将直接影响架构的性能。本章通过对 这些框架源码 的分析，结合并发编程的常用技巧，来讲解多线程编程在这些主流框架中的应用。</p>
<h2 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h2><p>JVM 规范 定义了 Java 内存模型 来屏蔽掉各种操作系统、虚拟机实现厂商和硬件的内存访问差异，以确保 Java 程序 在所有操作系统和平台上能够达到一致的内存访问效果。</p>
<h3 id="工作内存和主内存"><a href="#工作内存和主内存" class="headerlink" title="工作内存和主内存"></a>工作内存和主内存</h3><p>Java 内存模型 规定所有的变量都存储在主内存中，每个线程都有自己独立的工作内存，工作内存保存了 对应该线程使用的变量的主内存副本拷贝。线程对这些变量的操作都在自己的工作内存中进行，不能直接操作主内存 和 其他工作内存中存储的变量或者变量副本。线程间的变量传递需通过主内存来完成，三者的关系如下图所示。 <a href="https://camo.githubusercontent.com/0d5072a90bea9a951e51933b5900ae5fdfa4fab947a0fb0ee8cb6c6cf1df4e4f/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303232313030303334383239342e706e673f782d6f73732d70726f636573733d696d6167652f77617465726d61726b2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c334678587a4d344d444d344d7a6b322c73697a655f31362c636f6c6f725f4646464646462c745f3730"><img src="https://camo.githubusercontent.com/0d5072a90bea9a951e51933b5900ae5fdfa4fab947a0fb0ee8cb6c6cf1df4e4f/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303232313030303334383239342e706e673f782d6f73732d70726f636573733d696d6167652f77617465726d61726b2c747970655f5a6d46755a33706f5a57356e6147567064476b2c736861646f775f31302c746578745f6148523063484d364c7939696247396e4c6d4e7a5a473475626d56304c334678587a4d344d444d344d7a6b322c73697a655f31362c636f6c6f725f4646464646462c745f3730" alt="在这里插入图片描述"></a></p>
<h3 id="Java-内存操作协议"><a href="#Java-内存操作协议" class="headerlink" title="Java 内存操作协议"></a>Java 内存操作协议</h3><p>Java 内存模型定义了 8 种操作来完成主内存和工作内存的变量访问，具体如下。 <a href="https://camo.githubusercontent.com/0c3ebb07ffbf78a3ea9aed4959092911c2e110ba453479e6fb3a95b2a8eecfa4/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303232313030313131353139332e706e67"><img src="https://camo.githubusercontent.com/0c3ebb07ffbf78a3ea9aed4959092911c2e110ba453479e6fb3a95b2a8eecfa4/68747470733a2f2f696d672d626c6f672e6373646e696d672e636e2f32303230303232313030313131353139332e706e67" alt="在这里插入图片描述"></a></p>
<ul>
<li>read：把一个变量的值从主内存传输到线程的工作内存中，以便随后的 load 动作使用。</li>
<li>load：把从主内存中读取的变量值载入工作内存的变量副本中。</li>
<li>use：把工作内存中一个变量的值传递给 Java 虚拟机执行引擎。</li>
<li>assign：把从执行引擎接收到的变量的值赋值给工作内存中的变量。</li>
<li>store：把工作内存中一个变量的值传送到主内存中，以便随后的 write 操作。</li>
<li>write：工作内存传递过来的变量值放入主内存中。</li>
<li>lock：把主内存的一个变量标识为某个线程独占的状态。</li>
<li>unlock：把主内存中 一个处于锁定状态的变量释放出来，被释放后的变量才可以被其他线程锁定。</li>
</ul>
<h3 id="内存模型三大特性"><a href="#内存模型三大特性" class="headerlink" title="内存模型三大特性"></a>内存模型三大特性</h3><h4 id="1、原子性"><a href="#1、原子性" class="headerlink" title="1、原子性"></a>1、原子性</h4><p>这个概念与事务中的原子性大概一致，表明此操作是不可分割，不可中断的，要么全部执行，要么全部不执行。 Java 内存模型直接保证的原子性操作包括 read、load、use、assign、store、write、lock、unlock 这八个。</p>
<h4 id="2、可见性"><a href="#2、可见性" class="headerlink" title="2、可见性"></a>2、可见性</h4><p>可见性是指当一个线程修改了共享变量的值，其他线程能够立即得知这个修改。Java 内存模型 是通过在变量修改后将新值同步回主内存，在变量读取前从主内存刷新变量值这种依赖主内存作为传递媒介的方式来实现可见性的，无论是普通变量还是 volatile 变量 都是如此，普通变量与 volatile 变量 的区别是，volatile 的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此，可以说 volatile 保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。除了 volatile 外，synchronized 也提供了可见性，synchronized 的可见性是由 “对一个变量执行 unlock 操作 之前，必须先把此变量同步回主内存中（执行 store、write 操作）” 这条规则获得。</p>
<h4 id="3、有序性"><a href="#3、有序性" class="headerlink" title="3、有序性"></a>3、有序性</h4><p>单线程环境下，程序会 “有序的”执行，即：线程内表现为串行语义。但是在多线程环境下，由于指令重排，并发执行的正确性会受到影响。在 Java 中使用 volatile 和 synchronized 关键字，可以保证多线程执行的有序性。volatile 通过加入内存屏障指令来禁止内存的重排序。synchronized 通过加锁，保证同一时刻只有一个线程来执行同步代码。</p>
<h2 id="volatile-的应用"><a href="#volatile-的应用" class="headerlink" title="volatile 的应用"></a>volatile 的应用</h2><p>打开 NioEventLoop 的代码中，有一个控制 IO 操作 和 其他任务运行比例的，用 volatile 修饰的 int 类型字段 ioRatio，代码如下。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> ioRatio = <span class="number">50</span>;</span><br></pre></td></tr></table></figure>

<p>这里为什么要用 volatile 修饰呢？我们首先对 volatile 关键字进行说明，然后再结合 Netty 的代码进行分析。</p>
<p>关键字 volatile 是 Java 提供的最轻量级的同步机制，Java 内存模型对 volatile 专门定义了一些特殊的访问规则。下面我们就看它的规则。当一个变量被 volatile 修饰后，它将具备以下两种特性。</p>
<ul>
<li>线程可见性：当一个线程修改了被 volatile 修饰的变量后，无论是否加锁，其他线程都可以立即看到最新的修改（什么叫立即看到最新的修改？感觉这句话太口语化且模糊，搞不太懂！），而普通变量却做不到这点。</li>
<li>禁止指令重排序优化：普通的变量仅仅保证在该方法的执行过程中所有依赖赋值结果的地方都能获取正确的结果，而不能保证变量赋值操作的顺序与程序代码的执行顺序一致。举个简单的例子说明下指令重排序优化问题，代码如下。</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadStopExample</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="type">static</span> <span class="type">boolean</span> stop;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="type">static</span> <span class="type">void</span> <span class="title">main</span><span class="params">(<span class="type">String</span>[] args)</span> throws InterruptedException </span>&#123;</span><br><span class="line">		Thread workThread = <span class="keyword">new</span> <span class="built_in">Thread</span>(<span class="keyword">new</span> <span class="built_in">Runnable</span>() &#123;</span><br><span class="line">			<span class="keyword">public</span> <span class="type">void</span> <span class="built_in">run</span>() &#123;</span><br><span class="line">				<span class="type">int</span> i= <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">while</span> (!stop) &#123;</span><br><span class="line">					i++;</span><br><span class="line">					<span class="keyword">try</span>&#123;</span><br><span class="line">						TimeUnit.SECONDS.<span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">					&#125; <span class="built_in">catch</span> (InterruptedException e) &#123;</span><br><span class="line">						e.<span class="built_in">printStackTrace</span>();</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;);</span><br><span class="line">		workThread.<span class="built_in">start</span>();</span><br><span class="line">		TimeUnit.SECONDS.<span class="built_in">sleep</span>(<span class="number">3</span>);</span><br><span class="line">		stop = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们预期程序会在 3s 后停止，但是实际上它会一直执行下去，原因就是虚拟机对代码进行了指令重排序和优化，优化后的指令如下。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!stop)</span><br><span class="line"><span class="keyword">While</span>(<span class="literal">true</span>)</span><br><span class="line">	<span class="params">...</span><span class="params">...</span></span><br></pre></td></tr></table></figure>

<p>workThread 线程 在执行重排序后的代码时，是无法发现 变量 stop 被其它线程修改的，因此无法停止运行。要解决这个问题，只要将 stop 前增加 volatile 修饰符即可。volatile 解决了如下两个问题。第一，主线程对 stop 的修改在 workThread 线程 中可见，也就是说 workThread 线程 立即看到了其他线程对于 stop 变量 的修改。第二，禁止指令重排序，防止因为重排序导致的并发访问逻辑混乱。</p>
<p>一些人认为使用 volatile 可以代替传统锁，提升并发性能，这个认识是错误的。volatile 仅仅解决了可见性的问题，但是它并不能保证互斥性，也就是说多个线程并发修改某个变量时，依旧会产生多线程问题。因此，不能靠 volatile 来完全替代传统的锁。根据经验总结，volatile 最适用的场景是 “ 一个线程写，其他线程读 ”，如果有多个线程并发写操作，仍然需要使用锁或者线程安全的容器或者原子变量来代替。下面我们继续对 Netty 的源码做分析。上面讲到了 ioRatio 被定义成 volatile，下面看看代码为什么要这样定义。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">final long ioTime = <span class="module-access"><span class="module"><span class="identifier">System</span>.</span></span>nano<span class="constructor">Time()</span> - ioStartTime;</span><br><span class="line">run<span class="constructor">AllTasks(<span class="params">ioTime</span> <span class="operator">*</span> (100 - <span class="params">ioRatio</span>)</span><span class="operator"> / </span>ioRatio);</span><br></pre></td></tr></table></figure>

<p>通过代码分析我们发现，在 NioEventLoop 线程 中，ioRatio 并没有被修改，它是只读操作。既然没有修改，为什么要定义成 volatile 呢？继续看代码，我们发现 NioEventLoop 提供了重新设置 IO 执行时间比例的公共方法。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">setIoRatio</span><span class="params">(<span class="type">int</span> ioRatio)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ioRatio &lt;= <span class="number">0</span> || ioRatio &gt; <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">IllegalArgumentException</span>(<span class="string">&quot;ioRatio: &quot;</span> + ioRatio + <span class="string">&quot; (expected: 0 &lt; ioRatio &lt;= 100)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.ioRatio = ioRatio;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>首先，NioEventLoop 线程 没有调用该 set 方法，说明调整 IO 执行时间比例 是外部发起的操作，通常是由业务的线程调用该方法，重新设置该参数。这样就形成了一个线程写、一个线程读。根据前面针对 volatile 的应用总结，此时可以使用 volatile 来代替传统的 synchronized 关键字，以提升并发访问的性能。</p>
<h2 id="ThreadLocal-的应用及源码解析"><a href="#ThreadLocal-的应用及源码解析" class="headerlink" title="ThreadLocal 的应用及源码解析"></a>ThreadLocal 的应用及源码解析</h2><p>ThreadLocal 又称为线程本地存储区（Thread Local Storage，简称为 TLS），每个线程都有自己的私有的本地存储区域，不同线程之间彼此不能访问对方的 TLS 区域。使用 ThreadLocal 变量 的 set(T value)方法 可以将数据存入 该线程本地存储区，使用 get() 方法 可以获取到之前存入的值。</p>
<h3 id="ThreadLocal-的常见应用"><a href="#ThreadLocal-的常见应用" class="headerlink" title="ThreadLocal 的常见应用"></a>ThreadLocal 的常见应用</h3><p>不使用 ThreadLocal。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionBean</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Session</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="title class_">String</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getId</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setId</span>(<span class="params"><span class="built_in">String</span> id</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">Session</span> <span class="title function_">createSession</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Session</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setId</span>(<span class="params">Session session, <span class="built_in">String</span> id</span>) &#123;</span><br><span class="line">        session.<span class="title function_">setId</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getId</span>(<span class="params">Session session</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> session.<span class="title function_">getId</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">    <span class="comment">//没有使用ThreadLocal，在方法间共享session需要进行session在方法间的传递</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="title class_">SessionBean</span> bean = <span class="keyword">new</span> <span class="title class_">SessionBean</span>();</span><br><span class="line">            <span class="title class_">Session</span> session = bean.<span class="title function_">createSession</span>();</span><br><span class="line">            bean.<span class="title function_">setId</span>(session, <span class="string">&quot;susan&quot;</span>);</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(bean.<span class="title function_">getId</span>(session));</span><br><span class="line">        &#125;).<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中，session 需要在方法间传递才可以修改和读取，保证线程中各方法操作的是一个。下面看一下使用 ThreadLocal 的代码。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionBean</span> &#123;</span><br><span class="line"><span class="comment">//定义一个静态ThreadLocal变量session，就能够保证各个线程有自己的一份，并且方法可以方便获取，不用传递</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="title class_">ThreadLocal</span>&lt;<span class="title class_">Session</span>&gt; session = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Session</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="title class_">String</span> id;</span><br><span class="line">        <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getId</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> id;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setId</span>(<span class="params"><span class="built_in">String</span> id</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">id</span> = id;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">createSession</span>(<span class="params"></span>) &#123;</span><br><span class="line">        session.<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Session</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">setId</span>(<span class="params"><span class="built_in">String</span> id</span>) &#123;</span><br><span class="line">        session.<span class="title function_">get</span>().<span class="title function_">setId</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title class_">String</span> <span class="title function_">getId</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> session.<span class="title function_">get</span>().<span class="title function_">getId</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> <span class="title function_">main</span>(<span class="params"><span class="built_in">String</span>[] args</span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="title class_">SessionBean</span> bean = <span class="keyword">new</span> <span class="title class_">SessionBean</span>();</span><br><span class="line">            bean.<span class="title function_">createSession</span>();</span><br><span class="line">            bean.<span class="title function_">setId</span>(<span class="string">&quot;susan&quot;</span>);</span><br><span class="line">            <span class="title class_">System</span>.<span class="property">out</span>.<span class="title function_">println</span>(bean.<span class="title function_">getId</span>());</span><br><span class="line">        &#125;).<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在方法的内部实现中，直接可以通过 session.get() 获取到当前线程的 session，省掉了参数在方法间传递的环节。</p>
<h3 id="ThreadLocal-的实现原理"><a href="#ThreadLocal-的实现原理" class="headerlink" title="ThreadLocal 的实现原理"></a>ThreadLocal 的实现原理</h3><p>一般，类属性中的数据是多个线程共享的，但 ThreadLocal 类型的数据 声明为类属性，却可以为每一个使用它（通过 set(T value)方法）的线程存储 线程私有的数据，通过其源码我们可以发现其中的原理。</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class ThreadLocal&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面的 getMap()方法 传入当前线程，获得一个ThreadLocalMap对象，说明每一个线程维护了</span></span><br><span class="line"><span class="comment">     * 自己的一个 map，保证读取出来的value是自己线程的。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * ThreadLocalMap 是ThreadLocal静态内部类，存储value的键值就是ThreadLocal本身。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 因此可以断定，每个线程维护一个ThreadLocalMap的键值对映射Map。不同线程的Map的 key值 是一样的，</span></span><br><span class="line"><span class="comment">     * 都是ThreadLocal，但 value 是不同的。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> T get() &#123;</span><br><span class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</span><br><span class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = <span class="built_in">map</span>.getEntry(this);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="built_in">null</span>) &#123;</span><br><span class="line">                @SuppressWarnings(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="literal">void</span> <span class="built_in">set</span>(T value) &#123;</span><br><span class="line">        <span class="keyword">Thread</span> t = <span class="keyword">Thread</span>.currentThread();</span><br><span class="line">        ThreadLocalMap <span class="built_in">map</span> = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">map</span> != <span class="built_in">null</span>)</span><br><span class="line">            <span class="built_in">map</span>.<span class="built_in">set</span>(this, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ThreadLocal-在-Spring-中的使用"><a href="#ThreadLocal-在-Spring-中的使用" class="headerlink" title="ThreadLocal 在 Spring 中的使用"></a>ThreadLocal 在 Spring 中的使用</h3><p>Spring 事务处理的设计与实现中大量使用了 ThreadLocal 类，比如，TransactionSynchronizationManager 维护了一系列的 ThreadLocal 变量，用于存储线程私有的 事务属性及资源。源码如下。</p>
<figure class="highlight processing"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 管理每个线程的资源和事务同步的中心帮助程序。供资源管理代码使用，但不供典型应用程序代码使用。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 资源管理代码应该检查线程绑定的资源，如，JDBC连接 或 Hibernate Sessions。</span></span><br><span class="line"><span class="comment"> * 此类代码通常不应该将资源绑定到线程，因为这是事务管理器的职责。另一个选项是，</span></span><br><span class="line"><span class="comment"> * 如果事务同步处于活动状态，则在首次使用时延迟绑定，以执行跨任意数量资源的事务。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">TransactionSynchronizationManager</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 *  一般是一个线程持有一个 独立的事务，以相互隔离地处理各自的事务。</span></span><br><span class="line"><span class="comment">	 *  所以这里使用了很多 ThreadLocal对象，为每个线程绑定 对应的事务属性及资源，</span></span><br><span class="line"><span class="comment">	 *  以便后续使用时能直接获取。</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt;&gt; resources =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt;&gt;(<span class="string">&quot;Transactional resources&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Set&lt;TransactionSynchronization&gt;&gt; synchronizations =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;Set&lt;TransactionSynchronization&gt;&gt;(<span class="string">&quot;Transaction synchronizations&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;<span class="built_in">String</span>&gt; currentTransactionName =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;<span class="built_in">String</span>&gt;(<span class="string">&quot;Current transaction name&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; currentTransactionReadOnly =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;Boolean&gt;(<span class="string">&quot;Current transaction read-only status&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Integer&gt; currentTransactionIsolationLevel =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;Integer&gt;(<span class="string">&quot;Current transaction isolation level&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Boolean&gt; actualTransactionActive =</span><br><span class="line">			<span class="keyword">new </span><span class="class title_">NamedThreadLocal</span>&lt;Boolean&gt;(<span class="string">&quot;Actual transaction active&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 为当前线程 绑定 对应的resource资源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bindResource</span>(<span class="built_in">Object</span> <span class="built_in">key</span>, <span class="built_in">Object</span> value) <span class="keyword">throws</span> IllegalStateException &#123;</span><br><span class="line">		<span class="built_in">Object</span> actualKey = TransactionSynchronizationUtils.<span class="property">unwrapResourceIfNecessary</span>(<span class="built_in">key</span>);</span><br><span class="line">		Assert.<span class="property">notNull</span>(value, <span class="string">&quot;Value must not be null&quot;</span>);</span><br><span class="line">		Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = resources.<span class="property">get</span>();</span><br><span class="line">		<span class="comment">// 如果当前线程的 resources中，绑定的数据map为空，则为 resources 绑定 map</span></span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">map</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="built_in">map</span> = <span class="keyword">new </span><span class="class title_">HashMap</span>&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt;();</span><br><span class="line">			resources.<span class="property">set</span>(<span class="built_in">map</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">Object</span> oldValue = <span class="built_in">map</span>.<span class="property">put</span>(actualKey, value);</span><br><span class="line">		<span class="keyword">if</span> (oldValue <span class="keyword">instanceof</span> ResourceHolder &amp;&amp; ((ResourceHolder) oldValue).<span class="property">isVoid</span>()) &#123;</span><br><span class="line">			oldValue = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (oldValue != <span class="literal">null</span>) &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new </span><span class="class title_">IllegalStateException</span>(<span class="string">&quot;Already value [&quot;</span> + oldValue + <span class="string">&quot;] for key [&quot;</span> +</span><br><span class="line">					actualKey + <span class="string">&quot;] bound to thread [&quot;</span> + Thread.<span class="property">currentThread</span>().<span class="property">getName</span>() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (logger.<span class="property">isTraceEnabled</span>()) &#123;</span><br><span class="line">			logger.<span class="property">trace</span>(<span class="string">&quot;Bound value [&quot;</span> + value + <span class="string">&quot;] for key [&quot;</span> + actualKey + <span class="string">&quot;] to thread [&quot;</span> +</span><br><span class="line">					Thread.<span class="property">currentThread</span>().<span class="property">getName</span>() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * 返回当前线程绑定的所有资源</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="title function_">getResourceMap</span>() &#123;</span><br><span class="line">		Map&lt;<span class="built_in">Object</span>, <span class="built_in">Object</span>&gt; <span class="built_in">map</span> = resources.<span class="property">get</span>();</span><br><span class="line">		<span class="title function_">return</span> (<span class="built_in">map</span> != <span class="literal">null</span> ? Collections.<span class="property">unmodifiableMap</span>(<span class="built_in">map</span>) : Collections.<span class="property">emptyMap</span>());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ThreadLocal-在-Mybatis-中的使用"><a href="#ThreadLocal-在-Mybatis-中的使用" class="headerlink" title="ThreadLocal 在 Mybatis 中的使用"></a>ThreadLocal 在 Mybatis 中的使用</h3><p>Mybatis 的 SqlSession 对象 也是各线程私有的资源，所以对其的管理也使用到了 ThreadLocal 类。源码如下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlSessionManager</span> <span class="keyword">implements</span> <span class="title class_">SqlSessionFactory</span>, SqlSession &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;SqlSession&gt; localSqlSession = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(<span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(autoCommit));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(Connection connection)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(connection));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(TransactionIsolationLevel level)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(level));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(ExecutorType execType)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(execType));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(ExecutorType execType, <span class="type">boolean</span> autoCommit)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(execType, autoCommit));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(execType, level));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startManagedSession</span><span class="params">(ExecutorType execType, Connection connection)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.localSqlSession.set(openSession(execType, connection));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isManagedSessionStarted</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.localSqlSession.get() != <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot get connection.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sqlSession.getConnection();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clearCache</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot clear the cache.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.clearCache();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot commit.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">commit</span><span class="params">(<span class="type">boolean</span> force)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot commit.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.commit(force);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.rollback();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rollback</span><span class="params">(<span class="type">boolean</span> force)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.rollback(force);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> List&lt;BatchResult&gt; <span class="title function_">flushStatements</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot rollback.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sqlSession.flushStatements();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> localSqlSession.get();</span><br><span class="line">    <span class="keyword">if</span> (sqlSession == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SqlSessionException</span>(<span class="string">&quot;Error:  Cannot close.  No managed session is started.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      sqlSession.close();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      localSqlSession.set(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="J-U-C-包的实际应用"><a href="#J-U-C-包的实际应用" class="headerlink" title="J.U.C 包的实际应用"></a>J.U.C 包的实际应用</h2><h3 id="线程池-ThreadPoolExecutor"><a href="#线程池-ThreadPoolExecutor" class="headerlink" title="线程池 ThreadPoolExecutor"></a>线程池 ThreadPoolExecutor</h3><p>首先通过 ThreadPoolExecutor 的源码 看一下线程池的主要参数及方法。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadPoolExecutor</span> <span class="title">extends</span> <span class="title">AbstractExecutorService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 核心线程数</span></span><br><span class="line"><span class="comment">     * 当向线程池提交一个任务时，若线程池已创建的线程数小于corePoolSize，即便此时存在空闲线程，</span></span><br><span class="line"><span class="comment">     * 也会通过创建一个新线程来执行该任务，直到已创建的线程数大于或等于corePoolSize</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="built_in">int</span> corePoolSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最大线程数</span></span><br><span class="line"><span class="comment">     * 当队列满了，且已创建的线程数小于maximumPoolSize，则线程池会创建新的线程来执行任务。</span></span><br><span class="line"><span class="comment">     * 另外，对于无界队列，可忽略该参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="built_in">int</span> maximumPoolSize;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程存活保持时间</span></span><br><span class="line"><span class="comment">     * 当线程池中线程数 超出核心线程数，且线程的空闲时间也超过 keepAliveTime时，</span></span><br><span class="line"><span class="comment">     * 那么这个线程就会被销毁，直到线程池中的线程数小于等于核心线程数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="built_in">long</span> keepAliveTime;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务队列</span></span><br><span class="line"><span class="comment">     * 用于传输和保存等待执行任务的阻塞队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> final BlockingQueue&lt;Runnable&gt; workQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程工厂</span></span><br><span class="line"><span class="comment">     * 用于创建新线程。threadFactory 创建的线程也是采用 new Thread() 方式，threadFactory</span></span><br><span class="line"><span class="comment">     * 创建的线程名都具有统一的风格：pool-m-thread-n（m为线程池的编号，n为线程池中线程的编号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> ThreadFactory threadFactory;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程饱和策略</span></span><br><span class="line"><span class="comment">     * 当线程池和队列都满了，再加入的线程会执行此策略</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> RejectedExecutionHandler handler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法提供了多种重载，但实际上都使用了最后一个重载 完成了实例化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span>(<span class="params"><span class="built_in">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span>(<span class="params"><span class="built_in">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                              ThreadFactory threadFactory</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             threadFactory, defaultHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span>(<span class="params"><span class="built_in">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                              RejectedExecutionHandler handler</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">             Executors.defaultThreadFactory(), handler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span>(<span class="params"><span class="built_in">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="built_in">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                              RejectedExecutionHandler handler</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">            maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">            keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">        <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">        <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">        <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">        <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">        <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">        <span class="keyword">this</span>.handler = handler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行一个任务，但没有返回值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span>(<span class="params">Runnable command</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (command == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="built_in">int</span> c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">            <span class="keyword">if</span> (addWorker(command, <span class="literal">true</span>))</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            c = ctl.<span class="keyword">get</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">            <span class="built_in">int</span> recheck = ctl.<span class="keyword">get</span>();</span><br><span class="line">            <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; <span class="keyword">remove</span>(command))</span><br><span class="line">                reject(command);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">                addWorker(<span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="literal">false</span>))</span><br><span class="line">            reject(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 提交一个线程任务，有返回值。该方法继承自其父类 AbstractExecutorService，有多种重载，这是最常用的一个。</span></span><br><span class="line"><span class="comment">     * 通过future.get()获取返回值（阻塞直到任务执行完）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Future&lt;T&gt; <span class="title">submit</span>(<span class="params">Callable&lt;T&gt; task</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (task == <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        RunnableFuture&lt;T&gt; ftask = newTaskFor(task);</span><br><span class="line">        execute(ftask);</span><br><span class="line">        <span class="keyword">return</span> ftask;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭线程池，不再接收新的任务，但会把已有的任务执行完</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shutdown</span>()</span> &#123;</span><br><span class="line">        final ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkShutdownAccess();</span><br><span class="line">            advanceRunState(SHUTDOWN);</span><br><span class="line">            interruptIdleWorkers();</span><br><span class="line">            onShutdown(); <span class="comment">// hook for ScheduledThreadPoolExecutor</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        tryTerminate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 立即关闭线程池，已有的任务也会被抛弃</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Runnable&gt; <span class="title">shutdownNow</span>()</span> &#123;</span><br><span class="line">        List&lt;Runnable&gt; tasks;</span><br><span class="line">        final ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">        mainLock.<span class="keyword">lock</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            checkShutdownAccess();</span><br><span class="line">            advanceRunState(STOP);</span><br><span class="line">            interruptWorkers();</span><br><span class="line">            tasks = drainQueue();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            mainLock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">        tryTerminate();</span><br><span class="line">        <span class="keyword">return</span> tasks;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> boolean <span class="title">isShutdown</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ! isRunning(ctl.<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程池执行流程，如下图所示。</p>
<p><a href="https://github.com/doocs/source-code-hunter/blob/main/docs/LearningExperience/ConcurrentProgramming/images/ConcurrentProgramming/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%81%E7%A8%8B.png"><img src="https://github.com/doocs/source-code-hunter/raw/main/docs/LearningExperience/ConcurrentProgramming/images/ConcurrentProgramming/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%B5%81%E7%A8%8B.png" alt="avatar"></a></p>
<h4 id="Executors-提供的-4-种线程池"><a href="#Executors-提供的-4-种线程池" class="headerlink" title="Executors 提供的 4 种线程池"></a>Executors 提供的 4 种线程池</h4><p>Executors 类 通过 ThreadPoolExecutor 封装了 4 种常用的线程池：CachedThreadPool，FixedThreadPool，ScheduledThreadPool 和 SingleThreadExecutor。其功能如下。</p>
<ol>
<li>CachedThreadPool：用来创建一个几乎可以无限扩大的线程池（最大线程数为 Integer.MAX_VALUE），适用于执行大量短生命周期的异步任务。</li>
<li>FixedThreadPool：创建一个固定大小的线程池，保证线程数可控，不会造成线程过多，导致系统负载更为严重。</li>
<li>SingleThreadExecutor：创建一个单线程的线程池，可以保证任务按调用顺序执行。</li>
<li>ScheduledThreadPool：适用于执行 延时 或者 周期性 任务。</li>
</ol>
<h4 id="如何配置线程池"><a href="#如何配置线程池" class="headerlink" title="如何配置线程池"></a>如何配置线程池</h4><ul>
<li><strong>CPU 密集型任务</strong><br>尽量使用较小的线程池，一般为 CPU 核心数+1。 因为 CPU 密集型任务 使得 CPU 使用率 很高，若开过多的线程数，会造成 CPU 过度切换。</li>
<li><strong>IO 密集型任务</strong><br>可以使用稍大的线程池，一般为 2*CPU 核心数。 IO 密集型任务 CPU 使用率 并不高，因此可以让 CPU 在等待 IO 的时候有其他线程去处理别的任务，充分利用 CPU 时间。</li>
</ul>
<h4 id="线程池的实际应用"><a href="#线程池的实际应用" class="headerlink" title="线程池的实际应用"></a>线程池的实际应用</h4><p>Tomcat 在分发 web 请求 时使用了线程池来处理。</p>
<h3 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h3><h4 id="核心方法"><a href="#核心方法" class="headerlink" title="核心方法"></a>核心方法</h4><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将给定元素设置到队列中，如果设置成功返回true, 否则返回false。如果是往限定了长度的队列中设置值，推荐使用offer()方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将给定的元素设置到队列中，如果设置成功返回true, 否则返回false. e的值不能为空，否则抛出空指针异常。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将元素设置到队列中，如果队列中没有多余的空间，该方法会一直阻塞，直到队列中有多余的空间。</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将给定元素在给定的时间内设置到队列中，如果设置成功返回true, 否则返回false.</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e, <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列中获取值，如果队列中没有值，线程会一直阻塞，直到队列中有值，并且该方法取得了该值。</span></span><br><span class="line">    <span class="function">E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在给定的时间里，从队列中获取值，时间到了直接调用普通的 poll()方法，为null则直接返回null。</span></span><br><span class="line">    <span class="function">E <span class="title">poll</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取队列中剩余的空间。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">remainingCapacity</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从队列中移除指定的值。</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断队列中是否拥有该值。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将队列中值，全部移除，并发设置到给定的集合中。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">drainTo</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; c)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 指定最多数量限制将队列中值，全部移除，并发设置到给定的集合中。</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">drainTo</span><span class="params">(Collection&lt;? <span class="keyword">super</span> E&gt; c, <span class="keyword">int</span> maxElements)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="主要实现类"><a href="#主要实现类" class="headerlink" title="主要实现类"></a>主要实现类</h4><ul>
<li><strong>ArrayBlockingQueue</strong><br>基于数组的阻塞队列实现，在 ArrayBlockingQueue 内部，维护了一个定长数组，以便缓存队列中的数据对象，这是一个常用的阻塞队列，除了一个定长数组外，ArrayBlockingQueue 内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。<br>ArrayBlockingQueue 在生产者放入数据 和 消费者获取数据时，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于 LinkedBlockingQueue。ArrayBlockingQueue 和 LinkedBlockingQueue 间还有一个明显的不同之处在于，前者在插入或删除元素时不会产生或销毁任何额外的对象实例，而后者则会生成一个额外的 Node 对象。这在长时间内需要高效并发地处理大批量数据的系统中，其对于 GC 的影响还是存在一定的区别。而在创建 ArrayBlockingQueue 时，我们还可以控制对象的内部锁是否采用公平锁，默认采用非公平锁。</li>
<li><strong>LinkedBlockingQueue</strong><br>基于链表的阻塞队列，同 ArrayListBlockingQueue 类似，其内部也维持着一个数据缓冲队列（该队列由一个链表构成），当生产者往队列中放入一个数据时，队列会从生产者手中获取数据，并缓存在队列内部，而生产者立即返回；只有当队列缓冲区达到最大值缓存容量时（LinkedBlockingQueue 可以通过构造函数指定该值），才会阻塞生产者队列，直到消费者从队列中消费掉一份数据，生产者线程会被唤醒，反之对于消费者这端的处理也基于同样的原理。而 LinkedBlockingQueue 之所以能够高效的处理并发数据，还因为其对于生产者端和消费者端分别采用了独立的锁来控制数据同步，这也意味着在高并发的情况下生产者和消费者可以并行地操作队列中的数据，以此来提高整个队列的并发性能。<br>需要注意的是，如果构造一个 LinkedBlockingQueue 对象，而没有指定其容量大小，LinkedBlockingQueue 会默认一个类似无限大小的容量（Integer.MAX_VALUE），这样的话，如果生产者的速度一旦大于消费者的速度，也许还没有等到队列满阻塞产生，系统内存就有可能已被消耗殆尽了。</li>
<li><strong>PriorityBlockingQueue</strong><br>基于优先级的阻塞队列（优先级的判断通过构造函数传入的 Compator 对象来决定），但需要注意的是 PriorityBlockingQueue 并不会阻塞数据生产者，而只会在没有可消费的数据时，阻塞数据的消费者。因此使用的时候要特别注意，生产者生产数据的速度绝对不能快于消费者消费数据的速度，否则时间一长，会最终耗尽所有的可用堆内存空间。在实现 PriorityBlockingQueue 时，内部控制线程同步的锁采用的是公平锁。</li>
</ul>
<h3 id="CAS-指令和原子类（应用比较多的就是计数器）"><a href="#CAS-指令和原子类（应用比较多的就是计数器）" class="headerlink" title="CAS 指令和原子类（应用比较多的就是计数器）"></a>CAS 指令和原子类（应用比较多的就是计数器）</h3><p>互斥同步最主要的问题就是进行线程阻塞和唤醒所带来的性能的额外损耗，因此这种同步被称为<strong>阻塞同步</strong>，它属于一种<strong>悲观的并发策略，我们称之为悲观锁</strong>。随着硬件和操作系统指令集的发展和优化，产生了<strong>非阻塞同步</strong>，被称为<strong>乐观锁</strong>。简单地说，就是<strong>先进行操作，操作完成之后再判断操作是否成功，是否有并发问题，如果有则进行失败补偿，如果没有就算操作成功</strong>，这样就从根本上避免了同步锁的弊端。</p>
<p>目前，在 Java 中应用最广泛的非阻塞同步就是 CAS。从 JDK1.5 以后，可以使用 CAS 操作，该操作由 sun.misc.Unsafe 类里的 compareAndSwapInt() 和 compareAndSwapLong() 等方法实现。通常情况下 sun.misc.Unsafe 类 对于开发者是不可见的，因此，JDK 提供了很多 CAS 包装类 简化开发者的使用，如 AtomicInteger。使用 Java 自带的 Atomic 原子类，可以避免同步锁带来的并发访问性能降低的问题，减少犯错的机会。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring SchedulingConfigurer实现动态定时任务(修改)</title>
    <url>/posts/37dbe3a4/</url>
    <content><![CDATA[<h1 id="Spring-SchedulingConfigurer-实现动态定时任务"><a href="#Spring-SchedulingConfigurer-实现动态定时任务" class="headerlink" title="Spring SchedulingConfigurer 实现动态定时任务"></a>Spring SchedulingConfigurer 实现动态定时任务</h1><p>一、前言<br>大家在日常工作中，一定使用过 Spring 的 @Scheduled 注解吧，通过该注解可以非常方便的帮助我们实现任务的定时执行。</p>
<p>但是该注解是不支持运行时动态修改执行间隔的，不知道你在业务中有没有这些需求和痛点：</p>
<p>在服务运行时能够动态修改定时任务的执行频率和执行开关，而无需重启服务和修改代码<br>能够基于配置，在不同环境&#x2F;机器上，实现定时任务执行频率的差异化<br>这些都可以通过 Spring 的 SchedulingConfigurer 注解来实现。</p>
<p>这个注解其实大家并不陌生，如果有使用过 @Scheduled 的话，因为 @Scheduled 默认是单线程执行的，因此如果存在多个任务同时触发，可能触发阻塞。使用 SchedulingConfigurer 可以配置用于执行 @Scheduled 的线程池，来避免这个问题。</p>
<p>JAVA<br>@Configuration<br>public class ScheduleConfig implements SchedulingConfigurer {<br>    @Override<br>    public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {<br>        &#x2F;&#x2F;设定一个长度10的定时任务线程池<br>        taskRegistrar.setScheduler(Executors.newScheduledThreadPool(10));<br>    }<br>}<br>但其实这个接口，还可以实现动态定时任务的功能，下面来演示如何实现。</p>
<p>二、功能实现<br>后续定义的类开头的 DS 是 Dynamic Schedule 的缩写。</p>
<p>使用到的依赖，除了 Spring 外，还包括：</p>
<p>XML<br><dependency><br>    <groupId>org.apache.commons</groupId><br>    <artifactId>commons-lang3</artifactId><br></dependency></p>
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-collections4</artifactId>
    <version>4.4</version>
</dependency>

<dependency>
    <groupId>org.projectlombok</groupId>
    <artifactId>lombok</artifactId>
    <scope>provided</scope>
    <version>1.18.18</version>
</dependency>
2.1 @EnableScheduling
首先需要开启 @EnableScheduling 注解，直接在启动类添加即可：

<p>JAVA<br>@EnableScheduling<br>@SpringBootApplication<br>public class DSApplication {<br>    public static void main(String[] args) {<br>        SpringApplication.run(DSApplication.class, args);<br>    }<br>}<br>2.2 IDSTaskInfo<br>定义一个任务信息的接口，后续所有用于动态调整的任务信息对象，都需要实现该接口。</p>
<p>id：该任务信息的唯一 ID，用于唯一标识一个任务<br>cron：该任务执行的 cron 表达式。<br>isValid：任务开关<br>isChange：用于标识任务参数是否发生了改变<br>JAVA<br>public interface IDSTaskInfo {<br>    &#x2F;**<br>     * 任务 ID<br>     *&#x2F;<br>    long getId();</p>
<pre><code>/**
 * 任务执行 cron 表达式
 */
String getCron();

/**
 * 任务是否有效
 */
boolean isValid();

/**
 * 判断任务是否发生变化
 */
boolean isChange(IDSTaskInfo oldTaskInfo);
</code></pre>
<p>}<br>2.3 DSContainer<br>顾名思义，是存放 IDSTaskInfo 的容器。</p>
<p>具有以下成员变量：</p>
<p>scheduleMap：用于暂存 IDSTaskInfo 和实际任务 ScheduledTask 的映射关系。其中：<br>task_id：作为主键，确保一个 IDSTaskInfo 只会被注册进一次<br>T：暂存当初注册时的 IDSTaskInfo，用于跟最新的 IDSTaskInfo 比较参数是否发生变化<br>ScheduledTask：暂存当初注册时生成的任务，如果需要取消任务的话，需要拿到该对象<br>Semaphore：确保每个任务实际执行时只有一个线程执行，不会产生并发问题<br>taskRegistrar：Spring 的任务注册管理器，用于注册任务到 Spring 容器中<br>name：调用方提供的类名<br>具有以下成员方法：</p>
<p>void checkTask(final T taskInfo, final TriggerTask triggerTask)：检查 IDSTaskInfo，判断是否需要注册&#x2F;取消任务。具体的逻辑包括：<br>如果任务已经注册：<br>如果任务无效：则取消任务<br>如果任务有效：<br>如果任务配置发生了变化：则取消任务并重新注册任务<br>如果任务没有注册：<br>如果任务有效：则注册任务<br>Semaphore getSemaphore()：获取信号量属性。<br>JAVA<br>import lombok.extern.slf4j.Slf4j;<br>import org.apache.commons.lang3.tuple.Pair;<br>import org.springframework.scheduling.config.ScheduledTask;<br>import org.springframework.scheduling.config.ScheduledTaskRegistrar;<br>import org.springframework.scheduling.config.TriggerTask;</p>
<p>import java.util.Map;<br>import java.util.concurrent.ConcurrentHashMap;<br>import java.util.concurrent.Semaphore;</p>
<p>&#x2F;**</p>
<ul>
<li>存放 IDSTaskInfo 容器</li>
<li>@author jitwxs</li>
<li>@date 2021年03月27日 16:29</li>
</ul>
<p> <em>&#x2F;<br>  @Slf4j<br>  public class DSContainer<T extends IDSTaskInfo> {<br>    &#x2F;</em>*<br>     * IDSTaskInfo和真实任务的关联关系<br>     *<br>     * &lt;task_id, &lt;Task, &lt;Scheduled, Semaphore&gt;&gt;&gt;<br>     *&#x2F;<br>      private final Map&lt;Long, Pair&lt;T, Pair&lt;ScheduledTask, Semaphore&gt;&gt;&gt; scheduleMap &#x3D; new ConcurrentHashMap&lt;&gt;();</p>
<pre><code>private final ScheduledTaskRegistrar taskRegistrar;

private final String name;

public DSContainer(ScheduledTaskRegistrar scheduledTaskRegistrar, final String name) &#123;
    this.taskRegistrar = scheduledTaskRegistrar;
    this.name = name;
&#125;

/**
 * 注册任务
 * @param taskInfo 任务信息
 * @param triggerTask 任务的触发规则
 */
  public void checkTask(final T taskInfo, final TriggerTask triggerTask) &#123;
    final long taskId = taskInfo.getId();

    if (scheduleMap.containsKey(taskId)) &#123;
        if (taskInfo.isValid()) &#123;
            final T oldTaskInfo = scheduleMap.get(taskId).getLeft();

            if(oldTaskInfo.isChange(taskInfo)) &#123;
                log.info(&quot;DSContainer will register &#123;&#125; again because task config change, taskId: &#123;&#125;&quot;, name, taskId);
                cancelTask(taskId);
                registerTask(taskInfo, triggerTask);
            &#125;
        &#125; else &#123;
            log.info(&quot;DSContainer will cancelTask &#123;&#125; because task not valid, taskId: &#123;&#125;&quot;, name, taskId);
            cancelTask(taskId);
        &#125;
    &#125; else &#123;
        if (taskInfo.isValid()) &#123;
            log.info(&quot;DSContainer will register &#123;&#125; task, taskId: &#123;&#125;&quot;, name, taskId);
            registerTask(taskInfo, triggerTask);
        &#125;
    &#125;
  &#125;

/**
 * 获取 Semaphore，确保任务不会被多个线程同时执行
 */
  public Semaphore getSemaphore(final long taskId) &#123;
    return this.scheduleMap.get(taskId).getRight().getRight();
  &#125;

private void registerTask(final T taskInfo, final TriggerTask triggerTask) &#123;
    final ScheduledTask latestTask = taskRegistrar.scheduleTriggerTask(triggerTask);
    this.scheduleMap.put(taskInfo.getId(), Pair.of(taskInfo, Pair.of(latestTask, new Semaphore(1))));
&#125;

private void cancelTask(final long taskId) &#123;
    final Pair&lt;T, Pair&lt;ScheduledTask, Semaphore&gt;&gt; pair = this.scheduleMap.remove(taskId);
    if (pair != null) &#123;
        pair.getRight().getLeft().cancel();
    &#125;
&#125;
</code></pre>
<p>  }<br>  2.4 AbstractDSHandler<br>  下面定义实际的动态线程池处理方法，这里采用抽象类实现，将共用逻辑封装起来，方便扩展。</p>
<p>具有以下抽象方法：</p>
<p>List<T> listTaskInfo()：获取所有的任务信息。<br>void doProcess(T taskInfo)：实现实际执行任务的业务逻辑。<br>具有以下公共方法：</p>
<p>void configureTasks(ScheduledTaskRegistrar taskRegistrar)：创建 DSContainer 对象，并创建一个单线程的任务定时执行，调用 scheduleTask() 方法处理实际逻辑。<br>void scheduleTask()：首先加载所有任务信息，然后基于 cron 表达式生成 TriggerTask 对象，调用 checkTask() 方法确认是否需要注册&#x2F;取消任务。当达到执行时间时，调用 execute() 方法，执行任务逻辑。<br>void execute(final T taskInfo)：获取信号量，成功后执行任务逻辑。<br>JAVA<br>import lombok.extern.slf4j.Slf4j;<br>import org.apache.commons.collections4.CollectionUtils;<br>import org.springframework.scheduling.annotation.SchedulingConfigurer;<br>import org.springframework.scheduling.config.ScheduledTaskRegistrar;<br>import org.springframework.scheduling.config.TriggerTask;<br>import org.springframework.scheduling.support.CronTrigger;</p>
<p>import java.util.List;<br>import java.util.Objects;<br>import java.util.concurrent.Semaphore;<br>import java.util.concurrent.TimeUnit;</p>
<p>&#x2F;**</p>
<ul>
<li>抽象 Dynamic Schedule 实现，基于 SchedulingConfigurer 实现</li>
<li>@author jitwxs</li>
<li>@date 2021年03月27日 16:41</li>
</ul>
<p> *&#x2F;<br>  @Slf4j<br>  public abstract class AbstractDSHandler<T extends IDSTaskInfo> implements SchedulingConfigurer {</p>
<pre><code>private DSContainer&lt;T&gt; dsContainer;

private final String CLASS_NAME = getClass().getSimpleName();

/**
 * 获取所有的任务信息
 */
  protected abstract List&lt;T&gt; listTaskInfo();

/**
 * 做具体的任务逻辑
 *
 * &lt;p/&gt; 该方法执行时位于跟 SpringBoot @Scheduled 注解相同的线程池内。如果内部仍需要开子线程池执行，请务必同步等待子线程池执行完毕，否则可能会影响预期效果。
 */
  protected abstract void doProcess(T taskInfo) throws Throwable;

@Override
public void configureTasks(ScheduledTaskRegistrar taskRegistrar) &#123;
    dsContainer = new DSContainer&lt;&gt;(taskRegistrar, CLASS_NAME);
    // 每隔 100ms 调度一次，用于读取所有任务
    taskRegistrar.addFixedDelayTask(this::scheduleTask, 1000);
&#125;

/**
 * 调度任务，加载所有任务并注册
 */
  private void scheduleTask() &#123;
    CollectionUtils.emptyIfNull(listTaskInfo()).forEach(taskInfo -&gt;
            dsContainer.checkTask(taskInfo, new TriggerTask(() -&gt;
                    this.execute(taskInfo), triggerContext -&gt; new CronTrigger(taskInfo.getCron()).nextExecutionTime(triggerContext)
            ))
    );
  &#125;

private void execute(final T taskInfo) &#123;
    final long taskId = taskInfo.getId();

    try &#123;
        Semaphore semaphore = dsContainer.getSemaphore(taskId);
        if (Objects.isNull(semaphore)) &#123;
            log.error(&quot;&#123;&#125; semaphore is null, taskId: &#123;&#125;&quot;, CLASS_NAME, taskId);
            return;
        &#125;
        if (semaphore.tryAcquire(3, TimeUnit.SECONDS)) &#123;
            try &#123;
                doProcess(taskInfo);
            &#125; catch (Throwable throwable) &#123;
                log.error(&quot;&#123;&#125; doProcess error, taskId: &#123;&#125;&quot;, CLASS_NAME, taskId, throwable);
            &#125; finally &#123;
                semaphore.release();
            &#125;
        &#125; else &#123;
            log.warn(&quot;&#123;&#125; too many executor, taskId: &#123;&#125;&quot;, CLASS_NAME, taskId);
        &#125;
    &#125; catch (InterruptedException e) &#123;
        log.warn(&quot;&#123;&#125; interruptedException error, taskId: &#123;&#125;&quot;, CLASS_NAME, taskId);
    &#125; catch (Exception e) &#123;
        log.error(&quot;&#123;&#125; execute error, taskId: &#123;&#125;&quot;, CLASS_NAME, taskId, e);
    &#125;
&#125;
</code></pre>
<p>  }<br>  三、快速测试<br>  至此就完成了动态任务的框架搭建，下面让我们来快速测试下。为了尽量减少其他技术带来的复杂度，本次测试不涉及数据库和真实的定时任务，完全采用模拟实现。</p>
<p>3.1 模拟定时任务<br>为了模拟一个定时任务，我定义了一个 foo() 方法，其中只输出一句话。后续我将通过定时调用该方法，来模拟定时任务。</p>
<p>JAVA<br>import lombok.extern.slf4j.Slf4j;</p>
<p>import java.time.LocalTime;</p>
<p>@Slf4j<br>public class SchedulerTest {<br>    public void foo() {<br>        log.info(“{} Execute com.github.jitwxs.sample.ds.test.SchedulerTest#foo”, LocalTime.now());<br>    }<br>}<br>3.2 实现 IDSTaskInfo<br>首先定义 IDSTaskInfo，我这里想通过反射来实现调用 foo() 方法，因此 reference 表示的是要调用方法的全路径。另外我实现了 isChange() 方法，只要 cron、isValid、reference 发生了变动，就认为该任务的配置发生了改变。</p>
<p>JAVA<br>import com.github.jitwxs.sample.ds.config.IDSTaskInfo;<br>import lombok.Builder;<br>import lombok.Data;</p>
<p>@Data<br>@Builder<br>public class SchedulerTestTaskInfo implements IDSTaskInfo {<br>    private long id;</p>
<pre><code>private String cron;

private boolean isValid;

private String reference;

@Override
public boolean isChange(IDSTaskInfo oldTaskInfo) &#123;
    if(oldTaskInfo instanceof SchedulerTestTaskInfo) &#123;
        final SchedulerTestTaskInfo obj = (SchedulerTestTaskInfo) oldTaskInfo;
        return !this.cron.equals(obj.cron) || this.isValid != obj.isValid || !this.reference.equals(obj.getReference());
    &#125; else &#123;
        throw new IllegalArgumentException(&quot;Not Support SchedulerTestTaskInfo type&quot;);
    &#125;
&#125;
</code></pre>
<p>}<br>3.3 实现 AbstractDSHandler<br>有几个需要关注的：</p>
<p>（1）listTaskInfo() 返回值我使用了 volatile 变量，便于我修改它，模拟任务信息数据的改变。</p>
<p>（2）doProcess() 方法中，读取到 reference 后，使用反射进行调用，模拟定时任务的执行。</p>
<p>（3）额外实现了 ApplicationListener 接口，当服务启动后，每隔一段时间修改下任务信息，模拟业务中调整配置。</p>
<p>服务启动后，foo() 定时任务将每 10s 执行一次。<br>10s 后，将 foo() 定时任务执行周期从每 10s 执行调整为 1s 执行。<br>10s 后，关闭 foo() 定时任务执行。<br>10s 后，开启 foo() 定时任务执行。<br>JAVA<br>import com.github.jitwxs.sample.ds.config.AbstractDSHandler;<br>import org.springframework.context.ApplicationEvent;<br>import org.springframework.context.ApplicationListener;<br>import org.springframework.stereotype.Component;</p>
<p>import java.lang.reflect.Method;<br>import java.util.Collections;<br>import java.util.List;<br>import java.util.concurrent.Executors;<br>import java.util.concurrent.TimeUnit;<br>import java.util.concurrent.locks.LockSupport;</p>
<p>&#x2F;**</p>
<ul>
<li>@author jitwxs</li>
<li>@date 2021年03月27日 21:54</li>
</ul>
<p> *&#x2F;<br>  @Component<br>  public class SchedulerTestDSHandler extends AbstractDSHandler<SchedulerTestTaskInfo> implements ApplicationListener {<br>    public volatile List<SchedulerTestTaskInfo> taskInfoList &#x3D; Collections.singletonList(<br>            SchedulerTestTaskInfo.builder()<br>                    .id(1)<br>                    .cron(“0&#x2F;10 * * * * ? “)<br>                    .isValid(true)<br>                    .reference(“com.github.jitwxs.sample.ds.test.SchedulerTest#foo”)<br>                    .build()<br>    );</p>
<pre><code>@Override
protected List&lt;SchedulerTestTaskInfo&gt; listTaskInfo() &#123;
    return taskInfoList;
&#125;

@Override
protected void doProcess(SchedulerTestTaskInfo taskInfo) throws Throwable &#123;
    final String reference = taskInfo.getReference();
    final String[] split = reference.split(&quot;#&quot;);
    if(split.length != 2) &#123;
        return;
    &#125;

   try &#123;
       final Class&lt;?&gt; clazz = Class.forName(split[0]);
       final Method method = clazz.getMethod(split[1]);
       method.invoke(clazz.newInstance());
   &#125; catch (Exception e) &#123;
       e.printStackTrace();
   &#125;
&#125;

@Override
public void onApplicationEvent(ApplicationEvent applicationEvent) &#123;
    Executors.newScheduledThreadPool(1).scheduleAtFixedRate(() -&gt; &#123;
        LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(10));

        // setting 1 seconds execute
        taskInfoList = Collections.singletonList(
                SchedulerTestTaskInfo.builder()
                        .id(1)
                        .cron(&quot;0/1 * * * * ? &quot;)
                        .isValid(true)
                        .reference(&quot;com.github.jitwxs.sample.ds.test.SchedulerTest#foo&quot;)
                        .build()
        );
     
        LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(10));
     
        // setting not valid
        taskInfoList = Collections.singletonList(
                SchedulerTestTaskInfo.builder()
                        .id(1)
                        .cron(&quot;0/1 * * * * ? &quot;)
                        .isValid(false)
                        .reference(&quot;com.github.jitwxs.sample.ds.test.SchedulerTest#foo&quot;)
                        .build()
        );
     
        LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(10));
     
        // setting valid
        taskInfoList = Collections.singletonList(
                SchedulerTestTaskInfo.builder()
                        .id(1)
                        .cron(&quot;0/1 * * * * ? &quot;)
                        .isValid(true)
                        .reference(&quot;com.github.jitwxs.sample.ds.test.SchedulerTest#foo&quot;)
                        .build()
        );
    &#125;, 12, 86400, TimeUnit.SECONDS);
&#125;
</code></pre>
<p>  }<br>  3.4 运行程序<br>  整个应用包结构如下：</p>
<p>包结构</p>
<p>运行程序后，在控制台可以观测到如下输出：</p>
<p>运行结果</p>
<p>四、后记<br>以上完成了动态定时任务的介绍，你能够根据本篇文章，实现以下需求吗：</p>
<p>本文基于 cron 表达式实现了频率控制，你能改用 fixedDelay 或 fixedRate 实现吗？<br>基于数据库&#x2F;配置文件&#x2F;配置中心，实现对服务中定时任务的动态频率调整和任务的启停。<br>开发一个数据表历史数据清理功能，能够动态配置要清理的表、清理的规则、清理的周期。<br>开发一个数据表异常数据告警功能，能够动态配置要扫描的表、告警的规则、扫描的周期。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java内存模型1</title>
    <url>/posts/86d8e3c1/</url>
    <content><![CDATA[<h1 id="java内存模型1"><a href="#java内存模型1" class="headerlink" title="java内存模型1"></a>java内存模型1</h1><h2 id="一、为什么有java内存模型？"><a href="#一、为什么有java内存模型？" class="headerlink" title="一、为什么有java内存模型？"></a>一、为什么有java内存模型？</h2><ul>
<li><p>背景</p>
<ol>
<li>现有计算机往往是多核的，每个核心下会有高速缓存。高速缓存的诞生是由于「CPU 与内存（主存）的速度存在差异」，L1 和 L2 缓存一般是「每个核心独占」一份的。</li>
<li>为了让 CPU 提高运算效率，处理器可能会对输入的代码进行「乱序执行」，也就是所谓的「指令重排序」。</li>
<li>一次对数值的修改操作往往是非原子性的（比如计实际上在计算机执行时就会分成多个指令）</li>
</ol>
<p>即：可见性、有序性、原子性</p>
</li>
<li><p>单线程不存在以上问题</p>
<ol>
<li>在永远单线程下，上面所讲的均不会存在什么问题，因为单线程意味着无并发。并且在单线程下，编译器&#x2F;runtime&#x2F;处理器都必须遵守as-if-serial语义，遵守as-if-serial意味着它们不会对「数据依赖关系的操作」做重排序。</li>
<li>CPU为了效率，有了高速缓存、有了指令重排序等等，整块架构都变得复杂了。我们写的程序肯定也想要「充分」利用CPU的资源啊！于是乎，我们使用起了多线程</li>
</ol>
</li>
<li><p>多线程线程安全问题</p>
<ol>
<li>缓存数据不一致：多个线程同时修改「共享变量」，CPU核心下的高速缓存是「不共享」的，那多个cache与内存之间的数据同步该怎么做？</li>
<li>CPU指令重排序在多线程下会导致代码在非预期下执行，最终会导致结果存在错误的情况。</li>
</ol>
</li>
<li><p>缓存不一致问题</p>
<ol>
<li>使用「总线锁」：某个核心在修改数据的过程中，其他核心均无法修改内存中的数据。（类似于独占内存的概念，只要有CPU在修改，那别的CPU就得等待当前CPU释放）</li>
<li>缓存一致性协议（MESI协议，其实协议有很多，只是举个大家都可能见过的）。MESI拆开英文是（Modified（修改状态）、Exclusive（独占状态）、Share（共享状态）、Invalid（无效状态））</li>
</ol>
<p><strong>缓存一致性协议</strong>我认为可以理解为「缓存锁」，它针对的是「缓存行」（CacheIine）进行”加锁”，所谓「缓存行」其实就是高速缓存存储的最小单位。<strong>MESI协议的原理</strong>大概就是：当每个CPU读取共享变量之前，会先识别数据的「对象状态」（是修改、还是共享、还是独占、还是无效）。<strong>如果是独占</strong>，说明当前CPU将要得到的变量数据是最新的，没有被其他CPU所同时读取。<strong>如果是共享</strong>，说明当前CPU将要得到的变量数据还是最新的，有其他的CPU在同时读取，但还没被修改。<strong>如果是修改</strong>，说明当前CPU正在修改该变量的值，同时会向其他CPU发送该数据状态为invalid（无效）的通知，得到其他CPU响应后（其他CPU将数据状态从共享（share）变成invalid（无效）），会当前CPU将高速缓存的数据写到主存，并把自己的状态从modify（修改）变成exclusive （独占）。<strong>如果是无效</strong>，说明当前数据是被改过了，需 要从主存重新读取最新的数据。</p>
<p><strong>其实MESI协议做的就是判断「对象状态」，根据「对象状态」做不同的策略</strong>。</p>
<p><strong>关键就在于某个CPU在对数据进行修改时，需要「同步」通知其他CPU，表示这个数据被我修改了，你们不能用了。</strong><br><strong>比较于「总线锁」，MESI协议的”锁粒度”更小了，性能那肯定会更高咯</strong></p>
</li>
<li><p>cpu还有优化</p>
<ol>
<li>优化思路就是从「同步」变成「异步」。<br>在修改时会「同步」告诉其他CPU，而现在则把最新修改的值写到「store buffe r」中，并通知其他CPU记得要改状态，随后CPU就直接返回干其他事了。等到收到其它CPU发过来的响应消息，再将数据更新到高速缓存中。其他CPU接收到invalid（无效）通知时，也会把接收到的消息放入「invalid queue」中，只要写到「invalid queue」就会直接返回告诉修改数据的CPU已经将状态置为「invalid」</li>
</ol>
</li>
</ul>
<h2 id="二、什么是java内存模型"><a href="#二、什么是java内存模型" class="headerlink" title="二、什么是java内存模型"></a>二、什么是java内存模型</h2><ol>
<li>由于不同CPU架构的缓存体系不一样、缓存一致性协议不一样、重排序的策略不一样、所提供的内存屏障指令也有差异，为了简化Java开发人员的工作。Java封装了一套规范，这套规范就是「Java 内存模型」</li>
<li>再详细地说，「Java内存模型」希望屏蔽各种硬件和操作系统的访问差异，保证了Java程序在各种平台下对内存的访问都能得到一致效果。</li>
<li>目的是解决多线程存在的原子性、可见性（缓存一致性）以及有序性问题。</li>
</ol>
<p><strong>java内存模型它是一种规范，java虚拟机会实现这种规范</strong></p>
<h2 id="三、java内存模型的内容"><a href="#三、java内存模型的内容" class="headerlink" title="三、java内存模型的内容"></a>三、java内存模型的内容</h2><ol>
<li><p>java内存模型的抽象结构</p>
<p><strong>定义：</strong></p>
<ul>
<li><p>java内存模型定义了：java线程对内存数据进行交互的规范。</p>
</li>
<li><p>线程之间的「共享变量」存储在「主内存」中，每个线程都有自己私有的「本地内存」，「本地内存」存储了该线程以读&#x2F;写共享变量的副本。</p>
</li>
<li><p>本地内存是Java内存模型的抽象概念，并不是真实存在的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210922142656426_20210922142656.png"></p>
</li>
</ul>
<p><strong>规定：</strong></p>
<ul>
<li>Java内存模型规定了：线程对变量的所有操作都必须在「本地内存」进行，「不能直接读写主内存」的变量</li>
<li>Java内存模型定义了8种操作来完成「变量如何从主内存到本地内存，以及变量如何从本地内存到主内存」，分别是read&#x2F;load&#x2F;use&#x2F;assign&#x2F;store&#x2F;write&#x2F;lock&#x2F;unlock操作</li>
<li>看着8个操作很多，对变量的一次读写就涵盖了这些操作了，我再画个图给你讲讲</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/WH3VEu_20210922143253.png"></p>
</li>
<li><p>happen-beforeguize</p>
<ul>
<li><p>按我的理解下，happen-before实际上也是一套「规则」。Java内存模型定义了这套规则，目的是为了阐述「操作之间」的内存「可见性」。</p>
</li>
<li><p>从上次讲述「指令重排」就提到了，在CPU和编译器层面上都有指令重排的问题。</p>
<p>指令重排虽然是能提高运行的效率，但在并发编程中，我们在兼顾「效率」的前提下，还希望「程序结果」能由我们掌控的。<br>说白了就是：在某些重要的场景下，这一组操作都不能进行重排序，「前面一个操作的结果对后续操作必须是可见的」</p>
</li>
<li><p>于是，Java内存模型 happen-就提出了-b efore这套规则，规则总共有8条：比如传递性、 volatile变量规则、程序顺序规则、监视器锁的规则（具体看规则的含义就好了，这块不难）</p>
</li>
<li><p>只要记住，有了 happen-before-这些规则。我们写的代码只要在这些规则下，前一个操作的结果对后续操作是可见的，是不会发生重排序的。</p>
</li>
</ul>
</li>
<li><p>对volatile内存语义的探讨</p>
</li>
</ol>
<ul>
<li><p>嗯，volatile是Java的一个关键字<br>为什么讲Java内存模型往往就会讲到volatile这个关键字呢，我觉得主要是它的特性：可见性和有序性（禁止重排序</p>
</li>
<li><p>Java内存模型这个规范，很大程度下就是为了解决可见性和有序性的问题。</p>
</li>
<li><p>Java内存模型为了实现volatile有序性和可见性，定义了4种内存屏障的「规范」，分别是LoadLoad&#x2F;LoadStore&#x2F;StoreLoad&#x2F;StoreStore</p>
</li>
<li><p>回到volatile上，说白了，就是在volatile「前后」加上「内存屏障」，使得编译器和CPU无法进行重排序，致使有序，并且写volatile变量对其他线程可见。</p>
</li>
<li><p>Java内存模型定义了规范，那Java虚拟机就得实现啊，是不是？</p>
<ul>
<li>之前看过Hotspot虚拟机的实现，在「汇编」层面上实际是通过Lock前缀指令来实现的，而不是各种fence指令（主要原因就是简便。因为大部分平台都支持lock指令，而fence指令是x86平台的）。</li>
<li>lock指令能保证：禁止CPU和编译器的重排序（保证了有序性）、保证CPU写核心的指令可以立即生效且其他核心的缓存数据失效（保证了可见性）</li>
</ul>
</li>
<li><p>volatile和MESI协议有啥关系？</p>
<ul>
<li><p>没啥关系：Java内存模型关注的是编程语言层面上，它是高维度的抽象。</p>
</li>
<li><p>MESI是CPU缓存一致性协议，不同的CPU架构都不一样，可能有的CPU压根就没用MESI协议..</p>
</li>
<li><p>只不过MESI名声大，大家就都拿他来举例子了。</p>
</li>
<li><p>MESI可能只是在「特定的场景下」为实现volatile的可见性&#x2F;有序性而使用到的一部分罢了</p>
</li>
<li><p>为了让Java程序员屏蔽上面这些底层知识，快速地入门使用volatile变量</p>
</li>
<li><p>Java内存模型的happen-before规则中就有对volatile变量规则的定义：<br>这条规则的内容其实就是：对一个volatil e变量的写操作相对于后续对这个volatile变量的读操作可见</p>
<p>它通过happen-before规则来规定：只要变量声明了volatile关键字，写后再读，读必须可见写的值。（可见性、有序性）</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java垃圾回收机制</title>
    <url>/posts/638ae112/</url>
    <content><![CDATA[<h1 id="java垃圾回收"><a href="#java垃圾回收" class="headerlink" title="java垃圾回收"></a>java垃圾回收</h1><h2 id="一、jvm内存结构"><a href="#一、jvm内存结构" class="headerlink" title="一、jvm内存结构"></a>一、jvm内存结构</h2><p>嗯，前面提到了堆分了「新生代」和 「老年代」，「新生代」又分为「Eden」和「Survivor」区，「Survivor」区又分为「From Survivor」和「To Survivor」区</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/TOrLy1_20210922150656.png"></p>
<h2 id="二、垃圾回收机制"><a href="#二、垃圾回收机制" class="headerlink" title="二、垃圾回收机制"></a>二、垃圾回收机制</h2><ul>
<li>背景</li>
</ul>
<p>我们使用Java的时候，会创建很多对象，但我们未曾「手动」将这些对象进行清除；<br>而如果用C&#x2F;C++语言的时候，用完是需要自己free（释放）掉的；<br>那为什么在写Java的时候不用我们自己手动释放”垃圾”呢？原因很简单，JVM帮我们做了（自动回收垃圾）</p>
<ul>
<li>垃圾定义</li>
</ul>
<p>我个人对垃圾的定义：只要对象不再被使用了，那我们就认为该对象就是垃圾，对象所占用的空间就可以被回收</p>
<ul>
<li><p>判断垃圾不再被使用</p>
<p>常用算法有2个：引用计数法、可达性分析法</p>
</li>
</ul>
<ol>
<li><p>引用计数法思路很简单：当对象被引用则+1，但对象引用失败则-1。当计数器为0时，说明对象不再被引用，可以被可回收<br><strong>缺点</strong>：引用计数法最明显的缺点就是：如果对象存在循环依赖，那就无法定位该对象是否应该被回收（A依赖B，B依赖A）</p>
</li>
<li><p>另一种就是可达性分析法：它从「GCR oots」开始向下搜索，当对象到「GCRoots」都没有任何引用相连时，说明对象是不可用的，可以被回收。<br>「GC Roots」是一组必须「活跃」的引用。<br>从「GC Root」出发，程序通过直接引用或者间接引用，能够找到可能正在被使用的对象。</p>
<p>例子：比如我们上次不是聊到JVM内存结构中的虚拟机栈吗，虚拟机栈里不是有栈帧吗，栈帧不是有局部变量吗？局部变量不就存储着引用嘛。<br>那如果栈帧位于虚拟机栈的栈顶，是不是说明这个栈帧是活跃的（换言之，是线程正在被调用的）<br>既然是线程正在调用的，那栈帧里的指向「堆」的对象引用，是不是一定是「活跃」的引用？</p>
<p>所以，当前活跃的栈帧指向堆里的对象引用就可以是「GCRoots」</p>
<p>当然，比如类的静态变量引用是「GCRootS」，被「Java本地方法」所引用的对象也是「GCRoots」等等。。。<br><strong>即</strong>：回到理解的重点：「GCRoots」是一组必须「活跃」的「引用」，只要跟「GCRoots」没有直接或者间接引用相连，那就是垃圾<br><strong>JVM用的就是</strong>「可达性分析算法」来判断对象是否为垃圾</p>
</li>
</ol>
<ul>
<li>垃圾回收第一步就是<strong>标记</strong></li>
</ul>
<p>标记哪些没有被「GC Roots」引用的对象</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/wZPvLi_20210923092156.png"></p>
<ul>
<li><p>标记完后就可以清除了</p>
<ul>
<li><p>标记完之后，我们就可以选择直接「清除」，只要不被「GCRoots」关联的，都可以干掉过程非常简单粗暴。</p>
<p><strong>但也存在很明显的问题</strong><br>直接清除会有「<strong>内存碎片</strong>」的问题：可能我有10M的空余内存，但程序申请9M内存空间却申请不下来（10M的内存空间是垃圾清除后的，不连续的）</p>
</li>
<li><p><strong>那解决「内存碎片」的问题也比较简单粗暴，「标记」完，不直接「清除」</strong><br>我把「标记」存活的对象「复制」到另一块空间，复制完了之后，直接把原有的整块空间给干掉！这样就没有内存碎片的问题了<br><strong>这种做法缺点又很明显</strong>：<strong>内存利用率低</strong>，得有一块新的区域给我复制（移动）过去</p>
</li>
<li><p>还有一种「折中」的办法，我未必要有一块「大的完整空间」才能解决内存碎片的问题，我只要能在「当前区域」内进行移动<br>把存活的对象移到一边，把垃圾移到一边，那再将垃圾一起删除掉，不就没有内存碎片了嘛，专业术语叫做<strong>整理</strong>。</p>
</li>
</ul>
</li>
<li><p>年轻代、老年代<br>「垃圾回收」是会导致「stop the word」 （应用停止访问）<br>理解「stop the word」应该很简单吧：回收垃圾的时候，程序是有短暂的时间不能正常继续运作啊。不然JVM在回收的时候，用户线程还「不停止」继续分配修改引用，JVM怎么搞（：</p>
<p>经过研究表明：大部分对象的生命周期都很短，而只有少部分对象可能会存活很长时间</p>
<ul>
<li><p>为了使「stop the word」持续的时间尽可能短以及提高并发式GC所能应付的内存分配速率<br>在很多的垃圾收集器上都会在「物理」或者「逻辑」上，把这两类对象进行区分司P<br>死得快的对象所占的区域叫做「年轻代」，活得久的对象所占的区域叫做「老年代」</p>
<p>（jdk8及以下分年轻代、老年代；高版本的垃圾收集器ZGC,是没有分代的概念的）</p>
</li>
</ul>
</li>
<li><p>垃圾回收过程：对应几种垃圾回收算法</p>
<p>其实在前面更前面提到了垃圾回收的过程，其实就对应着几种「垃圾回收算法」分别是：<br><strong>标记清除算法、标记复制算法和标记整理算法【「标记」「复制」「整理」】</strong></p>
</li>
<li><p>jdk8生产环境下常见垃圾回收器</p>
<p>「年轻代」的垃圾收集器有：Serial、Parallel Scavenge、 ParNew<br>「老年代」的垃圾收集器有：Serial Old、 Parallel Old、CMS</p>
<ul>
<li>看着垃圾收集器有很多，其实还是非常好理解的。Serial是单线程的，Parallel是多线程</li>
<li>这些垃圾收集器实际上就是「实现了」垃圾回收算法（标记复制、标记整理以及标记清除算法）</li>
<li>CMS是比较新的垃圾收集器，它的特点是能够尽可能减少「stopthe word」时间。在垃圾回收时让用户线程和GC线程能够并发执行！</li>
<li>「年轻代」的垃圾收集器使用的都是「标记复制算法」<br>所以在「堆内存」划分中，将年轻代划分出Survivor区（Survivor From和Survivor To），目的就是为了有一块完整的内存空间供垃圾回收器进行拷贝（移动），而新对象都是放入Eden区的。</li>
<li>我下面重新画下「堆内存」的图，因为它们的大小是有默认的比例的</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/E2SJMc_20210923095854.png"></p>
</li>
<li><p>新生代何时会变老年代<br>分2种情况：</p>
<ol>
<li>如果对象太大了，就会直接进入老年代（对象创建时就很大 || Survivor区没办法存下该对象）</li>
<li>如果对象太老了，那就会晋升至老年代（每发生一次MinorGC，存活的对象年龄+1，达到默认值15则晋升老年代 || 动态对象年龄判定可以进入老年代）<ul>
<li>当Eden区空间不足时，就会触发MinorGC</li>
<li>那在「年轻代」GC的时候，从GC Roots出发，那不也会扫描到「老年代」的对象吗？那那那..不就相当于全堆扫描吗？<ul>
<li>这JVM里也有解决办法的。下我的看法<br>HotSpot虚拟机「老的GC」（G1以下） 是要求整个GC堆在连续的地址空间上<br>所以会有一条分界线（一侧是老年代，另一侧是年轻代），所以可以通过「地址」就可以判断对象在哪个分代上如</li>
<li>当做MonorGC的时候，从GCRoots出发，如果发现「老年代」的对象，那就不往下走了（MonorGC对老年代的区域毫无兴趣）</li>
</ul>
</li>
<li>但又有个问题，那如果年轻代」的对象被「老年代」引用了呢？（老年代对象持有年轻代对象的引用），这时候肯定是不能回收掉「年轻代」的对象的?<ul>
<li>HotSpot虚拟机下有「card table」（卡表）来避免全局扫描「老年代」对象</li>
<li>「堆内存」的每一小块区域形成「卡页」，卡表实际上就是卡页的集合。当判断一个卡页中有存在对象的跨代引用时，将这个页标记为「脏页」</li>
<li>那知道了「卡表」之后，就很好办了。每次MinorGC的时候只需要去「卡表」找到「脏页」，找到后加入至GCRoot，而不用去遍历整个「老年代」的对象了。</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程池实现原理及其在美团业务中的实践</title>
    <url>/posts/211da837/</url>
    <content><![CDATA[<h1 id="Java线程池实现原理及其在美团业务中的实践"><a href="#Java线程池实现原理及其在美团业务中的实践" class="headerlink" title="Java线程池实现原理及其在美团业务中的实践"></a><a href="https://tech.meituan.com/2020/04/02/java-pooling-pratice-in-meituan.html">Java线程池实现原理及其在美团业务中的实践</a></h1><p>随着计算机行业的飞速发展，摩尔定律逐渐失效，多核CPU成为主流。使用多线程并行计算逐渐成为开发人员提升服务器性能的基本武器。J.U.C提供的线程池：ThreadPoolExecutor类，帮助开发人员管理线程并方便地执行并行任务。了解并合理使用线程池，是一个开发人员必修的基本功。</p>
<p>本文开篇简述线程池概念和用途，接着结合线程池的源码，帮助读者领略线程池的设计思路，最后回归实践，通过案例讲述使用线程池遇到的问题，并给出了一种动态化线程池解决方案。</p>
<h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><h3 id="1-1-线程池是什么"><a href="#1-1-线程池是什么" class="headerlink" title="1.1 线程池是什么"></a>1.1 线程池是什么</h3><p>线程池（Thread Pool）是一种基于池化思想管理线程的工具，经常出现在多线程服务器中，如MySQL。</p>
<p>线程过多会带来额外的开销，其中包括创建销毁线程的开销、调度线程的开销等等，同时也降低了计算机的整体性能。线程池维护多个线程，等待监督管理者分配可并发执行的任务。这种做法，一方面避免了处理任务时创建销毁线程开销的代价，另一方面避免了线程数量膨胀导致的过分调度问题，保证了对内核的充分利用。</p>
<p>而本文描述线程池是JDK中提供的ThreadPoolExecutor类。</p>
<p>当然，使用线程池可以带来一系列好处：</p>
<ul>
<li><strong>降低资源消耗</strong>：通过池化技术重复利用已创建的线程，降低线程创建和销毁造成的损耗。</li>
<li><strong>提高响应速度</strong>：任务到达时，无需等待线程创建即可立即执行。</li>
<li><strong>提高线程的可管理性</strong>：线程是稀缺资源，如果无限制创建，不仅会消耗系统资源，还会因为线程的不合理分布导致资源调度失衡，降低系统的稳定性。使用线程池可以进行统一的分配、调优和监控。</li>
<li><strong>提供更多更强大的功能</strong>：线程池具备可拓展性，允许开发人员向其中增加更多的功能。比如延时定时线程池ScheduledThreadPoolExecutor，就允许任务延期执行或定期执行。</li>
</ul>
<h3 id="1-2-线程池解决的问题是什么"><a href="#1-2-线程池解决的问题是什么" class="headerlink" title="1.2 线程池解决的问题是什么"></a>1.2 线程池解决的问题是什么</h3><p>线程池解决的核心问题就是资源管理问题。在并发环境下，系统不能够确定在任意时刻中，有多少任务需要执行，有多少资源需要投入。这种不确定性将带来以下若干问题：</p>
<ol>
<li>频繁申请&#x2F;销毁资源和调度资源，将带来额外的消耗，可能会非常巨大。</li>
<li>对资源无限申请缺少抑制手段，易引发系统资源耗尽的风险。</li>
<li>系统无法合理管理内部的资源分布，会降低系统的稳定性。</li>
</ol>
<p>为解决资源分配这个问题，线程池采用了“池化”（Pooling）思想。池化，顾名思义，是为了最大化收益并最小化风险，而将资源统一在一起管理的一种思想。</p>
<p>Pooling is the grouping together of resources (assets, equipment, personnel, effort, etc.) for the purposes of maximizing advantage or minimizing risk to the users. The term is used in finance, computing and equipment management.——wikipedia</p>
<p>“池化”思想不仅仅能应用在计算机领域，在金融、设备、人员管理、工作管理等领域也有相关的应用。</p>
<p>在计算机领域中的表现为：统一管理IT资源，包括服务器、存储、和网络资源等等。通过共享资源，使用户在低投入中获益。除去线程池，还有其他比较典型的几种使用策略包括：</p>
<ol>
<li>内存池(Memory Pooling)：预先申请内存，提升申请内存速度，减少内存碎片。</li>
<li>连接池(Connection Pooling)：预先申请数据库连接，提升申请连接的速度，降低系统的开销。</li>
<li>实例池(Object Pooling)：循环使用对象，减少资源在初始化和释放时的昂贵损耗。</li>
</ol>
<p>在了解完“是什么”和“为什么”之后，下面我们来一起深入一下线程池的内部实现原理。</p>
<h2 id="二、线程池核心设计与实现"><a href="#二、线程池核心设计与实现" class="headerlink" title="二、线程池核心设计与实现"></a>二、线程池核心设计与实现</h2><p>在前文中，我们了解到：线程池是一种通过“池化”思想，帮助我们管理线程而获取并发性的工具，在Java中的体现是ThreadPoolExecutor类。那么它的的详细设计与实现是什么样的呢？我们会在本章进行详细介绍。</p>
<h3 id="2-1-总体设计"><a href="#2-1-总体设计" class="headerlink" title="2.1 总体设计"></a>2.1 总体设计</h3><p>Java中的线程池核心实现类是ThreadPoolExecutor，本章基于JDK 1.8的源码来分析Java线程池的核心设计与实现。我们首先来看一下ThreadPoolExecutor的UML类图，了解下ThreadPoolExecutor的继承关系。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/h7Yavu_20220216085715.png" alt="图1 ThreadPoolExecutor UML类图"></p>
<center>图1 ThreadPoolExecutor UML类图</center>



<p>ThreadPoolExecutor实现的顶层接口是Executor，顶层接口Executor提供了一种思想：将任务提交和任务执行进行解耦。用户无需关注如何创建线程，如何调度线程来执行任务，用户只需提供Runnable对象，将任务的运行逻辑提交到执行器(Executor)中，由Executor框架完成线程的调配和任务的执行部分。ExecutorService接口增加了一些能力：（1）扩充执行任务的能力，补充可以为一个或一批异步任务生成Future的方法；（2）提供了管控线程池的方法，比如停止线程池的运行。AbstractExecutorService则是上层的抽象类，将执行任务的流程串联了起来，保证下层的实现只需关注一个执行任务的方法即可。最下层的实现类ThreadPoolExecutor实现最复杂的运行部分，ThreadPoolExecutor将会一方面维护自身的生命周期，另一方面同时管理线程和任务，使两者良好的结合从而执行并行任务。</p>
<p>ThreadPoolExecutor是如何运行，如何同时维护线程和执行任务的呢？其运行机制如下图所示：\</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NyaZL2_20220216085821.png" alt="图2 ThreadPoolExecutor运行流程"></p>
<center>图2 ThreadPoolExecutor运行流程</center>



<p>线程池在内部实际上构建了一个生产者消费者模型，将线程和任务两者解耦，并不直接关联，从而良好的缓冲任务，复用线程。线程池的运行主要分成两部分：任务管理、线程管理。任务管理部分充当生产者的角色，当任务提交后，线程池会判断该任务后续的流转：（1）直接申请线程执行该任务；（2）缓冲到队列中等待线程执行；（3）拒绝该任务。线程管理部分是消费者，它们被统一维护在线程池内，根据任务请求进行线程的分配，当线程执行完任务后则会继续获取新的任务去执行，最终当线程获取不到任务的时候，线程就会被回收。</p>
<p>接下来，我们会按照以下三个部分去详细讲解线程池运行机制：</p>
<ol>
<li>线程池如何维护自身状态。</li>
<li>线程池如何管理任务。</li>
<li>线程池如何管理线程。</li>
</ol>
<h3 id="2-2-生命周期管理"><a href="#2-2-生命周期管理" class="headerlink" title="2.2 生命周期管理"></a>2.2 生命周期管理</h3><p>线程池运行的状态，并不是用户显式设置的，而是伴随着线程池的运行，由内部来维护。线程池内部使用一个变量维护两个值：运行状态(runState)和线程数量 (workerCount)。在具体实现中，线程池将运行状态(runState)、线程数量 (workerCount)两个关键参数的维护放在了一起，如下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">AtomicInteger</span> <span class="variable">ctl</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AtomicInteger</span>(ctlOf(RUNNING, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>

<p><code>ctl</code>这个AtomicInteger类型，是对线程池的运行状态和线程池中有效线程的数量进行控制的一个字段， 它同时包含两部分的信息：线程池的运行状态 (runState) 和线程池内有效线程的数量 (workerCount)，高3位保存runState，低29位保存workerCount，两个变量之间互不干扰。用一个变量去存储两个值，可避免在做相关决策时，出现不一致的情况，不必为了维护两者的一致，而占用锁资源。通过阅读线程池源代码也可以发现，经常出现要同时判断线程池运行状态和线程数量的情况。线程池也提供了若干方法去供用户获得线程池当前的运行状态、线程个数。这里都使用的是位运算的方式，相比于基本运算，速度也会快很多。</p>
<p>关于内部封装的获取生命周期状态、获取线程池线程数量的计算方法如以下代码所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">runStateOf</span><span class="params">(<span class="type">int</span> c)</span>     &#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125; <span class="comment">//计算当前运行状态</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">workerCountOf</span><span class="params">(<span class="type">int</span> c)</span>  &#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;  <span class="comment">//计算当前线程数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">ctlOf</span><span class="params">(<span class="type">int</span> rs, <span class="type">int</span> wc)</span> &#123; <span class="keyword">return</span> rs | wc; &#125;   <span class="comment">//通过状态和线程数生成ctl</span></span><br></pre></td></tr></table></figure>

<p>ThreadPoolExecutor的运行状态有5种，分别为：</p>
<p><img src="https://p0.meituan.net/travelcube/62853fa44bfa47d63143babe3b5a4c6e82532.png" alt="img"></p>
<p>其生命周期转换如下入所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/k5I53e_20220216085930.png" alt="图3 线程池生命周期"></p>
<p>图3 线程池生命周期</p>
<h3 id="2-3-任务执行机制"><a href="#2-3-任务执行机制" class="headerlink" title="2.3 任务执行机制"></a>2.3 任务执行机制</h3><p><strong>2.3.1 任务调度</strong></p>
<p>任务调度是线程池的主要入口，当用户提交了一个任务，接下来这个任务将如何执行都是由这个阶段决定的。了解这部分就相当于了解了线程池的核心运行机制。</p>
<p>首先，所有任务的调度都是由execute方法完成的，这部分完成的工作是：检查现在线程池的运行状态、运行线程数、运行策略，决定接下来执行的流程，是直接申请线程执行，或是缓冲到队列中执行，亦或是直接拒绝该任务。其执行过程如下：</p>
<ol>
<li>首先检测线程池运行状态，如果不是RUNNING，则直接拒绝，线程池要保证在RUNNING的状态下执行任务。</li>
<li>如果workerCount &lt; corePoolSize，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;&#x3D; corePoolSize，且线程池内的阻塞队列未满，则将任务添加到该阻塞队列中。</li>
<li>如果workerCount &gt;&#x3D; corePoolSize &amp;&amp; workerCount &lt; maximumPoolSize，且线程池内的阻塞队列已满，则创建并启动一个线程来执行新提交的任务。</li>
<li>如果workerCount &gt;&#x3D; maximumPoolSize，并且线程池内的阻塞队列已满, 则根据拒绝策略来处理该任务, 默认的处理方式是直接抛异常。</li>
</ol>
<p>其执行流程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/nxM486_20220216090005.png" alt="图4 任务调度流程"></p>
<center>图4 任务调度流程</center>



<p><strong>2.3.2 任务缓冲</strong></p>
<p>任务缓冲模块是线程池能够管理任务的核心部分。线程池的本质是对任务和线程的管理，而做到这一点最关键的思想就是将任务和线程两者解耦，不让两者直接关联，才可以做后续的分配工作。线程池中是以生产者消费者模式，通过一个阻塞队列来实现的。阻塞队列缓存任务，工作线程从阻塞队列中获取任务。</p>
<p>阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。这两个附加的操作是：在队列为空时，获取元素的线程会等待队列变为非空。当队列满时，存储元素的线程会等待队列可用。阻塞队列常用于生产者和消费者的场景，生产者是往队列里添加元素的线程，消费者是从队列里拿元素的线程。阻塞队列就是生产者存放元素的容器，而消费者也只从容器里拿元素。</p>
<p>下图中展示了线程1往阻塞队列中添加元素，而线程2从阻塞队列中移除元素：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KcJ1kc_20220216090056.png" alt="图5 阻塞队列"></p>
<center>图5 阻塞队列</center>



<p>使用不同的队列可以实现不一样的任务存取策略。在这里，我们可以再介绍下阻塞队列的成员：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/kNOy8F_20220216090204.png" alt="img"></p>
<p><strong>2.3.3 任务申请</strong></p>
<p>由上文的任务分配部分可知，任务的执行有两种可能：一种是任务直接由新创建的线程执行。另一种是线程从任务队列中获取任务然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行。第一种情况仅出现在线程初始创建的时候，第二种是线程获取任务绝大多数的情况。</p>
<p>线程需要从任务缓存模块中不断地取任务执行，帮助线程从阻塞队列中获取任务，实现线程管理模块和任务管理模块之间的通信。这部分策略由getTask方法实现，其执行流程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/VS4jHX_20220216090252.png" alt="图6 获取任务流程图"></p>
<center>图6 获取任务流程图</center>



<p>getTask这部分进行了多次判断，为的是控制线程的数量，使其符合线程池的状态。如果线程池现在不应该持有那么多线程，则会返回null值。工作线程Worker会不断接收新任务去执行，而当工作线程Worker接收不到任务的时候，就会开始被回收。</p>
<p><strong>2.3.4 任务拒绝</strong></p>
<p>任务拒绝模块是线程池的保护部分，线程池有一个最大的容量，当线程池的任务缓存队列已满，并且线程池中的线程数目达到maximumPoolSize时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p>
<p>拒绝策略是一个接口，其设计如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RejectedExecutionHandler</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor executor)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用户可以通过实现这个接口去定制拒绝策略，也可以选择JDK提供的四种已有拒绝策略，其特点如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/WZboNR_20220216090358.png" alt="img"></p>
<p>2.4 Worker线程管理</p>
<p>2.4.1 Worker线程</p>
<p>线程池为了掌握线程的状态并维护线程的生命周期，设计了线程池内的工作线程Worker。我们来看一下它的部分代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Worker</span> <span class="keyword">extends</span> <span class="title class_">AbstractQueuedSynchronizer</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread thread;<span class="comment">//Worker持有的线程</span></span><br><span class="line">    Runnable firstTask;<span class="comment">//初始化的任务，可以为null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Worker这个工作线程，实现了Runnable接口，并持有一个线程thread，一个初始化的任务firstTask。thread是在调用构造方法时通过ThreadFactory来创建的线程，可以用来执行任务；firstTask用它来保存传入的第一个任务，这个任务可以有也可以为null。如果这个值是非空的，那么线程就会在启动初期立即执行这个任务，也就对应核心线程创建时的情况；如果这个值是null，那么就需要创建一个线程去执行任务列表（workQueue）中的任务，也就是非核心线程的创建。</p>
<p>Worker执行任务的模型如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/r2pblC_20220216090419.png" alt="图7 Worker执行任务"></p>
<center>图7 Worker执行任务</center>



<p>线程池需要管理线程的生命周期，需要在线程长时间不运行的时候进行回收。线程池使用一张Hash表去持有线程的引用，这样可以通过添加引用、移除引用这样的操作来控制线程的生命周期。这个时候重要的就是如何判断线程是否在运行。</p>
<p>Worker是通过继承AQS，使用AQS来实现独占锁这个功能。没有使用可重入锁ReentrantLock，而是使用AQS，为的就是实现不可重入的特性去反应线程现在的执行状态。</p>
<p>1.lock方法一旦获取了独占锁，表示当前线程正在执行任务中。 2.如果正在执行任务，则不应该中断线程。 3.如果该线程现在不是独占锁的状态，也就是空闲的状态，说明它没有在处理任务，这时可以对该线程进行中断。 4.线程池在执行shutdown方法或tryTerminate方法时会调用interruptIdleWorkers方法来中断空闲的线程，interruptIdleWorkers方法会使用tryLock方法来判断线程池中的线程是否是空闲状态；如果线程是空闲状态则可以安全回收。</p>
<p>在线程回收过程中就使用到了这种特性，回收过程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ERpNl9_20220216090526.png" alt="图8 线程池回收过程"></p>
<p>图8 线程池回收过程</p>
<p><strong>2.4.2 Worker线程增加</strong></p>
<p>增加线程是通过线程池中的addWorker方法，该方法的功能就是增加一个线程，该方法不考虑线程池是在哪个阶段增加的该线程，这个分配线程的策略是在上个步骤完成的，该步骤仅仅完成增加线程，并使它运行，最后返回是否成功这个结果。addWorker方法有两个参数：firstTask、core。firstTask参数用于指定新增的线程执行的第一个任务，该参数可以为空；core参数为true表示在新增线程时会判断当前活动线程数是否少于corePoolSize，false表示新增线程前需要判断当前活动线程数是否少于maximumPoolSize，其执行流程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/LBwxyo_20220216090601.png" alt="图9 申请线程执行流程图"></p>
<p>图9 申请线程执行流程图</p>
<p><strong>2.4.3 Worker线程回收</strong></p>
<p>线程池中线程的销毁依赖JVM自动的回收，线程池做的工作是根据当前线程池的状态维护一定数量的线程引用，防止这部分线程被JVM回收，当线程池决定哪些线程需要回收时，只需要将其引用消除即可。Worker被创建出来后，就会不断地进行轮询，然后获取任务去执行，核心线程可以无限等待获取任务，非核心线程要限时获取任务。当Worker无法获取到任务，也就是获取的任务为空时，循环会结束，Worker会主动消除自身在线程池内的引用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (task != <span class="literal">null</span> || (task = getTask()) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">//执行任务</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">  processWorkerExit(w, completedAbruptly);<span class="comment">//获取不到任务时，主动回收自己</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程回收的工作是在processWorkerExit方法完成的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Ediygi_20220216090637.png" alt="图10 线程销毁流程"></p>
<p>图10 线程销毁流程</p>
<p>事实上，在这个方法中，将线程引用移出线程池就已经结束了线程销毁的部分。但由于引起线程销毁的可能性有很多，线程池还要判断是什么引发了这次销毁，是否要改变线程池的现阶段状态，是否要根据新状态，重新分配线程。</p>
<p><strong>2.4.4 Worker线程执行任务</strong></p>
<p>在Worker类中的run方法调用了runWorker方法来执行任务，runWorker方法的执行过程如下：</p>
<p>1.while循环不断地通过getTask()方法获取任务。 2.getTask()方法从阻塞队列中取任务。 3.如果线程池正在停止，那么要保证当前线程是中断状态，否则要保证当前线程不是中断状态。 4.执行任务。 5.如果getTask结果为null则跳出循环，执行processWorkerExit()方法，销毁线程。</p>
<p>执行流程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2RHyDQ_20220216090659.png" alt="图11 执行任务流程"></p>
<p>图11 执行任务流程</p>
<h2 id="三、线程池在业务中的实践"><a href="#三、线程池在业务中的实践" class="headerlink" title="三、线程池在业务中的实践"></a>三、线程池在业务中的实践</h2><h3 id="3-1-业务背景"><a href="#3-1-业务背景" class="headerlink" title="3.1 业务背景"></a>3.1 业务背景</h3><p>在当今的互联网业界，为了最大程度利用CPU的多核性能，并行运算的能力是不可或缺的。通过线程池管理线程获取并发性是一个非常基础的操作，让我们来看两个典型的使用线程池获取并发性的场景。</p>
<p><strong>场景1：快速响应用户请求</strong></p>
<p><strong>描述</strong>：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。</p>
<p><strong>分析</strong>：从用户体验角度看，这个结果响应的越快越好，如果一个页面半天都刷不出，用户可能就放弃查看这个商品了。而面向用户的功能聚合通常非常复杂，伴随着调用与调用之间的级联、多级级联等情况，业务开发同学往往会选择使用线程池这种简单的方式，将调用封装成任务并行的执行，缩短总体响应时间。另外，使用线程池也是有考量的，这种场景最重要的就是获取最大的响应速度去满足用户，所以应该不设置队列去缓冲并发任务，调高corePoolSize和maxPoolSize去尽可能创造多的线程快速执行任务。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/osaVvY_20220216090717.png" alt="图12 并行执行任务提升任务响应速度"></p>
<p>图12 并行执行任务提升任务响应速度</p>
<p><strong>场景2：快速处理批量任务</strong></p>
<p><strong>描述</strong>：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。</p>
<p><strong>分析</strong>：这种场景需要执行大量的任务，我们也会希望任务执行的越快越好。这种情况下，也应该使用多线程策略，并行计算。但与响应速度优先的场景区别在于，这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。所以应该设置队列去缓冲并发任务，调整合适的corePoolSize去设置处理任务的线程数。在这里，设置的线程数过多可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/v43OYx_20220216090733.png" alt="图13 并行执行任务提升批量任务执行速度"></p>
<p>图13 并行执行任务提升批量任务执行速度</p>
<h3 id="3-2-实际问题及方案思考"><a href="#3-2-实际问题及方案思考" class="headerlink" title="3.2 实际问题及方案思考"></a>3.2 实际问题及方案思考</h3><p>线程池使用面临的核心的问题在于：<strong>线程池的参数并不好配置</strong>。一方面线程池的运行机制不是很好理解，配置合理需要强依赖开发人员的个人经验和知识；另一方面，线程池执行的情况和任务类型相关性较大，IO密集型和CPU密集型的任务运行起来的情况差异非常大，这导致业界并没有一些成熟的经验策略帮助开发人员参考。</p>
<p>关于线程池配置不合理引发的故障，公司内部有较多记录，下面举一些例子：</p>
<p><strong>Case1</strong>：2018年XX页面展示接口大量调用降级：</p>
<p><strong>事故描述</strong>：XX页面展示接口产生大量调用降级，数量级在几十到上百。</p>
<p><strong>事故原因</strong>：该服务展示接口内部逻辑使用线程池做并行计算，由于没有预估好调用的流量，导致最大核心数设置偏小，大量抛出RejectedExecutionException，触发接口降级条件，示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/dhjkdv_20220216090747.png" alt="图14 线程数核心设置过小引发RejectExecutionException"></p>
<p>图14 线程数核心设置过小引发RejectExecutionException</p>
<p><strong>Case2</strong>：2018年XX业务服务不可用S2级故障</p>
<p><strong>事故描述</strong>：XX业务提供的服务执行时间过长，作为上游服务整体超时，大量下游服务调用失败。</p>
<p><strong>事故原因</strong>：该服务处理请求内部逻辑使用线程池做资源隔离，由于队列设置过长，最大线程数设置失效，导致请求数量增加时，大量任务堆积在队列中，任务执行时间过长，最终导致下游服务的大量调用超时失败。示意图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/dLadG2_20220216090804.png" alt="图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低"></p>
<p>图15 线程池队列长度设置过长、corePoolSize设置过小导致任务执行速度低</p>
<p>业务中要使用线程池，而使用不当又会导致故障，那么我们怎样才能更好地使用线程池呢？针对这个问题，我们下面延展几个方向：</p>
<p><strong>1. 能否不用线程池?</strong></p>
<p>回到最初的问题，业务使用线程池是为了获取并发性，对于获取并发性，是否可以有什么其他的方案呢替代？我们尝试进行了一些其他方案的调研：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Zq7L9g_20220216090823.png" alt="img"></p>
<p>综合考虑，这些新的方案都能在某种情况下提升并行任务的性能，然而本次重点解决的问题是如何更简易、更安全地获得的并发性。另外，Actor模型的应用实际上甚少，只在Scala中使用广泛，协程框架在Java中维护的也不成熟。这三者现阶段都不是足够的易用，也并不能解决业务上现阶段的问题。</p>
<p><strong>2. 追求参数设置合理性？</strong></p>
<p>有没有一种计算公式，能够让开发同学很简易地计算出某种场景中的线程池应该是什么参数呢？</p>
<p>带着这样的疑问，我们调研了业界的一些线程池参数配置方案：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/45CiX2_20220216090844.png" alt="img"></p>
<p>调研了以上业界方案后，我们并没有得出通用的线程池计算方式。并发任务的执行情况和任务类型相关，IO密集型和CPU密集型的任务运行起来的情况差异非常大，但这种占比是较难合理预估的，这导致很难有一个简单有效的通用公式帮我们直接计算出结果。</p>
<p><strong>3. 线程池参数动态化？</strong></p>
<p>尽管经过谨慎的评估，仍然不能够保证一次计算出来合适的参数，那么我们是否可以将修改线程池参数的成本降下来，这样至少可以发生故障的时候可以快速调整从而缩短故障恢复的时间呢？基于这个思考，我们是否可以将线程池的参数从代码中迁移到分布式配置中心上，实现线程池参数可动态配置和即时生效，线程池参数动态化前后的参数修改流程对比如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/lvnfxz_20220216090858.png" alt="图16 动态修改线程池参数新旧流程对比"></p>
<p>图16 动态修改线程池参数新旧流程对比</p>
<p>基于以上三个方向对比，我们可以看出参数动态化方向简单有效。</p>
<h3 id="3-3-动态化线程池"><a href="#3-3-动态化线程池" class="headerlink" title="3.3 动态化线程池"></a>3.3 动态化线程池</h3><p><strong>3.3.1 整体设计</strong></p>
<p>动态化线程池的核心设计包括以下三个方面：</p>
<ol>
<li>简化线程池配置：线程池构造参数有8个，但是最核心的是3个：corePoolSize、maximumPoolSize，workQueue，它们最大程度地决定了线程池的任务分配和线程分配策略。考虑到在实际应用中我们获取并发性的场景主要是两种：（1）并行执行子任务，提高响应速度。这种情况下，应该使用同步队列，没有什么任务应该被缓存下来，而是应该立即执行。（2）并行执行大批次任务，提升吞吐量。这种情况下，应该使用有界队列，使用队列去缓冲大批量的任务，队列容量必须声明，防止任务无限制堆积。所以线程池只需要提供这三个关键参数的配置，并且提供两种队列的选择，就可以满足绝大多数的业务需求，Less is More。</li>
<li>参数可动态修改：为了解决参数不好配，修改参数成本高等问题。在Java线程池留有高扩展性的基础上，封装线程池，允许线程池监听同步外部的消息，根据消息进行修改配置。将线程池的配置放置在平台侧，允许开发同学简单的查看、修改线程池配置。</li>
<li>增加线程池监控：对某事物缺乏状态的观测，就对其改进无从下手。在线程池执行任务的生命周期添加监控能力，帮助开发同学了解线程池状态。</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Ez5lnf_20220216090914.png" alt="图17 动态化线程池整体设计"></p>
<p>图17 动态化线程池整体设计</p>
<p><strong>3.3.2 功能架构</strong></p>
<p>动态化线程池提供如下功能：</p>
<p><strong>动态调参</strong>：支持线程池参数动态调整、界面化操作；包括修改线程池核心大小、最大核心大小、队列长度等；参数修改后及时生效。 <strong>任务监控</strong>：支持应用粒度、线程池粒度、任务粒度的Transaction监控；可以看到线程池的任务执行情况、最大任务执行时间、平均任务执行时间、95&#x2F;99线等。 <strong>负载告警</strong>：线程池队列任务积压到一定值的时候会通过大象（美团内部通讯工具）告知应用开发负责人；当线程池负载数达到一定阈值的时候会通过大象告知应用开发负责人。 <strong>操作监控</strong>：创建&#x2F;修改和删除线程池都会通知到应用的开发负责人。 <strong>操作日志</strong>：可以查看线程池参数的修改记录，谁在什么时候修改了线程池参数、修改前的参数值是什么。 <strong>权限校验</strong>：只有应用开发负责人才能够修改应用的线程池参数。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/BZAd4z_20220216090932.png" alt="图18 动态化线程池功能架构"></p>
<p>图18 动态化线程池功能架构</p>
<p><strong>参数动态化</strong></p>
<p>JDK原生线程池ThreadPoolExecutor提供了如下几个public的setter方法，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/QAFKK8_20220216090950.png" alt="图19 JDK 线程池参数设置接口"></p>
<p>图19 JDK 线程池参数设置接口</p>
<p>JDK允许线程池使用方通过ThreadPoolExecutor的实例来动态设置线程池的核心策略，以setCorePoolSize为方法例，在运行期线程池使用方调用此方法设置corePoolSize之后，线程池会直接覆盖原来的corePoolSize值，并且基于当前值和原始值的比较结果采取不同的处理策略。对于当前值小于当前工作线程数的情况，说明有多余的worker线程，此时会向当前idle的worker线程发起中断请求以实现回收，多余的worker在下次idel的时候也会被回收；对于当前值大于原始值且当前队列中有待执行任务，则线程池会创建新的worker线程来执行队列任务，setCorePoolSize具体流程如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/XBPTEo_20220216091010.png" alt="图20 setCorePoolSize方法执行流程"></p>
<p>图20 setCorePoolSize方法执行流程</p>
<p>线程池内部会处理好当前状态做到平滑修改，其他几个方法限于篇幅，这里不一一介绍。重点是基于这几个public方法，我们只需要维护ThreadPoolExecutor的实例，并且在需要修改的时候拿到实例修改其参数即可。基于以上的思路，我们实现了线程池参数的动态化、线程池参数在管理平台可配置可修改，其效果图如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HNtC74_20220216091036.png" alt="图21 可动态修改线程池参数"></p>
<p>图21 可动态修改线程池参数</p>
<p>用户可以在管理平台上通过线程池的名字找到指定的线程池，然后对其参数进行修改，保存后会实时生效。目前支持的动态参数包括核心数、最大值、队列长度等。除此之外，在界面中，我们还能看到用户可以配置是否开启告警、队列等待任务告警阈值、活跃度告警等等。关于监控和告警，我们下面一节会对齐进行介绍。</p>
<p><strong>线程池监控</strong></p>
<p>除了参数动态化之外，为了更好地使用线程池，我们需要对线程池的运行状况有感知，比如当前线程池的负载是怎么样的？分配的资源够不够用？任务的执行情况是怎么样的？是长任务还是短任务？基于对这些问题的思考，动态化线程池提供了多个维度的监控和告警能力，包括：线程池活跃度、任务的执行Transaction（频率、耗时）、Reject异常、线程池内部统计信息等等，既能帮助用户从多个维度分析线程池的使用情况，又能在出现问题第一时间通知到用户，从而避免故障或加速故障恢复。</p>
<h4 id="1-负载监控和告警"><a href="#1-负载监控和告警" class="headerlink" title="1. 负载监控和告警"></a>1. 负载监控和告警</h4><p>线程池负载关注的核心问题是：基于当前线程池参数分配的资源够不够。对于这个问题，我们可以从事前和事中两个角度来看。事前，线程池定义了“活跃度”这个概念，来让用户在发生Reject异常之前能够感知线程池负载问题，线程池活跃度计算公式为：线程池活跃度 &#x3D; activeCount&#x2F;maximumPoolSize。这个公式代表当活跃线程数趋向于maximumPoolSize的时候，代表线程负载趋高。事中，也可以从两方面来看线程池的过载判定条件，一个是发生了Reject异常，一个是队列中有等待任务（支持定制阈值）。以上两种情况发生了都会触发告警，告警信息会通过大象推送给服务所关联的负责人。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NBIB1M_20220216091104.png" alt="图22 大象告警通知"></p>
<p>图22 大象告警通知</p>
<h4 id="2-任务级精细化监控"><a href="#2-任务级精细化监控" class="headerlink" title="2. 任务级精细化监控"></a>2. 任务级精细化监控</h4><p>在传统的线程池应用场景中，线程池中的任务执行情况对于用户来说是透明的。比如在一个具体的业务场景中，业务开发申请了一个线程池同时用于执行两种任务，一个是发消息任务、一个是发短信任务，这两类任务实际执行的频率和时长对于用户来说没有一个直观的感受，很可能这两类任务不适合共享一个线程池，但是由于用户无法感知，因此也无从优化。动态化线程池内部实现了任务级别的埋点，且允许为不同的业务任务指定具有业务含义的名称，线程池内部基于这个名称做Transaction打点，基于这个功能，用户可以看到线程池内部任务级别的执行情况，且区分业务，任务监控示意图如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KMkxjh_20220216091140.png" alt="图23 线程池任务执行监控"></p>
<p>图23 线程池任务执行监控</p>
<h4 id="3-运行时状态实时查看"><a href="#3-运行时状态实时查看" class="headerlink" title="3. 运行时状态实时查看"></a>3. 运行时状态实时查看</h4><p>用户基于JDK原生线程池ThreadPoolExecutor提供的几个public的getter方法，可以读取到当前线程池的运行状态以及参数，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/pKm5Zo_20220216091155.png" alt="图24 线程池实时运行情况"></p>
<p>图24 线程池实时运行情况</p>
<p>动态化线程池基于这几个接口封装了运行时状态实时查看的功能，用户基于这个功能可以了解线程池的实时状态，比如当前有多少个工作线程，执行了多少个任务，队列中等待的任务数等等。效果如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Y6a295_20220216091224.png" alt="图25 线程池实时运行情况"></p>
<p>图25 线程池实时运行情况</p>
<h3 id="3-4-实践总结"><a href="#3-4-实践总结" class="headerlink" title="3.4 实践总结"></a>3.4 实践总结</h3><p>面对业务中使用线程池遇到的实际问题，我们曾回到支持并发性问题本身来思考有没有取代线程池的方案，也曾尝试着去追求线程池参数设置的合理性，但面对业界方案具体落地的复杂性、可维护性以及真实运行环境的不确定性，我们在前两个方向上可谓“举步维艰”。最终，我们回到线程池参数动态化方向上探索，得出一个且可以解决业务问题的方案，虽然本质上还是没有逃离使用线程池的范畴，但是在成本和收益之间，算是取得了一个很好的平衡。成本在于实现动态化以及监控成本不高，收益在于：在不颠覆原有线程池使用方式的基础之上，从降低线程池参数修改的成本以及多维度监控这两个方面降低了故障发生的概率。希望本文提供的动态化线程池思路能对大家有帮助。</p>
<h2 id="四、参考资料"><a href="#四、参考资料" class="headerlink" title="四、参考资料"></a>四、参考资料</h2><ul>
<li>[1] JDK 1.8源码</li>
<li>[2] <a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B%E6%B1%A0">维基百科-线程池</a></li>
<li>[3] <a href="https://my.oschina.net/andylucc/blog/648127">更好的使用Java线程池</a></li>
<li>[4] <a href="https://en.wikipedia.org/wiki/Pooling_(resource_management)">维基百科Pooling(Resource Management)</a></li>
<li>[5] <a href="http://www.ideabuffer.cn/2017/04/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%EF%BC%9AThreadPoolExecutor/">深入理解Java线程池：ThreadPoolExecutor</a></li>
<li>[6]《Java并发编程实践》</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习路线图</title>
    <url>/posts/cad299ae/</url>
    <content><![CDATA[<h1 id="java学习路线图"><a href="#java学习路线图" class="headerlink" title="java学习路线图"></a>java学习路线图</h1><p>项目地址：</p>
<ul>
<li>Github地址：<a href="https://link.zhihu.com/?target=https://github.com/Snailclimb/JavaGuide">Snailclimb&#x2F;JavaGuide</a></li>
<li>Gitee地址： <a href="https://link.zhihu.com/?target=https://gitee.com/SnailClimb/JavaGuide">SnailClimb&#x2F;JavaGuide</a>（Github 无法访问或者访问速度比较慢的小伙伴可以看码云上的对应内容）</li>
</ul>
<p>这篇回答不会涉及到学习方法以及学习网站的推荐，我不想让篇幅太长，内容太杂，我希望留着下一篇文章专门来谈一谈。</p>
<p>另外，这篇回答也不会涉及到计算机基础，也是为了保证内容的不至于太杂。计算基础相关的内容我也已经写好，预计会在五一同步给小伙伴们。</p>
<p><img src="https://pic2.zhimg.com/50/v2-06c2cdc3e5d417486d1cb92687350ed4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-06c2cdc3e5d417486d1cb92687350ed4_720w.jpg?source=1940ef5c" alt="img"></p>
<p>多说一句，对于编程初学者，我不太建议上来通过做项目学习。实践确实很重要，如果你没有编程基础的话，直接上手实战，很容易最后学个四不像。</p>
<p>建议你在学习编程的初期尽量多看一些优质视频。跟着视频一步一步走，可以让你少踩很多坑，学习编程的信心也会增加。</p>
<p><strong>概览：</strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-62586d6789e1a081cc3dc6efd7bdd289_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-62586d6789e1a081cc3dc6efd7bdd289_720w.jpg?source=1940ef5c" alt="img"></p>
<p>回答中的相关书籍我也已经同步到了 Github和Gitee上（有PDF版本可供下载），欢迎小伙伴们一起完善。</p>
<ul>
<li>Github地址：<a href="https://link.zhihu.com/?target=https://github.com/CodingDocs/awesome-cs">https://github.com/CodingDocs/awesome-cs</a></li>
<li>码云地址：<a href="https://link.zhihu.com/?target=https://gitee.com/SnailClimb/awesome-cs">https://gitee.com/SnailClimb/awesome-cs</a> （Github无法访问或者访问速度比较慢的小伙伴可以看码云上的对应内容）</li>
</ul>
<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a><strong>Java 基础</strong></h2><p>如果你之前没有学习过编程的话，我建议你可以看看视频教程。</p>
<p>像尚硅谷的 <a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1Kb411W75N">《 Java 基础教程系列》</a>和韩顺平老师的<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1fh411y7R8">《零基础 30 天学会 Java》</a>就很不错。</p>
<p><img src="https://pic4.zhimg.com/50/v2-2217d04b42c6f79aa126432672133c25_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-2217d04b42c6f79aa126432672133c25_720w.jpg?source=1940ef5c" alt="img"></p>
<p>学习过 Java 的朋友，大部分应该都看过韩老师的课程吧！韩老师毕业于清华大学，录制的视频课程质量都非常高。内容易懂，并且不失严谨。</p>
<p>韩老师的<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1fh411y7R8">《零基础 30 天学会 Java》</a>系列不光会教你 Java 基础，还会帮你建立编程思想，让你知道学习了 Java 之后，你可以从事什么工作。</p>
<p>看视频的同时，配套一本好书也是非常有作用的。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/2000732/">《Head First Java》</a></strong> 这本书在是入门 Java 的很不错的书籍 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-d264e3d06d0f86175c542c60a032fea4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-d264e3d06d0f86175c542c60a032fea4_720w.jpg?source=1940ef5c" alt="img"></p>
<p>《Head First Java》这本书的内容很轻松有趣，可以说是我学习编程初期最喜欢的几本书之一了。同时，这本书也是我的 Java 启蒙书籍。我在学习 Java 的初期多亏了这本书的帮助，自己才算是跨进 Java 语言的大门。</p>
<p>我觉得我在 Java 这块能够坚持下来，这本书有很大的功劳。我身边的的很多朋友学习 Java 初期都是看的这本书。</p>
<p>有很多小伙伴就会问了：<strong>这本书适不适合编程新手阅读呢？</strong></p>
<p>我个人觉得这本书还是挺适合编程新手阅读的，毕竟是 “Head First” 系列。</p>
<p><img src="https://pic2.zhimg.com/50/v2-66d3ede459a86d010402186346189af1_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-66d3ede459a86d010402186346189af1_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34898994/">《Java 核心技术卷 1+卷 2》</a></strong> 这两本书也非常不错。不过，这两本书的内容很多，全看的话比较费时间。我现在是把这两本书当做工具书来用，就比如我平时写文章的时候，碰到一些 Java 基础方面的问题，经常就翻看这两本来当做参考！</p>
<p>我当时在大学的时候就买了两本放在寝室，没事的时候就翻翻。建议有点 Java 基础之后再读，介绍的还是比较深入和全面的，非常推荐。</p>
<p><img src="https://pic2.zhimg.com/50/v2-bc98859a3b5e17b38c9d4606c1cd3ffd_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-bc98859a3b5e17b38c9d4606c1cd3ffd_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/2130190/">《Java 编程思想 》</a></strong> 这本书被很多人称之为 Java 领域的圣经（*感觉有点过了~~~*）。不太推荐编程初学者阅读，有点劝退的味道，稍微有点基础后阅读更好。</p>
<p>我第一次看的时候还觉得有点枯燥，那时候还在上大二，看了 1&#x2F;3 就没看下去了。</p>
<p><img src="https://pic2.zhimg.com/50/v2-e14d41b9f1dd4c9184466bb94c59401b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-e14d41b9f1dd4c9184466bb94c59401b_720w.jpg?source=1940ef5c" alt="img"></p>
<p>另外，Java 8 算是一个里程碑式的版本，现在一般企业还是用 Java 8 比较多。掌握 Java 8 的一些新特性比如 Lambda、Strean API 还是挺有必要的。这块的话，我推荐 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26772632/">《Java 8 实战》</a></strong> 这本书。</p>
<p>学完 Java 基础之后，你可以用自己学的东西实现一个简单的 Java 程序，也可以尝试用 Java 解决一些编程问题，以此来将自己学到的东西付诸于实践。</p>
<p>不太建议学习 Java 基础的之后通过做游戏来巩固。为什么培训班喜欢通过这种方式呢？说白点就是为了找到你的 G 点。新手学习完 Java 基础后做游戏一般是不太现实的，还不如找一些简单的程序问题解决一下比如简单的算法题。</p>
<p>记得多总结！打好基础！把自己重要的东西都记录下来。 API 文档放在自己可以看到的地方，以备自己可以随时查阅。为了能让自己写出更优秀的代码，《Effective Java》、《重构》 这两本书没事也可以看</p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h2><p>多线程这部分内容稍微会比较难以理解和实践。如果你刚学完 Java 基础的话，我建议你学习并发这部分内容的时候，可以先简单地了解一下基础知识比如线程和进程的对比。到了后面，你对于 Java 了解的更深了之后，再回来仔细看看这部分的内容。</p>
<p>下面是一些我比较推荐的书籍。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30351286/">《Java 并发编程之美》</a></strong></p>
<p><img src="https://pic2.zhimg.com/50/v2-2ca1ce12697e4368246b124cc5ebf295_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-2ca1ce12697e4368246b124cc5ebf295_720w.jpg?source=1940ef5c" alt="img"></p>
<p><em>这本书还是非常适合我们用来学习 Java 多线程的。这本书的讲解非常通俗易懂，作者从并发编程基础到实战都是信手拈来。</em></p>
<p>另外，这本书的作者加多自身也会经常在网上发布各种技术文章。这本书也是加多大佬这么多年在多线程领域的沉淀所得的结果吧！他书中的内容基本都是结合代码讲解，非常有说服力！</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30358019/">《实战 Java 高并发程序设计》</a></strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-c83749f4bc91edbb131681d9f94f821f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-c83749f4bc91edbb131681d9f94f821f_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这个是我第二本要推荐的书籍，比较适合作为多线程入门&#x2F;进阶书籍来看。这本书内容同样是理论结合实战，对于每个知识点的讲解也比较通俗易懂，整体结构也比较清。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://github.com/RedSpider1/concurrent">《深入浅出 Java 多线程》</a></strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-b477244d7b3229167ea31aa2e16e3302_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-b477244d7b3229167ea31aa2e16e3302_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书是几位大厂的大佬开源的。</p>
<p>这几位作者为了写好《深入浅出 Java 多线程》这本书阅读了大量的 Java 多线程方面的书籍和博客，然后再加上他们的经验总结、Demo 实例、源码解析，最终才形成了这本书。</p>
<p>这本书的质量也是非常过硬！给作者们点个赞！这本书有统一的排版规则和语言风格、清晰的表达方式和逻辑。并且每篇文章初稿写完后，作者们就会互相审校，合并到主分支时所有成员会再次审校，最后再通篇修订了三遍。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/35013531/">《Java 并发实现原理：JDK 源码剖析》</a></strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-9da660b9c3acde7a185d342c0dbbbb09_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-9da660b9c3acde7a185d342c0dbbbb09_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书是去年也就是 2020 年新出的，所以，现在知道的人还不是很多。</p>
<p>这本书主要是对 Java Concurrent 包中一些比较重要的源码进行了讲解，另外，像 JMM、happen-before、CAS 等等比较重要的并发知识这本书也都会一并介绍到。</p>
<p>不论是你想要深入研究 Java 并发，还是说要准备面试，你都可以看看这本书。</p>
<p>下面是我总结的一些关于并发的小问题，你可以拿来自测：</p>
<ol>
<li>什么是线程和进程? 线程与进程的关系,区别及优缺点？</li>
<li>说说并发与并行的区别?</li>
<li>为什么要使用多线程呢?</li>
<li>使用多线程可能带来什么问题?（内存泄漏、死锁、线程不安全等等）</li>
<li>创建线程有哪几种方式？（a.继承 Thread 类;b.实现 Runnable 接口;c. 使用 Executor 框架;d.使用 FutureTask）</li>
<li>说说线程的生命周期和状态?</li>
<li>什么是上下文切换?</li>
<li>什么是线程死锁?如何避免死锁?</li>
<li>说说 sleep() 方法和 wait() 方法区别和共同点?</li>
<li>Java 内存模型（JMM）、重排序与 happens-before 原则了解吗？</li>
<li>synchronized 关键字、volatile 关键字</li>
<li>ThreadLocal 有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？</li>
<li>为什么要用线程池？ThreadPoolExecutor 类的重要参数了解吗？ThreadPoolExecutor 饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗？为什么不推荐使用FixedThreadPool？如何设置线程池的大小？</li>
<li>AQS 了解么？原理？AQS 常用组件：Semaphore (信号量)、CountDownLatch （倒计时器） CyclicBarrier(循环栅栏)</li>
<li>ReentrantLock 、 ReentrantReadWriteLock 、StampedLock（JDK8）</li>
<li>CAS 了解么？原理？</li>
<li>Atomic 原子类</li>
<li>并发容器：ConcurrentHashMap 、 CopyOnWriteArrayList 、 ConcurrentLinkedQueue BlockingQueue 、ConcurrentSkipListMap</li>
<li>Future 和 CompletableFuture</li>
<li>……</li>
</ol>
<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><strong>JVM</strong></h2><p>对于 Java 程序员来说，JVM 帮助我们做了很多事情比如内存管理、垃圾回收等等。在 JVM 的帮助下，我们的程序出现内存泄漏这些问题的概率相对来说是比较低的。但是，这并不代表我们在日常开发工作中不会遇到。万一你在工作中遇到了 OOM 问题，你至少要知道如何去排查和解决问题吧！</p>
<p>并且，就单纯从面试角度来说，JVM 是 Java 后端面试（大厂）中非常重要的一环。不论是应届还是社招，面试国内的一些大厂，你都会被问到很多 JVM 相关的问题（应届的话侧重理论，社招实践）。</p>
<p>只有搞懂了 JVM 才有可能真正把 Java 语言“吃透”。学习 JVM 这部分的内容，一定要注意要实战和理论结合。</p>
<p>书籍的话，**<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34907497/">《深入理解 Java 虚拟机》</a>** 这本书是首先要推荐的。</p>
<p><img src="https://pic1.zhimg.com/50/v2-ef98840c238a19a70318ae9fa3ec7bf5_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-ef98840c238a19a70318ae9fa3ec7bf5_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书就一句话形容：<strong>国产书籍中的战斗机，实实在在的优秀！</strong> （真心希望国内能有更多这样的优质书籍出现！加油！ ）</p>
<p>这本书的第三版去年年底已经出来了，新增了很多实在的内容比如 ZGC 等新一代 GC 的原理剖析。目前豆瓣上是 9.6 的高分，  不   我就不多说了！</p>
<p>不论是你面试还是你想要在 Java 领域学习的更深，你都离不开这本书籍。这本书不光要看，你还要多看几遍，里面都是干货。这本书里面还有一些需要自己实践的东西，我建议你也跟着实践一下。</p>
<p>类似的书籍还有 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26354292/">《实战 Java 虚拟机》</a><strong>、</strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34935105/">《虚拟机设计与实现:以 JVM 为例》</a></strong> ，这两本都是非常不错的！</p>
<p><img src="https://pic4.zhimg.com/50/v2-114035a0430694dd2562e5a136aa410b_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-114035a0430694dd2562e5a136aa410b_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你对实战比较感兴趣，想要自己动手写一个简易的 JVM 的话，可以看看 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26802084/">《自己动手写 Java 虚拟机》</a></strong> 这本书。</p>
<p><img src="https://pic3.zhimg.com/50/v2-171e35db906d0d4b330afe176a6ed823_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-171e35db906d0d4b330afe176a6ed823_720w.jpg?source=1940ef5c" alt="img"></p>
<p>书中的代码是基于 Go 语言实现的，搞懂了原理之后，你可以使用 Java 语言模仿着写一个，也算是练练手！ 如果你当前没有能力独立使用 Java 语言模仿着写一个的话，你也可以在网上找到很多基于 Java 语言版本的实现，比如<a href="https://link.zhihu.com/?target=https://zachaxy.github.io/tags/JVM/">《zachaxy 的手写 JVM 系列》</a> 。</p>
<p>这本书目前在豆瓣有 8.2 的评分，我个人觉得张秀宏老师写的挺好的，这本书值得更高的评分。</p>
<p>另外，R 大在豆瓣发的<a href="https://link.zhihu.com/?target=https://www.douban.com/doulist/2545443/">《从表到里学习 JVM 实现》</a>这篇文章中也推荐了很多不错的 JVM 相关的书籍，推荐小伙伴们去看看。</p>
<p>再推荐两个视频给喜欢看视频学习的小伙伴。</p>
<p>第 1 个是尚硅谷的宋红康老师讲的<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1PJ411n7xZ">《JVM 全套教程》</a>。这个课程的内容非常硬，一共有接近 400 小节。</p>
<p>课程的内容分为 3 部分：</p>
<ol>
<li>《内存与垃圾回收篇》</li>
<li>《字节码与类的加载篇》</li>
<li>《性能监控与调优篇》</li>
</ol>
<p><img src="https://pic2.zhimg.com/50/v2-4d2a238642281bdf1b8bda06b34eb8be_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-4d2a238642281bdf1b8bda06b34eb8be_720w.jpg?source=1940ef5c" alt="img"></p>
<p>第 2 个是你假笨大佬的 <strong><a href="https://link.zhihu.com/?target=https://club.perfma.com/course/438755/list">《JVM 参数【Memory 篇】》</a></strong> 教程，很厉害了！</p>
<p><img src="https://pic4.zhimg.com/50/v2-30067f8554c7bd6089a87e971d14b069_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-30067f8554c7bd6089a87e971d14b069_720w.jpg?source=1940ef5c" alt="img"></p>
<p>下面是我总结的一些关于 JVM 的小问题，你可以拿来自测：</p>
<ol>
<li>什么是虚拟机？</li>
<li>Java 内存区域是怎么划分的？大对象放在哪个内存区域？</li>
<li>垃圾回收有哪些算法？GC 的流程</li>
<li>什么是类加载？何时类加载？类加载流程？</li>
<li>知道哪些类加载器。类加载器之间的关系？</li>
<li>类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？…）。</li>
<li>常见调优参数有哪些？</li>
<li>……</li>
</ol>
<h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h2><p>我们网站或 者 APP 的数据都是需要使用数据库来存储数据的。</p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h3><p>一般企业项目开发中，使用 MySQL 比较多。如果你要学习 MySQL 的话，可以看下面这 3 本书籍：</p>
<ul>
<li><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/3354490/">《MySQL 必知必会》</a></strong> ：非常薄！非常适合 MySQL 新手阅读，很棒的入门教材。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/23008813/">《高性能 MySQL》</a></strong> ： MySQL 领域的经典之作！学习 MySQL 必看！属于进阶内容，主要教你如何更好地使用 MySQL 。既有有理论，又有实践！如果你没时间都看一遍的话，拿我建议第 5 章（创建高性能的索引） 、第 6 章（查询性能优化） 你你一定要认真看一下。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/24708143/">《MySQL 技术内幕》</a></strong> ：你想深入了解 MySQL 存储引擎的话，看这本书准没错！</li>
</ul>
<p><img src="https://pic2.zhimg.com/50/v2-3446cfaa214394ec7137ba34ca5362ba_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-3446cfaa214394ec7137ba34ca5362ba_720w.jpg?source=1940ef5c" alt="img"></p>
<p>视频的话，你可以看看动力节点的 <a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1fx411X7BD">《MySQL 数据库教程视频》</a>。这个视频基本上把 MySQL 的相关一些入门知识给介绍完了。</p>
<p>学习了 MySQL 之后，务必确保自己掌握下面这些知识点：</p>
<ol>
<li>MySQL 常用命令 ：</li>
</ol>
<ul>
<li>安全：登录、增加&#x2F;删除用户、备份数据和还原数据</li>
<li>数据库操作： 建库建表&#x2F;删库删表、用户权限分配</li>
<li>……</li>
</ul>
<ol>
<li>MySQL 中常用的数据类型、字符集编码</li>
<li>MySQL 简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组……</li>
<li>MySQL 中使用索引、视图、存储过程、游标、触发器</li>
<li>……</li>
</ol>
<p>如果你想让自己更加了解 MySQL ，同时也是为了准备面试的话，下面这些知识点要格外注意：</p>
<ol>
<li>索引：索引优缺点、B 树和 B+树、聚集索引与非聚集索引、覆盖索引</li>
<li>事务：事务、数据库事务、ACID、并发事务、事务隔离级别</li>
<li>存储引擎（MyISAM 和 InnoDB）</li>
<li>锁机制与 InnoDB 锁算法</li>
</ol>
<h3 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h3><p><strong>Redis 就是一个使用 C 语言开发的数据库</strong>，不过与传统数据库不同的是 <strong>Redis 的数据是存在内存中的</strong> ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。</p>
<p>如果你要学习 Redis 的话，强烈推荐 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/25900156/">《Redis 设计与实现》</a></strong> 和 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26612779/">《Redis 实战》</a></strong> 这两本书。另外，**<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26971561/">《Redis 开发与运维》</a>** 这本书也非常不错，既有基础介绍，又有一线开发运维经验分享。</p>
<p><img src="https://pic4.zhimg.com/50/v2-6fe8373526af0107bcda6a73b2e9a801_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-6fe8373526af0107bcda6a73b2e9a801_720w.jpg?source=1940ef5c" alt="img"></p>
<p>下面是我总结的一些关于并发的小问题，你可以拿来自测：</p>
<ol>
<li>Redis 和 Memcached 的区别和共同点</li>
<li>为什么要用 Redis&#x2F;为什么要用缓存？</li>
<li>Redis 常见数据结构以及使用场景分析</li>
<li>Redis 没有使用多线程？为什么不使用多线程？Redis6.0 之后为何引入了多线程？</li>
<li>Redis 给缓存数据设置过期时间有啥用？</li>
<li>Redis 是如何判断数据是否过期的呢？</li>
<li>过期的数据的删除策略了解么？</li>
<li>Redis 内存淘汰机制了解么？</li>
<li>Redis 持久化机制(怎么保证 Redis 挂掉之后再重启数据可以进行恢复)</li>
<li>Redis 缓存穿透、缓存雪崩？</li>
<li>如何保证缓存和数据库数据的一致性？</li>
<li>……</li>
</ol>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a><strong>常用工具</strong></h2><p>非常重要！非常重要！特别是 Git 和 Docker。</p>
<p>除了下面这些工具之外，我强烈建议你一定要搞懂 Github 的使用。一些使用 Github 的小技巧，你可以看<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Github%E6%8A%80%E5%B7%A7">《Github 小技巧》</a>这篇文章。</p>
<h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a><strong>IDEA</strong></h3><p>俗话说：“工欲善其事，必先利其器 !”。选择一款好的开发工具对于我们高效率编码非常有帮助！</p>
<p>常用的 Java 开发工具就 Eclipse 和 IDEA。就我个人而言 IDEA 是最适合 Java 开发者的 IDE 。</p>
<p>建议你要熟悉 IDEA 的基本操作以及常用快捷。你可以通过 Github 上的开源教程 <a href="https://link.zhihu.com/?target=https://github.com/judasn/IntelliJ-IDEA-Tutorial">《IntelliJ IDEA 简体中文专题教程》</a> 来学习 IDEA 的相关使用。</p>
<p>除了 IDEA 自身对编码优秀的支持（比如智能上下文提示）之外，IDEA 中还有丰富的插件来帮助我们高效开发。<a href="https://link.zhihu.com/?target=https://mp.weixin.qq.com/mp/appmsgalbum?__biz=Mzg2OTA0Njk0OA==&action=getalbum&album_id=1319419426898329600%23wechat_redirect">《IDEA 插件》</a> 这个系列专辑中推荐了很多实用 IDEA 必备的插件！</p>
<h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a><strong>Maven</strong></h3><p>强烈建议学习常用框架之前可以提前花几天时间学习一下<strong>Maven</strong>的使用。（到处找 Jar 包，下载 Jar 包是真的麻烦费事，使用 Maven 可以为你省很多事情）。</p>
<h3 id="Git"><a href="#Git" class="headerlink" title="Git"></a><strong>Git</strong></h3><p>Git 技能对于程序员来说也是必备的！试着在学习的过程中将自己的代码托管在 Github 上，有一个漂亮的 Github 主页在求职面试中是十分加分的。并且，现在的企业都是基于 Git 在 GitHub 或 GitLab 平台上做版本控制。</p>
<p>学习 Git 的话，强烈推荐给大家一个可以交互式学习 Git 的网站 <a href="https://link.zhihu.com/?target=https://learngitbranching.js.org/">Learn Git Branching</a>。效果真的非常非常棒，通过游戏的方式让你学习 Git 的常见操作。</p>
<p>整个教程分为很多关，每一关都有非常详细的指导，还会有详细的动图展示结果。并且，你做错了之后还可以使用 reset 命令从头开始。</p>
<p><img src="https://pic2.zhimg.com/50/v2-964b02483882588923780a75d9775ab8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-964b02483882588923780a75d9775ab8_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你是在不知道答案的话，还可以使用 show solution 命令查看答案。</p>
<p><img src="https://pic4.zhimg.com/50/v2-1924f6df27c62026f3d531e7de843fb4_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-1924f6df27c62026f3d531e7de843fb4_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这种即时反馈的学习让过程变得有趣！真心感谢这个网站的作者，太爱了！</p>
<p>另外，你可以看看 Github 上开源的这篇 <a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Git">《Git 极简入门》</a> ，像版本控制和 Git 的相关概念、Git 常见操作这篇文章都有介绍到。</p>
<p>如果想要详细了解 Git 的话，<a href="https://link.zhihu.com/?target=https://git-scm.com/book/zh/v2">Git 官方文档教程</a>是肯定要看的，介绍的非常全面，并且有中文版！</p>
<p><img src="https://pic3.zhimg.com/50/v2-0b2163d2c8064c33a034d9bb31ced577_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-0b2163d2c8064c33a034d9bb31ced577_720w.jpg?source=1940ef5c" alt="img"></p>
<p><a href="https://link.zhihu.com/?target=https://www.progit.cn/">《Pro Git》</a>这本书也非常不错，还有中文版，内容非常全面，硬核！</p>
<p><img src="https://pic1.zhimg.com/50/v2-ce008dd1ba37fc12e91e9adf63f87fe6_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-ce008dd1ba37fc12e91e9adf63f87fe6_720w.jpg?source=1940ef5c" alt="img"></p>
<p><img src="https://pic1.zhimg.com/50/v2-566dccf603d7708a831be89f993c8c3d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-566dccf603d7708a831be89f993c8c3d_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你比较喜欢看视频教程的话，可以看看极客时间的<a href="https://link.zhihu.com/?target=http://gk.link/a/10qcT">《玩转 Git 三剑客》</a>，课程的作者是携程代码平台负责人苏玲，讲的挺不错的！</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><strong>Docker</strong></h3><p>传统的开发流程中，我们的项目通常需要使用 MySQL、Redis、FastDFS 等等环境，这些环境都是需要我们手动去进行下载并配置的，安装配置流程极其复杂，而且不同系统下的操作也不一样。</p>
<p>Docker 的出现完美地解决了这一问题，我们可以在容器中安装 MySQL、Redis 等软件环境，使得应用和环境架构分开，它的优势在于：</p>
<ol>
<li>一致的运行环境，能够更轻松地迁移</li>
<li>对进程进行封装隔离，容器与容器之间互不影响，更高效地利用系统资源</li>
<li>可以通过镜像复制多个一致的容器</li>
</ol>
<p>Docker 常见概念解读，可以看这篇 Github 上开源的这篇<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Docker">《Docker 基本概念解读》</a> ，从零到上手实战可以看<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98">《Docker 从入门到上手干事》</a>这篇文章，内容非常详细！</p>
<p>另外，再给大家推荐一本质量非常高的开源书籍<a href="https://link.zhihu.com/?target=https://yeasy.gitbook.io/docker_practice/introduction/why">《Docker 从入门到实践》</a> ，这本书的内容非常新，毕竟书籍的内容是开源的，可以随时改进。</p>
<p><img src="https://pic1.zhimg.com/50/v2-f5d0bf0587f742c9a65f985e7fc12f93_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-f5d0bf0587f742c9a65f985e7fc12f93_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a><strong>常用框架</strong></h2><p><a href="https://link.zhihu.com/?target=https://t.1yb.co/mBsy">2021 最新Java实战项目源码打包下载t.1yb.co<img src="https://pic2.zhimg.com/v2-5c70f2d4123edf16afab8b4bed070b4d_180x120.jpg" alt="图标"></a></p>
<h3 id="Spring-x2F-SpringBoot"><a href="#Spring-x2F-SpringBoot" class="headerlink" title="Spring&#x2F;SpringBoot"></a><strong>Spring&#x2F;SpringBoot</strong></h3><p><strong>Spring 和 SpringBoot 真的很重要！</strong></p>
<p>一定要搞懂 AOP 和 IOC 这两个概念。Spring 中 bean 的作用域与生命周期、SpringMVC 工作原理详解等等知识点都是非常重要的，一定要搞懂。</p>
<p>企业中做 Java 后端，你一定离不开 SpringBoot ，这个是必备的技能了！一定一定一定要学好！</p>
<p>像 SpringBoot 和一些常见技术的整合你也要知识怎么做，比如 SpringBoot 整合 MyBatis、 ElasticSearch、SpringSecurity、Redis 等等。</p>
<p>学习 Spring 的话，可以多看看 **<a href="https://link.zhihu.com/?target=https://spring.io/projects/spring-framework%23learn">《Spring 的官方文档》</a>**，写的很详细。你可以在这里找到 Spring 全家桶的学习资源。</p>
<p><img src="https://pic4.zhimg.com/50/v2-617c73716c914ce3ee4c9a32be97daa3_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-617c73716c914ce3ee4c9a32be97daa3_720w.jpg?source=1940ef5c" alt="img"></p>
<p>你也可以把 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34949443/">《Spring 实战》</a></strong> 这本书作为学习 Spring 的参考资料。 这本书还是比较新的，目前已经出到了第 5 版，基于 Spring 5 来讲。</p>
<p><img src="https://pic2.zhimg.com/50/v2-27116d84a7876e40fe9e008d0bd1927e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-27116d84a7876e40fe9e008d0bd1927e_720w.jpg?source=1940ef5c" alt="img"></p>
<p>了解了 Spring 中的一些常见概念和基本用法之后，你就可以开始学习 Spring Boot 了。</p>
<p>当然了，Spring 其实并不是学习 Spring Boot 的前置基础，相比于 Spring 来说，Spring Boot 要更容易上手一些！如果你只是想使用 Spring Boot 来做项目的话，直接学 Spring Boot 就可以了。</p>
<p>不过，我建议你在学习 Spring Boot 之前，可以看看 <strong><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/framework/spring/Spring%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93">《Spring 常见问题总结》</a></strong> 。这些问题都是 Spring 比较重要的知识点，也是面试中经常会被问到的。</p>
<p>学习 Spring Boot 的话，还是建议可以多看看  **<a href="https://link.zhihu.com/?target=https://spring.io/projects/spring-boot%23learn">《Spring Boot 的官方文档》</a>**，写的很详细。</p>
<p>你也可以把 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26857423/">《Spring Boot 实战》</a></strong> 这本书作为学习 Spring Boot 的参考资料。</p>
<p><img src="https://pic2.zhimg.com/50/v2-ccd869cdada64fb595d5e2c524180eba_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-ccd869cdada64fb595d5e2c524180eba_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书的整体质量实际一般，你当做参考书来看就好了!</p>
<p>相比于 《Spring Boot 实战》这本书，我更推荐国人写的 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34894533/">《Spring Boot 实战派》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-347c02b27d1c8074dd6423c11c867b95_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-347c02b27d1c8074dd6423c11c867b95_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书使用的 Spring Boot 2.0+的版本，还算比较新。整本书采用“知识点+实例”的形式编写，书籍的最后两章还有 2 个综合性的企业实战项目：</p>
<ul>
<li>开发企业级通用的后台系统</li>
<li>实现一个类似“京东”的电子商务商城</li>
</ul>
<p>作者在注意实战的过程中还不忘记对于一些重要的基础知识的讲解。</p>
<p>如果你想专研 Spring Boot 底层原理的话，可以看看 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/33390560/">《Spring Boot 编程思想（核心篇）》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-2c3fd8e3b31d9020d78e49fac4ecb91a_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-2c3fd8e3b31d9020d78e49fac4ecb91a_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书稍微有点啰嗦，不过，原理介绍的比较清楚（不适合初学者）。</p>
<p>如果你比较喜欢看视频的话，推荐尚硅谷雷神的**<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV19K4y1L7MT">《2021 版 Spring Boot2 零基础入门》</a>** 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-8edcdf9da09d431d5a827737df1326f8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-8edcdf9da09d431d5a827737df1326f8_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这可能是全网质量最高并且免费的 Spring Boot 教程了，好评爆炸！</p>
<p>另外，Spring Boot 这块还有很多优质的开源教程，我已经整理好放到 <a href="https://link.zhihu.com/?target=https://github.com/CodingDocs/awesome-java%23springboot">awesome-java@SpringBoot</a> 中了。</p>
<p><img src="https://pic4.zhimg.com/50/v2-bd98e686b9da09ebbe25bfc843364147_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-bd98e686b9da09ebbe25bfc843364147_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a><strong>Netty</strong></h3><p>但凡涉及到网络通信就必然必然离不开网络编程。 Netty 目前作为 Java 网络编程最热门的框架，毫不夸张地说是每个 Java 程序员必备的技能之一。</p>
<p><strong>为什么说学好 Netty 很有必要呢？</strong></p>
<ol>
<li>Netty 基于 NIO （NIO 是一种同步非阻塞的 I&#x2F;O 模型，在 Java 1.4 中引入了 NIO ）。使用 Netty 可以极大地简化并简化了 TCP 和 UDP 套接字服务器等网络编程,并且性能以及安全性等很多方面都非常优秀。</li>
<li>我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC、Spark、Elasticsearch 等等热门开源项目都用到了 Netty。</li>
<li>大部分微服务框架底层涉及到网络通信的部分都是基于 Netty 来做的，比如说 Spring Cloud 生态系统中的网关 Spring Cloud Gateway 。</li>
</ol>
<p>下面是一些比较推荐的书籍&#x2F;专栏。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/27038538/">《Netty 实战》</a></strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-8a4c942af44520f5d2c99c3d6f37b4dc_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-8a4c942af44520f5d2c99c3d6f37b4dc_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书可以用来入门 Netty ，内容从 BIO 聊到了 NIO、之后才详细介绍为什么有 Netty 、Netty 为什么好用以及 Netty 重要的知识点讲解。</p>
<p>这本书基本把 Netty 一些重要的知识点都介绍到了，而且基本都是通过实战的形式讲解。</p>
<p><strong>《Netty 进阶之路：跟着案例学 Netty》</strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-214ed872bb89b37b2b3c06b4c8c022e5_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-214ed872bb89b37b2b3c06b4c8c022e5_720w.jpg?source=1940ef5c" alt="img"></p>
<p>内容都是关于使用 Netty 的实践案例比如内存泄露这些东西。如果你觉得你的 Netty 已经完全入门了，并且你想要对 Netty 掌握的更深的话，推荐你看一下这本书。</p>
<p><strong>《Netty 入门与实战：仿写微信 IM 即时通讯系统》</strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-31d3de0843d01caea292fc461ca00d55_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-31d3de0843d01caea292fc461ca00d55_720w.jpg?source=1940ef5c" alt="img"></p>
<p>通过一个基于 Netty 框架实现 IM 核心系统为引子，带你学习 Netty。整个小册的质量还是很高的，即使你没有 Netty 使用经验也能看懂。</p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a><strong>搜索引擎</strong></h2><p>搜索引擎用于提高搜索效率，功能和浏览器搜索引擎类似。比较常见的搜索引擎是 Elasticsearch（推荐） 和 Solr。</p>
<p>如果你要学习 Elasticsearch 的话，<a href="https://link.zhihu.com/?target=http://www.elasticsearch.cn/">Elastic 中文社区</a> 以及 <a href="https://link.zhihu.com/?target=https://www.elastic.co/cn/blog/">Elastic 官方博客</a> 都是非常不错的资源，上面会分享很多具体的实践案例。</p>
<p>除此之外，极客时间的<a href="https://link.zhihu.com/?target=http://gk.link/a/10bcT">《Elasticsearch 核心技术与实战》</a>这门课程非常赞！这门课基于 Elasticsearch 7.1 版本讲解，比较新。并且，作者是 eBay 资深技术专家，有 20 年的行业经验，课程质量有保障！</p>
<p><img src="https://pic1.zhimg.com/50/v2-057c22f1e83338a78f2e6b22e5da777d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-057c22f1e83338a78f2e6b22e5da777d_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你想看书的话，可以考虑一下 《Elasticsearch 实战》 这本书。不过，需要说明的是，这本书中的 Elasticsearch 版本比较老，你可以将其作为一个参考书籍来看，有一些原理性的东西可以在上面找找答案。</p>
<p><img src="https://pic2.zhimg.com/50/v2-d2048059f45eac3a26001579c7826d8f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-d2048059f45eac3a26001579c7826d8f_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你想进一步深入研究 Elasticsearch 原理的话，可以看看张超老师的《Elasticsearch 源码解析与优化实战》这本书。这是市面上唯一一本写 Elasticsearch 源码的书。</p>
<p><img src="https://pic4.zhimg.com/50/v2-85d4049c868a55ecbc76ae6c329eaebf_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-85d4049c868a55ecbc76ae6c329eaebf_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a><strong>分布式</strong></h2><p>下面我们开始学习分布式以及高并发、高可用了。</p>
<p>这块内容的话，对于每一个知识点没有特定的书籍。我就推荐 2 本我觉得还不错的书籍吧！这两把书籍基本把下面涉及到的知识点给涵盖了。</p>
<p>第一本是李运华老师的**<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30335935/">《从零开始学架构》</a>** 。</p>
<p><img src="https://pic2.zhimg.com/50/v2-145c577cd6856daca487eec730ffc394_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-145c577cd6856daca487eec730ffc394_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书对应的有一个极客时间的专栏—<a href="https://link.zhihu.com/?target=http://gk.link/a/10pKZ">《从零开始学架构》</a>，里面的很多内容都是这个专栏里面的，两者买其一就可以了。</p>
<p>第二本是余老师的 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30443578/">《软件架构设计：大型网站技术架构与业务架构融合之道》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-fe7286730c9ea0f94196b5e9f1dd3e07_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-fe7286730c9ea0f94196b5e9f1dd3e07_720w.jpg?source=1940ef5c" alt="img"></p>
<p>事务与锁、分布式（CAP、分布式事务……）、高并发、高可用这本书都有介绍到。值得推荐！良心好书！</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a><strong>理论</strong></h3><h3 id="CAP-理论"><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a><strong>CAP 理论</strong></h3><p>CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。</p>
<p>关于 CAP 的详细解读请看：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/CAP%E7%90%86%E8%AE%BA">《CAP 理论解读》</a>。</p>
<h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a><strong>BASE 理论</strong></h3><p><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong> 、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong> 三个短语的缩写。BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。</p>
<p>关于 CAP 的详细解读请看：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/BASE%E7%90%86%E8%AE%BA">《BASE 理论解读》</a>。</p>
<h3 id="Paxos-算法和-Raft-算法"><a href="#Paxos-算法和-Raft-算法" class="headerlink" title="Paxos 算法和 Raft 算法"></a><strong>Paxos 算法和 Raft 算法</strong></h3><p><strong>Paxos 算法</strong>诞生于 1990 年，这是一种解决分布式系统一致性的经典算法 。但是，由于 Paxos 算法非常难以理解和实现，不断有人尝试简化这一算法。到了 2013 年才诞生了一个比 Paxos 算法更易理解和实现的分布式一致性算法—<strong>Raft 算法</strong>。</p>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a><strong>RPC</strong></h3><p>RPC 让调用远程服务调用像调用本地方法那样简单。</p>
<p>Dubbo 是一款国产的 RPC 框架，由阿里开源。相关阅读：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/rpc/Dubbo">Dubbo 常见问题总结</a></li>
<li><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/rpc/%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%BA%E5%95%A5%E4%B8%8D%E7%9B%B4%E6%8E%A5%E7%94%A8HTTP%E8%80%8C%E7%94%A8RPC">服务之间的调用为啥不直接用 HTTP 而用 RPC？</a></li>
</ul>
<h3 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a><strong>服务注册与发现</strong></h3><p>Eureka、Zookeeper、Consul、Nacos 都可以提供服务注册与发现的功能。</p>
<p><img src="https://pic1.zhimg.com/50/v2-c5458b7d70c752fcaa3f42e1ee1aa2ea_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-c5458b7d70c752fcaa3f42e1ee1aa2ea_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a><strong>API 网关</strong></h3><p>网关主要用于请求转发、安全认证、协议转换、容灾。</p>
<p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，为了取代 Netflix Zuul。</p>
<h3 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a><strong>配置中心</strong></h3><p>微服务下，业务的发展一般会导致服务数量的增加，进而导致程序配置（服务地址、数据库参数等等）增多。</p>
<p>传统的配置文件的方式已经无法满足当前需求，主要有两点原因：一是安全性得不到保障（配置放在代码库中容易泄露）；二是时效性不行 （修改配置需要重启服务才能生效）。</p>
<p>Spring Cloud Config、Nacos 、Apollo、K8s ConfigMap 都可以用来做配置中心。</p>
<p>Apollo 和 Nacos 我个人更喜欢。Nacos 使用起来更加顺手，Apollo 在配置管理方面做的更加全面。</p>
<h3 id="分布式-id"><a href="#分布式-id" class="headerlink" title="分布式 id"></a><strong>分布式 id</strong></h3><p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。</p>
<p><img src="https://pic1.zhimg.com/50/v2-21c5fb2a333d04d70ccf2554e4a66995_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-21c5fb2a333d04d70ccf2554e4a66995_720w.jpg?source=1940ef5c" alt="img"></p>
<p>简单来说，<strong>ID 就是数据的唯一标识</strong>。</p>
<p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</p>
<p>我简单举一个分库分表的例子。</p>
<p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。</p>
<p>单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。</p>
<p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-1f699f3733924441f3707926da884744_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-1f699f3733924441f3707926da884744_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这个时候就需要生成<strong>分布式 ID</strong>了。</p>
<p>分布式 ID 的解决方案有很多比如 ：</p>
<ul>
<li>算法 ：UUID、Snowflake</li>
<li>开源框架 ： UidGenerator、Leaf 、Tinyid</li>
</ul>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a><strong>分布式事务</strong></h3><p>微服务架构下，一个系统被拆分为多个小的微服务。</p>
<p>每个微服务都可能存在不同的机器上，并且每个微服务可能都有一个单独的数据库供自己使用。这种情况下，一组操作可能会涉及到多个微服务以及多个数据库。</p>
<p>举个例子：电商系统中，你创建一个订单往往会涉及到订单服务（订单数加一）、库存服务（库存减一）等等服务，这些服务会有供自己单独使用的数据库。</p>
<p><img src="https://pic2.zhimg.com/50/v2-feaa7d9765154fa367bc008444d208c3_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-feaa7d9765154fa367bc008444d208c3_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong>那么如何保证这一组操作要么都执行成功，要么都执行失败呢？</strong></p>
<p>这个时候单单依靠数据库事务就不行了！我们就需要引入 <strong>分布式事务</strong> 这个概念了！</p>
<p>常用分布式事务解决方案有 Seata 和 Hmily。</p>
<ol>
<li><strong><a href="https://link.zhihu.com/?target=https://seata.io/zh-cn/index.html">Seata</a></strong> :Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://gitee.com/shuaiqiyu/hmily">Hmily</a></strong> : 金融级分布式事务解决方案</li>
</ol>
<h3 id="分布式链路追踪"><a href="#分布式链路追踪" class="headerlink" title="分布式链路追踪"></a><strong>分布式链路追踪</strong></h3><p>不同于单体架构，在分布式架构下，请求需要在多个服务之间调用，排查问题会非常麻烦。我们需要分布式链路追踪系统来解决这个痛点。</p>
<p>目前分布式链路追踪系统基本都是根据谷歌的《Dapper 大规模分布式系统的跟踪系统》这篇论文发展而来，主流的有 Pinpoint，Skywalking ，CAT（当然也有其他的例如 Zipkin，Jaeger 等产品，不过总体来说不如前面选取的 3 个完成度高）等。</p>
<p>Zipkin 是 Twitter 公司开源的一个分布式链路追踪工具，Spring Cloud Sleuth 实际是基于 Zipkin 的。</p>
<p>SkyWalking 是国人吴晟（华为）开源的一款分布式追踪，分析，告警的工具，现在是 Apache 旗下开源项目</p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a><strong>微服务</strong></h2><p>微服务的很多东西实际在分布式这一节已经提到了。</p>
<p>我这里就再补充一些微服务架构中，经常使用到的一些组件。</p>
<ul>
<li><strong>声明式服务调用</strong> : Feign</li>
<li><strong>负载均衡</strong> : Ribbon</li>
<li>……</li>
</ul>
<h2 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a><strong>高并发</strong></h2><h3 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a><strong>消息队列</strong></h3><p><img src="https://pic2.zhimg.com/50/v2-4903cf7307350d41a16d0277112d5424_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-4903cf7307350d41a16d0277112d5424_720w.jpg?source=1940ef5c" alt="img"></p>
<p>消息队列在分布式系统中主要是为了解耦和削峰。相关阅读：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/message-queue/message-queue">消息队列常见问题总结</a>。</p>
<p>常用的消息队列如下：</p>
<ol>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/apache/rocketmq">RocketMQ</a></strong> ：阿里巴巴开源的一款高性能、高吞吐量的分布式消息中间件。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/apache/kafka">Kafaka</a></strong>: Kafka 是一种分布式的，基于发布 &#x2F; 订阅的消息系统。关于它的入门可以查看：<a href="https://link.zhihu.com/?target=https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/data-communication/Kafka%E5%85%A5%E9%97%A8%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86.md">Kafka 入门看这一篇就够了</a></li>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/rabbitmq">RabbitMQ</a></strong> :由 erlang 开发的基于 AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列。</li>
</ol>
<h3 id="读写分离-amp-分库分表"><a href="#读写分离-amp-分库分表" class="headerlink" title="读写分离&amp;分库分表"></a><strong>读写分离&amp;分库分表</strong></h3><p>读写分离主要是为了将数据库的读和写操作分不到不同的数据库节点上。主服务器负责写，从服务器负责读。另外，一主一从或者一主多从都可以。</p>
<p>读写分离可以大幅提高读性能，小幅提高写的性能。因此，读写分离更适合单机并发读请求比较多的场景。</p>
<p><img src="https://pic3.zhimg.com/50/v2-36f2ed6de6018bb4cebab32623373864_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-36f2ed6de6018bb4cebab32623373864_720w.jpg?source=1940ef5c" alt="img"></p>
<p>分库分表是为了解决由于库、表数据量过大，而导致数据库性能持续下降的问题。</p>
<p>常见的分库分表工具有：sharding-jdbc（当当）、TSharding（蘑菇街）、MyCAT（基于 Cobar）、Cobar（阿里巴巴）…。 推荐使用 sharding-jdbc。 因为，sharding-jdbc 是一款轻量级 Java 框架，以 jar 包形式提供服务，不要我们做额外的运维工作，并且兼容性也很好。</p>
<p><img src="https://pic2.zhimg.com/50/v2-635a97b84f0e3b718b1cfdc61a0bbe08_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-635a97b84f0e3b718b1cfdc61a0bbe08_720w.jpg?source=1940ef5c" alt="img"></p>
<p>相关阅读： <a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB&%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">读写分离&amp;分库分表常见问题总结</a></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><strong>负载均衡</strong></h3><p>负载均衡系统通常用于将任务比如用户请求处理分配到多个服务器处理以提高网站、应用或者数据库的性能和可靠性。</p>
<p>常见的负载均衡系统包括 3 种：</p>
<ol>
<li><strong>DNS 负载均衡</strong> ：一般用来实现地理级别的均衡。</li>
<li><strong>硬件负载均衡</strong> ： 通过单独的硬件设备比如 F5 来实现负载均衡功能（硬件的价格一般很贵）。</li>
<li><strong>软件负载均衡</strong> ：通过负载均衡软件比如 Nginx 来实现负载均衡功能。</li>
</ol>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a><strong>高可用</strong></h2><p>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的 。</p>
<p>相关阅读： <strong>《<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/high-availability/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%A6%81%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9">如何设计一个高可用系统？要考虑哪些地方？</a>》</strong> 。</p>
<h3 id="限流-amp-降级-amp-熔断"><a href="#限流-amp-降级-amp-熔断" class="headerlink" title="限流&amp;降级&amp;熔断"></a><strong>限流&amp;降级&amp;熔断</strong></h3><p>限流是从用户访问压力的角度来考虑如何应对系统故障。限流为了对服务端的接口接受请求的频率进行限制，防止服务挂掉。比如某一接口的请求限制为 100 个每秒, 对超过限制的请求放弃处理或者放到队列中等待处理。限流可以有效应对突发请求过多。相关阅读：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/high-availability/limit-request">限流算法有哪些？</a></p>
<p>降级是从系统功能优先级的角度考虑如何应对系统故障。服务降级指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p>
<p>熔断和降级是两个比较容易混淆的概念，两者的含义并不相同。</p>
<p>降级的目的在于应对系统自身的故障，而熔断的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/Netflix/Hystrix">Hystrix</a> 和 <a href="https://link.zhihu.com/?target=https://github.com/alibaba/Sentinel">Sentinel</a> 都能实现限流、降级、熔断。</p>
<p>Hystrix 是 Netflix 开源的熔断降级组件，Sentinel 是阿里中间件团队开源的一款不光具有熔断降级功能，同时还支持系统负载保护的组件。</p>
<p>两者都是主要做熔断降级 ，那么两者到底有啥异同呢？该如何选择呢？</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/alibaba/Sentinel/wiki/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94">Sentinel 的 wiki 中已经详细描述了其与 Hystrix 的区别</a>，你可以看看。</p>
<h3 id="排队"><a href="#排队" class="headerlink" title="排队"></a><strong>排队</strong></h3><p>另类的一种限流，类比于现实世界的排队。玩过英雄联盟的小伙伴应该有体会，每次一有活动，就要经历一波排队才能进入游戏。</p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a><strong>集群</strong></h3><p>相同的服务部署多份，避免单点故障。</p>
<h3 id="超时和重试机制"><a href="#超时和重试机制" class="headerlink" title="超时和重试机制"></a><strong>超时和重试机制</strong></h3><p><strong>一旦用户的请求超过某个时间得不到响应就结束此次请求并抛出异常。</strong> 如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法在处理请求。</p>
<p>另外，重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>jvm调优</title>
    <url>/posts/a269a036/</url>
    <content><![CDATA[<h1 id="jvm调优"><a href="#jvm调优" class="headerlink" title="jvm调优"></a>jvm调优</h1><h2 id="一、优化系统的思路"><a href="#一、优化系统的思路" class="headerlink" title="一、优化系统的思路"></a>一、优化系统的思路</h2><p>没有jvm调优经历</p>
<ol>
<li>一般来说关系型数据库是先到瓶颈，首先排查是否为数据库的问题<br>（这个过程中就需要评估自己建的索引是否合理、是否需要引入分布式缓存、是否需要分库分表等等</li>
<li>然后，我们会考虑是否需要扩容（横向和纵向都会考虑）<br>（这个过程中我们会怀疑是系统的压力过大或者是系统的硬件能力不足导致系统频繁出现问题）</li>
<li>接着，应用代码层面上排查并优化<br>（扩容是不能无止境的，里头里外都是钱阿，这个过程中我们会审视自己写的代码是否存在资源浪费的问题，又或者是在逻辑上可存在优化的地方，比如说通过并行的方式处理某些请求)</li>
<li>再接着，JVM层面上排查并优化<br>（审视完代码之后，这个过程我们观察J VM是否存在多次GC问题等等）</li>
<li>最后，网络和操作系统层面排查<br>（这个过程查看内存&#x2F;CPU&#x2F;网络&#x2F;硬盘读写指标是否正常等等）</li>
</ol>
<p><strong>绝大多数情况下，到第三步就结束了，一般经过「运维团队」给我们设置的JVM和机器上的参数，已经满足绝大多数的需求了。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ymDKDD_20210923115445.png"></p>
<h2 id="二、举例子"><a href="#二、举例子" class="headerlink" title="二、举例子"></a>二、举例子</h2><p>之前有过其他团队在「大促」发现接口处理超时的问题，那时候查各种监控怀疑是FULLGC频率稍大所导致的</p>
<ol>
<li>第一想法不是说去调节各种JVM参数来进行优化，而是直接加机器（用最粗暴的方法，解决问题是最简单的，扩容YYDS）</li>
<li>不过，我是学过JVM相关的调优命令和思路的。<br>在我的理解下，调优JVM其实就是在「理解」JVM内存结构以及各种垃圾收集器前提下，结合自己的现有的业务来「调整参数」，使自己的应用能够正常稳定运行。<ul>
<li>一般调优JVM我们认为会有几种指标可以参考：「吞吐量」、「停顿时间」和「垃圾回收频率」</li>
<li>基于这些指标，我们就有可能需要调整：<ol>
<li>内存区域大小以及相关策略（比如整块堆内存占多少、新生代占多少、老年代占多少、Survivor占多少、晋升老年代的条件等等）<br>比如（-Xmx：设置堆的最大值、-Xms：设置堆的初始值、-Xmn：表示年轻代的大小、-XX：SurvivorRatio：伊甸区和幸存区的比例等等）<br>按经验来说：I0密集型的可以稍微把「年轻代」空间加大些，因为大多数对象都是在年轻代就会灭亡。内存计算密集型的可以稍微把「老年代」空间加大些，对象存活时间会更长些）</li>
<li>垃圾回收器（选择合适的垃圾回收器，以及各个垃圾回收器的各种调优参数）<br>比如（-XX：+UseG1GC：指定JVM使用的垃圾回收器为G1、-XX：MaxGCPause Millis：设置目标停顿时间、-XX：InitiatingHeapOccupancyPercent：当整个堆内存使用达到一定比例，全局并发标记阶段就会被启动等等）<br>没错，这些都是因地制宜，具体问题具体分析（前提是得懂JVM的各种基础知识，基础知识都不懂，谈何调优）<br>在大多数场景下，JVM已经能够达到「开箱即用」</li>
</ol>
</li>
</ul>
</li>
</ol>
<h2 id="三、调优工具"><a href="#三、调优工具" class="headerlink" title="三、调优工具"></a>三、调优工具</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Ixx1QR_20210923115955.png"></p>
<p>一般我们是「遇到问题」之后才进行调优的，而遇到问题后需要利用各种的 「工具」 进行排查</p>
<ol>
<li>通过jps命令查看Java进程「基础」信息（进程号、主类）。这个命令很常用的就是用来看当前服务器有多少Java进程在运行，它们的进程号和加载主类是啥</li>
<li>通过jstat命令查看Java进程「统计类」相关的信息（类加载、编译相关信息统计，各个内存区域GC概况和统计）。这个命令很常用于看GC的情况</li>
<li>通过jinfo命令来查看和调整Java进程的「运行参数」</li>
<li>通过jmap命令来查看Java进程的「内存信息」。这个命令很常用于把JVM内存信息dump到文件，然后再用MAT（Memory Analyzer tool内存解析工具）把文件进行分析</li>
<li>通过jstack命令来查看JVM「线程信息」。这个命令用常用语排查死锁相关的问题</li>
<li>还有近期比较热门的Arthas（阿里开源的诊断工具），涵盖了上面很多命令的功能且自带图形化界面。这也是我这边常用的排查和分析工具</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HzOR97_20210923141932.png"></p>
<h2 id="四、jvm的jit优化技术"><a href="#四、jvm的jit优化技术" class="headerlink" title="四、jvm的jit优化技术"></a>四、jvm的jit优化技术</h2><p>JIT优化技术比较出名的有两种：方法内联和逃逸分析</p>
<ol>
<li>所谓方法内联就是把「目标方法」的代码复制到「调用的方法」中，避免发生真实的方法调用因为每次方法调用都会生成栈帧（压栈出栈记录方法调用位置等等）会带来一定的性能损耗，所以「方法内联」的优化可以提高一定的性能<br>在JVM中也有相关的参数给予我们指定 (-XX:MaxFreqlnlineSize、 -XX:MaxInli neSize等等）</li>
<li>而「逃逸分析」则是判断一个对象是否被外部方法引用或外部线程访问的分析技术，如果「没有被引用」，就可以对其进行优化<br>下面我举几个可优化的例子（思路）：<ul>
<li>1.锁消除（同步忽略）：该对象只在方法内部被访问，不会被别的地方引用，那么就一定是线程安全的，可以把锁相关的代码给忽略掉0</li>
<li>2.栈上分配：该对象只会在方法内部被访问，直接将对象分配在「栈」中（Java默认是将对象分配在「堆」中，是需要通过JVM垃圾回收期进行回收，需要损耗一定的性能，而栈内分配则快很多）</li>
<li>3.标量替换&#x2F;分离对象：当程序真正执行的时候可以不创建这个对象，而直接创建它的成员变量来代替。将对象拆分后，可以分配对象的成员变量在栈或寄存器上，原本的对象就无需分配内存空间了</li>
</ul>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/D1Gg1I_20210923142207.png"></p>
<p>不过扯了这么多，不同的JVM版本对JIT的优化都不太相同</p>
<p>这里也只能算是一个参考</p>
<p>线上在使用的JVM也不知道有没有做了这么些优化.</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>双亲委派机制</title>
    <url>/posts/8537f75f/</url>
    <content><![CDATA[<h1 id="双亲委派机制"><a href="#双亲委派机制" class="headerlink" title="双亲委派机制"></a>双亲委派机制</h1><h2 id="一、双亲委派机制"><a href="#一、双亲委派机制" class="headerlink" title="一、双亲委派机制"></a>一、双亲委派机制</h2><ol>
<li><p>class文件是通过类加载器加载到jvm中的</p>
</li>
<li><p>为了防止内存中存在多份同样的字节码，使用了双亲委派机制（不会自己加载类，而是把请求委托给父加载器去完成，依次向上）</p>
</li>
<li><p>jdk本地方法类一般有根加载器（BootStrap Loader） 装载，jdk内部实现的扩展类一般由扩展加载器（ExtClassLoader），程序中的类文件则有系统加载器（AppClassLoader）装载</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/W7CetM_20210922105555.png"></p>
</li>
</ol>
<h2 id="二、如何打破双亲委派机制"><a href="#二、如何打破双亲委派机制" class="headerlink" title="二、如何打破双亲委派机制"></a>二、如何打破双亲委派机制</h2><ol>
<li>只要我加载类的时候，不是从AppClassLoader→ExtClassLoader→BootStrap Loader这个顺序找，那就是打破了。</li>
<li>因为加载class核心的方法在LoaderClass类的loadClass()方法上（双亲委派机制的核心实现上）</li>
<li>只要我自定义个ClassLoader，重写loadClass方法（不依照往上开始寻找类加载器），那就算是打破双亲委派机制了。</li>
</ol>
<h2 id="三、破坏双亲委派机制的场景"><a href="#三、破坏双亲委派机制的场景" class="headerlink" title="三、破坏双亲委派机制的场景"></a>三、破坏双亲委派机制的场景</h2><ol>
<li>tomcat：初学部署项目时，我们是把war包放到tomcat的webapp下，意味着tomcat可以运行多个web应用程序</li>
<li>那假设我现在有2个web应用程序，都有一个类，叫做User，并且它们的类全限定名都一样，比如：都是com.xxxxx.User。但是它们的具体实现是不一样的</li>
<li>那么tomcat是如何保证它们不会冲突的呢？</li>
<li>答案就是：tomcat给每个web应用创建了一个类加载器实例（WebAppClassLoader），该加载器重写了loadClass方法，优先加载当前应用目录下的类，如果当前找不到，才一层一层往上找。这样就做到了web应用层级的隔离。</li>
</ol>
<h2 id="四、tomcat还有别的类加载器吗"><a href="#四、tomcat还有别的类加载器吗" class="headerlink" title="四、tomcat还有别的类加载器吗"></a>四、tomcat还有别的类加载器吗</h2><ol>
<li><p>并不是web应用下的所有依赖都是需要隔离的，比如redis就是可以web应用之间共享的</p>
</li>
<li><p>因为如果版本相同，没必要每个web应用都独自加载一份</p>
</li>
<li><p>做法很简单，tomcat就在WebAppClassLoader上加了个父类加载器（SharedClassLoader），如果WebAppClassLoader自身没有加载到某个类，那就委托ShaerClassLoader去加载。（无非就是把需要应用程序之间需要共享的类放到一个共享目录下,SharedClassLoader）读共享目录的类就好了</p>
</li>
<li><p>为了隔离web应用与tomcat本身的类，又有类加载器（CatalinaClassLoader）来装载tomcat本身的依赖</p>
</li>
<li><p>如果tomcat本身的类的依赖和web应用还需要共享，那么还有类加载器（CommonClassLoader）来装载进而达到共享</p>
</li>
<li><p>各个类加载器的加载目录可以到tomcat的catalina.properties配置文件上查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5TeCHY_20210922111755.png"></p>
</li>
</ol>
<h2 id="五、jdbc"><a href="#五、jdbc" class="headerlink" title="五、jdbc"></a>五、jdbc</h2><ol>
<li>有没有破坏双亲委派机制，见仁见智</li>
<li>jdbc定义类接口，具体实现类由各个厂商进行实现（比如Mysql）</li>
<li>类加载有个规则：如果一个类由类加载器A加载，那么这个类的依赖类也是有相同的类加载器加载</li>
<li>我们用jdbc的时候，是使用DriverManager进而获取Connection，DriverManager在java.sql包下，显然是有BootStrap类加载器进行装载</li>
<li>当我们使用DriverManager.getConnection()时，得到的是一定是厂商实现的类</li>
<li>但BootStrap 加载器显然不可以加载各个厂商实现的类，这些实现类又没在java包中，怎么可能加载到呢</li>
<li>DriverManager的解决方案是：在DriverManager初始化时，得到上下文加载器，去获取Connection时，是使用上下文加载器去加载Connection的，而这里的线程上下文加载器实际上还是（AppClassLoader）</li>
<li>在获取Connection的时候，还是先找到ExtClassLoader和B o o t S t ra p C la s sLoader，只不过这两加载器肯定是加载不到的，最终会有AppClassLoader进行加载</li>
<li>那这种情况，有的人觉得破坏了双亲委派机制，因为本来明明应该是有BootStrapClassLoader进行加载的，结果你来了一手线程上下文加载器，改掉了类加载器</li>
<li>有的人觉得没破坏双亲委派机制，只是改成了由线程上下文加载器进行类加载，但是还是遵守依次往上找父类加载，都找不到时才由自身加载。认为原则上没有改变。</li>
<li>我觉得这不重要，重要的是弄懂底层原理</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程与进程</title>
    <url>/posts/5bf4d040/</url>
    <content><![CDATA[<h1 id="线程与进程"><a href="#线程与进程" class="headerlink" title="线程与进程"></a>线程与进程</h1><h1 id="一、进程"><a href="#一、进程" class="headerlink" title="一、进程"></a>一、进程</h1><ol>
<li>计算机内存空间</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/RqW68w_20210909173200.png"></p>
<p>​        用户空间装着用户进程需要使用的资源，比如你在程序代码里开一个数组， 这个数组肯定存在用户空间;内核空间存放内核进程需要加载的系统资源， 这一些资源一般是不允许用户访问的。但是注意有的用户进程会共享一些内 核空间的资源，比如一些动态链接库等等。</p>
<ol start="2">
<li><p><strong>对于操作系统，进程就是一个数据结构</strong>，直接看 Linux 的源码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span></span><br><span class="line">  		<span class="comment">// 进程状态</span></span><br><span class="line">      <span class="type">long</span> state; </span><br><span class="line">  		<span class="comment">// 虚拟内存结构体</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span> </span><br><span class="line">  		<span class="comment">// 进程号</span></span><br><span class="line">      <span class="type">pid_t</span> pid;</span><br><span class="line">      <span class="comment">// 指向父进程的指针</span></span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span> *<span class="title">parent</span>;</span> </span><br><span class="line">      <span class="comment">// 一个数组，包含该进程打开的文件指针 </span></span><br><span class="line">  		<span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>​        其中比较有意思的是 mm 指针和 files 指针。</p>
<p>​        mm 指针指向：进程的虚拟内存，也就是载入资源和可执行文件的地方;</p>
<p>​        files 指针指向：一个数组，这个数组里装着所有该进程打开的文件的指针。</p>
</li>
</ol>
<h2 id="二、文件描述符"><a href="#二、文件描述符" class="headerlink" title="二、文件描述符"></a>二、文件描述符</h2><p>​        <strong>每个进程被创建时，</strong> <strong>files</strong> <strong>的前三位被填入默认值，分别指向标准输入 流、标准输出流、标准错误流。我们常说的「文件描述符」就是指这个文件 指针数组的索引（0，1，2）</strong>，所以程序的文件描述符默认情况下 <strong>0 是输入，1 是输出， 2 是错误。</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210909224717097_20210909224717.png"></p>
<p>​        linux一切皆文件，对于一般的计算机，输入流是键盘，输出流是显示器，错误流也是显示器， 所以现在这个进程和内核连了三根线。因为硬件都是由内核管理的，我们的 进程需要通过「系统调用」让内核进程访问硬件资源。</p>
<p>​        如果我们写的程序需要其他资源，比如打开一个文件进行读写，这也很简 单，进行系统调用，让内核把文件打开，这个文件就会被放到 files 的第 4 个位置:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ex9iww_20210909225018.png"></p>
<p><strong>输入重定向</strong>：command &lt; file.txt，file[0]指向file.txt,程序从file[0]读取数据</p>
<p><strong>输出重定向</strong>：command &gt; file.txt，file[1]指向file.txt， 程序像file[1]写入数据</p>
<p><strong>管道符</strong>：cmd1 | cmd2 把一个进程的输出流和另一个进程的输入流接起 一条「管道」，数据就在其中传递</p>
<p><strong>注意：</strong>一个简单的 files 数组，进程通过简单的文件描述符访问相应资源， 具体细节交于操作系统，有效解耦，优美高效。</p>
<h2 id="三、线程是什么"><a href="#三、线程是什么" class="headerlink" title="三、线程是什么"></a>三、线程是什么</h2><p>​            之所以Linux 中线程和进程基本没有区别呢，因为从 Linux 内核的角度来看，并没有把线程和进程区别对待。<strong>都是用</strong> <strong>task_struct</strong> <strong>结构表示的，唯一的 区别就是共享的数据区域不同</strong>。</p>
<p>​        换句话说，线程看起来跟进程没有区别，只是线程的某些数据区域和其父进 程是共享的，而子进程是拷⻉副本，而不是共享。就比如说， mm 结构 和 files 结构在线程中都是共享的，我画两张图你就明白了:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/X1GvhJ_20210909230142.png"></p>
<p><strong>注意：</strong>对于新建进程时内存区域拷 ⻉的问题，Linux 采用了 copy-on-write 的策略优化，也就是并不真正复制父 进程的内存空间，而是等到需要写操作时才去复制。<strong>所以</strong> <strong>Linux</strong> <strong>中新建进 程和新建线程都是很迅速的</strong>。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官：说说你了解class文件吗？</title>
    <url>/posts/4d79f088/</url>
    <content><![CDATA[<h1 id="面试官：说说你了解class文件吗？"><a href="#面试官：说说你了解class文件吗？" class="headerlink" title="面试官：说说你了解class文件吗？"></a>面试官：说说你了解class文件吗？</h1><p><strong>本文思维导图：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2rLXEs_20210507091957.png" alt="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2rLXEs_20210507091957.png"></p>
<h2 id="Class类文件结构"><a href="#Class类文件结构" class="headerlink" title="Class类文件结构"></a>Class类文件结构</h2><h2 id="为什么Java可以一次编译到处运行？JVM无关性"><a href="#为什么Java可以一次编译到处运行？JVM无关性" class="headerlink" title="为什么Java可以一次编译到处运行？JVM无关性"></a>为什么Java可以一次编译到处运行？JVM无关性</h2><p>与平台无关性是建立在操作系统上，虚拟机厂商提供了许多可以运行在各种不同平台的虚拟机，它们都可以载入和执行字节码，从而实现程序的“一次编写，到处运行”。</p>
<p>各种不同平台的虚拟机与所有平台都统一使用的程序存储格式——字节码（Byte Code）是构成平台无关性的基石，也是语言无关性的基础。Java 虚拟机不和包括 Java 在内的任何语言绑定，它只与“Class 文件”这种特定的二进制文件格式所关联，Class 文件中包含了 Java 虚拟机指令集和符号表以及若干其他辅助信息。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ZGOAdI_20210507092208.png" alt="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ZGOAdI_20210507092208.png"></p>
<h2 id="Class-类文件"><a href="#Class-类文件" class="headerlink" title="Class  类文件"></a>Class  类文件</h2><p>Java 技术能够一直保持非常好的向后兼容性，这点 Class 文件结构的稳定性功不可没。Java 已经发展到 14 版本，但是 class 文件结构的内容，绝大部分在JDK1.2 时代就已经定义好了。虽然 JDK1.2 的内容比较古老，但是 java 发展经历了十余个大版本，但是每次基本上知识在原有结构基础上新增内容、扩充功能，并未对定义的内容做修改。</p>
<p>任何一个 Class 文件都对应着唯一一个类或接口的定义信息，但反过来说，Class 文件实际上它并不一定以磁盘文件的形式存在（比如可以动态生成、或者直接送入类加载器中）。</p>
<p>Class 文件是一组以 8 位字节为基础单位的二进制流。</p>
<h2 id="工具介绍"><a href="#工具介绍" class="headerlink" title="工具介绍"></a>工具介绍</h2><p>Sublime：查看 16 进制的编辑器<br>javap：javap 是 JDK 自带的反解析工具。它的作用是将 .class 字节码文件解析成可读的文件格式。<br>在使用 javap 时我一般会添加 -v 参数，尽量多打印一些信息。同时，我也会使用 -p 参数，打印一些私有的字段和方法。<br>jclasslib：如果你不太习惯使用命令行的操作，还可以使用 jclasslib，jclasslib 是一个图形化的工具，能够更加直观的查看字节码中的内容。它还分门别类的对类中的各个部分进行了整理，非常的人性化。同时，它还提供了 Idea 的插件，你可以从 plugins 中搜索到它。</p>
<h2 id="Class-文件格式"><a href="#Class-文件格式" class="headerlink" title="Class  文件格式"></a>Class  文件格式</h2><p>从一个 Class 文件开始，整个 Class 文件的格式就是一个二进制的字节流。各个数据项目严格按照顺序紧凑地排列在 Class 文件之中，中间没有添加任何分隔符，这使得整个 Class 文件中存储的内容几乎全部是程序运行的必要数据，没有空隙存在。</p>
<p>Class 文件格式采用一种类似于 C 语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型：无符号数和表。</p>
<p>无符号数属于基本的数据类型，以 u1、u2、u4、u8 来分别代表 1 个字节（一个字节是由两位 16 进制数组成 （<strong>1个16进制数&#x3D;4个二进制数 8个二进制数&#x3D;一个字节</strong>））、2 个字节、4 个字节和 8 个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照 UTF-8 编码构成字符串值。</p>
<p>表是由多个无符号数或者其他表作为数据项构成的复合数据类型，所有表都习惯性地以“_info”结尾。表用于描述有层次关系的复合结构的数据，整个Class 文件本质上就是一张表。</p>
<h2 id="Class-文件格式详解"><a href="#Class-文件格式详解" class="headerlink" title="Class  文件格式详解"></a>Class  文件格式详解</h2><p>Class 的结构不像 XML 等描述语言，由于它没有任何分隔符号，所以在其中的数据项，无论是顺序还是数量，都是被严格限定的，哪个字节代表什么含义，长度是多少，先后顺序如何，都不允许改变。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/mwHImZ_20210507115741.png" alt="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/mwHImZ_20210507115741.png"></p>
<p>按顺序包括：</p>
<h3 id="魔数与-Class-文件的版本"><a href="#魔数与-Class-文件的版本" class="headerlink" title="魔数与 Class  文件的版本"></a>魔数与 Class  文件的版本</h3><p>每个 Class 文件的头 4 个字节称为魔数（Magic Number），它的唯一作用是确定这个文件是否为一个能被虚拟机接受的 Class 文件。使用魔数而不是扩展名来进行识别主要是基于安全方面的考虑，因为文件扩展名可以随意地改动。文件格式的制定者可以自由地选择魔数值，只要这个魔数值还没有被广泛采用过同时又不会引起混淆即可。</p>
<p>紧接着魔数的 4 个字节存储的是 Class 文件  的版本号：第 5 和第 6 个字节是次版本号（MinorVersion），第 7 和第 8 个字节是主版本号（Major Version）。</p>
<p>Java 的版本号是从 45 开始的，JDK 1.1 之后的每个 JDK 大版本发布主版本号向上加 1 高版本的 JDK 能向下兼容以前版本的 Class 文件，但不能运行以后版本的 Class 文件，即使文件格式并未发生任何变化，虚拟机也必须拒绝执行超过其版本号的 Class 文件。<img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/1xvCIr_20210507115713.png" style = "width:20px height:1px" />代表 JDK1.8（16 进制的 34，换成 10 进制就是 52）</p>
<h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2><p>常量池中常量的数量是不固定的，所以在常量池的入口需要放置一项 u2 类型的数据，代表常量池容量计数值（constant_pool_count）。与 Java 中语言习惯不一样的是，这个容量计数是从 1 而不是 0 开始的</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/L7NUe4_20210507115859.png"></p>
<p>常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。<br>字面量比较接近于 Java 语言层面的常量概念，如文本字符串、声明为 final 的常量值等。<br>符号引用则属于编译原理方面的概念，包括了下面三类常量：类和接口的全限定名（Fully Qualified Name）、字段的名称和描述符（Descriptor）、方法的名称和描述符</p>
<h3 id="访问标志"><a href="#访问标志" class="headerlink" title="访问标志"></a>访问标志</h3><p>用于识别一些类或者接口层次的访问信息，包括：这个 Class 是类还是接口；是否定义为 public 类型；是否定义为 abstract 类型；如果是类的话，是否被声明为 final 等</p>
<h3 id="类索引、父类索引与接口索引集合"><a href="#类索引、父类索引与接口索引集合" class="headerlink" title="类索引、父类索引与接口索引集合"></a>类索引、父类索引与接口索引集合</h3><p>这三项数据来确定类的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。由于 Java 语言不允许多重继承，所以父类索引只有一个，除了 java.lang.Object 之外，所有的 Java 类都有父类，因此除了java.lang.Object 外，所有 Java 类的父类索引都不为 0。接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按 implements 语句（如果这个类本身是一个接口，则应当是 extends 语句）后的接口顺序从左到右排列在接口索引集合中</p>
<h3 id="字段表集合"><a href="#字段表集合" class="headerlink" title="字段表集合"></a>字段表集合</h3><p>描述接口或者类中声明的变量。字段（field）包括类级变量以及实例级变量。<br>而字段叫什么名字、字段被定义为什么数据类型，这些都是无法固定的，只能引用常量池中的常量来描述。字段表集合中不会列出从超类或者父接口中继承而来的字段，但有可能列出原本 Java 代码之中不存在的字段，譬如在内部类中为了保持对外部类的访问性，会自动添加指向外部类实例的字段。</p>
<h3 id="方法表集合"><a href="#方法表集合" class="headerlink" title="方法表集合"></a>方法表集合</h3><p>描述了方法的定义，但是方法里的 Java 代码，经过编译器编译成字节码指令后，存放在属性表集合中的方法属性表集合中一个名为“Code”的属性里面。</p>
<p>与字段表集合相类似的，如果父类方法在子类中没有被重写（Override），方法表集合中就不会出现来自父类的方法信息。但同样的，有可能会出现由编译器自动添加的方法，最典型的便是类构造器“＜clinit＞”方法和实例构造器“＜init＞”</p>
<h3 id="属性表集合"><a href="#属性表集合" class="headerlink" title="属性表集合"></a>属性表集合</h3><p>存储 Class 文件、字段表、方法表都自己的属性表集合，以用于描述某些场景专有的信息。如方法的代码就存储在 Code 属性表中。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>10、【对线面试官】TreadLocal</title>
    <url>/posts/2d4446ad/</url>
    <content><![CDATA[<h1 id="10、【对线面试官】TreadLocal"><a href="#10、【对线面试官】TreadLocal" class="headerlink" title="10、【对线面试官】TreadLocal"></a>10、【对线面试官】TreadLocal</h1><h2 id="今天要不来聊聊ThreadLocal吧？"><a href="#今天要不来聊聊ThreadLocal吧？" class="headerlink" title="今天要不来聊聊ThreadLocal吧？"></a>今天要不来聊聊ThreadLocal吧？</h2><ol>
<li>我个人对ThreadLocal理解就是</li>
<li>它能够提供了线程的局部变量让每个线程都可以通过set&#x2F;get来对这个局部变量进行操作</li>
<li>不会和其他线程的局部变量进行冲突，实现了线程的数据隔离</li>
</ol>
<h2 id="你在工作中有用到过ThreadLocal吗？"><a href="#你在工作中有用到过ThreadLocal吗？" class="headerlink" title="你在工作中有用到过ThreadLocal吗？"></a>你在工作中有用到过ThreadLocal吗？</h2><ol>
<li>这块是真不多，不过还是有一处的。就是我们项目有个的DateUtils工具类</li>
<li>这个工具类主要是对时间进行格式化</li>
<li>格式化&#x2F;转化的实现是用的SimpleDateFormat</li>
<li>但众所周知SimpleDateFormat不是线程安全的 ，所以我们就用ThreadLocal来让每个线程装载着自己的SimpleDateFormat对象</li>
<li>以达到在格式化时间时，线程安全的目的</li>
<li>在方法上创建SimpleDateFormat对象也没问题，但每调用一次就创建一次有点不优雅</li>
<li>在工作中ThreadLocal的应用场景确实不多，但要不我给你讲讲Spring是怎么用的？</li>
</ol>
<h2 id="spring中的应用"><a href="#spring中的应用" class="headerlink" title="spring中的应用"></a>spring中的应用</h2><ol>
<li>Spring提供了事务相关的操作，而我们知道事务是得保证一组操作同时成功或失败的</li>
<li>这意味着我们一次事务的所有操作需要在同一个数据库连接上</li>
<li>但是在我们日常写代码的时候是不需要关注这点的</li>
<li>Spring就是用的ThreadLocal来实现，Th readLocal存储的类型是一个Map</li>
<li>Map中的key是DataSource，value是C onnection（为了应对多数据源的情况，所以是一个Map）</li>
<li>用了ThreadLocal保证了同一个线程获取一个Connection对象，从而保证一次事务的所有操作需要在同一个数据库连接上</li>
</ol>
<h2 id="你知道ThreadLocal内存泄露这个知识点吗？"><a href="#你知道ThreadLocal内存泄露这个知识点吗？" class="headerlink" title="你知道ThreadLocal内存泄露这个知识点吗？"></a>你知道ThreadLocal内存泄露这个知识点吗？</h2><ol>
<li>了解的，要不我先来讲讲ThreadLocal的原理？<ul>
<li>ThreadLocal是一个壳子，真正的存储结构是ThreadLocal里有ThreadLocalMap这么个内部类</li>
<li>而有趣的是，ThreadLocalMap的引用是在Thread上定义的</li>
<li>ThreadLocal本身并不存储值，它只是作为key来让线程从ThreadLocalMap获取value</li>
<li>所以，得出的结论就是ThreadLocalMap该结构本身就在Thread下定义，而ThreadLocal只是作为key，存储set到ThreadLocalMap的变量当然是线程私有的咯</li>
</ul>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NxSnnq_20211029171330.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>11、【对线面试官】CountDownLatch和CyclicBarrier</title>
    <url>/posts/58f7b356/</url>
    <content><![CDATA[<h1 id="11、【对线面试官】CountDownLatch和CyclicBarrier"><a href="#11、【对线面试官】CountDownLatch和CyclicBarrier" class="headerlink" title="11、【对线面试官】CountDownLatch和CyclicBarrier"></a>11、【对线面试官】CountDownLatch和CyclicBarrier</h1><h2 id="我现在有个场景：现在我有50个任务，这50个任务在完成之后，才能执行下一个「函数」，要是你，你怎么设计？"><a href="#我现在有个场景：现在我有50个任务，这50个任务在完成之后，才能执行下一个「函数」，要是你，你怎么设计？" class="headerlink" title="我现在有个场景：现在我有50个任务，这50个任务在完成之后，才能执行下一个「函数」，要是你，你怎么设计？"></a>我现在有个场景：现在我有50个任务，这50个任务在完成之后，才能执行下一个「函数」，要是你，你怎么设计？</h2><ol>
<li>可以用JDK给我们提供的线程工具类，CountDownLatch和CyclicBarrier都可以完成这个需求。</li>
<li>这两个类都可以等到线程完成之后，才去执行某些操作</li>
</ol>
<h2 id="那既然都能实现的话？那CountDownLatch和CyclicBarrier有什么什么区别呢？"><a href="#那既然都能实现的话？那CountDownLatch和CyclicBarrier有什么什么区别呢？" class="headerlink" title="那既然都能实现的话？那CountDownLatch和CyclicBarrier有什么什么区别呢？"></a>那既然都能实现的话？那CountDownLatch和CyclicBarrier有什么什么区别呢？</h2><ul>
<li>主要的区别就是CountDownLatch用完了，就结束了，没法复用。而CyclicBarrier不一样，它可以复用。</li>
<li>比如说，你得给我解释：CountDownLatch和CyclicBarrier都是线程同步的工具类<br>od</li>
<li>CountDownLatch允许一个或多个线程一直等待，直到这些线程完成它们的操作</li>
<li>而CyclicBarrier不一样，它往往是当线程到达某状态后，暂停下来等待其他线程等到所有线程均到达以后，才继续执行</li>
<li>可以发现这两者的等待主体是不一样的。</li>
<li>CountDownLatch调用await（）通常是主线程&#x2F;调用线程，而CyclicBarrier调用await（）是在任务线程调用的</li>
<li>所以，CyclicBarrier中的阻塞的是任务的线程，而主线程是不受影响的</li>
<li>简单叙述完这些基本概念后，可以特意抛出这两个类都是基于AQS实现的</li>
<li>countDownLatch<ol>
<li>前面提到了CountDownLatch也是基于AQS实现的，它的实现机制很简单</li>
<li>当我们在构建CountDownLatch对象时，传入的值其实就会赋值给AQS的关键变量state</li>
<li>执行countDown方法时，其实就是利用CAS将state-1<br>执行await方法时，其实就是判断state是否为0，不为0则加入到队列中，将该线程阻塞掉（除了头结点）</li>
<li>因为头节点会一直自旋等待state为0，当state为0时，头节点把剩余的在队列中阻塞的节点也一并唤醒</li>
</ol>
</li>
<li>CycllicBarrier<ol>
<li>从源码不难发现的是，它没有像CountDo wnLatch和ReentrantLock使用AQS的stat e变量，而CyclicBarrier是直接借助ReentrantLock加上Condition等待唤醒的功能进而实现的</li>
<li>在构建CyclicBarrier时，传入的值会赋值给CyclicBarrier内部维护count变量，也会赋值给parties变量（这是可以复用的关键）</li>
<li>每次调用await时，会将count-1，操作count值是直接使用ReentrantLock来保证线程安全性</li>
<li>如果count不为0，则添加则condition队列中</li>
<li>如果count等于0时，则把节点从condition队列添加至AQS的队列中进行全部唤醒，并且将parties的值重新赋值为count的值（实现复用）</li>
</ol>
</li>
</ul>
<h2 id="那如果是这样的话，那我多次用CountDownLatch不也可以解决问题吗？"><a href="#那如果是这样的话，那我多次用CountDownLatch不也可以解决问题吗？" class="headerlink" title="那如果是这样的话，那我多次用CountDownLatch不也可以解决问题吗？"></a>那如果是这样的话，那我多次用CountDownLatch不也可以解决问题吗？</h2><ol>
<li>是这样的，我提出了个场景，它确实很像可以用CountDownLatch和CyclicBarrier解决</li>
<li>但是，作为面试者的你可以尝试向我获取更多的信息</li>
<li>我可没说一个任务就用一个线程处理哦</li>
<li>放一步讲，即便我是想考察CountDownLatch和CyclicBarrier的知识，但是过程也是很重要的。我会看你在这个过程中思考的以及沟通</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>CountDownlatch基于AQS实现，会将构造CountDownLatch的入参传递至state，countDown（）就是在利用CAS将state减- 1，await（）实际就是让头节点一直在等待s tate为0时，释放所有等待的线程</li>
<li>而CyclicBarrier则利用ReentrantLock和Condition，自身维护了count和parties变量。每次调用await将count-1，并将线程加入到condition队列上。等到count为0时，则将condition队列的节点移交至AQS队列，并全部释放。</li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>12、【对线面试官】List</title>
    <url>/posts/31fa5cf/</url>
    <content><![CDATA[<h1 id="12、【对线面试官】List"><a href="#12、【对线面试官】List" class="headerlink" title="12、【对线面试官】List"></a>12、【对线面试官】List</h1><h2 id="要不今天来讲讲Java的List吧，你对List了解多少？"><a href="#要不今天来讲讲Java的List吧，你对List了解多少？" class="headerlink" title="要不今天来讲讲Java的List吧，你对List了解多少？"></a>要不今天来讲讲Java的List吧，你对List了解多少？</h2><ol>
<li>List在Java里边是一个接口，常见的实现类有ArrayList和LinkedList，在开发中用得最多的是ArrayList</li>
<li>ArrayList的底层数据结构是数组，Linked List底层数据结构是链表。</li>
</ol>
<h2 id="那Java本身就有数组了，为什么要用ArrayList呢？"><a href="#那Java本身就有数组了，为什么要用ArrayList呢？" class="headerlink" title="那Java本身就有数组了，为什么要用ArrayList呢？"></a>那Java本身就有数组了，为什么要用ArrayList呢？</h2><ol>
<li>原生的数组会有一个特点：你在使用的时候必须要为它创建大小，而ArrayList不用。</li>
<li>在日常开发的时候，往往我们是不知道要给数组分配多大（不固定）</li>
<li>如果数组的大小指定多了，内存浪费；如果数组大小指定少了，装不下。</li>
<li>假设我们给定数组的大小是10，要往这个数组里边填充元素，我们只能添加10个元素。</li>
<li>而ArrayList不一样，ArrayList我们在使用的时候可以往里边添加20个，30个，甚至更多的元素</li>
<li>因为ArrayList是实现了动态扩容的<ol>
<li>当我们new ArrayList（）的时候，默认会有一个空的Object数组，大小为0。</li>
<li>当我们第一次add添加数据的时候，会给这个数组初始化一个大小，这个大小默认值为10</li>
<li>使用ArrayList在每一次add的时候，它都会先去计算这个数组够不够空间</li>
<li>如果空间是够的，那直接追加上去就好了。如果不够，那就得扩容</li>
</ol>
</li>
</ol>
<h2 id="那怎么扩容？一次扩多少？"><a href="#那怎么扩容？一次扩多少？" class="headerlink" title="那怎么扩容？一次扩多少？"></a>那怎么扩容？一次扩多少？</h2><ol>
<li>在源码里边，有个grow方法，每一次扩原来的1.5倍。比如说，初始化的值是10嘛。</li>
<li>现在我第11个元素要进来了，发现这个数组的空间不够了，所以会扩到15</li>
<li>空间扩完容之后，会调用arraycopy来对数组进行拷贝</li>
</ol>
<h2 id="我又想问问，为什么你在前面提到，在日常开发中用得最多的是ArrayList呢？"><a href="#我又想问问，为什么你在前面提到，在日常开发中用得最多的是ArrayList呢？" class="headerlink" title="我又想问问，为什么你在前面提到，在日常开发中用得最多的是ArrayList呢？"></a>我又想问问，为什么你在前面提到，在日常开发中用得最多的是ArrayList呢？</h2><ol>
<li>是由底层的数据结构来决定的，在日常开发中，遍历的需求比增删要多，即便是增删也是往往在List的尾部添加就OK了。</li>
<li>像在尾部添加元素，ArrayList的时间复杂度也就O（1）</li>
<li>另外的是，ArrayList的增删底层调用的copyOf（）被优化过</li>
<li>现代CPU对内存可以块操作，ArrayList的增删一点儿也不会比LinkedList慢</li>
</ol>
<h2 id="了解，Vector你知道这个吗？"><a href="#了解，Vector你知道这个吗？" class="headerlink" title="了解，Vector你知道这个吗？"></a>了解，Vector你知道这个吗？</h2><ol>
<li>嗯，Vector是底层结构是数组，一般现在我们已经很少用了。</li>
<li>相对于ArrayList，它是线程安全的，在扩容的时候它是直接扩容两倍的</li>
<li>比如现在有10个元素，要扩容的时候，就会将数组的大小增长到20</li>
</ol>
<h2 id="嗯，那如果我们不用Vector，线程安全的List还有什么？"><a href="#嗯，那如果我们不用Vector，线程安全的List还有什么？" class="headerlink" title="嗯，那如果我们不用Vector，线程安全的List还有什么？"></a>嗯，那如果我们不用Vector，线程安全的List还有什么？</h2><ol>
<li>首先，我们也可以用Collections来将ArayList来包装一下，变成线程安全。&#96;</li>
<li>在java.util.concurrent包下还有一个类，叫做CopyOnWriteArrayList</li>
<li>要讲CopyOnWriteArrayList之前，我还是想说说copy-on-write这个意思，下面我会简称为cow</li>
<li>比如说在Linux中，我们知道所有的进程都是init进程fork出来的</li>
<li>除了进程号之外，fork出来的子进程，默认跟父进程是一模一样的。</li>
<li>当使用了cow机制；子进程在被fork之后exec之前，两个进程用的是相同的内存空间的</li>
<li>这意味着子进程的代码段、数据段、堆栈都是指向父进程的物理空间</li>
<li>当父子进程中有更改的行为发生时，再为子进程分配相应物理空间。</li>
<li>这样做的好处就是，等到真正发生修改的时候，才去分配资源，可以减少分配或者复制大量资源时带来的瞬间延时。</li>
<li>简单来说，就可以理解为我们的懒加载，或者说单例模式的懒汉式。等真正用到的时候再分配</li>
<li>在文件系统中，其实也有cow的机制。</li>
<li>文件系统的cow就是在修改数据的时候，不会直接在原来的数据位置上进行操作，而是重新找个位置修改。</li>
<li>比如说：要修改数据块A的内容，先把A读出来，写到B块里面去。</li>
<li>如果这时候断电了，原来A的内容还在。这样做的好处就是可以保证数据的完整性，瞬间挂掉了容易恢复。</li>
</ol>
<h2 id="你还是回到CopyOnWriteArrayList上吧；你说的cow机制我了解了"><a href="#你还是回到CopyOnWriteArrayList上吧；你说的cow机制我了解了" class="headerlink" title="你还是回到CopyOnWriteArrayList上吧；你说的cow机制我了解了"></a>你还是回到CopyOnWriteArrayList上吧；你说的cow机制我了解了</h2><ol>
<li>额。CopyOnWriteArrayList是一个线程安全的List，底层是通过复制数组的方式来实现的。</li>
<li>要不我来简单说说它的add（）方法的实现吧</li>
<li>在add（）方法的实现里，首先他会加lock锁锁住然后会复制出一个新的数组，往新的数组里边add真正的元素最后把 array的指向改变为新的数组</li>
<li>get（）方法又或是size（）方法只是获取array所指向的数组的元素或者大小</li>
<li>可以发现的是， CopyOnWriteArrayList</li>
<li>跟文件系统的COW机制是很像的</li>
</ol>
<h2 id="那你能说说CopyOnWriteArrayList有什么缺点吗？"><a href="#那你能说说CopyOnWriteArrayList有什么缺点吗？" class="headerlink" title="那你能说说CopyOnWriteArrayList有什么缺点吗？"></a>那你能说说CopyOnWriteArrayList有什么缺点吗？</h2><ol>
<li>很显然， CopyOnWriteArrayList是很耗费内存的，每次set（）add（）都会复制一个数组出来</li>
<li>另外就是 Copy On WriteArrayList只能保证数据的最终一致性，不能保证数据的实时一致性。</li>
<li>假设两个线程，线程A去读 CopyOnWri取 teArrayList的数据，还没读完</li>
<li>现在线程B把这个List给清空了，线程A此时还是可以把剩余的数据给读出来。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>13、【对线面试官】Map</title>
    <url>/posts/f78aff48/</url>
    <content><![CDATA[<h1 id="13、【对线面试官】Map"><a href="#13、【对线面试官】Map" class="headerlink" title="13、【对线面试官】Map"></a>13、【对线面试官】Map</h1><h2 id="今天来讲讲Map吧，你对Map了解多少？就讲JDK1-8就好咯"><a href="#今天来讲讲Map吧，你对Map了解多少？就讲JDK1-8就好咯" class="headerlink" title="今天来讲讲Map吧，你对Map了解多少？就讲JDK1.8就好咯"></a>今天来讲讲Map吧，你对Map了解多少？就讲JDK1.8就好咯</h2><ul>
<li>Map在Java里边是一个接口，常见的实现类有HashMap、 LinkedHashMap、TreeMap和ConcurrentHashMap</li>
</ul>
<ol>
<li>在Java里边，哈希表的实现由数组+链表所组成</li>
<li>HashMap底层数据结构是数组+链表&#x2F;红黑树</li>
<li>LinkedHashMap底层数据结构是数组+链表+双向链表</li>
<li>TreeMap底层数据结构是红黑树</li>
<li>而ConcurrentHashMap底层数据结构也是数组+链表&#x2F;红黑树</li>
</ol>
<h2 id="我们先以HashMap开始吧，你能讲讲当你new一个HashMap的时候，会发生什么吗？"><a href="#我们先以HashMap开始吧，你能讲讲当你new一个HashMap的时候，会发生什么吗？" class="headerlink" title="我们先以HashMap开始吧，你能讲讲当你new一个HashMap的时候，会发生什么吗？"></a>我们先以HashMap开始吧，你能讲讲当你new一个HashMap的时候，会发生什么吗？</h2><ol>
<li>如果我们不指定，默认HashMap的大小为16，负载因子的大小为0.75</li>
<li>还有就是：HashMap的大小只能是2次幂的，假设你传一个10进去，实际上最终HashMap的大小是16，你传一个7进去，HashMap最终的大小是8，具体的实现在tableSizeFor可以看到。</li>
<li>我们把元素放进HashMap的时候，需要算出这个元素所在的位置（hash）</li>
<li>在HashMap里用的是位运算来代替取模，能够更加高效地算出该元素所在的位置</li>
<li>为什么HashMap的大小只能是2次幂，因为只有大小为2次幂时，才能合理用位运算替代取模。</li>
<li>而负载因子的大小决定着哈希表的扩容和哈希冲突。</li>
<li>比如现在我默认的HashMap大小为16，负载因子为0.75，这意味着数组最多只能放12个元素，一旦超过12个元素，则哈希表需要扩容</li>
<li>怎么算出是12呢？很简单，就是16*0.7 5。每次put元素进去的时候，都会检查HashMap的大小有没有超过这个阈值，如果有，则需要扩容。</li>
<li>鉴于上面的说法（HashMap的大小只能是2次幂），所以扩容的时候时候默认是扩原来的2倍</li>
<li>还有就是扩容这个操作肯定是耗时的，那能不能把负载因子调高一点，比如我要调至为1，那我的HashMap就等到16个元素的时候才扩容呢。</li>
<li>当然是可以的，但是不推荐。负载因子调高了，这意味着哈希冲突的概率会增高，哈希冲突概率增高，同样会耗时（因为查找的速度变慢了）</li>
</ol>
<h2 id="算了。我还想继续问下，在put元素的时候，传递的Key是怎么算哈希值的？"><a href="#算了。我还想继续问下，在put元素的时候，传递的Key是怎么算哈希值的？" class="headerlink" title="算了。我还想继续问下，在put元素的时候，传递的Key是怎么算哈希值的？"></a>算了。我还想继续问下，在put元素的时候，传递的Key是怎么算哈希值的？</h2><ol>
<li>实现就在hash方法上，可以发现的是，它是先算出正常的哈希值，然后与高16位做异或运算，产生最终的哈希值。</li>
<li>这样做的好处可以增加了随机性，减少了碰撞冲突的可能性。</li>
</ol>
<h2 id="你简单再说下put和get方法的实现吧"><a href="#你简单再说下put和get方法的实现吧" class="headerlink" title="你简单再说下put和get方法的实现吧"></a>你简单再说下put和get方法的实现吧</h2><ol>
<li>在put的时候，首先对key做hash运算，计算出该key所在的index。</li>
<li>如果没碰撞，直接放到数组中，如果碰撞了，需要判断目前数据结构是链表还是红黑树，根据不同的情况来进行插入。</li>
<li>假设key是相同的，则替换到原来的值。最后判断哈希表是否满了（当前哈希表大小*负载因子），如果满了，则扩容</li>
<li>在get的时候，还是对key做hash运算，计算出该key所在的index，然后判断是否有hash冲突</li>
<li>假设没有冲突直接返回，假设有冲突则判断当前数据结构是链表还是红黑树，分别从不同的数据结构中取出。</li>
</ol>
<h2 id="那在HashMap中是怎么判断一个元素是否相同的呢？"><a href="#那在HashMap中是怎么判断一个元素是否相同的呢？" class="headerlink" title="那在HashMap中是怎么判断一个元素是否相同的呢？"></a>那在HashMap中是怎么判断一个元素是否相同的呢？</h2><ol>
<li>首先会比较hash值，随后会用&#x3D;&#x3D;运算符和equals（）来判断该元素是否相同。</li>
<li>说白了就是：如果只有hash值相同，那说明该元素哈希冲突了，如果hash值和equals（）|| &#x3D;&#x3D;都相同，那说明该元素是同个。</li>
</ol>
<h2 id="你说HashMap的数据结构是数组-链表-x2F-红黑树，那什么情况拿下才会用到红黑树呢？"><a href="#你说HashMap的数据结构是数组-链表-x2F-红黑树，那什么情况拿下才会用到红黑树呢？" class="headerlink" title="你说HashMap的数据结构是数组+链表&#x2F;红黑树，那什么情况拿下才会用到红黑树呢？"></a>你说HashMap的数据结构是数组+链表&#x2F;红黑树，那什么情况拿下才会用到红黑树呢？</h2><ol>
<li>当数组的大小大于64且链表的大小大于8的时候才会将链表改为红黑树，当红黑树大小为6时，会退化为链表。</li>
<li>这里转红黑树退化为链表的操作主要出于查询和插入时对性能的考量。</li>
<li>链表查询时间复杂度O（N），插入时间复杂度O（1），红黑树查询和插入时间复杂度O（logN）</li>
</ol>
<h2 id="你在日常开始中LinkedHashMap用的多吗？"><a href="#你在日常开始中LinkedHashMap用的多吗？" class="headerlink" title="你在日常开始中LinkedHashMap用的多吗？"></a>你在日常开始中LinkedHashMap用的多吗？</h2><ol>
<li>在前面也提到了，LinkedHashMap底层结构是数组+链表+双向链表，实际上它继承了HashMap，在HashMap的基础上维护了一个双向链表</li>
<li>有了这个双向链表，我们的插入可以是有序的，这里的有序不是指大小有序而是插入有序</li>
<li>LinkedHashMap在遍历的时候实际用的是双向链表来遍历的，所以LinkedHashMap的大小不会影响到遍历的性能</li>
</ol>
<h2 id="那TreeMap呢？"><a href="#那TreeMap呢？" class="headerlink" title="那TreeMap呢？"></a>那TreeMap呢？</h2><ol>
<li>TreeMap在现实开发中用得也不多，Tre eMap的底层数据结构是红黑树</li>
<li>TreeMap的key不能为null（如果为null，那还怎么排序呢），TreeMap有序是通过Comparator来进行比较的，如果comparator为null，那么就使用自然顺序</li>
</ol>
<h2 id="再来讲讲线程安全的Map吧？-HashMap是线程安全的吗？"><a href="#再来讲讲线程安全的Map吧？-HashMap是线程安全的吗？" class="headerlink" title="再来讲讲线程安全的Map吧？ HashMap是线程安全的吗？"></a>再来讲讲线程安全的Map吧？ HashMap是线程安全的吗？</h2><ol>
<li>HashMap不是线程安全的，在多线程环境下，HashMap有可能会有数据丢失和获取不了最新数据的问题，比如说：线程Aput进去了，线程Bget不出来。</li>
<li>想要线程安全，一般使用ConcurrentHashMap</li>
<li>ConcurrentHashMap是线程安全的Map 实现类，它在juc包下的。</li>
<li>线程安全的Map实现类除了ConcurrentHashMap还有一个叫做Hashtable。</li>
<li>当然了，也可以使用Collections来包装出一个线程安全的Map。</li>
<li>但无论是Hashtable还是Collections包装出来的都比较低效（因为是直接在外层套synchronize），所以我们一般有线程安全问题考量的，都使用ConcurrentHashMap</li>
<li>ConcurrentHashMap的底层数据结构是数组+链表&#x2F;红黑树，它能支持高并发的访问和更新，是线程安全的。</li>
<li>ConcurrentHashMap通过在部分加锁和利用CAS算法来实现同步，在get的时候没有加锁，Node都用了volatile给修饰。</li>
<li>在扩容时，会给每个线程分配对应的区间，并且为了防止putVal导致数据不一致，会给线程的所负责的区间加锁</li>
</ol>
<h2 id="嗯，你可以给我讲讲JDK7和JDK8中HashMap和ConcurrentHashMap的区别吗？"><a href="#嗯，你可以给我讲讲JDK7和JDK8中HashMap和ConcurrentHashMap的区别吗？" class="headerlink" title="嗯，你可以给我讲讲JDK7和JDK8中HashMap和ConcurrentHashMap的区别吗？"></a>嗯，你可以给我讲讲JDK7和JDK8中HashMap和ConcurrentHashMap的区别吗？</h2><ol>
<li>我在学习的时候也看过JDK7的HashMap和ConcurrentHashMap，其实还是有很多不一样的地方</li>
<li>比如JDK7的HashMap在扩容时是头插法，在JDK8就变成了尾插法，在JDK7的HashMap还没有引入红黑树</li>
<li>ConcurrentHashMap在JDK7还是使用分段锁的方式来实现，而JDK8就又不一样了。但JDK7细节我大多数都忘了。</li>
<li>我就没用过JDK7的API，我想着现在最低应该也是用JDK8了吧？所以我就没去仔细看了。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>14、【对线面试官】SpringMVC</title>
    <url>/posts/c2bf7fb6/</url>
    <content><![CDATA[<h1 id="14、【对线面试官】SpringMVC"><a href="#14、【对线面试官】SpringMVC" class="headerlink" title="14、【对线面试官】SpringMVC"></a>14、【对线面试官】SpringMVC</h1><h2 id="今天要不来聊聊SpringMVC吧？"><a href="#今天要不来聊聊SpringMVC吧？" class="headerlink" title="今天要不来聊聊SpringMVC吧？"></a>今天要不来聊聊SpringMVC吧？</h2><ol>
<li>我先简单说下我对SpringMVC的理解哈</li>
<li>SpringMVC我觉得它是对Servlet的封装，屏蔽掉Servlet很多的细节卫</li>
<li>接下来我举几个例子</li>
<li>可能我们刚学Servlet的时候，要获取参数需要不断的getParameter</li>
<li>现在只要在SpringMVC方法定义对应的J avaBean，只要属性名与参数名一致，SpringMVC就可以帮我们实现「将参数封装到JavaBean」上了</li>
<li>又比如，以前使用Servlet 「上传文件」，需要处理各种细节，写一大堆处理的逻辑（还得导入对应的jar）</li>
<li>现在一个在SpringMVC的方法上定义出MultipartFile接口，又可以屏蔽掉上传文件的细节了。</li>
<li>例子还有很多，我就不赘述了。</li>
</ol>
<h2 id="既然你说SpringMVC是对Servlet的封装，你了解SpringMVC请求处理的流程吗？"><a href="#既然你说SpringMVC是对Servlet的封装，你了解SpringMVC请求处理的流程吗？" class="headerlink" title="既然你说SpringMVC是对Servlet的封装，你了解SpringMVC请求处理的流程吗？"></a>既然你说SpringMVC是对Servlet的封装，你了解SpringMVC请求处理的流程吗？</h2><ol>
<li>总体流程大概是这样的<ul>
<li>首先有个统一处理请求的入口</li>
<li>随后根据请求路径找到对应的映射器</li>
<li>找到处理请求的适配器</li>
<li>4）：拦截器前置处理</li>
<li>5）：真实处理请求（也就是调用真正的代码）</li>
<li>6）：视图解析器处理</li>
<li>7）：拦截器后置处理</li>
</ul>
</li>
</ol>
<h2 id="嗯，了解，可以再稍微深入点吗？"><a href="#嗯，了解，可以再稍微深入点吗？" class="headerlink" title="嗯，了解，可以再稍微深入点吗？"></a>嗯，了解，可以再稍微深入点吗？</h2><ol>
<li>统一的处理入口，对应SpringMVC下的源码是在DispatcherServlet下实现的</li>
<li>该对象在初始化就会把映射器、适配器、视图解析器、异常处理器、文件处理器等等给初始化掉</li>
<li>至于会初始化哪些具体实例，看下DispatcherServlet.properties就知道了，都配置在那了</li>
<li>所有的请求其实都会被doService方法处理，里边最主要就是调用doDispatch方法</li>
<li>通过doDispatch方法我们就可以看到整个SpringMVC处理的流程</li>
<li>查找映射器的时候实际就是找到「最佳匹配」的路径，具体方法实现我记得好像是在lookupHandlerMethod方法上</li>
<li>从源码可以看到「查找映射器」实际返回的是HandlerExecutionChain，里边有映射器Handler+拦截器List</li>
<li>前面提到的拦截器前置处理和后置处理就是用的HandlerExecutionChain中的拦截器List</li>
<li>获取得到HandlerExecutionChain后，就会去获取适配器，一般我们获取得到的就是RequestMappingHandlerAdapter</li>
<li>在代码里边可以看到的是，经常用到的@ResponseBody和@Requestbody的解析器</li>
<li>就会在初始化的时候加到参数解析器List中</li>
<li>得到适配器之后，就会执行拦截器前置处理</li>
<li>拦截器前置处理执行完后，就会调用适配器对象实例的hanlde方法执行真正的代码逻辑处理</li>
<li>核心的处理逻辑在invokeAndHandle方法中，会获取得到请求的参数并调用，处理返回值</li>
<li>参数的封装以及处理会被适配器的参数解析器进行处理，具体的处理逻辑取决于HttpMessageConverter的实例对象</li>
</ol>
<h2 id="嗯，了解了。要不你再压缩下关键的信息"><a href="#嗯，了解了。要不你再压缩下关键的信息" class="headerlink" title="嗯，了解了。要不你再压缩下关键的信息"></a>嗯，了解了。要不你再压缩下关键的信息</h2><ol>
<li><p>DispatcherServlet （入口）</p>
</li>
<li><p>DispatcherServlet.properties（会初始化的对象）</p>
</li>
<li><p>HandlerMapping （映射器，</p>
</li>
<li><p>HandlerExecutionChain（映射器最终实例+拦截器List）</p>
</li>
<li><p>HttpRequestHandlerAdapter（适配器</p>
</li>
<li><p>HttpMessageConverter（数据转换</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ERUrGo_20211029183808.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>15、【对线面试官】Spring基础</title>
    <url>/posts/51360fe0/</url>
    <content><![CDATA[<h1 id="15、【对线面试官】Spring基础"><a href="#15、【对线面试官】Spring基础" class="headerlink" title="15、【对线面试官】Spring基础"></a>15、【对线面试官】Spring基础</h1><h2 id="要不你来讲讲Spring的IOC和AOP你是怎么理解的呗？"><a href="#要不你来讲讲Spring的IOC和AOP你是怎么理解的呗？" class="headerlink" title="要不你来讲讲Spring的IOC和AOP你是怎么理解的呗？"></a>要不你来讲讲Spring的IOC和AOP你是怎么理解的呗？</h2><ol>
<li>我个人理解下：SpringIOC解决的是对象管理和对象依赖的问题。</li>
<li>本来是我们自己手动new出来的对象，现在则把对象交给Spring的IOC容器管理</li>
<li>IOC容器可以理解为一个对象工厂，我们都把该对象交给工厂，工厂管理这些对象的创建以及依赖关系</li>
<li>等我们需要用对象的时候，从工厂里边获取就好了</li>
</ol>
<h2 id="哦，你说的就是「控制反转」和「注入依赖」吧？"><a href="#哦，你说的就是「控制反转」和「注入依赖」吧？" class="headerlink" title="哦，你说的就是「控制反转」和「注入依赖」吧？"></a>哦，你说的就是「控制反转」和「注入依赖」吧？</h2><ol>
<li>我认为「控制反转」指的就是：把原有自己掌控的事交给别人去处理</li>
<li>它更多的是一种思想或者可以理解为设计模式</li>
<li>比如：本来由我们自己new出来的对象，现在交由IOC容器，把对象的控制权交给它方了.</li>
<li>而「依赖注入」在我的理解下，它其实是「控制反转」的实现方式</li>
<li>对象无需自行创建或者管理它的依赖关系，依赖关系将被「自动注入」到需要它们的对象当中去</li>
</ol>
<h2 id="嗯，那我想问问，用SpringIOC有什么好处吗？"><a href="#嗯，那我想问问，用SpringIOC有什么好处吗？" class="headerlink" title="嗯，那我想问问，用SpringIOC有什么好处吗？"></a>嗯，那我想问问，用SpringIOC有什么好处吗？</h2><h2 id="或者换个问法：本来我可以new出来的对象，为什么我要交由Spring-IOC容器管理呢？"><a href="#或者换个问法：本来我可以new出来的对象，为什么我要交由Spring-IOC容器管理呢？" class="headerlink" title="或者换个问法：本来我可以new出来的对象，为什么我要交由Spring IOC容器管理呢？"></a>或者换个问法：本来我可以new出来的对象，为什么我要交由Spring IOC容器管理呢？</h2><ol>
<li>主要的好处在于「将对象集中统一管理」并且「降低耦合度」</li>
<li>如果面试官理解了「工厂模式」，那就知道为什么我们不直接new对象</li>
<li>要说理由的话，可以举很多例子，比如说：</li>
<li>我用SpringIOC可以方便单元测试、对象创建复杂、对象依赖复杂、单例等等的，什么都可以交给Spring IOC</li>
<li>理论上自己new出来的都可以解决上面的问题，Spring在各种场景组合下有可能不是最优解</li>
<li>但new出来的你要自己管理，可能你得自己写工厂，得实现一大套的东西才能满足需求</li>
<li>写着写着有可能还是Spring的那一套</li>
<li>但现在Spring现在已经帮你实现了啊！</li>
<li>如果项目里的对象都是就new下就完事了，没有多个实现类，那没事，不用Spring也没啥问题</li>
<li>并且Spring核心不仅仅IOC啊，除了把对象创建出来，还有一整套的Bean生命周期管理</li>
<li>比如说你要实现对象增强，AOP不就有了吗？不然你还得自己创建代理</li>
</ol>
<h2 id="那你继续来聊下Spring-AOP呗？"><a href="#那你继续来聊下Spring-AOP呗？" class="headerlink" title="那你继续来聊下Spring AOP呗？"></a>那你继续来聊下Spring AOP呗？</h2><ol>
<li>Spring AOP解决的是非业务代码抽取的问题</li>
<li>AOP底层的技术是动态代理，在Spring 内实现依赖的是BeanPostProcessor</li>
<li>比如我们需要在方法上注入些「重复性」的非业务代码，就可以利用Spring AOP</li>
<li>所谓的「面向切面编程」在我理解下其实就是在方法前后增加非业务代码</li>
</ol>
<h2 id="那你在工作中实际用到过AOP去优化你的代码吗？"><a href="#那你在工作中实际用到过AOP去优化你的代码吗？" class="headerlink" title="那你在工作中实际用到过AOP去优化你的代码吗？"></a>那你在工作中实际用到过AOP去优化你的代码吗？</h2><ol>
<li>·有的。当时我用AOP来对我们公司现有的监控客户端进行封装</li>
<li>一个系统离不开监控，监控基本的指标有QPS、RT、ERROR等等</li>
<li>对外暴露的监控客户端只能在代码里写对应的上报信息（灵活，但会与业务代码掺杂在一起）</li>
<li>于是我利用注解+AOP的方式封装了一把，只要方法&#x2F;类上带有我自定义的注解</li>
<li>方法被调用时，就会上报AQS、RT等信息实现了非业务代码与业务代码分离的效果</li>
</ol>
<h2 id="了解，你们项目一般是怎么把对象交给IOC容器管理的？"><a href="#了解，你们项目一般是怎么把对象交给IOC容器管理的？" class="headerlink" title="了解，你们项目一般是怎么把对象交给IOC容器管理的？"></a>了解，你们项目一般是怎么把对象交给IOC容器管理的？</h2><h2 id="换个问法：一般是怎么定义Bean的？"><a href="#换个问法：一般是怎么定义Bean的？" class="headerlink" title="换个问法：一般是怎么定义Bean的？"></a>换个问法：一般是怎么定义Bean的？</h2><ol>
<li>Spring提供了4种方式，分别是：<br>1）：注解2）：XML3）：JavaConfig 4）：基于Groovy 的DSL配置</li>
<li>一般项目我们用注解或XML比较多，少部分用JavaConfig</li>
<li>日常写业务代码一般用注解来定义各种对象，责任链这种一般配置在XML「注解」解决不了的就用JavaConfig</li>
<li>总体而言，还是得看项目的代码风格吧</li>
<li>反正就是定义元数据，能给到Spring解析就好了</li>
</ol>
<h2 id="要不来聊聊你使用Spring的感受？"><a href="#要不来聊聊你使用Spring的感受？" class="headerlink" title="要不来聊聊你使用Spring的感受？"></a>要不来聊聊你使用Spring的感受？</h2><ol>
<li>当我还是初学Spring的时候，我觉得Spring很麻烦，需要有一大堆的配置信息才能跑起来</li>
<li>光是搭建环境就需要耗费我好长的时间</li>
<li>毕竟版本冲突，依赖冲突什么的就可能个下午就过去了</li>
<li>但毕竟一个系统环境只搭一次嘛，所以还好（后来用上了SpringBoot这又更方便了）</li>
<li>回来，IOC和AOP在工作用的时候还是很爽的</li>
<li>毕竟搞个注解什么的，配置下就可以把对象交给Spring管理了</li>
<li>配合Spring的生态，@Transactional注解什么的，都好用得飞起</li>
<li>不过，Spring给我们封装得太好了</li>
<li>经常就会有奇奇怪怪的”bug”出现，也踩过很多的坑了</li>
<li>Bean经常没办法创建成功，导致项目启动失败..</li>
<li>对象的循环依赖问题.</li>
<li>同一个接口，多个实现，识别不出我要创建哪个对象.</li>
<li>为什么catch了异常，Spring事务为什么还会自动回滚..</li>
<li>等等等</li>
</ol>
<h2 id="循环以来"><a href="#循环以来" class="headerlink" title="循环以来"></a>循环以来</h2><ol>
<li><p>到这里，Spring整个解决循环依赖问题的实现思路已经比较清楚了。对于整体过程，读者朋友只要理解两点：</p>
<ul>
<li>Spring是通过递归的方式获取目标bean及其所依赖的bean的；</li>
<li>Spring实例化一个bean的时候，是分两步进行的，首先实例化目标bean，然后为其注入属性。</li>
</ul>
<p>结合这两点，也就是说，Spring在实例化一个bean的时候，是首先递归的实例化其所依赖的所有bean，直到某个bean没有依赖其他bean，此时就会将该实例返回，然后反递归的将获取到的bean设置为各个上层bean的属性的。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>16、【对线面试官】SpringBean生命周期</title>
    <url>/posts/32e97c2c/</url>
    <content><![CDATA[<h1 id="16、【对线面试官】SpringBean生命周期"><a href="#16、【对线面试官】SpringBean生命周期" class="headerlink" title="16、【对线面试官】SpringBean生命周期"></a>16、【对线面试官】SpringBean生命周期</h1><h2 id="今天要不来聊聊Spring对Bean的生命周期管理？"><a href="#今天要不来聊聊Spring对Bean的生命周期管理？" class="headerlink" title="今天要不来聊聊Spring对Bean的生命周期管理？"></a>今天要不来聊聊Spring对Bean的生命周期管理？</h2><ol>
<li>嗯，没问题的。</li>
<li>很早之前我就看过源码，但Spring源码的实现类都太长了</li>
<li>我也记不得很清楚某些实现类的名字</li>
<li>要不我大概来说下流程？</li>
<li>首先要知道的是：普通Java对象和Spring.所管理的Bean实例化的过程是有些区别的<br>在普通Java环境下创建对象简要的步骤可以分为以下几步：<ul>
<li>java源码被编译为被编译为class文件</li>
<li>等到类需要被初始化时（比如说new、反射等）</li>
<li>class文件被虚拟机通过类加载器加载到JVM</li>
<li>初始化对象供我们使用</li>
</ul>
</li>
<li>简单来说，可以理解为它是用Class对象作为「模板」进而创建出具体的实例</li>
<li>而Spring所管理的Bean不同的是，除了Class.对象之外，还会使用BeanDefinition的实例来描述对象的信息</li>
<li>比如说，我们可以在Spring.所管理的Bean有一系列的描述：@Scope、@Lazy、@DependsOn等等</li>
<li>可以理解为：Class只描述了类的信息，而BeanDefinition：描述了对象的信息</li>
</ol>
<h2 id="你就是想告诉我，Spring有BeanDefinition来存储着我们日常给Spring-Bean定义的元数据（-Scope、-Lazy、-DependsOn等等），对吧？"><a href="#你就是想告诉我，Spring有BeanDefinition来存储着我们日常给Spring-Bean定义的元数据（-Scope、-Lazy、-DependsOn等等），对吧？" class="headerlink" title="你就是想告诉我，Spring有BeanDefinition来存储着我们日常给Spring Bean定义的元数据（@Scope、@Lazy、@DependsOn等等），对吧？"></a>你就是想告诉我，Spring有BeanDefinition来存储着我们日常给Spring Bean定义的元数据（@Scope、@Lazy、@DependsOn等等），对吧？</h2><ol>
<li>Spring在启动的时候需要「扫描」在XML&#x2F;注解&#x2F;JavaConfig中需要被Spring管理的Bean信息</li>
<li>随后，会将这些信息封装成BeanDefinition，最后会把这些信息放到一个beanDefinitionMap中</li>
<li>我记得这个Map的key应该是beanName，value则是BeanDefinition.对象</li>
<li>到这里其实就是把定义的元数据加载起来，目前真实对象还没实例化</li>
<li>接着会遍历这个beanDefinitionMap，执行BeanFactoryPostProcessor这个Bean工厂后置处理器的逻辑</li>
<li>比如说，我们平时定义的占位符信息，就是通过BeanFactoryPostProcessor的子类PropertyPlaceholderConfigurer进行注入进去</li>
<li>当然了，这里我们也可以自定义BeanFactoryPostProcessor来对我们定义好的Bean元数据进行获取或者修改。只是一般我们不会这样干，实际上也很有少的使用场景。</li>
<li>BeanFactoryPostProcessor&#x2F;后置处理器执行完了以后，就到了实例化对象啦</li>
<li>在Spring.里边是通过反射来实现的，一般情况下会通过反射选择合适的构造器来把对象实例化</li>
<li>但这里把对象实例化，只是把对象给创建出来，而对象具体的属性是还没注入的。</li>
<li>比如我的对象是UserService，而UserService对象依赖着SendService对象，这时候的SendService还是null的</li>
<li>所以，下一步就是把对象的相关属性给注入</li>
<li>相关属性注入完之后，往下接着就是初始化的工作了</li>
<li>首先判断该Bean是否实现了Aware相关的接口，如果存在则填充相关的资源<br>比如我这边在项目用到的：我希望通过代码程序的方式去获取指定的Spring Bean</li>
<li>我们这边会抽取成一个工具类，去实现ApplicationContextAware接口，来获取ApplicationContexti对象进而获取Spring Bean</li>
<li>Aware相关的接口处理完之后，就会到BeanPostProcessor后置处理器啦</li>
<li>BeanPostProcessor后置处理器有两个方法，一个是before，一个是after。<br>（那肯定是before先执行、after）后执行）</li>
<li>这个BeanPostProcessor）后置处理器是AOP实现的关键<br>关键子类AnnotationAwareAspectJAutoProxyCreator</li>
<li>所以，执行完Aware相关的接口就会执行，BeanPostProcessor相关子类的before方法。</li>
<li>BeanPostProcessor相关子类的before方法执行完，则执行init相关的方法，比如说@PostConstruct、实现了InitializingBean接口、定义的init-method方法</li>
<li>当时我还去官网去看他们的被调用「执行顺序」分别是：@PostConstruct、实现了InitializingBean：接口以及init-nethod方法</li>
<li>这些都是Spring：给我们的「扩展」，像@PostConstruct我就经常用到</li>
<li>比如说：对象实例化后，我要做些初始化的相关工作或者就启个线程去Kafka拉取数据</li>
<li>等到init方法执行完之后，就会执行BeanPostProcessor的after方法</li>
<li>基本重要的流程已经走完了，我们就可以获取到对象去使用了</li>
<li>销毁的时候就看有没有配置相关的destroy方法，执行就完事了</li>
</ol>
<h2 id="你看过Spring：是怎么解决循环依赖的吗？如果现在有个A对象，它的属性是B对象，而B对象的属性也是A对象说白了就是A依赖B，而B又依赖A，Spring是怎么做的？"><a href="#你看过Spring：是怎么解决循环依赖的吗？如果现在有个A对象，它的属性是B对象，而B对象的属性也是A对象说白了就是A依赖B，而B又依赖A，Spring是怎么做的？" class="headerlink" title="你看过Spring：是怎么解决循环依赖的吗？如果现在有个A对象，它的属性是B对象，而B对象的属性也是A对象说白了就是A依赖B，而B又依赖A，Spring是怎么做的？"></a>你看过Spring：是怎么解决循环依赖的吗？如果现在有个A对象，它的属性是B对象，而B对象的属性也是A对象说白了就是A依赖B，而B又依赖A，Spring是怎么做的？</h2><ol>
<li>从上面我们可以知道，对象属性的注入在对象实例化之后的嘛。</li>
<li>它的大致过程是这样的：首先A对象实例化，然后对属性进行注入，发现依赖B对象<br>B对象此时还没创建出来，所以转头去实例化B对象</li>
<li>B对象实例化之后，发现需要依赖A对象，那A对象已经实例化了嘛，所以B对<br>象最终能完成创建</li>
<li>B对象返回到A对象的属性注入的方法上，A对象最终完成创建。这就是大致的过程。</li>
</ol>
<h2 id="哦？听起来你还会原理哦？"><a href="#哦？听起来你还会原理哦？" class="headerlink" title="哦？听起来你还会原理哦？"></a>哦？听起来你还会原理哦？</h2><ol>
<li>至于原理，其实就是用到了三级的缓存</li>
<li>所谓的三级缓存其实就是三个Map.…首先明确一定，我对这里的三级缓存定义是这样的：<br>singletonObjects（一级，日常实际获取Bean的地方）；</li>
<li>earlySingletonObjects（二级，已实例化，但还没进行属性注入，由三级缓存放进来）；</li>
<li>singletonFactories（三级，Value：是一个对象工厂）；</li>
<li>再回到刚才讲述的过程中，A对象实例化之后，属性注入之前，其实会把A对象放入三级缓存中</li>
<li>key是BeanName，Value：是ObjectFactory</li>
<li>等到A对象属性注入时，发现依赖B，又去实例化B时</li>
<li>B属性注入需要去获取A对象，这里就是从三级缓存里拿出ObjectFactory，从ObjectFactory得到对应的Bean（就是对象A)</li>
<li>把三级缓存的A记录给干掉，然后放到二级缓存中</li>
<li>显然，二级缓存存储的key是BeanName，value就是Bean（这里的Bean还没做完属性注入相关的工作）</li>
<li>等到完全初始化之后，就会把二级缓存给remove掉，塞到一级缓存中</li>
<li>我们自己去getBean的时候，实际上拿到的是一级缓存的</li>
<li>大致的过程就是这样</li>
</ol>
<h2 id="那我想问一下，为什么是三级缓存？"><a href="#那我想问一下，为什么是三级缓存？" class="headerlink" title="那我想问一下，为什么是三级缓存？"></a>那我想问一下，为什么是三级缓存？</h2><ol>
<li>首先从第三级缓存说起（就是key是BeanName，Value为ObjectFactory）</li>
<li>我们的对象是单例的，有可能A对象依赖的B对象是有AOP的（B对象需要代理）</li>
<li>假设没有第三级缓存，只有第二级缓存（Value存对象，而不是工厂对象）</li>
<li>那如果有AOP的情况下，岂不是在存入第二级缓存之前都需要先去做AOP代理？这不合适嘛</li>
<li>这里肯定是需要考虑代理的情况的，比如A对象是一个被AOP增量的对象，B依赖A时，得到的A肯定是代理对象的</li>
<li>所以，三级缓存的Value是ObjectFactory，可以从里边拿到代理对象</li>
<li>而二级缓存存在的必要就是为了性能，从三级缓存的工厂里创建出对象，再扔到二级缓存（这样就不用每次都要从工厂里拿）</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li><p>首先是Spring Bean的生命周期过程，Sprng使用BeanDefinition：来装载着我们给Bean定义的元数据</p>
</li>
<li><p>实例化Bean的时候会遍历BeanDefinitionMap</p>
</li>
<li><p>Springl的Bean实例化和属性赋值是分开两步来做的</p>
</li>
<li><p>在Spring Beanl的生命周期，Spring预留了很多的hook给我们去扩展</p>
<p>1）：Bean实例化之前有BeanFactoryPostProcessor<br>2）：Bean实例化之后，初始化时，有相关的Aware接口供我们去拿到Context相关信息<br>3）：环绕着初始化阶段，有BeanPostProcessor（AOP的关键）<br>4）：在初始化阶段，有各种的init方法供我们去自定义</p>
</li>
<li><p>而循环依赖的解决主要通过三级的缓存</p>
</li>
<li><p>在实例化后，会把自己扔到三级缓存（此时的key是BeanName，Value是ObjectFactory)</p>
</li>
<li><p>在注入属性时，发现需要依赖B，也会走B的实例化过程，B属性注入依赖A，从三级缓存找到A</p>
</li>
<li><p>删掉三级缓存，放到二级缓存</p>
</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/q5B8nQ_20211228115227.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ldYlbE_20211228115337.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/czgjnh_20211228115425.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>17、【对线面试官】Redis基础</title>
    <url>/posts/36f701ea/</url>
    <content><![CDATA[<h1 id="17、【对线面试官】Redis基础"><a href="#17、【对线面试官】Redis基础" class="headerlink" title="17、【对线面试官】Redis基础"></a>17、【对线面试官】Redis基础</h1><h2 id="你先来讲讲为什么要用Redis吧？"><a href="#你先来讲讲为什么要用Redis吧？" class="headerlink" title="你先来讲讲为什么要用Redis吧？"></a>你先来讲讲为什么要用Redis吧？</h2><ol>
<li>我个人是这样理解的：无论Redis也好、MySQL也好、HDFS也好、HBase也好</li>
<li>他们都是存储数据的地方</li>
<li>因为它们的设计理念的不同，我们会根据不同的应用场景使用不同的存储</li>
<li>像Redis一般我们会把它用作于缓存</li>
<li>当然啦，日常有的应用场景比较简单，用个HashMap也能解决很多的问题了，没必要上Redis</li>
<li>这就好比，有的单机限流可能应对某些场景就够用了，也没必要说一定要上分布式限流把系统搞得复杂</li>
</ol>
<h2 id="那你在项目里有用到Redis吗？怎么用的？"><a href="#那你在项目里有用到Redis吗？怎么用的？" class="headerlink" title="那你在项目里有用到Redis吗？怎么用的？"></a>那你在项目里有用到Redis吗？怎么用的？</h2><ol>
<li>Redis肯定是用到的，我负责的项目几乎都会有Redisl的踪影</li>
<li>我举几个我这边项目用的案例呗？</li>
<li>我这边负责消息管理平台，简单来说就是发消息的</li>
<li>那发完消息肯定我们是得知道消息有没有下发成功的，是吧？</li>
<li>于是我们系统有一套完整的链路追踪体系</li>
<li>其中实时的数据我们就用Redis来进行存储，有实时肯定就会有离线的嘛（离线的数据我们是存储到Hive的）</li>
<li>对消息进行实时链路追踪，我这边就用了Redis好几种的数据结构，分别有Set、List和Hash</li>
<li>我再稍微铺垫下链路追踪的背景吧~</li>
<li>要在消息管理平台发消息，首先得在后台新建一个「模板」，有模板自然会有一个模板ID</li>
<li>对模板D进行扩展，比如说加上日期和固定的业务参数，形成的ID可以唯一标识某个模板的下发链路</li>
<li>在系统上，我这边叫它为UMPID</li>
<li>在发送入口处会对所有需要下发的消息打上UMPID，然后在关键链路上打上对应的点位</li>
<li>接下来的工作就是清洗出统一的模型，然后根据不同维度进行处理啦。比如说：</li>
<li>我要看某一天下发的所有模板有哪些，那只要我把清洗出来后数据的，将对应UMPID扔到了Set就好了</li>
<li>我要看某一个模板的消息下发的整体链路情况，那我以UMPID为Key，Value是Hash结构，Key是state，Value则是人数</li>
<li>这里的state我们在下发的过程中打的关键点位，比如接收到消息打个51，消息被去重了打个61，消息成功下发了打个81…</li>
<li>以UMPID为Key，Hash结构的Key（State）进行不断的累加，就可以实现某一个模板的消息下发的整体链路情况</li>
<li>我要看某个用户当天下发的消息有哪些，以及这些消息的整体链路是如何。</li>
<li>这边我用的是List结构，Key是userld，Value则是UMPID+state（关键点位）+processTime（处理时间）</li>
</ol>
<ul>
<li>简单来说，就是通过Redis丰富的数据结构来实现对下发消息多个维度的统计</li>
<li>不同的应用场景选择不同的数据结构，再等到透出做处理的时候，就变得十分简单了</li>
<li>消息下发过程中去重或者一般正常的场景就直接Key-Value就能符合需求了</li>
<li>像bitmap、hyperloglogs、sortset、steam等等这些数据结构在我所负责的项目用得是真不多</li>
<li>要是我有机会去到贵公司，贵公司有相关的应用场景，我相信我也很快就能掌握</li>
<li>这些数据结构底层都由对应的object来支撑着，objecti记录对应的「编码」</li>
<li>其实就是会根据key-value存储的数量或者长度来使用选择不同的底层数据结构实现</li>
<li>比如说：ziplist压缩列表这个底层数据结构有可能上层的实现是list、hash和sortset</li>
<li>Hash结构的底层数据结构可能是hash和ziplist</li>
<li>在节省内存和性能的考量之中切换,Redis还是有点屌的啊。</li>
</ul>
<h2 id="就你上面那个实时链路场景，可以用其他的存储替代吗？"><a href="#就你上面那个实时链路场景，可以用其他的存储替代吗？" class="headerlink" title="就你上面那个实时链路场景，可以用其他的存储替代吗？"></a>就你上面那个实时链路场景，可以用其他的存储替代吗？</h2><ol>
<li>嗯，理论上是可以的（或许可以尝试用HBase），但总体来说没这么好吧</li>
<li>因为Redis拥有丰富的数据结构，在透出的时候，处理会非常的方便。</li>
<li>如果不用Redis的话，还得做很多解析的工作</li>
<li>并且，我那场景的并发还是相当大的（就一条消息发送，可能就产生10条记录）</li>
<li>监控峰值命令处理数会去到20K+QPS，当然了，这场景我肯定用了Pipeline的（不然处理会慢很多）</li>
<li>综合上面并发量和实时性以及数据结构，用Redis：是一个比较好的选择。</li>
</ol>
<h2 id="你觉得为什么Redis可以这么快？"><a href="#你觉得为什么Redis可以这么快？" class="headerlink" title="你觉得为什么Redis可以这么快？"></a>你觉得为什么Redis可以这么快？</h2><ol>
<li>首先，它是纯内存操作，内存本身就很快</li>
<li>其次，它是单线程的，Redis服务器核心是基于非阻塞的O多路复用机制，单线程避免了多线程的频繁上下文切换问题</li>
<li>至于这个单线程，其实官网也有过说明（：表示使用Redis往往的瓶颈在于内与和网络，而不在于CPU</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>18、【对线面试官】Redis持久化</title>
    <url>/posts/eb97ef3e/</url>
    <content><![CDATA[<h1 id="18、【对线面试官】Redis持久化"><a href="#18、【对线面试官】Redis持久化" class="headerlink" title="18、【对线面试官】Redis持久化"></a>18、【对线面试官】Redis持久化</h1><h2 id="嗯，开始吧，今天要不来聊聊Redisl的持久化机制吧？"><a href="#嗯，开始吧，今天要不来聊聊Redisl的持久化机制吧？" class="headerlink" title="嗯，开始吧，今天要不来聊聊Redisl的持久化机制吧？"></a>嗯，开始吧，今天要不来聊聊Redisl的持久化机制吧？</h2><ol>
<li><p>在上一次面试已经说过了Redis：是基于内存的</p>
</li>
<li><p>假设我们不做任何操作，只要Redis服务器重启（或者中途故障挂掉了），那内存的数据就会没掉</p>
</li>
<li><p>所以Redis：提供了持久化机制给我们用，分别是RDB和AOF</p>
<p>1）RDB指的就是：根据我们自己配置的时间或者手动去执行BGSAVE或SAVE命令，Redisi就会去生成RDB文件</p>
<p>2）这个RDB文件实际上就是一个经过压缩的二进制文件，Redis可以通过这个文件在启动的时候来还原我们的数据</p>
<p>1）而AOF则是把Redis服务器接收到的所有写命令都记录到日志中</p>
<p>2）Redis重跑一遍这个记录下的日志文件，就相当于还原了数据</p>
</li>
</ol>
<h2 id="那我就想问了，你上次不是说Redis是单线程吗？那比如你说的RDB，它会执行SAVE或BESAVE命令，生成文件。那不是非常耗时的吗，那如果只有一个线程处理，那其他的请求不就得等了？"><a href="#那我就想问了，你上次不是说Redis是单线程吗？那比如你说的RDB，它会执行SAVE或BESAVE命令，生成文件。那不是非常耗时的吗，那如果只有一个线程处理，那其他的请求不就得等了？" class="headerlink" title="那我就想问了，你上次不是说Redis是单线程吗？那比如你说的RDB，它会执行SAVE或BESAVE命令，生成文件。那不是非常耗时的吗，那如果只有一个线程处理，那其他的请求不就得等了？"></a>那我就想问了，你上次不是说Redis是单线程吗？那比如你说的RDB，它会执行SAVE或BESAVE命令，生成文件。那不是非常耗时的吗，那如果只有一个线程处理，那其他的请求不就得等了？</h2><ol>
<li>嗯，没错，Redis是单线程的。</li>
<li>以RDB持久化的过程为例，假设我们在配置上是定时去执行RDB存储</li>
<li>Redis有自己的一套事件处理机制，主要处理文件事件（命令请求和应答等等）和时间事件（RDB定时持久化、清理过期的Key等的）</li>
<li>所以，定时的RDB实际上就是一个时间事件</li>
<li>线程不停地轮询就绪的事件，发现RDB的事件可执行时，则调用BGSAVE命令</li>
<li>而BGSAVE命令实际上会fork出一个子进程来进行完成持久化（生成RDB文件）</li>
<li>在fork的过程中，父进程（主线程）肯定是阻塞的。</li>
<li>但fork完之后，是fork出来的子进程去完成持久化。处理请求的进程该干嘛的就干嘛</li>
<li>所以说啊，Redis：是单线程，理解是没错的，但没说人家不能fork进程来处理事情。</li>
<li>还有就是，其实Redis在较新的版本中，有些地方都使用了多线程来进行处理</li>
<li>比如说，一些删除的操作（UNLINK、FLUSHALL ASYNC等等）还有Redis6.x之后对网络数据的解析都用了多线程处理了。</li>
<li>只不过，核心的处理命令请求和响应还是单线程。</li>
</ol>
<h2 id="那AOF呢？AOF不是也要写文件吗？难道也是fork了个子进程去做的？"><a href="#那AOF呢？AOF不是也要写文件吗？难道也是fork了个子进程去做的？" class="headerlink" title="那AOF呢？AOF不是也要写文件吗？难道也是fork了个子进程去做的？"></a>那AOF呢？AOF不是也要写文件吗？难道也是fork了个子进程去做的？</h2><ol>
<li>emm，不是的。AOF是在命令执行完之后，把命令写在buffer缓冲区的（直接追加写）</li>
<li>那想要持久化，肯定得存盘嘛。Redis：提供了几种策略供我们选择什么时候把缓冲区的数据写到磁盘</li>
<li>我记得好像有：每秒一次&#x2F;每条命令都执行从不存盘；一般我们会选每秒一次</li>
<li>Redis会启一个线程去刷盘，也不是用主线程去干的</li>
</ol>
<h2 id="那如果把执行过的命令都存起来；等启动的时候是可以再把这些写命令再执行一遍，达到恢复数据的效果；这样会有什么样的问题吗？"><a href="#那如果把执行过的命令都存起来；等启动的时候是可以再把这些写命令再执行一遍，达到恢复数据的效果；这样会有什么样的问题吗？" class="headerlink" title="那如果把执行过的命令都存起来；等启动的时候是可以再把这些写命令再执行一遍，达到恢复数据的效果；这样会有什么样的问题吗？"></a>那如果把执行过的命令都存起来；等启动的时候是可以再把这些写命令再执行一遍，达到恢复数据的效果；这样会有什么样的问题吗？</h2><ol>
<li>嗯，问题就是，如果这些写入磁盘的「命令集合」不做任何处理，那该「命令集合」就会一直膨胀</li>
<li>其实就是该文件会变得非常大</li>
<li>Redis当然也考虑了这一点，它会fork个子进程会对「原始」命令集合进行重写</li>
<li>说白了就是会压缩，压缩完了之后只要替换原始文件就好了</li>
</ol>
<h2 id="那我又想问了，既然它是fork一个进程来对AOF进行重写的；前面你也提到了再fork时，主进程是阻塞的，但fork后，主进程会继续接收命令；你是说重写完（压缩）会进行文件覆盖；那这样不会丢数据吗？毕竟主进程在fork之后是一直会接收命令的"><a href="#那我又想问了，既然它是fork一个进程来对AOF进行重写的；前面你也提到了再fork时，主进程是阻塞的，但fork后，主进程会继续接收命令；你是说重写完（压缩）会进行文件覆盖；那这样不会丢数据吗？毕竟主进程在fork之后是一直会接收命令的" class="headerlink" title="那我又想问了，既然它是fork一个进程来对AOF进行重写的；前面你也提到了再fork时，主进程是阻塞的，但fork后，主进程会继续接收命令；你是说重写完（压缩）会进行文件覆盖；那这样不会丢数据吗？毕竟主进程在fork之后是一直会接收命令的"></a>那我又想问了，既然它是fork一个进程来对AOF进行重写的；前面你也提到了再fork时，主进程是阻塞的，但fork后，主进程会继续接收命令；你是说重写完（压缩）会进行文件覆盖；那这样不会丢数据吗？毕竟主进程在fork之后是一直会接收命令的</h2><ol>
<li>其实做法很简单啊，在fork子进程之后，把新接收到命令再写到另一个缓冲区不就好了吗</li>
</ol>
<h2 id="那AOF和RDB用哪一个呢？"><a href="#那AOF和RDB用哪一个呢？" class="headerlink" title="那AOF和RDB用哪一个呢？"></a>那AOF和RDB用哪一个呢？</h2><ol>
<li>主要是看业务场景吧，我们这边是基于Redis使用了一套开源的key-value存储</li>
<li>使用Redis前，首先要去新增实例，在新增时会让你选择对应的使用场景</li>
<li>就是会让你通过不同的应用场景进行配置选择</li>
<li>比如说，业务上是允许重启时部分数据丢失的，那RDB就够用了</li>
<li>RDB在启动的时候恢复数据会比AOF快很多</li>
<li>在Redis4.0以后也支持了AOF和RDB混合</li>
<li>至于AOF的话，官网是不建议仅仅只使用AOF的，如果对数据丢失容忍度是有要求的，建议是开启AOF+RDB一起用</li>
<li>总的来说，不同的场景使用不同的持久化策略吧</li>
<li>我们公司也是不建议把Redis当做存储去使用的（毕竟没有事务保证，也还是可能导致数据丢失）</li>
</ol>
<h2 id="顺便我想问下，假如Redisl的内存满了，但业务还在写数据，会怎么样？"><a href="#顺便我想问下，假如Redisl的内存满了，但业务还在写数据，会怎么样？" class="headerlink" title="顺便我想问下，假如Redisl的内存满了，但业务还在写数据，会怎么样？"></a>顺便我想问下，假如Redisl的内存满了，但业务还在写数据，会怎么样？</h2><ol>
<li>嗯，这个问题我也遇到过</li>
<li>一般来说，我们会淘汰那些「不活跃」的数据，然后把新的数据写进去</li>
<li>更多情况下，还是做好对应的监控和容量的考量吧。等容量达到阈值的时候，及时发现和扩容</li>
</ol>
<h2 id="那要不来讲讲扩容和Redisl的架构吧？"><a href="#那要不来讲讲扩容和Redisl的架构吧？" class="headerlink" title="那要不来讲讲扩容和Redisl的架构吧？"></a>那要不来讲讲扩容和Redisl的架构吧？</h2><p>下次吧</p>
<h2 id="那要不来讲讲扩容和Redisl的架构吧？-1"><a href="#那要不来讲讲扩容和Redisl的架构吧？-1" class="headerlink" title="那要不来讲讲扩容和Redisl的架构吧？"></a>那要不来讲讲扩容和Redisl的架构吧？</h2><ol>
<li>Redis的官网啊，看了这么多技术官网，我觉得Redis的官网弄得是真不错</li>
<li>《Redis设计与实现》这本书也挺不错的</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>19、【对线面试官】kafka基础</title>
    <url>/posts/49c930c7/</url>
    <content><![CDATA[<h1 id="19、【对线面试官】kafka基础"><a href="#19、【对线面试官】kafka基础" class="headerlink" title="19、【对线面试官】kafka基础"></a>19、【对线面试官】kafka基础</h1><h2 id="今天要不来聊聊消息队列吧？我看你项目不少地方都写到Kafka了-你简单说明下你使用Kafka的场景吧"><a href="#今天要不来聊聊消息队列吧？我看你项目不少地方都写到Kafka了-你简单说明下你使用Kafka的场景吧" class="headerlink" title="今天要不来聊聊消息队列吧？我看你项目不少地方都写到Kafka了.你简单说明下你使用Kafka的场景吧"></a>今天要不来聊聊消息队列吧？我看你项目不少地方都写到Kafka了.你简单说明下你使用Kafka的场景吧</h2><ol>
<li><p>使用消息队列的目的总的来说可以有三种情况：解耦、异步和削峰</p>
</li>
<li><p>比如举我项目的例子吧，我现在维护一个消息管理平台系统，对外提供发送接口给各个业务方调用</p>
</li>
<li><p>他们调用接口之后，实际上『不是同步』下发了消息。</p>
</li>
<li><p>在接口处理层只是把该条消息放到了消息队列上，随后就直接返回结果给接口调用者了。</p>
</li>
<li><p>这样的好处就是：</p>
<p>1）接口的吞吐量会大幅度提高（因为未做真正实际调用，接口RT会非常低）【异步】</p>
<p>2）即便有大批量的消息调用接口都不会让系统受到影响（流量由消息队列承载）【削峰】</p>
</li>
</ol>
<h2 id="有点抽象，再举个实际案例？"><a href="#有点抽象，再举个实际案例？" class="headerlink" title="有点抽象，再举个实际案例？"></a>有点抽象，再举个实际案例？</h2><ol>
<li><p>又比如说，我这边还有个项目是广告订单归因工程，主要做的事情就是得到订单数据，给各个业务广告计算对应的佣金。</p>
</li>
<li><p>订单的数据是从消息队列里取出的</p>
</li>
<li><p>这样设计的好处就是：</p>
<p>1）交易团队的同学只要把订单消息写到消息队列，该订单数据的Topic由各个业务方自行消费使用【解耦】【异步】</p>
<p>2）即便下单QPS猛增，对下游业务无太大的感知（因为下游业务只消费消息队列的数据，不会直接影响到机器性能）【削峰】</p>
</li>
</ol>
<h2 id="那我想问下，你觉得为什么消息队列能削峰？或者换个问法，为什么Kafka能承载这么大的QPS？"><a href="#那我想问下，你觉得为什么消息队列能削峰？或者换个问法，为什么Kafka能承载这么大的QPS？" class="headerlink" title="那我想问下，你觉得为什么消息队列能削峰？或者换个问法，为什么Kafka能承载这么大的QPS？"></a>那我想问下，你觉得为什么消息队列能削峰？或者换个问法，为什么Kafka能承载这么大的QPS？</h2><ol>
<li><p>消息队列「最核心的功能就是把生产的数据存储起来，然后给各个业务把数据再读取出来。</p>
</li>
<li><p>跟我们处理请求时不一样，我们在业务处理时可能会调别人的接口，可能会需要去查数据库…等等等一系列的操作才行</p>
</li>
<li><p>这些业务操作都是非常耗时的，像Kafka在「存储」和「读取」这个过程中又做了很多的优化</p>
</li>
<li><p>举几个例子，比如说：</p>
<p>1）我们往一个Topic发送消息或者读取消息时，实际内部是多个Partition在处理【并行】</p>
<p>2）在存储消息时，Kafka内部是顺序写磁盘的，并且利用了操作系统的缓冲区来提高性能【append+cache】</p>
<p>3）在读写数据中也减少CPU拷贝的次数【零拷贝】</p>
</li>
</ol>
<h2 id="嗯，你既然提到减少CPU拷贝的次数，可以给我说下这项技术吗？"><a href="#嗯，你既然提到减少CPU拷贝的次数，可以给我说下这项技术吗？" class="headerlink" title="嗯，你既然提到减少CPU拷贝的次数，可以给我说下这项技术吗？"></a>嗯，你既然提到减少CPU拷贝的次数，可以给我说下这项技术吗？</h2><ol>
<li><p>嗯，可以的，其实就是零拷贝技术。</p>
</li>
<li><p>比如我们正常调用read函数时，会发生以下的步骤（以读磁盘的数据为例）：</p>
<p>1）DMA把磁盘数据拷贝到读内核缓存区</p>
<p>2）CPU把读内核缓冲区的数据拷贝到用户空间</p>
</li>
<li><p>正常调用write函数时，会发生以下的步骤（数据写到网卡为例）：</p>
<p>1）CPU把用户空间的数据拷贝到Socket内核缓存区</p>
<p>2）DMA把Socket内核缓冲区的数据拷贝到网卡</p>
</li>
<li><p>可以发现完成「一次读写」需要2次DMA拷贝，2次CPU拷贝。</p>
</li>
<li><p>而DMA拷贝是省不了的，所谓的零拷贝技术就是把CPU的拷贝给省掉</p>
</li>
<li><p>并且为了避免用户进程直接操作内核，保证内核安全，应用程序在调用系统函数时，会发生上下文切换（上述的过程一共会发生4次）</p>
</li>
<li><p>目前零拷贝技术主要有：mmap和sendfile</p>
</li>
<li><p>比如说：mmap是将读缓冲区的地址和用户空间的地址进行映射，实现读内核缓冲区和应用缓冲区共享</p>
</li>
<li><p>从而减少了从读缓冲区到用户缓冲区的一次CPU拷贝</p>
</li>
<li><p>使用mmap的后一次读写就可以简化为：、</p>
<p>一、DMA把硬盘数据拷贝到读内核缓冲</p>
<p>二、CPU把读内核缓存区拷贝至Socket内核缓冲区。</p>
<p>三、DMA把Socket内核缓冲区拷贝至网</p>
</li>
<li><p>由于读内核缓冲区与用户空间做了映射，所以会省了一次CPU拷贝</p>
</li>
<li><p>而sendfile+DMA Scatter&#x2F;Gather！则是把读内核缓存区的文件描述符&#x2F;长度信息发到Socket内核缓冲区，实现CPU零拷贝</p>
</li>
<li><p>使用sendfile+DMA Scatter&#x2F;Gather一次读写就可以简化为：</p>
<p>1）DMA把硬盘数据拷贝至读内核缓冲区</p>
<p>2）CPU把读缓冲区的文件描述符和长度信息发到Socket缓冲区。</p>
<p>3）DMA根据文件描述符和数据长度从读内核缓冲区把数据拷贝至网卡</p>
</li>
<li><p>回到kafka上吧</p>
</li>
<li><p>从Producer-》Broker，Kafka是把网卡的数据持久化硬盘，用的是mmap（从2次<br>CPU拷贝减至1次） </p>
</li>
<li><p>从Broker-》Consumer，Kafka是从硬盘的数据发送至网卡，用的是sendFile（实<br>现CPU零拷贝）</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Kafka能这么快的原因就是实现了并行、充分利用操作系统cache、顺序写和零拷贝</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>20、【对线面试官】使用kafka会考虑什么问题</title>
    <url>/posts/c5b7e17d/</url>
    <content><![CDATA[<h1 id="20、【对线面试官】使用kafka会考虑什么问题"><a href="#20、【对线面试官】使用kafka会考虑什么问题" class="headerlink" title="20、【对线面试官】使用kafka会考虑什么问题"></a>20、【对线面试官】使用kafka会考虑什么问题</h1><h2 id="你提到了你这边会从交易的消息报获取到订单的数据，然后做业务的处理；也提到了你用的是Kafka，我想问下，Kafka会丢数据吗？"><a href="#你提到了你这边会从交易的消息报获取到订单的数据，然后做业务的处理；也提到了你用的是Kafka，我想问下，Kafka会丢数据吗？" class="headerlink" title="你提到了你这边会从交易的消息报获取到订单的数据，然后做业务的处理；也提到了你用的是Kafka，我想问下，Kafka会丢数据吗？"></a>你提到了你这边会从交易的消息报获取到订单的数据，然后做业务的处理；也提到了你用的是Kafka，我想问下，Kafka会丢数据吗？</h2><ol>
<li><p>嗯，使用Kafkal时，有可能会有以下场景会丢消息</p>
</li>
<li><p>比如说，我们用Producer发消息至Broke的时候，就有可能会丢消息</p>
</li>
<li><p>如果你不想丢消息，那在发送消息的时候，需要选择带有callBack的api进行发送</p>
</li>
<li><p>其实就意味着，如果你发送成功了，会回调告诉你已经发送成功了。如果失败了，那收到回调之后自己在业务上做重试就好了。</p>
</li>
<li><p>等到把消息发送到Brokerl以后，也有可能丢消息</p>
</li>
<li><p>一般我们的线上环境都是集群环境下嘛，但可能你发送的消息后broker就挂了，这时挂掉的broker还没来得及把数据同步给别的broker，数据就自然就丢了</p>
</li>
<li><p>发送到Broker之后，也不能保证数据就一定不丢了，毕竟Broker会把数据存储到磁盘之前，走的是操作系统缓存</p>
</li>
<li><p>也就是异步刷盘这个过程还有可能导致数据会丢</p>
</li>
<li><p>嗯，到这里其实我已经说了三个场景了，分别是：producer-》broker，broker-》broker之间同步，以及broker-》磁盘</p>
</li>
<li><p>要解决上面所讲的问题也比较简单，这块也没什么好说的…</p>
</li>
<li><p>不想丢数据，那就使用带有callback的api设置acks、retries、factor等等些参数来保证Producer发送的消息不会丢就好啦。</p>
</li>
</ol>
<h2 id="一般来说，还是client消费broker丢消息的场景比较多；那你们在消费数据的时候是怎么保证数据的可靠性的呢？"><a href="#一般来说，还是client消费broker丢消息的场景比较多；那你们在消费数据的时候是怎么保证数据的可靠性的呢？" class="headerlink" title="一般来说，还是client消费broker丢消息的场景比较多；那你们在消费数据的时候是怎么保证数据的可靠性的呢？"></a>一般来说，还是client消费broker丢消息的场景比较多；那你们在消费数据的时候是怎么保证数据的可靠性的呢？</h2><ol>
<li><p>首先，要想client端消费数据不能丢，肯定是不能使用autoCommit的，所以必须是手动提交的。</p>
</li>
<li><p>我们这边是这样实现的：</p>
<p>一、从Kafka拉取消息、（一次批量拉取500条，这里主要看配置）<br>二、为每条拉取的消息分配一个msgld（递增）<br>三、将msgld存入内存队列（sortSet）中<br>四、使用Map存储msgld.与msg（有offset相关的信息）的映射关系</p>
<p>五、当业务处理完消息后，ack时，获取当前处理的消息nsgld，然后从sortSet删除该msgld（此时代表已经处理过了）<br>六、接着与sortSet队列的首部第一个ld比较（其实就是最小的msgld），如果当前msgld&lt;&#x3D;sort Set第一个ID，则提交当前offset</p>
<p>七、系统即便挂了，在下次重启时就会从sortSet队首的消息开始拉取，实现至少处理一次语义<br>八、会有少量的消息重复，但只要下游做好幂等就OK了</p>
</li>
</ol>
<h2 id="嗯，你也提到了幂等，你们是怎么实现幂等性的呢？"><a href="#嗯，你也提到了幂等，你们是怎么实现幂等性的呢？" class="headerlink" title="嗯，你也提到了幂等，你们是怎么实现幂等性的呢？"></a>嗯，你也提到了幂等，你们是怎么实现幂等性的呢？</h2><ol>
<li>嗯，还是以处理订单消息为例好了。</li>
<li>幂等Key我们由订单编号+订单状态所组成（一笔订单的状态只会处理一次）</li>
<li>在处理之前，我们首先会去查Redis：是否存在该Key，如果存在，则说明我们已经处理过了，直接丢掉</li>
<li>如果Redis没处理过，则继续往下处理，最终的逻辑是将处理过的数据插入到业务DB上，再到最后把幂等Key插入到Redis上</li>
<li>显然，单纯通过Redis是无法保证幂等的</li>
<li>所以，Redis其实只是一个「前置」处理，最终的幂等性是依赖数据库的唯一Key来保证的（唯一Key实际上也是订单编号+状态）</li>
<li>而插入DB是依赖事务的，所以是没问题的</li>
<li>总的来说，就是通过Redis做前置处理，DB唯一索引做最终保证来实现幂等性的</li>
</ol>
<h2 id="你们那边遇到过顺序消费的问题吗？"><a href="#你们那边遇到过顺序消费的问题吗？" class="headerlink" title="你们那边遇到过顺序消费的问题吗？"></a>你们那边遇到过顺序消费的问题吗？</h2><ol>
<li><p>嗯，也是有的，我举个例子</p>
</li>
<li><p>订单的状态比如有支付、确认收货、完成等等，而订单下还有计费、退款的消息报</p>
</li>
<li><p>理论上来说，支付的消息报肯定要比退款消息报先到嘛，但程序处理的过程中可不一定的嘛</p>
</li>
<li><p>所以在这边也是有消费顺序的问题（先处理了支付，才能退款啊）</p>
</li>
<li><p>但在广告场景下不是「强顺序」的，只要保证最终一致性就好了。</p>
</li>
<li><p>所以我们这边处理「乱序」消息的实现是这样的：</p>
<p>1）宽表：将每一个订单状态，单独分出一个或多个独立的字段。消息来时只更新对应的字段就好，消息只会存在短暂的状态不一致问题，但是状态最终是一致的</p>
<p>2）消息补偿机制：另一个进行消费相同topicl的数据，消息落盘，延迟处理。将消息与DB进行对比，如果发现数据不一致，再重新发送消息至主进程处理</p>
<p>3）还有部分场景，可能我们只需要把相同userld&#x2F;orderld.发送到相同的partition（因为一个partition由一个Consumer消费），又能解决大部分消费顺序的问题了呢。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>21、【对线面试官】Mysql索引</title>
    <url>/posts/ace2edeb/</url>
    <content><![CDATA[<h1 id="21、【对线面试官】Mysql索引"><a href="#21、【对线面试官】Mysql索引" class="headerlink" title="21、【对线面试官】Mysql索引"></a>21、【对线面试官】Mysql索引</h1><h2 id="我看你简历上写了MySQL，对MySQL-InnoDB引擎的索引了解吗？"><a href="#我看你简历上写了MySQL，对MySQL-InnoDB引擎的索引了解吗？" class="headerlink" title="我看你简历上写了MySQL，对MySQL InnoDB引擎的索引了解吗？"></a>我看你简历上写了MySQL，对MySQL InnoDB引擎的索引了解吗？</h2><ol>
<li>嗯啊，使用索引可以加快查询速度，其实上就是将无序的数据变成有序（有序就能加快检索速度）</li>
<li>在InnoDB引擎中，索引的底层数据结构是**<code>B+树</code>**</li>
</ol>
<h2 id="那为什么不使用红黑树或者B树呢？"><a href="#那为什么不使用红黑树或者B树呢？" class="headerlink" title="那为什么不使用红黑树或者B树呢？"></a>那为什么不使用红黑树或者B树呢？</h2><ol>
<li><p>MySQL的数据是存储在硬盘的，在查询时一般是不能「一次性」把全部数据加载到内存中</p>
</li>
<li><p>红黑树是「二叉查找树」的变种，一个Node节点只能存储一个Key和一个Value</p>
</li>
<li><p>B和B+树跟红黑树不一样，它们算是「多路搜索树」，相较于「二叉搜索树」而言，一个Node节点可以存储的信息会更多，「多路搜索树」的高度会比「二叉搜索树」更低。</p>
</li>
<li><p>了解了区别之后，其实就很容易发现，在数据不能一次加载至内存的场景下，数据需要被检索出来</p>
</li>
<li><p>选择B或B+树的理由就很充分了（一个Node节点存储信息更多（相较于二叉搜索树），树的高度更低，树的高度影响检索的速度）</p>
</li>
<li><p>B+树相对于B树而言，它又有两种特性。</p>
<p>1）B+树非叶子节点不存储数据，在相同的数据量下，B+树更加矮壮。（这个应该不用多解释了，数据都存储在叶子节点上，非叶子节点的存储能存储更多的索引，所以整棵树就更加矮壮）</p>
<p>2）B+树叶子节点之间组成一个链表，方便于遍历查询（遍历操作在MySQL中比较常见）</p>
</li>
<li><p>我稍微解释一下吧，你可以脑补下画面</p>
</li>
<li><p>我们在MySQL InnoDB引擎下，每创建一个索引，相当于生成了一颗B+树。</p>
</li>
<li><p>如果该索引是「聚集（聚簇）索引」，那当前B+树的叶子节点存储着「主键和当前行的数据」</p>
</li>
<li><p>如果该索引是「非聚簇索引小」，那当前B+树的叶子节点存储着「主键和当前索引列值」</p>
</li>
<li><p>比如写了一句sql：select*from user where id&gt;&#x3D;10，那只要定位到id为10的记录，然后在叶子节点之间通过遍历链表（叶子节点组成的链表），即可找到往后的记录了。</p>
</li>
<li><p>由于B树是会在非叶子节点也存储数据，要遍历的时候可能就得跨层检索，相对麻烦些。</p>
</li>
<li><p>基于树的层级以及业务使用场景的特性，所以MySQL选择了B+树作为索引的底层数据结构。</p>
</li>
<li><p>对于哈希结构，其实InnoDB引擎是「自适应」哈希索引的（hash索引的创建由lnnoDB存储引擎自动优化创建，我们是干预不了）</p>
</li>
</ol>
<h2 id="你知道什么是回表吗？"><a href="#你知道什么是回表吗？" class="headerlink" title="你知道什么是回表吗？"></a>你知道什么是回表吗？</h2><ol>
<li>所谓的回表其实就是，当我们使用非聚簇索引查询数据时，检索出来的数据可能包含其他列</li>
<li>但走的索引树叶子节点只能查到当前列值以及主键ID，所以需要根据主键ID再去查一遍数据，得到SQL所需的列</li>
<li>举个例子，我这边建了给订单号ID建了个索引，但我的SQL是：select orderld，orderName from orderdetail where orderld &#x3D; 123</li>
<li>SQL走订单ID索引，但在订单ID的索引树的叶子节点只有orderld和ld，而我们还想检索出orderName，所以MySQL会拿到ID再去查出orderName给我们返回，这种操作就叫回表</li>
</ol>
<h2 id="如何避免回表"><a href="#如何避免回表" class="headerlink" title="如何避免回表"></a>如何避免回表</h2><ol>
<li>想要避免回表，可以使用覆盖索引</li>
<li>所谓的覆盖索引，实际上就是你想要查出的列刚好在叶子节点上都存在，比如我建了orderld和orderName.联合索引l，刚好我需要查询也是orderld和orderName，这些数据都存在索引树的叶子节点上，就不需要回表操作了。</li>
</ol>
<h2 id="既然你也提到了联合索引，我想问下你了解最左匹配原则吗"><a href="#既然你也提到了联合索引，我想问下你了解最左匹配原则吗" class="headerlink" title="既然你也提到了联合索引，我想问下你了解最左匹配原则吗"></a>既然你也提到了联合索引，我想问下你了解最左匹配原则吗</h2><ol>
<li>嗯，要说明这个概念，还是举例子比较容易</li>
<li>如有索引（a，b，c，d），查询条件a&#x3D;1and b&#x3D;2 and c&gt;3 and d&#x3D;4，则会在每个节点依次命中a、b、c，无法命中d</li>
<li>先匹配最左边的，索引只能用于查找key是否存在（相等），遇到范围查询（&gt;、&lt;、between、like左匹配）等就不能进一步匹配了，后续退化为线性查找</li>
<li>这就是最左匹配原则</li>
</ol>
<h2 id="嗯嗯，我还想问下你们主键是怎么生成的？"><a href="#嗯嗯，我还想问下你们主键是怎么生成的？" class="headerlink" title="嗯嗯，我还想问下你们主键是怎么生成的？"></a>嗯嗯，我还想问下你们主键是怎么生成的？</h2><p>主键就自增的</p>
<h2 id="那假设我不用MySQL自增的主键，你觉得会有什么问题呢？"><a href="#那假设我不用MySQL自增的主键，你觉得会有什么问题呢？" class="headerlink" title="那假设我不用MySQL自增的主键，你觉得会有什么问题呢？"></a>那假设我不用MySQL自增的主键，你觉得会有什么问题呢？</h2><ol>
<li>首先主键得保证它的唯一性和空间尽可能短吧，这两块是需要考虑的。</li>
<li>另外，由于索引的特性（有序），如果生成像uuid类似的主键，那插入的的性能是比自增的要差的</li>
<li>因为生成的uuid，在插入时有可能需要移动磁盘块（比如，块内的空间在当前时刻已经存储满了，但新生成的uuid需要插入已满的块内，就需要移动块的数据）</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>23、【对线面试官】InnoDB引擎中的事务</title>
    <url>/posts/b4eb9a6c/</url>
    <content><![CDATA[<h1 id="这次我想问下，你是怎么理解InnoDB引擎中的事务的？"><a href="#这次我想问下，你是怎么理解InnoDB引擎中的事务的？" class="headerlink" title="这次我想问下，你是怎么理解InnoDB引擎中的事务的？"></a>这次我想问下，你是怎么理解InnoDB引擎中的事务的？</h1><ol>
<li>在我的理解下，事务可以使「一组操作」要么全部成功，要么全部失败</li>
<li>事务其目的是为了「保证数据最终的一致性」。</li>
<li>举个例子，我给你发支付宝转了888块红包。那自然我的支付宝余额会扣减888块，你的支付宝余额会增加888块。</li>
<li>而事务就是保证我的余额扣减跟你的余额增添是同时成功或者同时失败的，这样这次转账就正常了</li>
</ol>
<h2 id="嗯，那你了解事务的几大特性吗？"><a href="#嗯，那你了解事务的几大特性吗？" class="headerlink" title="嗯，那你了解事务的几大特性吗？"></a>嗯，那你了解事务的几大特性吗？</h2><p>嗯，就是ACID嘛，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）、持久性（Durability）。</p>
<ol>
<li><p>原子性指的是：当前事务的操作要么同时成功，要么同时失败。原子性由undo Iog日志来保证，因为undo log记载着数据修改前的信息。</p>
<p>1）比如我们要insert一条数据了，那undo Iog会记录的一条对应的delete日志。我们要update一条记录时，那undo log会记录之前的「旧值」的update记录。</p>
<p>2）如果执行事务过程中出现异常的情况，那执行「回滚」。InnoDB引擎就是利用undo log记录下的数据，来将数据「恢复」到事务开始之前</p>
</li>
<li><p>隔离性指的是：在事务「并发」执行时，他们内部的操作不能互相干扰。</p>
<p>1）如果多个事务可以在同一时刻操作同一份数据，那么就会可能会产生脏读、重复读、幻读的问题。</p>
<p>2）于是，事务与事务之间需要存在「一定」的隔离。在nnoDB引擎中，定义了四种隔离级别供我们使用：分别是：read uncommit（读未提交）、read commit（读已提交）、repeatable read（可重复复读）、serializable（串行）</p>
<p>3）不同的隔离级别对事务之间的隔离性是不一样的（级别越高事务隔离性越好，但性能就越低），而隔离性是由MySQL的各种锁来实现的，只是它屏蔽了加锁的细节。</p>
</li>
<li><p>持久性指的就是：一旦提交了事务，它对数据库的改变就应该是永久性的。说白了就是，会将数据持久化在硬盘上。</p>
<p>1）而持久性由redo log日志来保证，当我们要修改数据时，MySQL是先把这条记录所在的「页」找到，然后把该页加载到内存中，将对应记录进行修改。</p>
<p>2）为了防止内存修改完了，MySQL就挂掉了（如果内存改完，直接挂掉，那这次的修改相当于就丢失了）。</p>
<p>3）MySQL引入了redo log，内存写完了，然后会写一份redo log，这份redo log记载着这次在某个页上做了什么修改。</p>
<p>4）即便MySQL在中途挂了，我们还可以根据redo log：来对数据进行恢复。</p>
<p>5）redo log是顺序写的，写入速度很快。并且它记录的是物理修改（xxxx页做了xxx修改），文件的体积很小，恢复速度也很快。</p>
</li>
<li><p>「一致性」可以理解为我们使用事务的「目的」，而「隔离性」「原子性」「持久性」均是为了保障「一致性」的手段，保证一致性需要由应用程序代码来保证</p>
<p>1）比如，如果事务在发生的过程中，出现了异常情况，此时你就得回滚事务，而不是强行提交事务来导致数据不一致。</p>
</li>
</ol>
<h2 id="刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？"><a href="#刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？" class="headerlink" title="刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？"></a>刚才你也提到了隔离性嘛，然后你说在MySQL中有四种隔离级别，能分别来介绍下吗？</h2><ol>
<li><p>嗯，为了讲清楚隔离级别，我顺带来说下MySQL锁相关的知识吧。</p>
<p>1）在InnoDB引擎下，按锁的粒度分类，可以简单分为行锁和表锁。</p>
<p>2）行锁实际上是作用在索引之上的（索引上次已经说过了，这里就不赘述了）</p>
<p>3）当我们的SQL命中了索引，那锁住的就是命中条件内的索引节点（这种就是行锁），如果没有命中索引，那我们锁的就是整个索引树（表锁）。</p>
<p>4）简单来说就是：锁住的是整棵树还是某几个节点，完全取决于SQL条件是否有命中到对应的索引节点。</p>
<p>5）而行锁又可以简单分为读锁（共享锁、S锁）和写锁（排它锁、X锁）。</p>
<p>6）读锁是共享的，多个事务可以同时读取同一个资源，但不允许其他事务修改。写锁是排他的，写锁会阻塞其他的写锁和读锁。</p>
</li>
<li><p>我现在就再回到隔离级别上吧，就直接以例子来说明啦。</p>
<p>1）首先来说下read uncommit（读未提交）。比如说：A向B转账，A执行了转账语句，但A还没有提交事务，B读取数据，发现自己账户钱变多了！B跟A说，我已经收到钱了。A回滚事务【rollback】，等B再查看账户的钱时，发现钱并没有多。</p>
<p>​    （1）简单的定义就是：事务B读取到了事务A还没提交的数据，这种用专业术语来说叫做「脏读」。</p>
<p>​    （2）对于锁的维度而言，其实就是在read uncommit隔离级别下，读不会加任何锁，而写会加排他锁。读什么锁都不加，这就让排他锁无法排它了。</p>
<p>​    （3）我们又知道，对于更新操作而言，lnnODB是肯定会加写锁的（数据库是不可能允许在同一时间，更新同一条记录的）。而读操作，如果不加任何锁，那就会造成上面的脏读。</p>
<p>​    （4）脏读在生产环境下肯定是无法接受的，那如果读加锁的话，那意味着：当更新数据的时，就没办法读取了，这会极大地降低数据库性能。</p>
<ul>
<li><p>在MySQL InnoDB引擎层面，又有新的解决方案（解决加锁后读写性能问题），叫做MVCC（Multi-Version Concurrency Control）多版本并发控制</p>
</li>
<li><p>在MVCC下，就可以做到读写不阻塞，且避免了类似脏读这样的问题。那MVCC是怎么做的呢？</p>
</li>
<li><p>MVCC通过生成数据快照（Snapshot），并用这个快照来提供一定级别（语句级或事务级）的一致性读取</p>
</li>
</ul>
<p>  （5）回到事务隔离级别下，针对于read commit（读已提交）隔离级别，它生成的就是语句级快照，而针对于repeatable read（可重复读），它生成的就是事务级的快照。</p>
<p>2）前面提到过read uncommit隔离级别下会产生脏读，而read commit（读已提交）隔离级别解决了脏读</p>
<p>​    （1）思想其实很简单：在读取的时候生成一个”版本号”，等到其他事务commit了之后，才会读取最新已commit的”版本号”数据。</p>
<p>​    （2）比如说：事务A读取了记录（生成版本号），事务B修改了记录（此时加了写锁），事务A再读取的时候，是依据最新的版本号来读取的（当事务B执行commit了之后，会生成一个新的版本号），如果事务B还没有commit.那事务A读取的还是之前版本号的数据。</p>
<p>​    （3）通过「版本」的概念，这样就解决了脏读的问题，而通过「版本」又可以对应快照的数据。read commit（读已提交）解决了脏读。</p>
<p>3）read commit（读已提交）解决了脏读，但也会有其他并发的问题。「不可重复读」：一个事务读取到另外一个事务已经提交的数据，也就是说一个事务可以看到其他事务所做的修改。</p>
<p>​    （1）不可重复读的例子：A查询数据库得到数据，B去修改数据库的数据，导致A多次查询数据库的结果都不一样【危害：A每次查询的结果都是受B的影响的】</p>
<p>​    （2）了解MVCC基础之后，就很容易想到repeatable read（可重复复读）隔离级别是怎么避免不可重复读的问题了（前面也提到了）。</p>
<p>​    （3）repeatable read（可重复复读）隔离级别是「事务级别」的快照！每次读取的都是「当前事务的版本」，即使当前数据被其他事务修改了（commit），也只会读取当前事务版本的数据。</p>
<p>​    （4）在InnoDB引擎下的的repeatable read（可重复复读）隔离级别下，在MVCC下，快照读，已经解决了幻读的问题（因为它是读历史版本的数据）</p>
<p>​    （5）而如果是当前读（比如select*from table for update），则需要配合间隙锁来解决幻读的问题。</p>
<p>4）剩下的就是serializable（串行）隔离级别了，它的最高的隔离级别，相当于不允许事务的并发，事务与事务之间执行是串行的，它的效率最低，但同时也是最安全的。</p>
</li>
</ol>
<h2 id="我看你提到了MVCC了，不妨来说下他的原理？"><a href="#我看你提到了MVCC了，不妨来说下他的原理？" class="headerlink" title="我看你提到了MVCC了，不妨来说下他的原理？"></a>我看你提到了MVCC了，不妨来说下他的原理？</h2><ol>
<li>MVCC的主要是通过read view和undo log来实现的</li>
<li>undo log前面也提到了，它会记录修改数据之前的信息，事务中的原子性就是通过undo log：来实现的。所以，有undo log可以帮我们找到「版本」的数据</li>
<li>而read view实际上就是在查询时，lnnoDB会生成一个read view，read view有几个重要的字段，看下去就懂了</li>
<li>分别是：trx ids（尚未提交commit的事务版本号集合），low limit id（下一次要生成的事务D值），low limit id（尚未提交版本号的事务D最小值）以及creator trx id（当前的事务版本号）</li>
<li>在每行数据有两列隐藏的字段，分别是DB_TRX_ID（记录着当前ID）以及DB_ROLL _PTR（指向上一个版本数据在undolog里的位置指针）</li>
<li>垫到这了，很容易就发现，MVCC其实就是靠「比对版本」来实现读写不阻塞，而版本的数据存在于undo log中。</li>
<li>而针对于不同的隔离级别（read commit和repeatable read），无非就是read commit隔离级别下，每次都获取一个新的read view，repeatable read隔离级别则每次事务只获取一个read view</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>事务为了保证数据的最终一致性</p>
</li>
<li><p>事务有四大特性，分别是原子性、一致性、隔离性、持久性</p>
</li>
<li><ul>
<li>原子性由undo log保证</li>
<li>持久性由redo log 保证</li>
<li>隔离性由数据库隔离级别供我们选择，分别有read uncommit,read commit,repeatable read,serializable</li>
<li>一致性是事务的目的，一致性由应用程序来保证</li>
</ul>
</li>
<li><p>事务并发会存在各种问题，分别有脏读、重复读、幻读问题。上面的不同隔离级别可以解决掉由于并发事务所造成的问题，而隔离级别实际上就是由MySQL锁来实现的</p>
</li>
<li><p>频繁加锁会导致数据库性能低下，引入了MVCC多版本控制来实现读写不阻塞，提高数据库性能</p>
</li>
<li><p>MVCC原理即通过read view 以及undo log来实现</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>23、【对线面试官】Mysql调优</title>
    <url>/posts/3e598844/</url>
    <content><![CDATA[<h1 id="23、【对线面试官】Mysql调优"><a href="#23、【对线面试官】Mysql调优" class="headerlink" title="23、【对线面试官】Mysql调优"></a>23、【对线面试官】Mysql调优</h1><h2 id="要不你来讲讲你们对MySQL是怎么调优的？"><a href="#要不你来讲讲你们对MySQL是怎么调优的？" class="headerlink" title="要不你来讲讲你们对MySQL是怎么调优的？"></a>要不你来讲讲你们对MySQL是怎么调优的？</h2><ul>
<li>哇，这命题很大阿…我认为，对于开发者而言，对MySQL的调优重点一般是在「开发规范」、「数据库索引」又或者说解决线上慢查询上。</li>
<li>而对于MySQL内部的参数调优，由专业的DBA来搞。</li>
</ul>
<h2 id="那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧。"><a href="#那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧。" class="headerlink" title="那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧。"></a>那你来聊聊你们平时开发的规范和索引这块，平时是怎么样的吧。</h2><ul>
<li><p>嗯，首先，我们在生产环境下，创建数据库表，都是在工单系统下完成的（那就自然需要DBA审批）</p>
</li>
<li><p>如果在创建表时检测到没有创建索引，那就会直接提示warning</p>
</li>
<li><p>理论上来说，如果表有一定的数据量，那就应该要创建对应的索引</p>
</li>
<li><p>从数据库查询数据需要注意的地方还是蛮多的，其中很多都是平时积累来的比如说：</p>
<ul>
<li>1.是否能使用「覆盖索引」，减少「回表」所消耗的时间。意味着，我们在select的时候，一定要指明对应的列，而不是select</li>
<li>2.考虑是否组建「联合索引小」，如果组建「联合索引小」，尽量将区分度最高的放在最左边，并且需要考虑「最左匹配原则」</li>
<li>3.对索引进行函数操作或者表达式计算会导致索引失效</li>
<li>4.利用子查询优化超多分页场景。比如limit offset，n在MySQL是获取offset+n的记录，再返回n条。而利用子查询则是查出n条，通过ID检索对应的记录出来，提高查询效率。</li>
<li>5.通过explain命令来查看SQL的执行计划，看看自己写的SQL是否走了索引，走了什么索引。通过show profile来查看SQL对系统资源的损耗情况（不过一般还是比较少用到的）</li>
<li>6.在开启事务后，在事务内尽可能只操作数据库，并有意识地减少锁的持有时间（比如在事务内需要插入&amp;&amp;修改数据，那可以先插入后修改。因为修改是更新操作，会加行锁。如果先更新，那并发下可能会导致多个事务的请求等待行锁释放）</li>
</ul>
</li>
</ul>
<h2 id="嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？"><a href="#嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？" class="headerlink" title="嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？"></a>嗯，你提到了事务，之前也讲过了事务的隔离级别嘛，那你线上用的是什么隔离级别？</h2><ul>
<li>嗯，我们这边用的是Read Commit（读已提交），MySQL默认用的是Repeatable read（可重复读）</li>
<li>选用什么隔离级别，主要看应用场景嘛，因为隔离级别越低，事务并发性能越高。</li>
<li>（一般互联网公司都选择Read Commit作为主要的隔离级别）</li>
<li>像Repeatable read（可重复读）隔离级别，就有可能因为「间隙锁」导致的死锁问题。</li>
<li>但，MySQL默认的隔离级别为Repeatable read。很大一部分原因是在最开始的时候，MySQL的binlog没有row模式，在read commit隔离级别下会存在「主从数据不一致」的问题</li>
<li>binlog记录了数据库表结构和表数据「变更」，比如update&#x2F;delete&#x2F;insert&#x2F;truncate&#x2F;create。在MySQL中，主从同步实际上就是应用了binlog：来实现的</li>
<li>有了该历史原因，所以MySQL就将默认的隔离级别设置为Repeatable read</li>
</ul>
<h2 id="了解了，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢。"><a href="#了解了，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢。" class="headerlink" title="了解了，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢。"></a>了解了，那我顺便想问下，你们遇到过类似的问题吗：即便走对了索引，线上查询还是慢。</h2><ul>
<li>如果走对了索引，但查询还是慢，那一般来说就是表的数据量实在是太大了。</li>
<li>首先，考虑能不能把「旧的数据」给”删掉”，对于我们公司而言，我们都会把数据同步到Hive，说明已经离线存储了一份了。</li>
<li>那如果「旧的数据」已经没有查询的业务了，那最简单的办法肯定是”删掉”部分数据咯。数据量降低了，那自然，检索速度就快了…</li>
<li>但，只有极少部分业务可以删掉数据</li>
<li>随后，就考虑另一种情况，能不能在查询数据库之前，直接走一层缓存（Redis)。<ul>
<li>而走缓存的话，又要看业务能不能忍受读取的「非真正实时」的数据（毕竟Redis和MySQL的数据一致性需要保证），如果查询条件相对复杂且多变的话（涉及各种group by和sum），那走缓存也不是一种好的办法，维护起来就不方便了…</li>
<li>再看看是不是有「字符串」检索的场景导致查询低效，如果是的话，可以考虑把表的数据导入至Elasticsearch类的搜索引擎，后续的线上查询就直接走Elasticsearch了。</li>
<li>MySQL-&gt;Elasticsearch需要有对应的同步程序（一般就是监听MySQL的binlog，解析binlog.后导入到Elasticsearch）</li>
<li>如果还不是的话，那考虑要不要根据查询条件的维度，做相对应的聚合表，线上的请求就查询聚合表的数据，不走原表。<ul>
<li>比如，用户下单后，有一份订单明细，而订单明细表的量级太大。但在产品侧（前台）透出的查询功能是以「天」维度来展示的，那就可以将每个用户的每天数据聚合起来，在聚合表就是一个用户一天只有一条汇总后的数据。</li>
<li>查询走聚合后的表，那速度肯定杠杠的（聚合后的表数据量肯定比原始表要少很多）</li>
<li>思路大致的就是「以空间换时间」，相同的数据换别的地方也存储一份，提高查询效率</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？"><a href="#那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？" class="headerlink" title="那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？"></a>那我还想问下，除了读之外，写性能同样有瓶颈，怎么办？</h2><ul>
<li>如果在MySQL读写都有瓶颈，那首先看下目前MySQL的架构是怎么样的。</li>
<li>如果是单库的，那是不是可以考虑升级至主从架构，实现读写分离。<ul>
<li>简单理解就是：主库接收写请求，从库接收读请求。从库的数据由主库发送的binlog进而更新，实现主从数据一致（在一般场景下，主从的数据是通过异步来保证最终一致性的）</li>
</ul>
</li>
<li>如果在主从架构下，读写仍存在瓶颈，那就要考虑是否要分库分表了<ul>
<li>至少在我前公司的架构下，业务是区分的。流量有流量数据库，广告有广告的数据库，商品有商品的数据库</li>
<li>所以，我这里讲的分库分表的含义是：在原来的某个库的某个表进而拆分。<ul>
<li>比如，现在我有一张业务订单表，这张订单表在广告库中，假定这张业务订单表已经有1亿数据量了，现在我要分库分表<ul>
<li>那就会将这张表的数据分至多个广告库以及多张表中</li>
<li>分库分表的最明显的好处就是把请求进行均摊（本来单个库单个表有一亿的数据，那假设我分开8个库，那每个库1200+W的数据量，每个库下分8张表，那每张表就150W的数据量）。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="你们是以什么来作为分库分表键的？"><a href="#你们是以什么来作为分库分表键的？" class="headerlink" title="你们是以什么来作为分库分表键的？"></a>你们是以什么来作为分库分表键的？</h2><ul>
<li>按照我们这边的经验，一般来说是按照userld的（因为按照用户的维度查询比较多），如果要按照其他的维度进行查询，那还是参照上面的的思路（以空间换时间）。</li>
</ul>
<h2 id="那分库分表后的D是怎么生成的？"><a href="#那分库分表后的D是怎么生成的？" class="headerlink" title="那分库分表后的D是怎么生成的？"></a>那分库分表后的D是怎么生成的？</h2><ul>
<li>这就涉及到分布式D生成的方式了，思路有很多。有借助MySQL自增的，有借助Redis自增的，有基于「雪花算法」自增的</li>
<li>具体使用哪种方式，那就看公司的技术栈了，一般使用Redis和基于「雪花算法」实现用得比较多。</li>
<li>至于为什么强调自增（还是跟索引是有序有关，前面已经讲过了，你应该还记得）</li>
</ul>
<h2 id="嗯，那如果我要分库分表了，迁移的过程是怎么样的呢"><a href="#嗯，那如果我要分库分表了，迁移的过程是怎么样的呢" class="headerlink" title="嗯，那如果我要分库分表了，迁移的过程是怎么样的呢"></a>嗯，那如果我要分库分表了，迁移的过程是怎么样的呢</h2><ul>
<li>我们一般采取「双写」的方式来进行迁移，大致步骤就是：<ul>
<li>1.增量的消息各自往新表和旧表写一份</li>
<li>2.将旧表的数据迁移至新库</li>
<li>3.迟早新表的数据都会追得上旧表（在某个节点上数据是同步的）</li>
<li>4.校验新表和老表的数据是否正常（主要看能不能对得上）</li>
<li>5.开启双读（一部分流量走新表，一部分流量走老表），相当于灰度上线的过程</li>
<li>6.读流量全部切新表，停止老表的写入</li>
</ul>
</li>
<li>另外，提前准备回滚机制，临时切换失败能恢复正常业务以及有修数据的相关程序。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>数据库表存在一定数据量，就需要有对应的索引</li>
<li>发现慢查询时，检查是否走对索引，是否能用更好的索引进行优化查询速度，查看使用索引的姿势有没有问题</li>
<li>当索引解决不了慢查询时，一般由于业务表的数据量太大导致，利用空间换时间的思想（NOSQL、聚合、冗余…)</li>
<li>当读写性能均遇到瓶颈时，先考虑能否升级数据库架构即可解决问题，若不能则需要考虑分库分表</li>
<li>分库分表虽然能解决掉读写瓶颈，但同时会带来各种问题，需要提前调研解决方案和踩坑</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>24、【对线面试官】为什么需要Java内存模型</title>
    <url>/posts/691a1255/</url>
    <content><![CDATA[<h1 id="24、【对线面试官】为什么需要Java内存模型"><a href="#24、【对线面试官】为什么需要Java内存模型" class="headerlink" title="24、【对线面试官】为什么需要Java内存模型"></a>24、【对线面试官】为什么需要Java内存模型</h1><h2 id="今天想跟你聊聊Java内存模型，这块你了解过吗？"><a href="#今天想跟你聊聊Java内存模型，这块你了解过吗？" class="headerlink" title="今天想跟你聊聊Java内存模型，这块你了解过吗？"></a>今天想跟你聊聊Java内存模型，这块你了解过吗？</h2><ul>
<li><p>嗯，我简单说下我的理解吧。那我就从为什么要有Java内存模型开始讲起吧</p>
<ul>
<li><p>单线程下，可见性&#x2F;有序性&#x2F;原子性都没问题</p>
</li>
<li><p>CPU为了效率，有了高速缓存、有了指令重排序等等，整块架构都变得复杂了。我们写的程序肯定也想要「充分」利用CPU的资源啊！于是乎，我们使用起了多线程</p>
<ul>
<li><p>多线程在意味着并发，并发就意味着我们需要考虑线程安全问题</p>
<ul>
<li>1.缓存数据不一致：多个线程同时修改「共享变量」，CPU核心下的高速缓存是「不共享」的，那多个cache与内存之间的数据同步该怎么做？</li>
<li>2.CPU指令重排序在多线程下会导致代码在非预期下执行，最终会导致结果存在错误的情况。</li>
</ul>
</li>
<li><p>针对于「缓存不一致」问题，CPU也有其解决办法，常被大家所认识的有两种：</p>
<p>1.使用「总线锁」：某个核心在修改数据的过程中，其他核心均无法修改内存中的数据。（类似于独占内存的概念，只要有CPU在修改，那别的CPU就得等待当前CPU释放）</p>
<p>2.缓存一致性协议（MESI协议，其实协议有很多，只是举个大家都可能见过的）。MESI拆开英文是（Modified（修改状态）、Exclusive（独占状态）、Share（共享状态）、Invalid（无效状态））</p>
</li>
<li><p>缓存一致性协议我认为可以理解为「缓存锁」，它针对的是「缓存行」（Cache Iine）进行”加锁”，所谓「缓存行」其实就是高速缓存存储的最小单位。</p>
</li>
<li><p>MESI协议的原理大概就是：当每个CPU读取共享变量之前，会先识别数据的「对象状态」（是修改、还是共享、还是独占、还是无效）。</p>
</li>
<li><p>如果是独占，说明当前CPU将要得到的变量数据是最新的，没有被其他CPU所同时读取</p>
</li>
<li><p>如果是共享，说明当前CPU将要得到的变量数据还是最新的，有其他的CPU在同时读取，但还没被修改</p>
</li>
<li><p>如果是修改，说明当前CPU正在修改该变量的值，同时会向其他CPU发送该数据状态为invalid（无效）的通知，得到其他CPU响应后（其他CPU将数据状态从共享（share）变成invalid（无效），会当前CPU将高速缓存的数据写到主存，并把自己的状态从modify（修改）变成exclusive（独占）</p>
</li>
<li><p>如果是无效，说明当前数据是被改过了，需要从主存重新读取最新的数据。</p>
</li>
<li><p>其实MESI协议做的就是判断「对象状态」，根据「对象状态」做不同的策略移动</p>
</li>
<li><p>关键就在于某个CPU在对数据进行修改时，需要「同步」通知其他CPU，表示这个数据被我修改了，你们不能用了。</p>
</li>
<li><p>比较于「总线锁」，MESI协议的”锁粒度”更小了，性能那肯定会更高咯</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="但据我了解，CPU还有优化，你还知道吗？"><a href="#但据我了解，CPU还有优化，你还知道吗？" class="headerlink" title="但据我了解，CPU还有优化，你还知道吗？"></a>但据我了解，CPU还有优化，你还知道吗？</h2><ul>
<li>同步，意味着等待，等待意味着什么都干不了。CPU肯定不乐意啊，所以又优化了一把。</li>
<li>优化思路就是从「同步」变成「异步」。</li>
<li>在修改时会「同步」告诉其他CPU，而现在则把最新修改的值写到「store buffe」中，并通知其他CPU记得要改状态，随后CPU就直接返回干其他事了。</li>
<li>等到收到其它CPU发过来的响应消息，再将数据更新到高速缓存中。</li>
<li>其他CPU接收到invalid（无效）通知时，也会把接收到的消息放入「invalid queue」中，只要写到「invalid queue.」就会直接返回告诉修改数据的CPU已经将状态置为「invalid」</li>
<li>而异步又会带来新问题：那我现在CPU修改完A值，写到「store buffer」了，CPU就可以干其他事了</li>
<li>那如果该CPU又接收指令需要修改A值，但上一次修改的值还在「store buffer.」中呢，没修改至高速缓存呢。</li>
<li>所以CPU在读取的时候，需要去「storebuffer.」看看存不存在，存在则直接取，不存在才读主存的数据。【Store Forwarding】</li>
<li>好了，解决掉第一个异步带来的问题了。（相同的核心对数据进行读写，由于异步，很可能会导致第二次读取的还是旧值，所以首先读「store buffer」。</li>
<li>那当然啊，那「异步化」会导致相同核心读写共享变量有问题，那当然也会导致「不同」核心读写共享变量有问题啊</li>
<li>CPU1修改了A值，已把修改后值写到「store buffer.」并通知CPU2对该值进行invalid（无效）操作，而CPU2可能还没收到invalid（无效）通知，就去做了其他的操作，导致CPU2读到的还是旧值。</li>
<li>即便CPU2收到了invalid（无效）通知，但CPU1的值还没写到主存，那CPU2再次向主存读取的时候，还是旧值…</li>
<li>变量之间很多时候是具有「相关性」（a&#x3D;1；b&#x3D;0；b&#x3D;a），这对于CPU又是无感知的.…</li>
<li>总体而言，由于CPU对「缓存一致性协议」进行的异步优化「store buffer」「invalid queue.」，很可能导致后面的指令很可能查不到前面指令的执行结果（各个指令的执行顺序非代码执行顺序），这种现象很多时候被称作「CPU乱序执行」</li>
<li>为了解决乱序问题（也可以理解为可见性问题，修改完没有及时同步到其他的CPU），又引出了「内存屏障」的概念。</li>
<li>「内存屏障」其实就是为了解决「异步优化」导致「CPU乱序执行」&#x2F;「缓存不及时可见」的问题，那怎么解决的呢？嗯，就是把「异步优化」给”禁用“掉</li>
<li>内存屏障可以分为三种类型：写屏障，读屏障以及全能屏障（包含了读写屏障）</li>
<li>屏障可以简单理解为：在操作数据的时候，往数据插入一条”特殊的指令”。只要遇到这条指令，那前面的操作都得「完成」。</li>
<li>那写屏障就可以这样理解：CPU当发现写屏障的指令时，会把该指令「之前」存在于「store Buffer.」所有写指令刷入高速缓存。</li>
<li>通过这种方式就可以让CPU修改的数据可以马上暴露给其他CPU，达到「写操作」可见性的效果。</li>
<li>那读屏障也是类似的：CPU当发现读屏障的指令时，会把该指令「之前」存在于「invalid queue」所有的指令都处理掉</li>
<li>通过这种方式就可以确保当前CPU的缓存状态是准确的，达到「读操作」一定是读取最新的效果。</li>
</ul>
<h2 id="聊了半天，我一直在讲硬件-x2F-操作系统的东西，我要回到正题上了。"><a href="#聊了半天，我一直在讲硬件-x2F-操作系统的东西，我要回到正题上了。" class="headerlink" title="聊了半天，我一直在讲硬件&#x2F;操作系统的东西，我要回到正题上了。"></a>聊了半天，我一直在讲硬件&#x2F;操作系统的东西，我要回到正题上了。</h2><ul>
<li>由于不同CPU架构的缓存体系不一样、缓存一致性协议不一样、重排序的策略不一样、所提供的内存屏障指令也有差异，为了简化Java开发人员的工作。Java封装了一套规范，这套规范就是「Java内存模型」</li>
<li>再详细地说，「Java内存模型」希望屏蔽各种硬件和操作系统的访问差异，保证了Java程序在各种平台下对内存的访问都能得到一致效果。</li>
<li>目的是解决多线程存在的原子性、可见性（缓存一致性）以及有序性问题。</li>
</ul>
<h2 id="那要不简单聊聊Java内存模型的规范和内容吧？"><a href="#那要不简单聊聊Java内存模型的规范和内容吧？" class="headerlink" title="那要不简单聊聊Java内存模型的规范和内容吧？"></a>那要不简单聊聊Java内存模型的规范和内容吧？</h2><p>下次</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>并发问题产生的三大根源是「可见性」「有序性」「原子性」</p>
</li>
<li><p>可见性：CPU架构下存在高速缓存，每个核心下的L1&#x2F;L2高速缓存不共享（不可见）</p>
</li>
<li><p>有序性：主要有三部分可能导致打破（编译器和处理器可以在不改变「单线程」程序语义的情况下，可以对代码语句顺序进行调整重新排序</p>
</li>
<li><ul>
<li>编译器优化导致重排序（编译器重排）</li>
<li>指令集并行重排序（CPU原生重排）</li>
<li>内存系统重排序（CPU架构下很可能有store buffer &#x2F;invalid queue 缓冲区，这种「异步」很可能会导致指令重排）</li>
</ul>
</li>
<li><p>原子性：Java的一条语句往往需要多条 CPU 指令完成(i++)，由于操作系统的线程切换很可能导致 i++ 操作未完成，其他线程“中途”操作了共享变量  i ，导致最终结果并非我们所期待的。</p>
</li>
<li><p>在CPU层级下，为了解决「缓存一致性」问题，有相关的“锁”来保证，比如“总线锁”和“缓存锁”。</p>
</li>
<li><ul>
<li>总线锁是锁总线，对共享变量的修改在相同的时刻只允许一个CPU操作。</li>
<li>缓存锁是锁缓存行(cache line)，其中比较出名的是MESI协议，对缓存行标记状态，通过“同步通知”的方式，来实现(缓存行)数据的可见性和有序性</li>
<li>但“同步通知”会影响性能，所以会有内存缓冲区(store buffer&#x2F;invalid queue)来实现「异步」进而提高CPU的工作效率</li>
<li>引入了内存缓冲区后，又会存在「可见性」和「有序性」的问题，平日大多数情况下是可以享受「异步」带来的好处的，但少数情况下，需要强「可见性」和「有序性」，只能”禁用”缓存的优化。</li>
<li>“禁用”缓存优化在CPU层面下有「内存屏障」，读屏障&#x2F;写屏障&#x2F;全能屏障，本质上是插入一条”屏障指令”，使得缓冲区(store buffer&#x2F;invalid queue)在屏障指令之前的操作均已被处理，进而达到 读写 在CPU层面上是可见和有序的。</li>
</ul>
</li>
<li><p>不同的CPU实现的架构不一样，Java为了屏蔽硬件和操作系统访问内存的各种差异，提出了「Java内存模型」的规范，保证了Java程序在各种平台下对内存的访问都能得到一致效果。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>25、【对线面试官】java从编译到执行，发生了什么</title>
    <url>/posts/b7f54c91/</url>
    <content><![CDATA[<h1 id="25、【对线面试官】java从编译到执行，发生了什么"><a href="#25、【对线面试官】java从编译到执行，发生了什么" class="headerlink" title="25、【对线面试官】java从编译到执行，发生了什么"></a>25、【对线面试官】java从编译到执行，发生了什么</h1><h2 id="从基础先问起吧，你是怎么理解Java是一门「跨平台」的语言，也就是「一次编译，到处运行的」？"><a href="#从基础先问起吧，你是怎么理解Java是一门「跨平台」的语言，也就是「一次编译，到处运行的」？" class="headerlink" title="从基础先问起吧，你是怎么理解Java是一门「跨平台」的语言，也就是「一次编译，到处运行的」？"></a>从基础先问起吧，你是怎么理解Java是一门「跨平台」的语言，也就是「一次编译，到处运行的」？</h2><ul>
<li>因为有JVM</li>
<li>Java源代码会被编译为class文件，class文件是运行在JVM之上的。</li>
<li>当我们日常开发安装JDK的时候，可以发现JDK是分「不同的操作系统」，JDK里是包含JVM的，所以Java依赖着JVM实现了『跨平台』</li>
<li>通俗点来讲，JVM是面向操作系统的，它负责把Class字节码解释成系统所能识别的指令并执行，同时也负责程序运行时内存的管理。</li>
</ul>
<h2 id="那要不你来聊聊从源码文件（java）到代码执行的过程呗？"><a href="#那要不你来聊聊从源码文件（java）到代码执行的过程呗？" class="headerlink" title="那要不你来聊聊从源码文件（java）到代码执行的过程呗？"></a>那要不你来聊聊从源码文件（java）到代码执行的过程呗？</h2><ul>
<li><p>简单总结的话，我认为就4个步骤：编译-&gt;加载-&gt;解释-&gt;执行</p>
<ul>
<li><p>编译：将源码文件编译成JVM可以解释的class文件。</p>
<ul>
<li>编译过程会对源代码程序做「语法分析」「语义分析」「注解处理」等等处理，最后才生成字节码文件。</li>
<li>比如对泛型的擦除和我们经常用的Lombok就是在编译阶段干的。</li>
</ul>
</li>
<li><p>加载：将编译后的class文件加载到JVM中。</p>
<ul>
<li><p>在加载阶段又可以细化几个步骤：装载-&gt;连接-&gt;初始化</p>
<ul>
<li>【装载时机】为了节省内存的开销，并不会一次性把所有的类都装载至JVM，而是等到「有需要」的时候才进行装载（比如new和反射等等）</li>
<li>【装载发生】class文件是通过「类加载器」装载到jvm中的，为了防止内存中出现多份同样的字节码，使用了双亲委派机制（它不会自己去尝试加载这个类，而是把请求委托给父加载器去完成，依次向上）</li>
<li>【装载规则】JDK中的本地方法类一般由根加载器（Bootstrp loader）装载，JDK中内部实现的扩展类一般由扩展加载器（ExtClassLoader）实现装载，而程序中的类文件则由系统加载器（AppClassLoader）实现装载。</li>
</ul>
</li>
<li><p>装载这个阶段它做的事情总结：查找并加载类的二进制数据，在JVM「堆」中创建一个java.lang.Class类的对象，并将类相关的信息存储在JVM「方法区」中</p>
<ul>
<li>通过「装载」这个步骤后，现在已经把class文件装载到JVM中了，并创建出对应的Class.对象以及类信息存储至方法区了。</li>
</ul>
</li>
<li><p>「连接」这个阶段它做的事情总结：对class的信息进行验证、为「类变量」分配内存空间并对其赋默认值。</p>
<ul>
<li><p>连接又可以细化为几个步骤：验证-》准备-》解析</p>
<p>1.验证：验证类是否符合Java规范和JVM规范</p>
<p>2.准备：为类的静态变量分配内存，初始化为系统的初始值</p>
<p>3.解析：将符号引用转为直接引用的过程</p>
</li>
<li><p>通过「连接」这个步骤后，现在已经对class信息做校验并分配了内存空间和默认值了。</p>
</li>
</ul>
</li>
<li><p>「初始化」阶段总结：为类的静态变量赋予正确的初始值。</p>
<ul>
<li>过程大概就是收集class的静态变量、静态代码块、静态方法至clinit（）方法，随后从上往下开始执行。</li>
<li>如果「实例化对象」则会调用方法对实例变量进行初始化，并执行对应的构造方法内的代码。</li>
</ul>
</li>
</ul>
</li>
<li><p>解释：把字节码转换为操作系统识别的指令</p>
<ul>
<li>在解释阶段会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器（JIT）</li>
<li>JVM会对「热点代码」做编译，非热点代码直接进行解释。当JVM发现某个方法或代码块的运行特别频繁的时候，就有可能把这部分代码认定为「热点代码」</li>
<li>使用「热点探测」来检测是否为热点代码。「热点探测」一般有两种方式，计数器和抽样。HotSpot使用的是「计数器」的方式进行探测，为每个方法准备了两类计数器：方法调用计数器和回边计数器</li>
<li>这两个计数器都有一个确定的阈值，当计数器超过阈值溢出了，就会触发JIT编译。</li>
<li>即时编译器把热点方法的指令码保存起来，下次执行的时候就无需重复的进行解释，直接执行缓存的机器语言</li>
</ul>
</li>
<li><p>执行：操作系统把解释器解析出来的指令码，调用系统的硬件执行最终的程序指令。</p>
</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>Java跨平台因为有JVM屏蔽了底层操作系统</p>
</li>
<li><p>Java源码到执行的过程，从JVM的角度看可以总结为四个步骤：编译-&gt;加载-&gt;解释-&gt;执行</p>
</li>
<li><ul>
<li>「编译」经过 语法分析、语义分析、注解处理 最后才生成会class文件</li>
<li>「加载」又可以细分步骤为：装载-&gt;连接-&gt;初始化。装载则把class文件装载至JVM，连接则校验class信息、分配内存空间及赋默认值，初始化则为变量赋值为正确的初始值。连接里又可以细化为：验证、准备、解析</li>
<li>「解释」则是把字节码转换成操作系统可识别的执行指令，在JVM中会有字节码解释器和即时编译器。在解释时会对代码进行分析，查看是否为「热点代码」，如果为「热点代码」则触发JIT编译，下次执行时就无需重复进行解释，提高解释速度</li>
<li>「执行」调用系统的硬件执行最终的程序指令</li>
<li></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/36XlDf_20211229115158.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>26、【对线面试官】双亲委派机制</title>
    <url>/posts/3973d3db/</url>
    <content><![CDATA[<h1 id="26、【对线面试官】双亲委派机制"><a href="#26、【对线面试官】双亲委派机制" class="headerlink" title="26、【对线面试官】双亲委派机制"></a>26、【对线面试官】双亲委派机制</h1><h2 id="接着上次的话题吧，要不你来详细讲讲双亲委派机制？"><a href="#接着上次的话题吧，要不你来详细讲讲双亲委派机制？" class="headerlink" title="接着上次的话题吧，要不你来详细讲讲双亲委派机制？"></a>接着上次的话题吧，要不你来详细讲讲双亲委派机制？</h2><ul>
<li>上次提到了：class文件是通过「类加载器」装载至JVM中的</li>
<li>为了防止内存中存在多份同样的字节码，使用了双亲委派机制（它不会自己去尝试加载类，而是把请求委托给父加载器去完成，依次向上）</li>
<li>JDK中的本地方法类一般由根加载器（Bootstrp loader）装载JDK中内部实现的扩展类一般由扩展加载器（ExtClassLoader）实现装载入而程序中的类文件则由系统加载器（AppClassLoader）实现装载。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/aWnCRl_20211229133925.png" alt="java类加载结构图"></p>
<h2 id="打破双亲委派机制是什么意思？"><a href="#打破双亲委派机制是什么意思？" class="headerlink" title="打破双亲委派机制是什么意思？"></a>打破双亲委派机制是什么意思？</h2><ul>
<li>很好理解啊，意思就是：只要我加载类的时候，不是从App ClassLoader-》ExtClassLoader-&gt;BootStrap ClassLoader这个顺序找，那就算是打破了啊</li>
<li>因为加载classi核心的方法在LoaderClass类的loadClass方法上（双亲委派机制的核心实现）</li>
<li>那只要我自定义个ClassLoader，重写loadClass方法（不依照往上开始寻找类加载器），那就算是打破双亲委派机制了。</li>
</ul>
<h2 id="那你知道有哪个场景破坏了双亲委派机制吗？"><a href="#那你知道有哪个场景破坏了双亲委派机制吗？" class="headerlink" title="那你知道有哪个场景破坏了双亲委派机制吗？"></a>那你知道有哪个场景破坏了双亲委派机制吗？</h2><ul>
<li>tomcat</li>
<li>部署项目时，会把war包放到tomcat的webapp下，这意味着一个tomcat可以运行多个Web应用程序<ul>
<li>那假设我现在有两个Web应用程序，它们都有一个类，叫做User，并且它们的类全限定名都一样，比如都是com.yyy.User。但是他们的具体实现是不一样的</li>
<li>那么Tomcat是如何保证它们是不会冲突的呢？</li>
</ul>
</li>
<li>答案就是，那就是tomcat做了Web应用层级的隔离。Tomcat给每个Web应用创建一个类加载器实例（WebAppClassLoader），该加载器重写了loadClass方法，优先加载当前应用目录下的类，如果当前找不到了，才一层一层往上找</li>
</ul>
<h2 id="Tomcat还有哪些类加载器吗？"><a href="#Tomcat还有哪些类加载器吗？" class="headerlink" title="Tomcat还有哪些类加载器吗？"></a>Tomcat还有哪些类加载器吗？</h2><ul>
<li><p>并不是Web应用程序下的所有依赖都需要隔离的，比如Redis，因为如果版本相同，没必要每个Web应用程序都独自加载一份，就可以Web应用程序之间共享</p>
<ul>
<li>做法也很简单，Tomcat就在WebAppClassLoader.上加了个父类加载器（SharedClassLoader），如果WebAppClassLoader自身没有加载到某个类，那就委托SharedClassLoader去加载。</li>
<li>（无非就是把需要应用程序之间需要共享的类放到一个共享目录下，Share ClassLoader读共享目录的类就好了）</li>
</ul>
</li>
<li><p>为了隔绝Web应用程序与Tomcat本身的类，又有类加载器（CatalinaClassLoader）来装载Tomcat本身的依赖</p>
</li>
<li><p>如果Tomcat本身的依赖和Web应用还需要共享，那么还有类加载器（CommonClassLoader）来装载进而达到共享</p>
</li>
<li><p>各个类加载器的加载目录可以到tomcat的catalina.properties配置文件上查看</p>
<center>Tomcat的类加载结构图</center>
![](https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Q0RM1Q_20211229140203.png)</li>
</ul>
<h2 id="JDBC你不是知道吗，听说它也是破坏了双亲委派模型的，你是怎么理解的？"><a href="#JDBC你不是知道吗，听说它也是破坏了双亲委派模型的，你是怎么理解的？" class="headerlink" title="JDBC你不是知道吗，听说它也是破坏了双亲委派模型的，你是怎么理解的？"></a>JDBC你不是知道吗，听说它也是破坏了双亲委派模型的，你是怎么理解的？</h2><ul>
<li><p>JDBC定义了接口。具体实现类由各个厂商进行实现嘛（比如MySQL）</p>
<ul>
<li>类加载有个规则：如里一个类由类加载器A加载那么，这个类的依赖类也是由「相同的类加载器」加载。</li>
<li>我们用JDBC的时候，是用DriverManager进而获取Connection，DriverManager在java.sql包下，显然是由BootStrap类加载器进行装载</li>
<li>当我们使用DriverManager.getConnection()时，得到的一定是厂商实现的类.</li>
<li>但因为这些实现类又不在java包中，BootStrap ClassLoaders并不能加载到各个厂商实现的类</li>
</ul>
</li>
<li><p>DriverManager的解决方案就是，在DriverManager切始化的时候，得到「线程上下文加载器」</p>
<ul>
<li>获取Connection的时候，是使用「线程上下文加载器」去加载Connection的，而这里的线程上下文加载器实际上还是App ClassLoader</li>
<li>所以在获取Connection的时候，还是先找ExtClassLoader和BootStrapClassLoader，只不过这两加载器肯定是加载不到的，最终会由AppClassLoader进行加载</li>
</ul>
</li>
</ul>
<ul>
<li>那这种情况，有的人觉得破坏了双亲委派机制，因为本来明明应该是由BootStrapClassLoader进行加载的，结果来了手「线程上下文加载器」，改掉了<br>类加载器</li>
<li>有的人觉得没破坏双亲委派机制，只是改成由「线程上下文加载器」进行类载，但还是遵守着：「依次往上找父类加载器进行加载，都找不到时才由自身加载」。认为“原则“上是没变的。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>前置知识</strong>：JDK中默认类加载器有三个：AppClassLoader、Ext ClassLoader、BootStrap ClassLoader。AppClassLoader的父加载器为Ext ClassLoader、Ext ClassLoader的父加载器为BootStrap ClassLoader。这里的父子关系并不是通过继承实现的，而是组合。</p>
<p><strong>什么是双亲委派机制</strong>：加载器在加载过程中，先把类交由父类加载器进行加载，父类加载器没找到才由自身加载。</p>
<p><strong>双亲委派机制目的</strong>：为了防止内存中存在多份同样的字节码（安全）</p>
<p><strong>类加载规则</strong>：如果一个类由类加载器A加载，那么这个类的依赖类也是由「相同的类加载器」加载。</p>
<p><strong>如何打破双亲委派机制</strong>：自定义ClassLoader，重写loadClass方法（只要不依次往上交给父加载器进行加载，就算是打破双亲委派机制）</p>
<p><strong>打破双亲委派机制案例</strong>：Tomcat</p>
<ol>
<li>为了Web应用程序类之间隔离，为每个应用程序创建WebAppClassLoader类加载器</li>
<li>为了Web应用程序类之间共享，把ShareClassLoader作为WebAppClassLoader的父类加载器，如果WebAppClassLoader加载器找不到，则尝试用ShareClassLoader进行加载</li>
<li>为了Tomcat本身与Web应用程序类隔离，用CatalinaClassLoader类加载器进行隔离，CatalinaClassLoader加载Tomcat本身的类</li>
<li>为了Tomcat与Web应用程序类共享，用CommonClassLoader作为CatalinaClassLoader和ShareClassLoader的父类加载器</li>
<li>ShareClassLoader、CatalinaClassLoader、CommonClassLoader的目录可以在Tomcat的catalina.properties进行配置</li>
</ol>
<p><strong>线程上下文加载器</strong>：由于类加载的规则，很可能导致父加载器加载时依赖子加载器的类，导致无法加载成功（BootStrap ClassLoader无法加载第三方库的类），所以存在「线程上下文加载器」来进行加载。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>27、【对线面试官】深入浅出Java内存模型</title>
    <url>/posts/e1774332/</url>
    <content><![CDATA[<h1 id="27、【对线面试官】深入浅出Java内存模型"><a href="#27、【对线面试官】深入浅出Java内存模型" class="headerlink" title="27、【对线面试官】深入浅出Java内存模型"></a>27、【对线面试官】深入浅出Java内存模型</h1><h2 id="上一次已经问过了为什么要有Java内存模型"><a href="#上一次已经问过了为什么要有Java内存模型" class="headerlink" title="上一次已经问过了为什么要有Java内存模型"></a>上一次已经问过了为什么要有Java内存模型</h2><ul>
<li>答案是：Java为了屏蔽硬件和操作系统访问内存的各种差异，提出了「Java内存模型」的规范，保证了Java程序在各种平台下对内存的访问都能得到一致效果</li>
<li>强调下：Java内存模型它是一种「规范」，Java虚拟机会实现这个规范。</li>
</ul>
<h2 id="先聊下Java内存模型的抽象结构？"><a href="#先聊下Java内存模型的抽象结构？" class="headerlink" title="先聊下Java内存模型的抽象结构？"></a>先聊下Java内存模型的抽象结构？</h2><ul>
<li>Java内存模型定义了：Java线程对内存数据进行交互的规范。<ul>
<li>线程之间的「共享变量」存储在「主内存」中，每个线程都有自己私有的「本地内存」，「本地内存」存储了该线程以读&#x2F;写共享变量的副本。</li>
<li>本地内存是Java内存模型的抽象概念，并不是真实存在的。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/xjTbHO_20211229144348.png"></p>
<ul>
<li>Java内存模型规定了：线程对变量的所有操作都必须在「本地内存」进行，「不能直接读写主内存」的变量<ul>
<li>Java内存模型定义了8种操作来完成「变量如何从主内存到本地内存，以及变量如何从本地内存到主内存」</li>
<li>分别是read&#x2F;load&#x2F;use&#x2F;assign&#x2F;store&#x2F;write&#x2F;lock&#x2F;unlock操作</li>
<li>对变量一个读写操作就涵盖这些操作</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/IIGEvs_20211229144725.png"></p>
<h2 id="happen-before规则"><a href="#happen-before规则" class="headerlink" title="happen-before规则"></a>happen-before规则</h2><ul>
<li><p>按我的理解下，happen-before实际上也是一套「规则」。Java内存模型定义了这套规则，目的是为了阐述「操作之间」的内存「可见性」</p>
<ul>
<li>从上次讲述「指令重排」就提到了，在CPU和编译器层面上都有指令重排的问题。</li>
</ul>
</li>
<li><p>但：在某些重要的场景下，这一组操作都不能进行重排序，「前面一个操作的结果对后续操作必须是可见的」。</p>
<ul>
<li><p>Java内存模型就提出了happen-before这套规则，规则总共有8条</p>
<ul>
<li>比如传递性、volatile变量规则、程序顺序规则、监视器锁的规则…</li>
</ul>
</li>
</ul>
</li>
<li><p>有了happen-before这些规则。我们写的代码只要在这些规则下，前一个操作的结果对后续操作是可见的，是不会发生重排序的。</p>
</li>
</ul>
<h2 id="volatile内存语义"><a href="#volatile内存语义" class="headerlink" title="volatile内存语义"></a>volatile内存语义</h2><ul>
<li><p>volatile是java的一个关键字</p>
</li>
<li><p>特性：可见性和有序性（禁止重排序）</p>
</li>
<li><p>java内存模型这个规范，很大程度下就为了解决可见性和有序性的问题。</p>
</li>
</ul>
<h2 id="volatile是怎么做到可见性和有序性的"><a href="#volatile是怎么做到可见性和有序性的" class="headerlink" title="volatile是怎么做到可见性和有序性的"></a>volatile是怎么做到可见性和有序性的</h2><ul>
<li><p>为了实现volatile有序性和可见性，定义了4种内存屏障的「规范」，</p>
</li>
<li><p>分别是LoadLoad&#x2F;LoadStore&#x2F;StroreLoad&#x2F;StoreStrore</p>
</li>
<li><p>本质上，就是在volatile前后加上了内存屏障，使得编译器和CPU无法进行重排序，致使有序，并且对volatile变量对其他线程可见</p>
</li>
<li><p>Hotspot虚拟机实现</p>
<ul>
<li>在「汇编」层面上实际是通过Lock前缀指令来实现的（lock支持大部分平台，而fence指令是x86平台的）</li>
<li>locK指令能保证：禁止CPU和编译器的重排序（保证了有序性）、保证CPU写核<br>  心的指令可以立即生效且其他核心的缓存数据失效（保证了可见性）。</li>
</ul>
</li>
</ul>
<h2 id="volatile和MESl协议是啥关系？"><a href="#volatile和MESl协议是啥关系？" class="headerlink" title="volatile和MESl协议是啥关系？"></a>volatile和MESl协议是啥关系？</h2><ul>
<li>没有直接关联</li>
<li>Java内存模型关注的是编程语言层面上，它是高维度的抽象。</li>
<li>MESI是CPU缓存一致性协议，不同的CPU架构都不一样，可能有的CPU压根就没用MESI协议.</li>
<li>只不过MESI名声大，大家就都拿他来举例子了。</li>
<li>MESI可能只是在「特定的场景下」为实现volatile的可见性&#x2F;有序性而使用到的一部分罢了</li>
<li>为了让Java程序员屏蔽上面这些底层知识，快速地入门使用volatile变量</li>
<li>Java内存模型的happen-before规则中就有对volatile变量规则的定义：对一个volatile变量的写操作相对于后续对这个volatile变量的读操作可见</li>
<li>只要变量声明了volatile关键字，写后再读，读必须可见写的值。（可见性、有序性）</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>为什么存在Java内存模型</strong>：Java为了屏蔽硬件和操作系统访问内存的各种差异，提出了「Java内存模型」的规范，保证了Java程序在各种平台下对内存的访问都能得到一致效果</p>
<p><strong>Java内存模型抽象结构</strong>：线程之间的「共享变量」存储在「主内存」中，每个线程都有自己私有的「本地内存」，「本地内存」存储了该线程以读&#x2F;写共享变量的副本。线程对变量的所有操作都必须在「本地内存」进行，而「不能直接读写主内存」的变量</p>
<p><strong>happen-before规则</strong>：Java内存模型规定在某些场景下（一共8条），前面一个操作的结果对后续操作必须是可见的。这8条规则成为happen-before规则</p>
<p><strong>volatile</strong>：volatile是Java的关键字，修饰的变量是可见性且有序的（不会被重排序）。可见性&amp;&amp;有序性，由Java内存模型定义的「内存屏障」完成，实际HotSpot虚拟机实现Java内存模型规范，汇编底层是通过Lock指令来实现。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>28、【对线面试官】JVM内存模型</title>
    <url>/posts/6f64b3a6/</url>
    <content><![CDATA[<h1 id="28、【对线面试官】JVM内存模型"><a href="#28、【对线面试官】JVM内存模型" class="headerlink" title="28、【对线面试官】JVM内存模型"></a>28、【对线面试官】JVM内存模型</h1><h2 id="聊聊JVM的内存结构吧？"><a href="#聊聊JVM的内存结构吧？" class="headerlink" title="聊聊JVM的内存结构吧？"></a>聊聊JVM的内存结构吧？</h2><ul>
<li>class文件会被类加载器装载至JVM中，并且JVM会负责程序「运行时」的「内存管理」</li>
<li>而JVM的内存结构，往往指的就是JVM定义的「运行时数据区域」</li>
<li>简单来说就分为了5大块：方法区、堆、程序计数器、虚拟机栈、本地方法栈</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/VHXC3i_20211229151038.png"></p>
<h2 id="顺便讲下你这图上每个区域的内容"><a href="#顺便讲下你这图上每个区域的内容" class="headerlink" title="顺便讲下你这图上每个区域的内容"></a>顺便讲下你这图上每个区域的内容</h2><ul>
<li>程序计数器<ul>
<li>Java是多线程的语言，假设线程数大于CPU数，就很会有「线程切換」现象，切换意昧着「中断」和「恢复」，那自然就需要有一块区域来保存「当前线程的执行信息」</li>
<li>所以，程序计数器就是用于记录各个线程执行的字节码的地址（分支、循环跳转、异常、线程恢复等都依赖于计数器）</li>
</ul>
</li>
<li>虚拟机栈<ul>
<li>每个线程在创建的时候都会创建一个虚拟机栈，每次方法调用都会创建一个「栈帧」。每个「栈帧」会包含几块内容：局部变量表、操作数栈、动态连接和返回地址</li>
<li>作用：它保存方法的局部变量、部分变量的计算并参与了方法的调用和返回。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/GOLAU2_20211229151640.png"></p>
<ul>
<li><p>本地方法栈</p>
<ul>
<li>本地方法栈跟虚拟机栈的功能类似，虚拟机栈用于管理Java函数的调用，而本地方法栈则用于管理本地方法的调用。这里的「本地方法」指的是「非Java方法」，一般本地方法是使用C语言实现的。</li>
</ul>
</li>
<li><p>方法区</p>
<ul>
<li>前面提到了运行时数据区这个「分区」是JVM的「规范」，具体的落地实现，不同的虚拟机厂商可能是不一样的</li>
<li>所以「方法区」也只是JVM中规范的一部分</li>
<li>Hotspot虚拟机，就会常常提到「永久代」这个词。 Hotspotl虚拟机在「JDK8前」用「永久代」实现了「方法区」，而很多其他厂商的虚拟机其实是没有「永久代」的概念的</li>
<li>在JDK8中，已经用「元空间」来替代了「永久代」作为「方法区」的实现了</li>
<li>方法区主要是用来存放已被虚拟机加载的「类相关信息」：包括类信息、常量池<ul>
<li>类信息又包括了类的版本、字段、方法、接口和父类等信息。</li>
<li>常量池又可以分「静态常量池」和「运行时常量池」<ul>
<li>静态常量池主要存储的是「字面量」以及「符号引用」等信息，静态常量池也包括了我们说的「字符串常量池」。</li>
<li>「运行时常量池」存储的是「类加载」时生成的「直接引用」等信息</li>
<li>值得注意的是：从「逻辑分区」的角度而言「常量池」是属于「方法区」的</li>
<li>但自从在「JDK7」以后，就已经把「运行时常量池」和「静态常量池」转移到了「堆」内存中进行存储</li>
<li>对于「物理分区」来说「运行时常量池」和「静态常量池』就属于堆</li>
</ul>
</li>
<li>总体来说，就是逻辑分区和物理实际存储的位置，是不一样的</li>
</ul>
</li>
</ul>
</li>
<li><p>堆</p>
<ul>
<li><p>「堆」是线程共享的区域，几乎类的实例和数组分配的内存都来自于它</p>
</li>
<li><p>「堆」被划分为「新生代」和「老年代」，「新生代」又被进一步划分为Eden和 Survivor区，最后 Survivor由From Survivor 和 To Survivor组成</p>
</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Xm317A_20211229152833.png"></p>
<h2 id="从「JDK8」已经把「方法区」的实现从「永久代」变成「元空间」，有什么区别？"><a href="#从「JDK8」已经把「方法区」的实现从「永久代」变成「元空间」，有什么区别？" class="headerlink" title="从「JDK8」已经把「方法区」的实现从「永久代」变成「元空间」，有什么区别？"></a>从「JDK8」已经把「方法区」的实现从「永久代」变成「元空间」，有什么区别？</h2><ul>
<li>最主要的区别就是：「元空间」存储不在虚拟机中，而是使用本地内存，JVM不会再出现方法区的内存溢出，以往「永久代」经常因为内存不够用导致跑出OOM异常。</li>
<li>按JDK8版本，总结起来其实就相当于：「类信息」是存储在「元空间」的（也有人把「类信息」这块叫做「类信息常量池」）</li>
<li>而「常量池」用JDK7开始，从「物理存储」角度上就在「堆中」，这是没有变化的。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5Ha0EV_20211229152636.png"></p>
<h2 id="JVM内存结构和Java內存模型有啥区别吧？"><a href="#JVM内存结构和Java內存模型有啥区别吧？" class="headerlink" title="JVM内存结构和Java內存模型有啥区别吧？"></a>JVM内存结构和Java內存模型有啥区别吧？</h2><ul>
<li>Java内存模型是跟「并发」相关的，它是为了屏蔽底层细节而提出的规范，希望在上层（Java层面上）在操作内存时在不同的平台上也有相同的效果</li>
<li>JVM内存结构（又称为运行时数据区域），它描述着当我们的 class文件加载至虚拟机后，各个分区的「逻辑结构」是如何的，每个分区承担的作用</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>JVM内存结构组成</strong>：JVM内存结构又称为「运行时数据区域」。主要有五部分组成：虚拟机栈、本地方法栈、程序计数器、方法区和堆。其中方法区和堆是线程共享的。虚拟机栈、本地方法栈以及程序计数器是线程隔离的。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>29、【对线面试官】垃圾回收机制</title>
    <url>/posts/9544a93a/</url>
    <content><![CDATA[<h1 id="29、【对线面试官】垃圾回收机制"><a href="#29、【对线面试官】垃圾回收机制" class="headerlink" title="29、【对线面试官】垃圾回收机制"></a>29、【对线面试官】垃圾回收机制</h1><h2 id="聊聊Java的垃圾回收机制"><a href="#聊聊Java的垃圾回收机制" class="headerlink" title="聊聊Java的垃圾回收机制?"></a>聊聊Java的垃圾回收机制?</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Xm317A_20211229152833.png"></p>
<ul>
<li>我们使用Java的时候，会创建很多对象，但我们未曾「手动」将这些对象进行清除,而如果用C++语言的时候，用完是需要自己free（释放）掉的</li>
<li>写Java的时候不用自己手动释放”垃圾”呢？原因很简单，JVM帮我们做了（自动回收垃圾）</li>
<li>垃圾的定义：只要对象不再被使用了，那我们就认为该对象就是垃圾，对象所占用的空间就可以被回收·</li>
</ul>
<h2 id="是怎么判断对象不再被使用的呢？"><a href="#是怎么判断对象不再被使用的呢？" class="headerlink" title="是怎么判断对象不再被使用的呢？"></a>是怎么判断对象不再被使用的呢？</h2><ul>
<li><p>常用的算法有两个「引用计数法」和「可达性分析法」</p>
<ul>
<li><p>引用计数法思路很简单：当对象被引用则+1，但对象引用失败则-1。当计数器为0时，说明对象不再被引用，可以被可回收</p>
</li>
<li><p>缺点就是：如果对象存在循环依赖，那就无法定位该对象，是否应该被回收（A依赖B，B依赖A）</p>
</li>
<li><p>是可达性分析法：它从「GC Roots」开始向下搜索，当对象到「GC Roots」都没有任何引用相连时，说明对象是不可用的，可以被回收</p>
<ul>
<li><p>「 GC Roots」是一组必须「活跃」的引用</p>
</li>
<li><p>从「 GC Root」出发，程序通过直接引用或者间接引用，能够找到可能正在被使用的对象</p>
<ul>
<li>比如：JVM内存结构中的虚拟机栈，虚拟机栈里的栈帧，栈帧中的局部变量，局部变量就存储着引用。</li>
<li>那如果栈帧位于虚拟机栈的栈顶，是不是说明这个栈帧是活跃的（换言之，是线程正在被调用的）</li>
<li>既然是线程正在调用的，那栈帧里的指向「堆」的对象引用，就一定是「活跃」的引用</li>
<li>所以，当前活跃的栈帧指向堆里的对象引用就可以是「 GC Roots」</li>
</ul>
</li>
<li><p>当然了，能作为「 GC Roots」也不单单只有上面那一块</p>
<ul>
<li>比如类的静态变量引用是「 GC Roots」，被「Java本地方法」所引用的对象也是「 GC Roots」等等</li>
</ul>
</li>
<li><p>「 GC Roots」是一组必须「活跃」的「引用」，只要跟「GC Roots」没有直接或者间接引用相连，那就是垃圾。JVM用的就是「可达性分析算法」来判断对象是否为垃圾</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="标记完，怎么删除的（垃圾回收算法）"><a href="#标记完，怎么删除的（垃圾回收算法）" class="headerlink" title="标记完，怎么删除的（垃圾回收算法）"></a>标记完，怎么删除的（垃圾回收算法）</h2><ul>
<li>标记清除<ul>
<li>缺点：直接清除会有「内存碎片」的问题：可能我有10M的空余内存，但程序申请9M内存空间却申请不下来（10M的内存空间是垃圾清除后的，不连续的）</li>
</ul>
</li>
<li>标记复制<ul>
<li>「标记」存活的对象「复制」到另一块空间，复制完了之后，直接把原有的整块空间给干掉！这样就没有内存碎片的问题了</li>
<li>缺点：内存利用率低，得有一块新的区域给我复制（移动）过去</li>
</ul>
</li>
<li>标记整理<ul>
<li>当前区域内进行移动，存活对象一到一边，垃圾移到一边，再统一删除，就不会有内存碎片了</li>
</ul>
</li>
</ul>
<h2 id="老年代、年轻代"><a href="#老年代、年轻代" class="headerlink" title="老年代、年轻代"></a>老年代、年轻代</h2><ul>
<li>大部分对象的生命周期都很短，而只有少部分对象可能会存活很长时间</li>
<li>回收垃圾的时候，程序是有短暂的时间不能正常继续运作啊。（JVM在回收的时候，用户线程不能继续分配修改引用），为了使「 stop the word」持续的时间尽可能短以及提高并发式GC所能应付的内存分配速率</li>
<li>所以很多的垃圾收集器上都会在「物理」或者「逻辑」上，把这两类对象进行区分<ul>
<li>死得快的对象所占的区域叫做「年轻代」，活得久的对象所占的区域叫做「老年代」</li>
<li>但也不是所有的「垃圾收集器」都会有，只不过我们现在线上用的可能都是JDK8，JDK8及以下所使用到的垃圾收集器都是有「分代」概念的</li>
</ul>
</li>
</ul>
<h2 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h2><ul>
<li><p>垃圾回收的过程，其实就对应着几种「垃圾回收算法」分别是</p>
<ul>
<li>标记清除算法、标记复制算法和标记整理算法【「标记」「复制」「整理」】</li>
</ul>
</li>
<li><p>「年轻代」的垃圾收集器有： Seria、Parallel Scavenge、 Pardew</p>
<ul>
<li>年轻代的垃圾回收器使用的都是「标记复制算法」</li>
<li>所以在「堆内存」划分中，将年轻代划分出 Survivor区（ Survivor From和 ourvor To），目的就是为了有一块完整的内存空间供垃圾回收器进行拷贝（移动）</li>
<li>新对象则放入Eden区</li>
<li>堆内存大小默认比例：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/6qtuUz_20211229160130.png"></p>
</li>
<li><p>「老年代」的垃圾收集器有： Serial Old、 Parallel Old、CMS</p>
</li>
<li><p>Serial是单线程的， Parallel是多线程。这些垃圾收集器实际上就是「实现了」垃圾回收算法（标记复制、标记整理以及标记清除算法）</p>
</li>
<li><p>CMS是「JDK8之前」是比较新的垃圾收集器，它的特点是能够尽可能减少「stop the word」时间。在垃圾回收时让用户线程和GC线程能够并发执行」</p>
</li>
</ul>
<h2 id="新创建的对象一般是在「新生代」嘛，那在什么时候会到「老年代」中呢？"><a href="#新创建的对象一般是在「新生代」嘛，那在什么时候会到「老年代」中呢？" class="headerlink" title="新创建的对象一般是在「新生代」嘛，那在什么时候会到「老年代」中呢？"></a>新创建的对象一般是在「新生代」嘛，那在什么时候会到「老年代」中呢？</h2><ul>
<li>两种情况<ul>
<li>如果对象太大了，就会直接进入老年代（对象创建时就很大 或者 Survivor区没办法存下该对象）</li>
<li>如果对象太老了，那就会晋升至老年代（每发生一次 Monor GC，存活的对象年龄+1，达到默认值15则晋升老年代）或者（动态对象年龄判定可以进入老年代）</li>
</ul>
</li>
</ul>
<h2 id="那-Monor-GC什么时候会触发呢？"><a href="#那-Monor-GC什么时候会触发呢？" class="headerlink" title="那 Monor GC什么时候会触发呢？"></a>那 Monor GC什么时候会触发呢？</h2><ul>
<li>当Eden区空间不足时，就会触发 Monor GC</li>
</ul>
<h2 id="那在「年轻代」GC的时候，从-GC-Roots出发，那不也会扫描到「老年代」的对象吗？那那那-不就相当于全堆扫描吗？那这分代还有意义吗？"><a href="#那在「年轻代」GC的时候，从-GC-Roots出发，那不也会扫描到「老年代」的对象吗？那那那-不就相当于全堆扫描吗？那这分代还有意义吗？" class="headerlink" title="那在「年轻代」GC的时候，从 GC Roots出发，那不也会扫描到「老年代」的对象吗？那那那.不就相当于全堆扫描吗？那这分代还有意义吗？"></a>那在「年轻代」GC的时候，从 GC Roots出发，那不也会扫描到「老年代」的对象吗？那那那.不就相当于全堆扫描吗？那这分代还有意义吗？</h2><ul>
<li><p>JVM解决方案</p>
<ul>
<li>Hotspot虚拟机「老的GC」（G1以下）是要求整个GC堆在连续的地址空间上</li>
<li>所以会有一条分界线（一侧是老年代，另一侧是年轻代），所以可以通过「地址」就可以判断对象在哪个分代上、</li>
<li>当做 Monor GCI的时候，从 GC Roots出发，如果发现「老年代」的对象，那就不往下走了（ Monor GC对老年代的区域毫无兴趣）</li>
</ul>
</li>
</ul>
<h2 id="但又有个问题，那如果「年轻代」的对象被「老年代」引用了呢？（老年代对象持有年轻代对象的引用），那时候肯定是不能回收掉「年轻代」的对象的？"><a href="#但又有个问题，那如果「年轻代」的对象被「老年代」引用了呢？（老年代对象持有年轻代对象的引用），那时候肯定是不能回收掉「年轻代」的对象的？" class="headerlink" title="但又有个问题，那如果「年轻代」的对象被「老年代」引用了呢？（老年代对象持有年轻代对象的引用），那时候肯定是不能回收掉「年轻代」的对象的？"></a>但又有个问题，那如果「年轻代」的对象被「老年代」引用了呢？（老年代对象持有年轻代对象的引用），那时候肯定是不能回收掉「年轻代」的对象的？</h2><ul>
<li>解决方案<ul>
<li>Hotspot虚拟机下有「 card table」（卡表）来避免全局扫描「老年代」对象</li>
<li>「堆内存」的每一小块区域形成「卡页」，卡表实际上就是卡页的集合。当判断一个卡页中有存在对象的跨代引用时，将这个页标记为「脏页」</li>
<li>那知道了「卡表」之后，就很好办了。每次 Monor GC的时候只需要去「卡表找到「脏页」，找到后加入至 GC Root，而不用去遍历整个「老年代」的对象了。</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>什么是垃圾</strong>：只要对象不再被使用，那即是垃圾</p>
<p><strong>如何判断为垃圾</strong>：可达性分析算法和引用计算算法，JVM使用的是可达性分析算法</p>
<p><strong>什么是GC Roots</strong>：GC Roots是一组必须活跃的引用，跟GC Roots无关联的引用即是垃圾，可被回收</p>
<p><strong>常见的垃圾回收算法</strong>：标记清除、标记复制、标记整理</p>
<p><strong>为什么需要分代</strong>：大部分对象都死得早，只有少部分对象会存活很长时间。在堆内存上都会在物理或逻辑上进行分代，为了使「stop the word」持续的时间尽可能短以及提高并发式GC所能应付的内存分配速率。</p>
<p><strong>Minor GC</strong>：当Eden区满了则触发，从GC Roots往下遍历，年轻代GC不关心老年代对象</p>
<p><strong>什么是card table</strong>【卡表】：空间换时间（类似bitmap），能够避免扫描老年代的所有对象，进而顺利进行Minor GC （案例：老年代对象持有年轻代对象引用）</p>
<p><strong>堆内存占比</strong>：年轻代占堆内存1&#x2F;3，老年代占堆内存2&#x2F;3。Eden区占年轻代8&#x2F;10，Survivor区占年轻代2&#x2F;10（其中From 和To 各站1&#x2F;10)</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>2、【对线面试官】今天来聊聊Java泛型</title>
    <url>/posts/5a56f011/</url>
    <content><![CDATA[<p>#2、【对线面试官】今天来聊聊Java泛型</p>
<h2 id="泛型了解"><a href="#泛型了解" class="headerlink" title="泛型了解"></a>泛型了解</h2><ol>
<li>在Java中的泛型简单来说就是：在创建对象或调用方法的时候才明确下具体的类型</li>
<li>使用泛型的好处就是代码更加简洁（不再需要强制转换），程序更加健壮（在编译期间没有警告，在运行期就不会出现ClassCastException异常）</li>
</ol>
<h2 id="工作中用得多吗"><a href="#工作中用得多吗" class="headerlink" title="工作中用得多吗"></a>工作中用得多吗</h2><ol>
<li>在操作集合的时候，还是很多的，毕竟方便啊。List lists &#x3D; new ArrayList&lt;&gt;();lists.add （”面试造火箭”）；</li>
<li>如果是其他场景的话，那就是在写「基础组件」的时候了。</li>
</ol>
<h2 id="你是怎么写的"><a href="#你是怎么写的" class="headerlink" title="你是怎么写的"></a>你是怎么写的</h2><ol>
<li><p>再明确一下泛型就是「在创建对象或调用方法的时候才明确下具体的类型」</p>
</li>
<li><p>而组件为了做到足够的通用性，是不知道「用户」传入什么类型参数进来的所以在这种情况下用泛型就是很好的实践。</p>
</li>
<li><p>这块可以参考SpringData JPA的JpaRepository写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">JpaRepository</span>&lt;T, ID&gt; <span class="keyword">extends</span> <span class="title class_">PagingAndSortingRepository</span>&lt;T, ID&gt;, QueryByExampleExecutor&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line"> List&lt;T&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> List&lt;T&gt; <span class="title function_">findAll</span><span class="params">(Sort sort)</span>;</span><br><span class="line"></span><br><span class="line"> List&lt;T&gt; <span class="title function_">findAllById</span><span class="params">(Iterable&lt;ID&gt; ids)</span>;</span><br><span class="line"></span><br><span class="line"> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">saveAll</span><span class="params">(Iterable&lt;S&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; S <span class="title function_">saveAndFlush</span><span class="params">(S entity)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; entities)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">void</span> <span class="title function_">deleteAllInBatch</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"> T <span class="title function_">getOne</span><span class="params">(ID id)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; example)</span>;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> &lt;S <span class="keyword">extends</span> <span class="title class_">T</span>&gt; List&lt;S&gt; <span class="title function_">findAll</span><span class="params">(Example&lt;S&gt; example, Sort sort)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>要写组件，还是离不开Java反射机制（能够从运行时获取信息），所以一般组件是泛型+反射来实现的。</p>
</li>
<li><p>回到我所讲的组件吧，背景是这样的：我这边有个需求，需要根据某些字段进行聚合。</p>
</li>
<li><p>换到SQL其实就是select sum（column 1),sum(column2) from table group by fie ld1,field2</p>
</li>
<li><p>需要sum和group by的列肯定是由业务方自己传入，而SQL的表其实就是我们的POJO（传入的字段也肯定是POJO的属性）</p>
</li>
<li><p>单个业务实际可以在参数上写死POJO，但为了做得更加通用，我把入参设置为泛型</p>
</li>
<li><p>拿到参数后，通过反射获取其字段具体的值，做累加就好了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 传入 需要group by 和 sum 的字段名</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">cacheMap</span><span class="params">(List&lt;String&gt; groupByKeys, List&lt;String&gt; sumValues)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.groupByKeys = groupByKeys;</span><br><span class="line">  <span class="built_in">this</span>.sumValues = sumValues;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">excute</span><span class="params">(T e)</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 从pojo 取出需要group by 的字段 list</span></span><br><span class="line">  List&lt;Object&gt; key = buildPrimaryKey(e);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// primaryMap 是存储结果的Map</span></span><br><span class="line">  <span class="type">T</span> <span class="variable">value</span> <span class="operator">=</span> primaryMap.get(key);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果从存储结果找到有相应记录</span></span><br><span class="line">  <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (String elem : sumValues) &#123;</span><br><span class="line">      <span class="comment">// 反射获取对应的字段，做累加处理</span></span><br><span class="line">      <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getDeclaredField(elem, e);</span><br><span class="line">      <span class="keyword">if</span> (field.get(e) <span class="keyword">instanceof</span> Integer) &#123;</span><br><span class="line">        field.set(value, (Integer) field.get(e) + (Integer) field.get(value));</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (field.get(e) <span class="keyword">instanceof</span> Long) &#123;</span><br><span class="line">        field.set(value, (Long) field.get(e) + (Long) field.get(value));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;类型异常,请处理异常&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理时间记录</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> getDeclaredField(<span class="string">&quot;updated&quot;</span>, value);</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">null</span> != field) &#123;</span><br><span class="line">      field.set(value, DateTimeUtils.getCurrentTime());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// group by 字段 第一次进来</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      primaryMap.put(key, Tclone(e));</span><br><span class="line">      createdMap.put(key, DateTimeUtils.getCurrentTime());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">      log.info(<span class="string">&quot;first put value error &#123;&#125;&quot;</span> , e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>理解了泛型的作用之后，再去审视自己代码时，就可以判断是否需要用到泛型了。</p>
</li>
</ol>
<h2 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h2><ol>
<li>主要是在平时工作中，写代码的时候会多想想，遇到能用到的地方会优化下代码</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>30、【对线面试官】CMS垃圾回收器</title>
    <url>/posts/6f559dce/</url>
    <content><![CDATA[<h1 id="30、【对线面试官】CMS垃圾回收器"><a href="#30、【对线面试官】CMS垃圾回收器" class="headerlink" title="30、【对线面试官】CMS垃圾回收器"></a>30、【对线面试官】CMS垃圾回收器</h1><h2 id="今天还是来聊聊CMS垃圾收集器呗？"><a href="#今天还是来聊聊CMS垃圾收集器呗？" class="headerlink" title="今天还是来聊聊CMS垃圾收集器呗？"></a>今天还是来聊聊CMS垃圾收集器呗？</h2><ul>
<li>如果用Seria和 Parallel系列的垃圾收集器：在垃圾回收的时，用户线程都会完全停止，直至垃圾回收结束！</li>
<li>CMS的全称： Concurrent Mark Sweep，翻译过来是「并发标记清除」</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/1u2iZp_20211229164510.png"></p>
<ul>
<li>用CMS对比上面的垃圾收集器（ Seria和Parllel和 parNew）：它最大的不同点就是「并发」：在GC线程工作的时候，用户线程「不会完全停止」，用户线程在「部分场景下」与GC线程一起并发执行</li>
<li>无论是什么垃圾收集器， Stop The Word&#x2F;是一定无法避免的！</li>
<li>CMS只是在「部分」的GC场景下可以让GC线程与用户线程并发执行</li>
<li>目的：为了避免「老年代GC」出现「长时间」的卡顿（ Stop The Word )</li>
</ul>
<h2 id="CMS工作流程"><a href="#CMS工作流程" class="headerlink" title="CMS工作流程"></a>CMS工作流程</h2><ul>
<li><p>CMS可以简单分为5个步骤：初始标记、并发标记、并发预清理、重新标记以及并发清除</p>
<ul>
<li><p>从步骤可看出，CMS主要是实现了「标记清除」垃圾回收算法</p>
</li>
<li><p>「初始标记」</p>
<ul>
<li>「初始标记」会标记 GCroots「直接关联」的对象以及「年轻代」指向「老年代」的对象</li>
<li>「初始标记」这个过程是会发生 Stop The Word的。但这个阶段的速度算是很快的，因为没有「向下追溯」（只标记一层）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/FqsTqd_20211229162246.png"></p>
</li>
<li><p>「并发标记」</p>
<ul>
<li>「并发标记」这个过程是不会停止用户线程的（不会发生 Stop The Word）。这一阶段主要是从 GC Roots向下「追溯」，标记所有可达的对象</li>
<li>并发标记」在GC的角度而言，是比较耗费时间的（需要追溯）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/cUUH7w_20211229162544.png"></p>
</li>
<li><p>「并发预处理」</p>
<ul>
<li>「并发预处理」这个阶段主要是：希望能减少下一个阶段「重新标记」所消耗的时间</li>
<li>因为下一个阶段「重新标记」是需要Stop The World的，「并发标记」这个阶段由于用户线程是没有被挂起的，所以对象是有可能发生变化的</li>
<li>可能有些对象，从新生代晋升到了老年代。可能有些对象，直接分配到了老年代（大对象）。可能老年代或者新生代的对象引用发生了变化</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NeI2CU_20211229163018.png"></p>
</li>
<li><p>「重新标记」</p>
<ul>
<li>「重新标记」阶段会 Stop The Word，这个过程的停顿时间其实很大程度上取决于上面「并发预处理」阶段</li>
<li>这是一个追赶的过程：边在标记存活对象，一边用户线程在执行产生垃圾）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/o97JPO_20211229163156.png"></p>
</li>
<li><p>「并发清除」</p>
<ul>
<li>一边用户线程在执行，一边GC线程在回收不可达的对象</li>
<li>这个过程，还是有可能用户线程在不断产生垃圾，但只能留到下一次GC进行处<br>理了，产生的这些垃圾被叫做“浮动垃圾”</li>
<li>完了以后会重置CMS算法相关的内部数据，为下一次GC循环做准备</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/TJihOR_20211229163307.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="为什么要扫年轻代？"><a href="#为什么要扫年轻代？" class="headerlink" title="为什么要扫年轻代？"></a>为什么要扫年轻代？</h2><ul>
<li>CMS主要回收老年代的对象。年轻代有可能会指向老年代的对象，不扫就不知道是不是垃圾了</li>
</ul>
<h2 id="「并发预处理」问题解决"><a href="#「并发预处理」问题解决" class="headerlink" title="「并发预处理」问题解决"></a>「并发预处理」问题解决</h2><ul>
<li>针对老年代的对象，其实还是可以借助类 card table的存储（将老年代对象发生变化所对应的卡页标记为 dirty）</li>
<li>所以「并发预处理」这个阶段会扫描可能由于「并发标记」时导致老年代发生变化的对象，会再扫描一遍标记为diy的卡页</li>
<li>对于新生代的对象，我们还是得遍历新生代来看看在「并发标记」过程中有没有对象引用了老年代.</li>
<li>JVM里给我们提供了很多「参数」，有可能在这个过程中会触发一次minor GC（触发了 minor GC是意味着就可以更少地遍历新生代的对象）</li>
</ul>
<h2 id="相比G1，那你觉得CMS有什么缺点呢？"><a href="#相比G1，那你觉得CMS有什么缺点呢？" class="headerlink" title="相比G1，那你觉得CMS有什么缺点呢？"></a>相比G1，那你觉得CMS有什么缺点呢？</h2><ul>
<li><p>1.空间需要预留：CMS垃圾收集器可以一边回收垃圾，一边处理用户线程，那需要在这个过程中保证有充足的内存空间供用户使用。</p>
<ul>
<li>如果CMS运行过程中预留的空间不够用了，会报错（ Concurrent Mode Failure），这时会启动 Serial Old垃圾收集器进行老年代的垃圾回收，会导致停顿的时间很长</li>
</ul>
</li>
<li><p>2.内存碎片问题：CMS本质上是实现了「标记清除算法」的收集器（从过程就可以看得出），这会意味着会产生内存碎片</p>
<ul>
<li>由于碎片太多，又可能会导致内存空间不足所触发 full GC，CMS一般会在触发full GC这个过程对碎片进行整理</li>
<li>整理涉及到「移动」&#x2F;「标记」，那这个过程肯定会 Stop The Word的，如果内存足够大（意味着可能装载的对象足够多），那这个过程卡顿也是需要一定的时间的。</li>
</ul>
</li>
<li><p>使用CMS的弊端好像就是一个死循环</p>
<ul>
<li>1.内存碎片过多，导致空间利用率减低。</li>
<li>2.空间本身就需要预留给用户线程使用，现在碎片内存又加剧了空间的问题，导致有可能垃圾收集器降级为 Serial old，卡顿时间更长</li>
<li>3.要处理内存碎片的问题（整理），同样会卡顿</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li><p>CMS把垃圾回收的过程给”细分”了，然后在某些阶段可以不停止用户线程，一边回收垃圾，一边处理请求，来减少每次垃圾回收时 Stop The Word的时间</p>
</li>
<li><p>中间也做了很多的优化（ dirty card标记、可能中途触发 minor gca等等，在我理解下，这些都提供了CMS的相关参数配置</p>
</li>
<li><p>CMS垃圾回收器设计目的：</p>
<ul>
<li>为了避免「老年代 GC」出现「长时间」的卡顿（Stop The World）</li>
</ul>
</li>
<li><p>CMS垃圾回收器回收过程：</p>
<ul>
<li>初始标记、并发标记、并发预处理、重新标记和并发清除。初始标记以及重新标记这两个阶段会Stop The World</li>
</ul>
</li>
<li><p>CMS垃圾回收器的弊端：</p>
<ul>
<li>会产生内存碎片&amp;&amp;需要空间预留：停顿时间是不可预知的</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KNqlDT_20211229164021.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>32、【对线面试官】如何实现幂等和去重？</title>
    <url>/posts/b8eb8241/</url>
    <content><![CDATA[<h1 id="如何实现去重和幂等"><a href="#如何实现去重和幂等" class="headerlink" title="如何实现去重和幂等"></a>如何实现去重和幂等</h1><h2 id="去重与幂等"><a href="#去重与幂等" class="headerlink" title="去重与幂等"></a>去重与幂等</h2><ul>
<li>区别<ul>
<li>「去重」是对请求或者消息在「一定时间内」进行去重「N次」</li>
<li>「幂等」则是保证请求或消息在「任意时间内」进行处理，都需要保证它的结果是一致</li>
</ul>
</li>
<li>以项目举例，我维护的「消息管理平台」是有「去重」的功能的：「5分钟相同内容消息去重」「1小时内模板去重」「一天内渠道达到N次阈值去重」.</li>
<li>再次强调下「幂等」和「去重」的本质：「唯一Key」+「存储」</li>
</ul>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><ul>
<li>不同的业务场景，唯一Key是不一样的，由业务決定</li>
<li>存储选择挺多的，比如「本地缓存」&#x2F;「 Redis」&#x2F;「 MYSQL」&#x2F;「 Hbase」等等，具体选取什么，也跟业务有关</li>
<li>比如说，在「消息管理平台」这个场景下，我存储选择的「 Redis」（读写性能优越）， Redis也有「过期时间」方便解决「一定时间内」的问题</li>
<li>而唯一Key，自然就是根据不同的业务构建不同的。</li>
<li>比如说「5分钟相同内容消息去重」，我直接MD5请求参数作为唯一Key。「1小时模板去重」则是「模板ID+ userid」作为唯一Key，「ー天内渠道去重」则是「渠道ID+ userid」作为唯一Key.</li>
</ul>
<h2 id="提到了「去重」了，你听过布隆过滤器吗？"><a href="#提到了「去重」了，你听过布隆过滤器吗？" class="headerlink" title="提到了「去重」了，你听过布隆过滤器吗？"></a>提到了「去重」了，你听过布隆过滤器吗？</h2><ul>
<li>布隆过滤器的底层数据结构可以理解为bitmap， bitmap也可以简单理解为是一个数组，元素只存储0和1，所以它占用的空间相对较小</li>
<li>当一个元素要存入 bitmap时，其实是要去看存储到 bitmap的哪个位置，这时一般用的就是「哈希算法」，存进去的位置标记为1</li>
<li>标记为1的位置表示存在，标记为0的位置标示不存在</li>
<li>布隆过滤器是可以以较低的空间占用来判断元素是否存在进而用于去重，但是它也有对应的缺点</li>
<li>只要使用哈希算法离不开「哈希冲突」，导致有存在「误判」的情况</li>
<li>在布隆过滤器中，如果元素判定为存在，那该元素「未必」真实存在。如果元素判定为不存在，那就肯定是不存在</li>
<li>这应该不用我多解释了吧？（结合「哈希算法」和「标记为1的位置表示存在，标记为0的位置表示不存在」这两者就能得出上面结论）</li>
<li>布隆过滤器也不能「删除」元素（也是哈希算法的局限性，在布隆过滤器中是不能准确定位一个元素的）</li>
<li>如果要用的话，布隆过滤器的实现可以直接上 guava已经实现好的，不过这个是单机的</li>
<li>而分布式下的布隆过滤器，一般现在会用 Redis，但也不是每个公司都会部暑布隆过潓器的 Redis版（还是有局限，像我以前公司就没有）</li>
<li>所以，目前我负责的项目都是没有用布隆过滤器的</li>
</ul>
<h2 id="去重开销大"><a href="#去重开销大" class="headerlink" title="去重开销大"></a>去重开销大</h2><ul>
<li>如果「去重」开销比较大，可以考虑建立「多层过滤」的逻辑</li>
<li>比如，先看看『本地缓存』能不能过滤一部分，剩下「强校验」交由『远程存储』（常见的 Redis或者DB）进行二次过滤</li>
</ul>
<h2 id="kafka场景"><a href="#kafka场景" class="headerlink" title="kafka场景"></a>kafka场景</h2><ul>
<li>当时你说在处理订单时实现了 at least one+幂等</li>
<li>幂等处理时：前置过滤使用的是 Redis，强一致校验时使用的是DB唯一索引，也是为了提高性能，唯一Key好像就是「订单编号+订单状态」</li>
</ul>
<h2 id="方案的场景适用"><a href="#方案的场景适用" class="headerlink" title="方案的场景适用"></a>方案的场景适用</h2><ol>
<li>一般我们需要对数据强一致性校验，就直接上 MYSQL（DB），毕竟有事务的支持</li>
<li>「本地缓存」如果业务适合，那可以作为一个「前置」判断</li>
<li>Redis高性能读写，前置判断和后置均可</li>
<li>而 Hbasel则一般用于庞大数据量的场景下（ Redis内存太贵，DB不够灵活也不适合单表存大量数据）</li>
</ol>
<h2 id="幂等"><a href="#幂等" class="headerlink" title="幂等"></a>幂等</h2><ul>
<li>至于幂等，一般的方案下存储还是「Redis」和「数据库」</li>
<li>最最最最常见的就是数据库「唯一索」来实现幂等（我所负责的好几个项目都是用这个）</li>
<li>构建「唯一Key」是业务相关的事了（一般是用自己的业务ID进行拼接，生成一个有意义”的唯一Key</li>
<li>当然，也有用「 Redis」和「 MYSQL」实现分布式锁来实现幂等的（：）</li>
<li>但 Redis’分布式锁是不能完全保证安全的，而MNSL实现分布式锁（乐观锁和悲观锁），不过还是看业务吧，我是没用到过的</li>
<li>网上有很多实现「幂等」的方案，本质上都是围绕着「存储」和「唯一Key」做了些变种，然后取了个名字</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>31、【对线面试官】G1垃圾收集器</title>
    <url>/posts/e93a2b49/</url>
    <content><![CDATA[<h1 id="31、【对线面试官】G1垃圾收集器"><a href="#31、【对线面试官】G1垃圾收集器" class="headerlink" title="31、【对线面试官】G1垃圾收集器"></a>31、【对线面试官】G1垃圾收集器</h1><h2 id="要不这次来聊聊G1垃圾收集器？"><a href="#要不这次来聊聊G1垃圾收集器？" class="headerlink" title="要不这次来聊聊G1垃圾收集器？"></a>要不这次来聊聊G1垃圾收集器？</h2><ul>
<li><p>CMS垃圾收集器的升级</p>
</li>
<li><p>G1垃圾收集器可以给你设定一个你希望Stop The Word停顿时间，G1垃圾收集器会根据这个时间尽量满足你</p>
<ul>
<li><p>在前面我在介绍JM堆的时候，堆的内存分布是以「物理」空间进行隔离</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/qjMhU8_20211229164725.png"></p>
</li>
<li><p>在G1垃圾收集器的世界上，堆的划分不再是「物理」形式，而是以「逻辑」的形式进行划分</p>
</li>
<li><p>不过的「分代」概念在G1垃圾收集器的世界还是一样奏效的</p>
</li>
<li><p>比如说：新对象一般会分配到Eden区经过默认15次的 Minor GC新生代的对象如果还存活，会移交到老年代等等。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/SwXVef_20211229165004.png"></p>
</li>
<li><p>堆被划分了多个同等份的区域，在G1里每个区域叫做Region</p>
</li>
<li><p>G1中，还有一种叫 Humongous（大对象）区域，其实就是用来存储特别大的对象（大于 Region内存的一半）</p>
</li>
<li><p>一旦发现没有引用指向大对象，就可直接在年轻代的 Minor GC中被回收掉</p>
</li>
<li><p>之所以要将「堆空间」进行「细分」多个小的区域，是因为像以前的垃圾收集器都是对堆进行「物理」划分，如果堆空间（内存）大的时候，每次进行「垃圾回收」都需要对一整块大的区域进行回收，那收集的时间是不好控制的；而划分多个小区域之后，那对这些「小区域」回收就容易控制它的「收集时间」了</p>
</li>
</ul>
</li>
</ul>
<h2 id="GC过程"><a href="#GC过程" class="headerlink" title="GC过程"></a>GC过程</h2><ul>
<li><p>在G1收集器中，可以主要分为有Minor GC（ Young GC）和 Mixed GC，也有些特殊场景可能会发生 Full GC</p>
<ul>
<li><p>Minor GC</p>
<ul>
<li><p>G1的 Minor GC其实触发时机跟前面提到过的垃圾收集器都是一样的</p>
</li>
<li><p>等到Eden区满了之后，会触发 Minor GC。 Minor GCI同样也是会发生 Stop The World的</p>
</li>
<li><p>要补充说明的是：在G1的世界里，新生代和老年代所占堆的空间是没那么固定的（会动态根据「最大停顿时间」进行调整）</p>
</li>
<li><p>这块会给我们提供参数进行配置就好了</p>
</li>
<li><p>所以，动态地改变收集年轻代 Region的个数可以「控制」 Minor GCI的开销</p>
</li>
<li><p>Minor GC我认为可以简单分为为三个步骤：根扫描、更新&amp;&amp;处理RSet、复制对象</p>
<p>1）第一步应该很好理解，因为这跟之前CMS是类似的，可以理解为初始标记的过程</p>
<p>2）第二步就是处理RSet的信息并且扫描，将老年代对象持有年轻代对象的相关引用都加入到 GC Roots下，避免被回收掉</p>
<p>​        涉及到「Rset」的概念</p>
<p>​    （1）上ー次我们聊CMS回收过程的时候，同样讲到了 Minor GC，它是通过「卡表」（ cart table）来避免全表扫描老年代的对象</p>
<p>​    （2）因为 Minor GC是回收年轻代的对象，但如果老年代有对象引用着年轻代，那这些被老年代引用的对象也不能回收掉</p>
<p>​    （3）同样的，在G1也有这种问题（毕竟是Minor GC）。CMS是卡表，而G1解决「跨代引用」的问题的存储一般叫做RSet</p>
<p>​    （4）只要记住，RSet这种存储在每个 Region都会有，它记录着「其他 Region引用了当前 Regiong的对象关系」</p>
<p>​    <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/FpUxzX_20211229170010.png"></p>
<p>​    （5）对于年轻代的 Region，它的RSet只保存了来自老年代的引用（因为年轻代的没必要存储啊，自己都要做 Minor GC了</p>
<p>​    （6）而对于老年代的 Region来说，它的RSet也只会保存老年代对它的引用（在G1垃圾收集器，老年代回收之前，都会先对年轻代进行回收，所以没必要保存年轻代的引用）</p>
<p>3）第三步：把扫描之后存活的对象往「空的 Survivor区」或者老年代」存放，其他的Eden区进行清除</p>
<p>​    （1）这里要提下的是，在G1还有另一个名词，叫做CSet</p>
<p>​    （2）它的全称是 Collection Set，保存了一次GC中「将执行垃圾回收」的 Region。CSet中的所有存活对象都会被转移到别的可用 Region上</p>
<p>​    （3）在 Minor GC的最后，会处理下软引用、弱引用、 JNI Weak等引用，结束收集</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p>总结</p>
<ul>
<li><p>总结起来就是：扫描、处理跨 Region引用、收集至CSet、复制清除、处理引用</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/WZo9bF_20211229170433.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="MixedGC过程"><a href="#MixedGC过程" class="headerlink" title="MixedGC过程"></a>MixedGC过程</h2><ul>
<li>当堆空间的占用率达到一定阈值后会触发 Mixed GC（默认45%，由参数决定）</li>
<li>Mixed GC会依赖「全局并发标记」统计后的 Region数据</li>
<li>「全局并发标记」它的过程跟CMS非常类型，步骤大概是：初始标记（STW）、并发标记、最终标记（ST）以及清理（ST）<ul>
<li>说明： Mixed GC它一定会回收年轻代，并会采集部分老年代的Region进行回收的，所以它是一个混合GC</li>
<li>「初始标记」，<ul>
<li>这个过程是「共用」了 Minor GC的 Stop The World（Mixed GC一定会发生 Minor GC），复用了「扫描 GC Roots的操作</li>
<li>在这个过程中，老年代和新生代都会扫</li>
<li>总的来说，「初始标记」这个过程还是比较快的，毕竟没有追溯遍历嘛</li>
</ul>
</li>
<li>「并发标记」<ul>
<li>这个阶段不会 Stop The World，GC线程与用户线程一起执行，GC线程负责收集各个 Region的存活对象信息</li>
<li>从 GC Roots往下追溯，査找整个堆存活的对象，比较耗时</li>
</ul>
</li>
<li>「重新标记」<ul>
<li>跟CMS又一样，标记那些在「并发标记」阶段发生变化的对象</li>
<li>CMS在「重新标记」阶段，应该会重新扫描所有的线程栈和整个年轻代作为root,G1不是<ul>
<li>在G1中解決「并发标记」阶段导致引用变更的问题，使用的是SATB算法</li>
<li>可以简单理解为：在GC开始的时候，它为存活的对象做了一次「快照」</li>
<li>在「并发阶段」时，把每一次发生引用关系变化时旧的引用值给记下来</li>
<li>然后在「重新标记」阶段只扫描着块「发生过变化」的引用，看有没有对象还是存活的，加入到「 GC Roots」上</li>
<li>不过SATB算法有个小的问题，就是：如果在开始时，G1就认为它是活的，那就在此次GC中不会对它回收，即便可能在「并发阶段」上对象已经变为了垃圾。</li>
<li>所以，G1也有可能会存在「浮动垃圾」</li>
<li>但是总的来说，对于G1而言，问题不大（毕竟它不是追求一次把所有的垃圾都清除掉，而是注重 Stop The Worlde时间）</li>
</ul>
</li>
</ul>
</li>
<li>「清理」<ul>
<li>这个阶段也是会 Stop The World的，主要清点和重置标记状态，会根据「停顿预模型」（其实就是设定的停顿时间），来决定本次GC回收多少 Region</li>
<li>一般来说， Mixed GC会选定所有的年轻代 Region，部分「回收价值高」的老年代 Region（回收价值高其实就是垃圾多）进行采集</li>
<li>最后 Mixed GC进行清除还是通过「拷贝」&#x2F;「复制」的方式去干的</li>
<li>所以在G1中，一次回收未必是将所有的垃圾进行回收的，G1会依据停顿时间做出选择 Region数量</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="什么时候发生full-GC"><a href="#什么时候发生full-GC" class="headerlink" title="什么时候发生full GC"></a>什么时候发生full GC</h2><ul>
<li>如果在 Mixed GC中无法跟上用户线程分配内存的速度，导致老年代填满无法继续进行 Mixed GC，就又会降级到 serial oldGC来收集整个 GC heap</li>
<li>其实跟CMS是非常类似的都是因为空间不足</li>
<li>不过uGC这个场景相较于CMS还是很少的，毕竟G1没有像CMS「内存碎片」这种问题</li>
</ul>
<h2 id="G1垃圾收集器特点："><a href="#G1垃圾收集器特点：" class="headerlink" title="G1垃圾收集器特点："></a><strong>G1垃圾收集器特点</strong>：</h2><ul>
<li>从原来的「物理」分代，变成现在的「逻辑」分代，将堆内存「逻辑」划分为多个Region</li>
<li>使用CSet来存储可回收Region的集合</li>
<li>使用RSet来处理跨代引用的问题（注意：RSet不保留 年轻代相关的引用关系）</li>
<li>G1可简单分为：Minor GC 和Mixed GC以及Full GC</li>
<li>【Eden区满则触发】Minor GC 回收过程可简单分为：(STW) 扫描 GC Roots、更新&amp;&amp;处理Rset、复制清除</li>
<li>全局并发标记的过程跟CMS过程差不多：初始标记（STW）、并发标记、最终标记（STW）以及清理（STW）</li>
<li>【整堆空间占一定比例则触发】Mixed GC 依赖「全局并发标记」，得到CSet(可回收Region)，就进行「复制清除」</li>
<li>使用SATB算法来处理「并发标记」阶段对象引用存在变更的问题</li>
<li><strong>亮点&amp;&amp;重点</strong>：提供可停顿时间参数供用户设置（<strong>G1会尽量满足该停顿时间来调整 GC时回收Region的数量</strong>）</li>
<li>R大描述G1原理的时候，他提到：从宏观的角度看G1，主要分为两块「<strong>全局并发标记</strong>」和「<strong>拷贝存活对象</strong>」</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>33、【对线面试官】Redis主从架构</title>
    <url>/posts/63b182f/</url>
    <content><![CDATA[<h1 id="33、【对线面试官】Redis主从架构"><a href="#33、【对线面试官】Redis主从架构" class="headerlink" title="33、【对线面试官】Redis主从架构"></a>33、【对线面试官】Redis主从架构</h1><h2 id="要不你来讲讲你公司的Redis是什么架构的咯？"><a href="#要不你来讲讲你公司的Redis是什么架构的咯？" class="headerlink" title="要不你来讲讲你公司的Redis是什么架构的咯？"></a>要不你来讲讲你公司的Redis是什么架构的咯？</h2><ul>
<li>我前公司的Redis架构是「分片集群」，使用的是「Proxy」层来对Key进行分流到不同的Redis服务器上</li>
<li>支持动态扩容、故障恢复等等…</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/exJQS5_20211229222731.png"></p>
<h2 id="那你来聊下Proxy-层的架构和基本实现原理？"><a href="#那你来聊下Proxy-层的架构和基本实现原理？" class="headerlink" title="那你来聊下Proxy.层的架构和基本实现原理？"></a>那你来聊下Proxy.层的架构和基本实现原理？</h2><ul>
<li><p>抱歉，这块由中间件团队负责，具体我也没仔细看过</p>
</li>
<li><p>不过，我可以给你讲讲现有常见开源的Redis架构</p>
<ul>
<li><p>在之前提到了Redis有持久化机制，即便Redis重启了，可以依靠RDB或者AOF文件对数据进行重新加载</p>
</li>
<li><p>但在这时，只有一台Redis服务器存储着所有的数据，此时如果Redis服务器「暂时」没办法修复了，那依赖Redis的服务就没了</p>
</li>
<li><p>所以，为了Redis「高可用」，现在基本都会给Redis做「备份」：多启一台Redis服务器，形成「主从架构」</p>
</li>
<li><p>「从服务器」的数据由「主服务器」复制过去，主从服务器的数据是一致的</p>
</li>
<li><p>如果主服务器挂了，那可以「手动」把「从服务器」升级为「主服务器」，缩短不可用时间</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/jCY34w_20211229225726.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="那「主服务器」是如何把自身的数据「复制」给「从服务器」的呢？"><a href="#那「主服务器」是如何把自身的数据「复制」给「从服务器」的呢？" class="headerlink" title="那「主服务器」是如何把自身的数据「复制」给「从服务器」的呢？"></a>那「主服务器」是如何把自身的数据「复制」给「从服务器」的呢？</h2><ul>
<li>「复制」也叫「同步」，在Redis使用的是「PSYNC」命令进行同步，该命令有两种模型：完全重同步和部分重同步</li>
<li>可以简单理解为：如果是第一次「同步」，从服务器没有复制过任何的主服务器，或者从服务器要复制的主服务器跟上次复制的主服务器不一样，那就会采用「完全重同步」模式进行复制</li>
<li>如果只是由于网络中断，只是「短时间」断连，那就会采用「部分重同步」模式进行复制</li>
<li>（假如主从服务器的数据差距实在是过大了，还是会采用「完全重同步」模式进行复制）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/8nL2eT_20211229225855.png"></p>
<h2 id="同步原理"><a href="#同步原理" class="headerlink" title="同步原理"></a>同步原理</h2><ul>
<li><p>主服务器要复制数据到从服务器，首先是建立Socket「连接」，这个过程会干一些信息校验啊、身份校验啊等事情</p>
</li>
<li><p>然后从服务器就会发「PSYNC」命令给主服务器，要求同步（这时会带「服务器ID」RUNID和「复制进度」offset参数。如果从服务器是新的，那就没有）</p>
</li>
<li><p>主服务器发现这是一个新的从服务器（因为参数没带上来），就会采用「完全重同步」模式，并把「服务器ID」（runld）和「复制进度」（offset）发给从服务器，从服务器就会记下这些信息。</p>
</li>
<li><p>随后，主服务器会在后台生成RDB文件，通过前面建立好的连接发给从服务器从服务器收到RDB文件后，首先把自己的数据清空，然后对RDB文件进行加载恢复</p>
</li>
<li><p>这个过程中，主服务器也没闲着（继续接收着客户端的请求）</p>
</li>
<li><p>主服务器把生成RDB文件「之后修改的命令」会用「ouffer.」记录下来，等到从服务器加载完RDB之后，主服务器会把「buffer.」记录下的命令都发给从服务器</p>
</li>
<li><p>这样一来，主从服务器就达到了数据一致性了（复制过程是异步的，所以数据是『最终一致性』）</p>
</li>
</ul>
<h2 id="那「部分重同步」的过程呢？"><a href="#那「部分重同步」的过程呢？" class="headerlink" title="那「部分重同步」的过程呢？"></a>那「部分重同步」的过程呢？</h2><ul>
<li><p>嗯，其实就是靠「offset」来进行部分重同步。每次主服务器传播命令的时候，都会把「offset」给到从服务器</p>
</li>
<li><p>主服务器和从服务器都会将「offset」保存起来（如果两边的offset存在差异，那么说明主从服务器数据未完全同步）</p>
</li>
<li><p>从服务器断连之后进行重连，就会发「PSYNC」命令给主服务器，同样也会带着RUNID和offset（重连之后，这些信息还是存在的）</p>
</li>
<li><p>主服务器收到命令之后，看RUNID是否能对得上，对得上，说明这可能以前就同步过一部分了</p>
</li>
<li><p>接着检查该「offset在主服务器里还是否存在（主服务器记录主从服务器offset的信息用的是环形buffer，如果该ouffer）满了，会覆盖以前的记录。而记录客户端的修改命令用的是另一个buffer）</p>
</li>
<li><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/4mdp0i_20211229230139.png"></p>
</li>
<li><p>如果从backlog_buffer找到了，那就把从缺失的一部分offer开始，把对应的修改命令发给从服务器</p>
</li>
<li><p>如果从环形ouffer（backlog._buffer）没找到，那只能使用「完全重同步」模式再次进行主从复制了</p>
<ul>
<li><p>懂了，无非就是有个关联关系记录下来，只不过存储是环形（可能会造成覆盖）</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/oGR8JD_20211229230354.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="Redis主库如果挂了，你还是得「手动」将从库升级为主库啊？你知道有什么办法能做到「自动」进行故障恢复吗？"><a href="#Redis主库如果挂了，你还是得「手动」将从库升级为主库啊？你知道有什么办法能做到「自动」进行故障恢复吗？" class="headerlink" title="Redis主库如果挂了，你还是得「手动」将从库升级为主库啊？你知道有什么办法能做到「自动」进行故障恢复吗？"></a>Redis主库如果挂了，你还是得「手动」将从库升级为主库啊？你知道有什么办法能做到「自动」进行故障恢复吗？</h2><ul>
<li><p>哨兵</p>
<ul>
<li><p>「哨兵」干的事情主要就是：监控（监控主服务器的状态）、选主（主服务器挂了，在从服务器选出一个作为主服务器）、通知（故障发送消息给管理员）和配置（作为配置中心，提供当前主服务器的信息）</p>
</li>
<li><p>可以把「哨兵」当做是运行在「特殊」模式下的Redis服务器，为了「高可用」，哨兵也是集群架构的。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/iPv3vB_20211229230508.png"></p>
</li>
<li><p>首先它需要跟Redis主从服务器创建对应的连接（获取它们的信息）</p>
</li>
<li><p>每个哨兵不断地用ping命令看主服务器有没有下线，如果主服务器在「配置时间」内没有正常响应，那当前哨兵就「主观」认为该主服务器下线了</p>
</li>
<li><p>其他「哨兵」同样也会ping该主服务器，如果「足够多」（还是看配置）的哨兵认为该主服务器已经下线，那就认为「客观下线」，这时就要对主服务器执行故障转移操作。</p>
</li>
<li><p>「哨兵」之间会选出一个「领头」，选出领头的规则也比较多，总的来说就是先到先得（哪个快，就选哪个）</p>
</li>
<li><p>由「领头哨兵」对已下线的主服务器进行故障转移</p>
<ul>
<li>过程<ul>
<li>首先要在「从服务器」上挑选出一个，来作为主服务器</li>
<li>（这里也挑选讲究，比如：从库的配置优先级、要判断哪个从服务器的复制offset最大、RunID大小、跟master断开连接的时长…）</li>
<li>然后，以前的从服务器都需要跟新的主服务器进行「主从复制」</li>
<li>已经下线的主服务器，再次重连的时候，需要让他成为新的主服务器的从服务器</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="了解，我想问问，Redis在主从复制和故障转移的过程中会导致数据丢失吗"><a href="#了解，我想问问，Redis在主从复制和故障转移的过程中会导致数据丢失吗" class="headerlink" title="了解，我想问问，Redis在主从复制和故障转移的过程中会导致数据丢失吗"></a>了解，我想问问，Redis在主从复制和故障转移的过程中会导致数据丢失吗</h2><ul>
<li><p>会的</p>
<ul>
<li><p>1）从上面的「主从复制」流程来看，这个过程是异步的（在复制的过程中：主服务器会一直接收请求，然后把修改命令发给从服务器）</p>
</li>
<li><p>假如主服务器的命令还没发完给从服务器，自己就挂掉了。这时候想要让从服务器顶上主服务器，但从服务器的数据是不全的</p>
</li>
<li><p>2）还有另一种情况就是：有可能哨兵认为主服务器挂了，但真实是主服务器并没有挂（网络抖动），而哨兵已经选举了一台从服务器当做是主服务器了，此时「客户端」还没反应过来，还继续写向旧主服务器写数据</p>
</li>
<li><p>等到旧主服务器重连的时候，已经被纳入到新主服务器的从服务器了…所以，那段时间里，客户端写进旧主服务器的数据就丢了</p>
</li>
</ul>
</li>
<li><p>上面这两种情况（主从复制延迟&amp;&amp;脑裂），都可以通过配置来「尽可能」避免数据的丢失</p>
</li>
<li><p>（达到一定的阈值，直接禁止主服务器接收写请求，企图减少数据丢失的风险）</p>
</li>
</ul>
<h2 id="要不再来聊聊Redis分片集群？"><a href="#要不再来聊聊Redis分片集群？" class="headerlink" title="要不再来聊聊Redis分片集群？"></a>要不再来聊聊Redis分片集群？</h2><ul>
<li>分片集群就是往每个Redis服务器存储一部分数据，所有的Redis服务器数据加起来，才组成完整的数据（分布式）</li>
<li>要想组成分片集群，那就需要对key进行「路由」（分片）<ul>
<li>现在一般的路由方案有两种：「客户端路由」（SDK）和「服务端路由」（Proxy）</li>
<li>客户端路由的代表（Redis Cluster），服务端路由的代表（Codis）</li>
<li>区别？</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><strong>Redis实现高可用</strong>：</p>
<ul>
<li>AOF&#x2F;RDB持久化机制</li>
<li>主从架构（主服务器挂了，手动由从服务器顶上）</li>
<li>引入哨兵机制自动故障转义</li>
</ul>
<p><strong>主从复制原理</strong>：</p>
<ul>
<li>PSYNC命令两种模式：完全重同步、部分重同步</li>
<li>完全重同步：主从服务器建立连接、主服务器生成RDB文件发给从服务器、主服务器不阻塞（相关修改命令记录至buffer）、将修改命令发给从服务器</li>
<li>部分重同步：从服务器断线重连，发送RunId和offset给主服务器，主服务器判断offset和runId，将还未同步给从服务器的offset相关指令进行发送</li>
</ul>
<p><strong>哨兵机制</strong>：</p>
<ul>
<li>哨兵可以理解为特殊的Redis服务器，一般会组成哨兵集群</li>
<li>哨兵主要工作是监控、告警、配置以及选主</li>
<li>当主服务器发生故障时，会「选出」一台从服务器来顶上「客观下线」的服务器，由「领头哨兵」进行切换</li>
</ul>
<p><strong>数据丢失</strong>：</p>
<ul>
<li>Redis的主从复制和故障转移阶段都有可能发生数据丢失问题（通过配置尽可能避免）</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>34、【对线面试官】Redis分片集群</title>
    <url>/posts/f4ff0293/</url>
    <content><![CDATA[<h1 id="34、【对线面试官】Redis分片集群"><a href="#34、【对线面试官】Redis分片集群" class="headerlink" title="34、【对线面试官】Redis分片集群"></a>34、【对线面试官】Redis分片集群</h1><h2 id="要不接着上一次的话题呗？聊下Redis的分片集群，先聊Redis-Clusters好咯？"><a href="#要不接着上一次的话题呗？聊下Redis的分片集群，先聊Redis-Clusters好咯？" class="headerlink" title="要不接着上一次的话题呗？聊下Redis的分片集群，先聊Redis Clusters好咯？"></a>要不接着上一次的话题呗？聊下Redis的分片集群，先聊Redis Clusters好咯？</h2><ul>
<li><p>基础</p>
<ul>
<li><p>在前面聊Redisl的时候，提到的Redis都是「单实例」存储所有的数据</p>
</li>
<li><p>1.主从模式下实现读写分离的架构，可以让多个从服务器承载「读流量」，但面对「写流量」时，始终是只有主服务器在抗。</p>
</li>
<li><p>2.「纵向扩展」升级Redis服务器硬件能力，但升级至一定程度下，就不划算了。</p>
</li>
<li><p>纵向扩展意味着「大内存」，Redis：持久化时的”成本”会加大（Redis做RDB持久化，是全量的，fork子进程时有可能由于使用内存过大，导致主线程阻塞时间过长）</p>
</li>
<li><p>所以，「单实例」是有瓶颈的这里的。单实例我指的是：某台Redis服务器存储着某业务的所有数据</p>
</li>
<li><p>「纵向扩展」不行，就「横向扩展」呗。</p>
</li>
<li><p>用多个Redis实例来组成一个集群，按照一定的规则把数据「分发」到不同的Redis实例上。当集群所有的Redis实例的数据加起来，那这份数据就是全的</p>
</li>
<li><p>其实就是「分布式」的概念（：只不过，在Redis.里，好像叫「分片集群」的人比较多？</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/UjVuJE_20211230101518.png"></p>
</li>
<li><p>从前面就得知了，要「分布式存储」，就肯定避免不了对数据进行「分发」（也是路由的意思）</p>
</li>
<li><p>从Redis Clusteri讲起吧，它的「路由」是做在客户端的（SDK已经集成了路由转发的功能）</p>
</li>
<li><p>Redis Cluster）对数据的分发的逻辑中，涉及到「哈希槽」（Hash Solt）的概念</p>
</li>
<li><p>Redis Cluster默认一个集群有16384个哈希槽，这些哈希槽会分配到不同的Redis实例中</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/wG6xGm_20211230101625.png"></p>
</li>
<li><p>至于怎么「瓜分」，可以直接均分，也可以「手动」设置每个Redis实例的哈希槽，全由我们来决定</p>
</li>
<li><p>重要的是，我们要把这16384个都得瓜分完，不能有剩余！</p>
</li>
<li><p>当客户端有数据进行写入的时候，首先会对key按照CRC16算法计算出16bit的值（可以理解为就是做hash），然后得到的值对16384进行取模</p>
</li>
<li><p>取模之后，自然就得到其中一个哈希槽，然后就可以将数据插入到分配至该哈希槽的Redis实例中</p>
</li>
</ul>
</li>
</ul>
<h2 id="那问题就来了，现在客户端通过hash算法算出了哈希槽的位置，那客户端怎么知道这个哈希槽在哪台Redis实例上呢？"><a href="#那问题就来了，现在客户端通过hash算法算出了哈希槽的位置，那客户端怎么知道这个哈希槽在哪台Redis实例上呢？" class="headerlink" title="那问题就来了，现在客户端通过hash算法算出了哈希槽的位置，那客户端怎么知道这个哈希槽在哪台Redis实例上呢？"></a>那问题就来了，现在客户端通过hash算法算出了哈希槽的位置，那客户端怎么知道这个哈希槽在哪台Redis实例上呢？</h2><ul>
<li>是这样的，在集群的中每个Redis实例都会向其他实例「传播」自己所负责的哈希槽有哪些。这样一来，每台Redis实例就可以记录着「所有哈希槽与实例」的关系了</li>
<li>有了这个映射关系以后，客户端也会「缓存」一份到自己的本地上，那自然客户端就知道去哪个Redis实例上操作</li>
</ul>
<h2 id="那我又有问题了，在集群里也可以新增画者删除Redis：实例啊，这个怎么整？（扩容、缩容很常见的操作）"><a href="#那我又有问题了，在集群里也可以新增画者删除Redis：实例啊，这个怎么整？（扩容、缩容很常见的操作）" class="headerlink" title="那我又有问题了，在集群里也可以新增画者删除Redis：实例啊，这个怎么整？（扩容、缩容很常见的操作）"></a>那我又有问题了，在集群里也可以新增画者删除Redis：实例啊，这个怎么整？（扩容、缩容很常见的操作）</h2><ul>
<li>当集群删除或者新增Redis实例时，那总会有某Redis实例所负责的哈希槽关系会发生变化</li>
<li>发生变化的信息会通过消息发送至整个集群中，所有的Redis实例都会知道该变化，然后更新自己所保存的映射关系</li>
<li>但这时候，客户端其实是不感知的</li>
<li>所以，当客户端请求时某Key时，还是会请求到「原来」的Redis实例上。</li>
<li>而原来的Redis实例会返回「noved」命令，告诉客户端应该要去新的Redis：实例上去请求啦</li>
<li>客户端接收到「moved」命令之后，就知道去新的Redis实例请求了，并且更新客户端自身「哈希槽与实例之间的映射关系」</li>
<li>总结起来就是：数据迁移完毕后被响应，客户端会收到「moved」命令，并且会更新本地缓存</li>
<li>那数据还没完全迁移完呢？</li>
<li>如果数据还没完全迁移完，那这时候会返回客户端「ask」命令。也是让客户端去请求新的Redis实例，但客户端这时候不会更新本地缓存</li>
</ul>
<h2 id="那你知道为什么哈希槽是16384个吗？"><a href="#那你知道为什么哈希槽是16384个吗？" class="headerlink" title="那你知道为什么哈希槽是16384个吗？"></a>那你知道为什么哈希槽是16384个吗？</h2><ul>
<li>嗯，这个。是这样的，Redis：实例之间「通讯」会相互交换「槽信息」，那如果槽过多（意味着网络包会变大），网络包变大，那是不是就意味着会「过度占用」网络的带宽</li>
<li>另外一块是，Redis作者认为集群在一般情况下是不会超过1000个实例</li>
<li>那就取了16384个，即可以将数据合理打散至Redis：集群中的不同实例，又不会在交换数据时导致带宽占用过多</li>
</ul>
<h2 id="那你知道为什么对数据进行分区在Redis中用的是「哈希槽」这种方式吗？而不是一致性哈希算法"><a href="#那你知道为什么对数据进行分区在Redis中用的是「哈希槽」这种方式吗？而不是一致性哈希算法" class="headerlink" title="那你知道为什么对数据进行分区在Redis中用的是「哈希槽」这种方式吗？而不是一致性哈希算法"></a>那你知道为什么对数据进行分区在Redis中用的是「哈希槽」这种方式吗？而不是一致性哈希算法</h2><ul>
<li>在我理解下，一致性哈希算法就是有个「哈希环」，当客户端请求时，会对Key进行hash，确定在哈希环上的位置，然后顺时针往后找，找到的第一个节点</li>
<li>一致性哈希算法比「传统固定取模」的好处就是：如果集群中需要新增或删除某实例，只会影响一小部分的数据</li>
<li>但如果在集群中新增或者删除实例，在一致性哈希算法下，就得知道是「哪一部分数据」受到影响了，需要进行对受影响的数据进行迁移</li>
<li>而哈希槽的方式，我们通过上面已经可以发现：在集群中的每个实例都能拿到槽位相关的信息（去中心化）</li>
<li>当客户端对key进行hash运算之后，如果发现请求的实例没有相关的数据，实例会返回「重定向」命令告诉客户端应该去哪儿请求</li>
<li>集群的扩容、缩容都是以「哈希槽」作为基本单位进行操作，总的来说就是「实现」会更加简单（简洁，高效，有弹性）</li>
<li>过程大概就是把部分槽进行重新分配，然后迁移槽中的数据即可，不会影响到集群中某个实例的所有数据。</li>
</ul>
<h2 id="那你了解「服务端路由」的大致原理吗？"><a href="#那你了解「服务端路由」的大致原理吗？" class="headerlink" title="那你了解「服务端路由」的大致原理吗？"></a>那你了解「服务端路由」的大致原理吗？</h2><ul>
<li><p>嗯，服务端路由一般指的就是，有个代理层专门对接客户端的请求，然后再转发到Redis集群进行处理</p>
</li>
<li><p>上次最后面试的时候，也提到了，现在比较流行的是Codis</p>
</li>
<li><p>它与Redis Clusteri最大的区别就是，Redis Cluster是直连Redis实例的，而Codis则客户端直连Proxy，再由Proxy进行分发到不同的Redis实例进行处理</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5iNRXA_20211230102232.png"></p>
</li>
<li><p>在Codis对Key路由的方案跟Redis Cluster很类似，Codis初始化出1024个哈希槽，然后分配到不同的Redis服务器中</p>
</li>
<li><p>哈希槽与Redis实例的映射关系由Zookeeper进行存储和管理，Proxy会通过CodisDashBoard得到最新的映射关系，并缓存在本地上</p>
</li>
</ul>
<h2 id="那如果我要扩容Codis-Redis实例的流程是怎么样的？"><a href="#那如果我要扩容Codis-Redis实例的流程是怎么样的？" class="headerlink" title="那如果我要扩容Codis Redis实例的流程是怎么样的？"></a>那如果我要扩容Codis Redis实例的流程是怎么样的？</h2><ul>
<li>简单来说就是：把新的Redis：实例加入到集群中，然后把部分数据迁移到新的实例上</li>
<li>大概的过程就是：<ul>
<li>1.「原实例」某一个Solt的部分数据发送给「目标实例」</li>
<li>2.「目标实例」收到数据后，给「原实例」返回ack</li>
<li>3.「原实例」收到ack之后，在本地删除掉刚刚给「目标实例」的数据</li>
<li>4.不断循环1、2、3步骤，直至整个solt迁移完毕</li>
</ul>
</li>
<li>Codis和Redis Cluster迁移的步骤都差不多的</li>
<li>不过Codis：是支持「异步迁移」的，针对上面的步骤2，「原实例」发送数据后，不等待「目标实例」返回ack，就可以继续接收客户端的请求</li>
<li>未迁移完的数据标记为「只读」，就不会影响到数据的一致性</li>
<li>如果对迁移中的数据存在「写操作」，那会让客户端进行「重试」，最后会写到「目标实例」上</li>
<li>还有就是，针对bigkey，异步迁移采用了「拆分指令」的方式进行迁移，比如有个set元素有10000个，那「原实例」可能就发送10000条命令给「目标实例」，而不是一整个bigkey一次性迁移（因为大对象容易造成阻塞）</li>
</ul>
<h2 id="Redis-Cluster和Codis的总体区别"><a href="#Redis-Cluster和Codis的总体区别" class="headerlink" title="Redis Cluster和Codis的总体区别"></a>Redis Cluster和Codis的总体区别</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/EArvDs_20211230102555.png"></p>
<h2 id="总结1"><a href="#总结1" class="headerlink" title="总结1"></a>总结1</h2><ul>
<li>说白了就是，如果集群Redis实例存在变动，由于Redis实例之间会「通讯」</li>
<li>所以等到客户端请求时，Redis实例总会知道客户端所要请求的数据在哪个Redis实例上</li>
<li>如果已经迁移完毕了，那就返回「move」命令告诉客户端应该去找哪个Redis实例要数据，并且客户端应该更新自己的缓存（映射关系）</li>
<li>如果正在迁移中，那就返回「ack」命令告诉客户端应该去找哪个Redis实例要数据</li>
</ul>
<h2 id="总结2"><a href="#总结2" class="headerlink" title="总结2"></a>总结2</h2><p><strong>分片集群诞生理由</strong>：写性能在高并发下会遇到瓶颈&amp;&amp;无法无限地纵向扩展（不划算）</p>
<p><strong>分片集群</strong>：需要解决「数据路由」和「数据迁移」的问题</p>
<p><strong>Redis Cluster数据路由</strong>：</p>
<ul>
<li>Redis Cluster默认一个集群有16384个哈希槽，哈希槽会被分配到Redis集群中的实例中</li>
<li>Redis集群的实例会相互「通讯」，交互自己所负责哈希槽信息（最终每个实例都有完整的映射关系）</li>
<li>当客户端请求时，使用CRC16算法算出Hash值并模以16384，自然就能得到哈希槽进而得到所对应的Redis实例位置</li>
</ul>
<p><strong>为什么16384个哈希槽</strong>：16384个既能让Redis实例分配到的数据相对均匀，又不会影响Redis实例之间交互槽信息产生严重的网络性能开销问题</p>
<p><strong>Redis Cluster 为什么使用哈希槽，而非一致性哈希算法</strong>：哈希槽实现相对简单高效，每次扩缩容只需要动对应Solt（槽）的数据，一般不会动整个Redis实例</p>
<p><strong>Codis数据路由</strong>：默认分配1024个哈希槽，映射相关信息会被保存至Zookeeper集群。Proxy会缓存一份至本地，Redis集群实例发生变化时，DashBoard更新Zookeeper和Proxy的映射信息</p>
<p><strong>Redis Cluster和Codis数据迁移</strong>：Redis Cluster支持同步迁移，Codis支持同步迁移&amp;&amp;异步迁移</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>35、【对线面试官】系统需求多变时，如何设计</title>
    <url>/posts/89b0310a/</url>
    <content><![CDATA[<h1 id="35、【对线面试官】系统需求多变时，如何设计"><a href="#35、【对线面试官】系统需求多变时，如何设计" class="headerlink" title="35、【对线面试官】系统需求多变时，如何设计"></a>35、【对线面试官】系统需求多变时，如何设计</h1><h2 id="我现在有个系统会根据请求的入参，做出不同动作。但是，这块不同的动作很有可能是会发生需求变动的，这块系统你会怎么样设计？"><a href="#我现在有个系统会根据请求的入参，做出不同动作。但是，这块不同的动作很有可能是会发生需求变动的，这块系统你会怎么样设计？" class="headerlink" title="我现在有个系统会根据请求的入参，做出不同动作。但是，这块不同的动作很有可能是会发生需求变动的，这块系统你会怎么样设计？"></a>我现在有个系统会根据请求的入参，做出不同动作。但是，这块不同的动作很有可能是会发生需求变动的，这块系统你会怎么样设计？</h2><h2 id="实际的例子：现在有多个第三方渠道，系统需要对各种渠道进行订单归因"><a href="#实际的例子：现在有多个第三方渠道，系统需要对各种渠道进行订单归因" class="headerlink" title="实际的例子：现在有多个第三方渠道，系统需要对各种渠道进行订单归因"></a>实际的例子：现在有多个第三方渠道，系统需要对各种渠道进行订单归因</h2><h2 id="但是归因的逻辑很有可能会发生变化，不同的渠道归因的逻辑也不太一样，此时系统里的逻辑相对比较复杂"><a href="#但是归因的逻辑很有可能会发生变化，不同的渠道归因的逻辑也不太一样，此时系统里的逻辑相对比较复杂" class="headerlink" title="但是归因的逻辑很有可能会发生变化，不同的渠道归因的逻辑也不太一样，此时系统里的逻辑相对比较复杂"></a>但是归因的逻辑很有可能会发生变化，不同的渠道归因的逻辑也不太一样，此时系统里的逻辑相对比较复杂</h2><h2 id="如果让你优化一下，你会怎么设计？"><a href="#如果让你优化一下，你会怎么设计？" class="headerlink" title="如果让你优化一下，你会怎么设计？"></a>如果让你优化一下，你会怎么设计？</h2><ul>
<li><p>问题转化</p>
<ul>
<li>归根到底，就是处理的逻辑相对复杂，if else的判断太多了</li>
<li>虽然新的需求来了，都可以添加if else进行解决</li>
<li>但你想要的就是，系统的可扩展性和可维护性更强</li>
<li>想要我这边出一个方案，来解决类似的问题</li>
</ul>
</li>
<li><p>回答</p>
<ul>
<li><p>在这之前，一般上网搜如何解决if else，大多数都说是策略模式</p>
</li>
<li><p>但是举的例子我又没感同身受，很多时候看完就过去了</p>
</li>
<li><p>实际上，在项目里边，用策略模式还是蛮多的，可能无意间就已经用上了（毕竟面向接口编程嘛）</p>
</li>
<li><p>而我认为，策略模式不是解决if else的关键</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HPysDw_20211230104621.png"></p>
</li>
<li><p>这个问题，我的项目里的做法是：责任链模式</p>
<ul>
<li><p>把每个流程单独抽取成一个Process（可以理解为一个模块或节点），然后请求都会塞进Context中</p>
</li>
<li><p>比如，之前维护过一个项目，也是类似于不同的渠道走不同的逻辑</p>
</li>
<li><p>我们这边的做法是：抽取相关的逻辑到Process中，为不同的渠道分配不同的责任链</p>
</li>
<li><p>比如渠道A的责任链是：WhiteListProcess-&gt;DataAssembleProcess-&gt;ChannelAProcess-&gt;SendProcess</p>
</li>
<li><p>而渠道B的责任链是：WhiteListProcess-&gt;DataAssembleProcess-&gt;ChannelBProcess-&gt;SendProcess</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/3IQouH_20211230104740.png"></p>
</li>
<li><p>在责任链基础之上，又可以在代码里内嵌「脚本」</p>
</li>
<li><p>比如在SendProcess上，内置发送消息的脚本（脚本可以选择不同的运营商进行发送消息）。有了「脚本」以后，那就可以做到对逻辑的改动不需要重启就可以生效。</p>
</li>
<li><p>有人把这一套东西叫做「规则引擎」</p>
</li>
<li><p>比如，规则引擎中比较出名的实现框架「Drools」就可以做到类似的事</p>
</li>
<li><p>把易改动的逻辑写在「脚本」上（至少我们认为，脚本和我们的应用真实逻辑是分离）</p>
</li>
<li><p>（脚本我这里指的是规则集，它可以是Drools的dsl，也可以是Groovy，也可以是aviator等等）</p>
</li>
<li><p>在我之前的公司，使用的是Groovyl脚本</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="具体怎么做的"><a href="#具体怎么做的" class="headerlink" title="具体怎么做的"></a>具体怎么做的</h2><ul>
<li><p>大致的实现逻辑就是：有专门后台对脚本进行管理，然后会把脚本写到「分布式配置中心」（实时刷新），客户端监听「分布式配置中心」所存储的脚本是否有改动</p>
</li>
<li><p>如果存在改动，则通过Groovy类加载器重新编译并加载脚本，最后放到Spring容器对外使用</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Kpog15_20211230104940.png"></p>
</li>
<li><p>我目前所负责的系统就是这样处理多变以及需求变更频繁的业务（责任链+规则引擎）</p>
</li>
<li><p>不过据我了解，我们的玩法业务在实现上在「责任链」多做了些事情（所谓的可配置化）</p>
</li>
<li><p>「责任链」不再从代码里编写，而是下沉到平台去做「服务编排」，就是由程序员去「服务编排后台」上配置信息（配置责任链的每一个节点）</p>
</li>
<li><p>在业务系统里使用「服务编排」的客户端，请求时只要传入「服务编排」的ID，就可以按「服务编排」的流程执行代码</p>
</li>
<li><p>这样做的好处就是：业务链是在后台配置的，不用在系统业务上维护链，灵活性更高（写好的责任链节点可以随意组合）</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/30jP6P_20211230105053.png"></p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>遇到这道题之后，其实我当时答得不太行（当时只是简单说了下责任链和脚本）</p>
<p>于是面试题发给前同事A，让他给我出出意见，同事A给我回答的内容是：「<strong>抽象，模块化，配置化</strong>」</p>
<p>光看这几个词，他说得也没错，但我理解不了。让他具体点，他也不展开了</p>
<p>于是，我又厚着脸皮去找别的前同事B，得出的回答是：</p>
<ul>
<li>「<strong>是否可以做成配置化、动态替换、插件式、不需要人去开发</strong>」</li>
<li>「<strong>规则引擎</strong>」</li>
</ul>
<p>当我问他，什么是「规则引擎」时，反手就被教育了，<strong>问我到底这两年学了什么，这都不懂，这也太菜了</strong>。</p>
<p>有了”方向”以后，我花了点时间去搜了下「<strong>规则引擎</strong>」的资料，顺便入门了下「Drools」，发现这玩意不就类似于我之前在公司用的Groovy脚本平台</p>
<p>（当时还在纳闷想为啥那后台的名字叫做规则平台）…</p>
<p>于是又去简单翻了下我们的Groovy脚本平台是怎么实现这套东西的</p>
<p>「服务编排」这块之前在公司里因为项目的缘故，自己也没接入过，但一直听有其他的团队在用，顺便也简单看了下代码（：</p>
<p>后来再去找同事B时，他说现在自己公司用的是「<strong>流程引擎</strong>」，画图就ok了</p>
<p><strong>其实，搞了半天，还是写if else 舒服!</strong></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>36、【对线面试官】设计模式</title>
    <url>/posts/2b7e87b2/</url>
    <content><![CDATA[<h1 id="36、【对线面试官】设计模式"><a href="#36、【对线面试官】设计模式" class="headerlink" title="36、【对线面试官】设计模式"></a>36、【对线面试官】设计模式</h1><h2 id="熟悉哪些常见的设计模式？"><a href="#熟悉哪些常见的设计模式？" class="headerlink" title="熟悉哪些常见的设计模式？"></a>熟悉哪些常见的设计模式？</h2><ul>
<li>常见的工厂模式、代理模式、模板方法模式、责任链模式、单例模式、包装设计模式、策略模式等都是有所了解的</li>
<li>项目手写代码用得比较多的，一般就模板方法模式、责任链模式、策略模式、单例模式吧</li>
<li>像工厂模式、代理模式这种，手写倒是不多，但毕竟Java后端一般环境下都用Spring嘛，所以还是比较熟悉的</li>
</ul>
<h2 id="手写单例模式"><a href="#手写单例模式" class="headerlink" title="手写单例模式"></a>手写单例模式</h2><ul>
<li>单例模式一般会有好几种写法<ul>
<li>饿汉式、简单懒汉式（在方法声明时加锁）、DCL双重检验加锁（进阶懒汉式）、静态内部类（优雅懒汉式）、枚举</li>
<li>所谓「饿汉式」指的就是还没被用到，就直接初始化了对象。所谓「懒汉式」指的就是等用到的时候，才进行初始化</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//DCL懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton1</span> &#123;</span><br><span class="line">    <span class="comment">//第一次减少锁的开销、第二次防止重复、volatile防止重排序导致实例化未完成</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton1</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton1 singleton;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton1 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123; <span class="comment">//线程1，2，3到达这里</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton1.class)&#123;<span class="comment">//线程1到这里开始继续往下执行，线程2，3等待</span></span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;<span class="comment">//线程1到这里发现instance为空，继续执行if代码块</span></span><br><span class="line">                    <span class="comment">//执行晚后退出同步区域，然后线程2进入同步代码块，如果在这里不再加一次判断</span></span><br><span class="line">                    <span class="comment">//就会造成instance再次实例化</span></span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton1</span>();</span><br><span class="line">                    <span class="comment">//new Singleton1();可以分解为3行伪代码</span></span><br><span class="line">                    <span class="comment">//1、memory = allocate() //分配内存</span></span><br><span class="line">                    <span class="comment">//2、ctorInstanc(memory) //初始化对象</span></span><br><span class="line">                    <span class="comment">//3.调用构造函数，</span></span><br><span class="line">                    <span class="comment">//4.返回地址给引用。而cpu为了优化程序，可能会进行指令重排序，打乱这3，4这几个步骤，导致实例内存还没分配，就被使用了。</span></span><br><span class="line">                    <span class="comment">//线程A和线程B举例。线程A执行到new Singleton()，开始初始化实例对象，由于存在指令重排序，这次new操作，先把引用赋值了，还没有执行构造函数。</span></span><br><span class="line">                    <span class="comment">//这时时间片结束了，切换到线程B执行，线程B调用new Singleton()方法，发现引用不等于null，就直接返回引用地址了，然后线程B执行了一些操作，就可能导致线程B使用了还没有被初始化的变量。</span></span><br><span class="line">                    <span class="comment">//volatile防止重排序导致实例化未完成，就将对象赋值使用</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类 懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton2</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton2</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton2</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton3</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton3</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类型是线程安全的，并且只会装载一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">        INSTANCE;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Singleton3 instance;</span><br><span class="line"></span><br><span class="line">        Singleton()&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton3</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Singleton.INSTANCE.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//枚举</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton4</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton4</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">        SINGLETON;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Singleton4</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        SingletonEnum()&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton4</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonEnum.SINGLETON.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="那你们用的哪种比较多？"><a href="#那你们用的哪种比较多？" class="headerlink" title="那你们用的哪种比较多？"></a>那你们用的哪种比较多？</h2><ul>
<li>一般我们项目里用静态内部类的方式实现单例会比较多（如果没有Springl的环境下），代码简洁易读</li>
<li>如果有Spring环境，那还是直接交由Spring容器管理会比较方便（Spring默认就是单例的）</li>
<li>枚举一般我们就用它来做「标识」吧，而DCL这种方式也有同学会在项目里写（在一些源码里也能看到其身影），但总体太不利于阅读和理解</li>
<li>总的来说，用哪一种都可以的，关键我觉得要看团队的代码风格吧（保持一致就行），即便都用「饿汉式」也没啥大的问题（现在内存也没那么稀缺，我认为可读性比较重要）</li>
</ul>
<h2 id="我看你在DCL的单例代码上，写了volatile修饰嘛？为什么呢？"><a href="#我看你在DCL的单例代码上，写了volatile修饰嘛？为什么呢？" class="headerlink" title="我看你在DCL的单例代码上，写了volatile修饰嘛？为什么呢？"></a>我看你在DCL的单例代码上，写了volatile修饰嘛？为什么呢？</h2><ul>
<li>指令是有可能乱序执行的（编译器优化导致乱序、CPU缓存架构导致乱序、CPU原生重排导致乱序）</li>
<li>在代码new Object的时候，不是一条原子的指令，它会由几个步骤组成，在这过程中，就可能会发生指令重排的问题，而volatile这个关键字就可以避免指令重排的发生。</li>
</ul>
<h2 id="那你说下你在项目里用到的设计模式吧？"><a href="#那你说下你在项目里用到的设计模式吧？" class="headerlink" title="那你说下你在项目里用到的设计模式吧？"></a>那你说下你在项目里用到的设计模式吧？</h2><ul>
<li><p>嗯，比如说，我这边在处理请求的时候，会用到责任链模式进行处理（减免if else并且让项目结构更加清晰）</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/X77vb4_20211230110546.png"></p>
<ul>
<li>在处理公共逻辑时，会使用模板方法模式进行抽象，具体不同的逻辑会由不同的实现类处理（每种消息发送前都需要经过文案校验，所以可以把文案校验的逻辑写在抽象类上）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/wEKBZr_20211230110629.png"></p>
</li>
<li><p>代理模式手写的机会比较少（因为项目一般有Spring：环境，直接用Spring的AOP代理就好了）</p>
<ul>
<li><p>我之前使用过AOP把「监控客户端」封装以「注解」的方式进行使用（不用以硬编码的方式来进行监控，只要有注解就行）</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/gF5mCF_20211230110735.png"></p>
</li>
</ul>
</li>
</ul>
<h2 id="那你能聊聊Spring使用到的常见设计模嘛？"><a href="#那你能聊聊Spring使用到的常见设计模嘛？" class="headerlink" title="那你能聊聊Spring使用到的常见设计模嘛？"></a>那你能聊聊Spring使用到的常见设计模嘛？</h2><ul>
<li>比如，Spring IOC容器可以理解为应用了「工厂模式」（通过ApplicationContext或者BeanFactory去获取对象）</li>
<li>Spring的对象默认都是单例的，所以肯定是用了「单例模式」（源码里对单例的实现是用的DCL来实现单例）</li>
<li>Spring AOP的底层原理就是用了「代理模式」，实现可能是JDK动态代理，也可能是CGLIB动态代理</li>
<li>Spring有很多地方都用了「模板方法模式」，比如事务管理器（AbstractPlatformTransactionManager),getTransaction定义了框架，其中很多都由子类实现</li>
<li>Spring的事件驱动模型用了「观察者模式」，具体实现就是ApplicationContextEvent、ApplicationListener</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>37、【对线面试官】JVM调优</title>
    <url>/posts/53284982/</url>
    <content><![CDATA[<h1 id="JVM调优"><a href="#JVM调优" class="headerlink" title="JVM调优"></a>JVM调优</h1><h2 id="今天要不来聊聊JVM调优相关的吧？你曾经在生产环境下有过调优JVM的经历吗？"><a href="#今天要不来聊聊JVM调优相关的吧？你曾经在生产环境下有过调优JVM的经历吗？" class="headerlink" title="今天要不来聊聊JVM调优相关的吧？你曾经在生产环境下有过调优JVM的经历吗？"></a>今天要不来聊聊JVM调优相关的吧？你曾经在生产环境下有过调优JVM的经历吗？</h2><ul>
<li><p>没有</p>
</li>
<li><p>嗯.是这样的，我们一般优化系统的思路是这样的</p>
<ul>
<li><p>1.一般来说关系型数据库是先到瓶颈，首先排查是否为数据库的问题</p>
<ul>
<li>（这个过程中就需要评估自己建的索引是否合理、是否需要引入分布式缓存是否需要分库分表等等）</li>
</ul>
</li>
<li><p>2.然后，我们会考虑是否需要扩容（横向和纵向都会考虑）</p>
<ul>
<li>（这个过程中我们会怀疑是系统的压力过大或者是系统的硬件能力不足导致系统频繁出现问题）</li>
</ul>
</li>
<li><p>3.接着，应用代码层面上排查并优化</p>
<ul>
<li>扩容是不能无止境的，里头里外都是钱阿，这个过程中我们会审视自己写的代码是否存在资源浪费的问题，又或者是在逻辑上可存在优化的地方，比如说通过并行的方式处理某些请求）</li>
</ul>
</li>
<li><p>4.再接着，JVM层面上排查并优化</p>
</li>
<li><p>审视完代码之后，这个过程我们观察JVM是否存在多次GC问题等等）</p>
</li>
<li><p>5.最后，网络和操作系统层面排查</p>
<ul>
<li>（这个过程查看内存CPU&#x2F;网络&#x2F;硬盘读写指标是否正常等等）</li>
</ul>
</li>
</ul>
</li>
<li><p>绝大多数情况下，到第三步就结束了，    一般经过「运维团队」给我们设置的JVM和机器上的参数，已经满足绝大多数的需求了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/1iVqn7_20211230111504.png" alt="调优顺序"></p>
</li>
<li><p>之前有过其他团队在「大促」发现接口处理超时的问题，那吋候查各种监控怀疑是 FULL GC频率稍大所导致的</p>
<ul>
<li>第一想法不是说去调节各种JVM参数来进行优化，而是直接加机器</li>
<li>（用最粗暴的方法，解决问题是最简单的，扩容）</li>
<li>不过，我是学过JM相关的调优命令和思路的。</li>
<li>在我的理解下，调优JVM其实就是在「理解」JM内存结构以及各种垃圾收集器前提下，结合自己的现有的业务来「调整参数」，使自己的应用能够正常稳定运行</li>
</ul>
</li>
<li><p>jvm调优</p>
<ul>
<li><p>一般调优JVM我们认为会有几种指标可以参考：『吞吐量』、『停顿时间』和垃圾回收频率』</p>
</li>
<li><p>基于这些指标，我们就有可能需要调整</p>
<ul>
<li>1.内存区域大小以及相关策略（比如整块堆内存占多少、新生代占多少、老年代占多少、 Survivor占多少、晋升老年代的条件等等<ul>
<li>比如（-Xmx：设置堆的最大值、-Xms：设置堆的初始值、-Xmn：表示年轻代的大小、- XX： Survivorratio：伊甸区和幸存区的比例等等</li>
<li>按经验来说：IO密集型的可以稍微把「年轻代」空间加大些，因为大多数对象都是在年轻代就会灭亡。内存计算密集型的可以稍微把「老年代」空间加大些，对象存活时间会更长些）</li>
</ul>
</li>
<li>2.垃圾回收器（选择合适的垃圾回收器，以及各个垃圾回收器的各种调优参数）<ul>
<li>比如（-XX：+UseG1GC：指定JVM使用的垃圾回收器为G1、- XX： Maxgcpause Miliis：设置目标停顿时间、-XX:InitiatingHeapoccupancypercent：当整个堆内存使用达到一定比例，全局并发标记阶段就会被启动等等）</li>
<li>没错，这些都是因地制宜，具体问题具体分析（前提是得懂JVM的各种基础知识，基础知识都不懂，谈何调优）</li>
<li>在大多数场景下，JWM已经能够达到「开箱即用」</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/aGMnp8_20211230111916.png" alt="调优"></p>
</li>
<li><p>一般我们是「遇到问题」之后才进行调优的，而遇到问题后需要利用各种的「工具」进行排查</p>
<ul>
<li>1.通过ps命令查看Java进程「基础」信息（进程号、主类）。这个命令很常用的就是用来看当前服务器有多少Java进程在运行，它们的进程号和加载主类是啥</li>
<li>2.通过stat命令査看Java进程「统计类」相关的信息（类加载、编译相关信息统计，各个内存区域GC概况和统计）。这个命令很常用于看GC的情况</li>
<li>3.通过jnfo命令来查看和调整Java进程的「运行参数」</li>
<li>4.通过imap命令来査看Java进程的「内存信息」。这个命令很常用于把JVM内存信息dump到文件，然后再用MAT（Memory Analyzer tool内存解析工具）把文件进行分析</li>
<li>5.通过 stack命令来查看JVM「线程信息」。这个命令用常用语排查死锁相关的问题</li>
<li>6.还有近期比较热门的 Arthas（阿里开源的诊断工具），涵盖了上面很多命令的功能且自带图形化界面。这也是我这边常用的排查和分析工具</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/pKXHUi_20211230112100.png" alt="监控工具"></p>
</li>
</ul>
<h2 id="之前聊JVM的时候，你也提到过在「解释」阶段，会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器（JIT）。我想问问，你了解JVM的JT优化技术嘛？"><a href="#之前聊JVM的时候，你也提到过在「解释」阶段，会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器（JIT）。我想问问，你了解JVM的JT优化技术嘛？" class="headerlink" title="之前聊JVM的时候，你也提到过在「解释」阶段，会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器（JIT）。我想问问，你了解JVM的JT优化技术嘛？"></a>之前聊JVM的时候，你也提到过在「解释」阶段，会有两种方式把字节码信息解释成机器指令码，一个是字节码解释器、一个是即时编译器（JIT）。我想问问，你了解JVM的JT优化技术嘛？</h2><ul>
<li><p>JT优化技术比较出名的有两种：方法内联和逃逸分析</p>
<ul>
<li>所谓方法内联就是把「目标方法」的代码复制到「调用的方法」中，避免发生真实的方法调用<ul>
<li>因为每次方法调用都会生成栈帧（压栈出栈记录方法调用位置等等）会带来定的性能损耗，所以「方法内联」的优化可以提高一定的性能</li>
<li>在JVM中也有相关的参数给予我们指定(-XX: Maxfreainlinesize-xx: Maxinliresize等等）</li>
</ul>
</li>
<li>而「逃逸分析」则是判断一个对象是否被外部方法引用或外部线程访问的分析技术，如果「没有被引用」，就可以对其进行优化</li>
</ul>
</li>
<li><p>下面我举几个可优化的例子（思路）</p>
<p>1.锁消除（同步忽略）：该对象只在方法內部被访问，不会被别的地方引用，那么就一定是线程安全的，可以把锁相关的代码给忽略掉</p>
<p>2.栈上分配：该对象只会在方法內部被访问，直接将对象分配在「栈」中（Java默认是将对象分配在「堆」中，是需要通过JM垃圾回收期进行回收，需要损耗一定的性能，而栈内分配则快很多）</p>
<p>3.标量替换分离对象：当程序真正执行的时候可以不创建这个对象，而直接创建它的成员变量来代替。将对象拆分后，可以分配对象的成员变量在栈或寄存器上，原本的对象就无需分配内存空间了</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/dQHEF8_20211230112436.png" alt="JIT常见优化"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>38、【对线面试官】HTTP</title>
    <url>/posts/561aa315/</url>
    <content><![CDATA[<h1 id="今天要不来聊聊HTTP吧"><a href="#今天要不来聊聊HTTP吧" class="headerlink" title="今天要不来聊聊HTTP吧"></a>今天要不来聊聊HTTP吧</h1><h2 id="今天要不来聊聊HTTP吧？"><a href="#今天要不来聊聊HTTP吧？" class="headerlink" title="今天要不来聊聊HTTP吧？"></a>今天要不来聊聊HTTP吧？</h2><ul>
<li>HTTP「协议」是客户端和服务器「交互」的一种通迅的格式<ul>
<li>所谓的「协议」实际上就是双方约定好的「格式」，让双方都能看得懂的东西而已</li>
<li>所谓的交互实际上就是「请求」和「响应」</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KF4FUG_20211230112604.png"></p>
<h2 id="那你知道HTTP各个版本之间的区别吗？"><a href="#那你知道HTTP各个版本之间的区别吗？" class="headerlink" title="那你知道HTTP各个版本之间的区别吗？"></a>那你知道HTTP各个版本之间的区别吗？</h2><ul>
<li>HTP1.0默认是短连接，每次与服务器交互，都需要新开一个连接</li>
<li>HTTP1.1版本最主要的是「默认持久连接」。只要客户端服务端没有断开TCP连接，就一直保持连接，可以发送多次HTTP请求</li>
<li>其次就是「断点续传」（ Chunked transfer-coding）。利用HTTP消息头使用分块传输编码，将实体主体分块进行传输</li>
<li>HTTP&#x2F;2不再以文本的方式传输，采用「二进制分帧层」，对头部进行了「压缩」，支持「流控」，最主要就是HTTP&#x2F;2是支持「多路复用」的（通过单一的TCP连接「并行」发起多个的请求和响应消息）</li>
<li>HTTP&#x2F;3跟前面版本最大的区别就是：HTTP1.x和HTTP&#x2F;2底层都是TCP，而HTTP&#x2F;3底层是UDP。使用HTTP&#x2F;3能够減少RTT「往返时延」（TCP三次握手，TLS握手）</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/8se2HT_20211230113041.png"></p>
<h2 id="嗯，稍微打断下。我知道HTTP1-1版本有个管线化（-pipelining）理论，但默认是关闭的。管线化这个跟HTTP-x2F-2的「多路复用」是很类似的，它们有什么区别呀？"><a href="#嗯，稍微打断下。我知道HTTP1-1版本有个管线化（-pipelining）理论，但默认是关闭的。管线化这个跟HTTP-x2F-2的「多路复用」是很类似的，它们有什么区别呀？" class="headerlink" title="嗯，稍微打断下。我知道HTTP1.1版本有个管线化（ pipelining）理论，但默认是关闭的。管线化这个跟HTTP&#x2F;2的「多路复用」是很类似的，它们有什么区别呀？"></a>嗯，稍微打断下。我知道HTTP1.1版本有个管线化（ pipelining）理论，但默认是关闭的。管线化这个跟HTTP&#x2F;2的「多路复用」是很类似的，它们有什么区别呀？</h2><ul>
<li><p>HTTP1.1提出的「管线化」只能「串行」（一个响应必须完全返回后，下个请求才会开始传输）</p>
</li>
<li><p>HTTP&#x2F;2多路复用则是利用「分帧」数据流，把HTTP协议分解为「互不依赖」的帧（为每个帧「标序」发送，接收回来的时候按序重组），进而可以「乱序」发送避免「一定程度上」的队首阻塞问题</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/MC43LZ_20211230112912.png"></p>
</li>
<li><p>但是，无论是HTTP1.1还是HTTP&#x2F;2，respanel响应的「处理顺序」总是需要跟request请求顺序保持一致的。假如某个请求的 response响应慢了，还是同样会有阻塞的问题</p>
</li>
<li><p>这受限于HTTP底层的传输协议是TCP，没办法完全解決「线头阻塞」的问题</p>
</li>
</ul>
<h2 id="那你了解HTPS的过程吗？"><a href="#那你了解HTPS的过程吗？" class="headerlink" title="那你了解HTPS的过程吗？"></a>那你了解HTPS的过程吗？</h2><ul>
<li><p>对于HTTPS，我的理解下：就是「安全」的HTTP协议（客户端与服务端的传输链路中进行加密）</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/pOPVGJ_20211230113132.png"></p>
</li>
<li><p>HTPS首先要解決的是：认证的问题</p>
<ul>
<li>客户端是需要确切地知道服务端是不是「真实」，所以在HTPS中会有一个角色：CA（公信机构）</li>
<li>服务端在使用HTTPSI前，需要去认证的CA机构申请一份「数字证书」。数字证书里包含有证书持有者、证书有效期「服务器公钥」等信息</li>
<li>CA机构也有自己的一份公私钥，在发布数字证书之前，会用自己的「私钥」对这份数字证书进行加密</li>
<li>等到客户端请求服务器的时候，服务端返回证书给客户端。客户端用CA的公钥对证书解密（因为CA是公信机构，会内置到浏览器或操作系统中，所以客户端会有公钥）。这个时候，客户端会判断这个「证书是否可信有无被簒改」</li>
<li>私钥加密，公钥解密我们叫做「数字签名」（这种方式可以查看有无被簒改）</li>
<li>到这里，就解决了「认证」的问题，至少客户端能保证是在跟「真实的服务器」进行通信。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/D1hA0I_20211230113315.png"></p>
</li>
<li><p>保密问题</p>
<ul>
<li>客户端与服务器的通讯内容在传输中不会泄露给第三方</li>
<li>客户端从CA拿到数字证书后，就能拿到服务端的公钥</li>
<li>客户端生成一个Key作为「对称加密」的秘钥，用服务端的「公钥加密」传给服务端</li>
<li>服务端用自己的「私钥解密」客户端的数据，得到对称加密的秘钥</li>
<li>之后客户端与服务端就可以使用「对称加密的秘钥」愉快地发送和接收消息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/oU2mh1_20211230113435.png"></p>
</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>3、【对线面试官】Java NIO</title>
    <url>/posts/d38e357c/</url>
    <content><![CDATA[<h1 id="3、【对线面试官】Java-NIO"><a href="#3、【对线面试官】Java-NIO" class="headerlink" title="3、【对线面试官】Java NIO"></a>3、【对线面试官】Java NIO</h1><h2 id="这次咱们就来聊聊Java的NIO呗？你对NIO有多少了解？"><a href="#这次咱们就来聊聊Java的NIO呗？你对NIO有多少了解？" class="headerlink" title="这次咱们就来聊聊Java的NIO呗？你对NIO有多少了解？"></a>这次咱们就来聊聊Java的NIO呗？你对NIO有多少了解？</h2><ol>
<li>嗯，我对Java NIO还是有一定的了解的，NIO是JDK1.4开始有的，其目的是为了提高速度。NIO翻译成no-blockingo或者newio都无所谓啦，反正都说得通</li>
</ol>
<h2 id="在真实项目中写过NIO相关"><a href="#在真实项目中写过NIO相关" class="headerlink" title="在真实项目中写过NIO相关"></a>在真实项目中写过NIO相关</h2><ol>
<li>这块在我所负责的系统中，一般用不上N10，要不我跟你讲讲NIO相关的知识点呗？</li>
</ol>
<h2 id="可以吧，你先来讲讲NIO和传统IO有什么区别吧"><a href="#可以吧，你先来讲讲NIO和传统IO有什么区别吧" class="headerlink" title="可以吧，你先来讲讲NIO和传统IO有什么区别吧"></a>可以吧，你先来讲讲NIO和传统IO有什么区别吧</h2><ol>
<li>传统IO是一次一个字节地处理数据，NIO是以块（缓冲区）的形式处理数据。最主要的是，NIO可以实现非阻塞，而传统IO只能是阻塞的。</li>
<li>IO的实际场景是文件IO和网络IO，NIO 在网络IO场景下提升就尤其明显了。</li>
<li>在Java NIO有三个核心部分组成。分别是Buffer（缓冲区）、Channel（管道）以及Selector（选择器）</li>
<li>可以简单的理解为：Buffer是存储数据的地方，Channel是运输数据的载体，而Selector用于检查多个Channel的状态变更情况，</li>
</ol>
<h2 id="有写过相关的Demo代码吗？"><a href="#有写过相关的Demo代码吗？" class="headerlink" title="有写过相关的Demo代码吗？"></a>有写过相关的Demo代码吗？</h2><ol>
<li><p>我曾经写过一个NIO Demo，面试官可以看看。</p>
</li>
<li><p>大概的实现就是：服务端接收图片后保存，能够通知客户端已经收到图片。而客户端发送图片给客户端，并接收服务端的响应</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoBlockServer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.获取通道</span></span><br><span class="line">        <span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.切换成非阻塞模式</span></span><br><span class="line">        server.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 绑定连接</span></span><br><span class="line">        server.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 获取选择器</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.1将通道注册到选择器上，指定接收“监听通道”事件</span></span><br><span class="line">        server.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 轮训地获取选择器上已“就绪”的事件---&gt;只要select()&gt;0，说明已就绪</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 6. 获取当前选择器所有注册的“选择键”(已就绪的监听事件)</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 获取已“就绪”的事件，(不同的事件做不同的事)</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 接收事件就绪</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isAcceptable()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 8. 获取客户端的链接</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> server.accept();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 8.1 切换成非阻塞状态</span></span><br><span class="line">                    client.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 8.2 注册到选择器上--&gt;拿到客户端的连接为了读取通道的数据(监听读就绪事件)</span></span><br><span class="line">                    client.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (selectionKey.isReadable()) &#123; <span class="comment">// 读事件就绪</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 9. 获取当前选择器读就绪状态的通道</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">client</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 9.1读取数据</span></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 9.2得到文件通道，将客户端传递过来的图片写到本地项目下(写模式、没有则创建)</span></span><br><span class="line">                    <span class="type">FileChannel</span> <span class="variable">outChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;2.png&quot;</span>), StandardOpenOption.WRITE, StandardOpenOption.CREATE);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">while</span> (client.read(buffer) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 在读之前都要切换成读模式</span></span><br><span class="line">                        buffer.flip();</span><br><span class="line"></span><br><span class="line">                        outChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 读完切换成写模式，能让管道继续读取文件的数据</span></span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 10. 取消选择键(已经处理过的事件，就应该取消掉了)</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoBlockClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 获取通道</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6666</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1切换成非阻塞模式</span></span><br><span class="line">        socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2获取选择器</span></span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.3将通道注册到选择器中，获取服务端返回的数据</span></span><br><span class="line">        socketChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 发送一张图片给服务端吧</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">fileChannel</span> <span class="operator">=</span> FileChannel.open(Paths.get(<span class="string">&quot;X:\\Users\\ozc\\Desktop\\面试造火箭\\1.png&quot;</span>), StandardOpenOption.READ);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.要使用NIO，有了Channel，就必然要有Buffer，Buffer是与数据打交道的呢</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.读取本地文件(图片)，发送到服务器</span></span><br><span class="line">        <span class="keyword">while</span> (fileChannel.read(buffer) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 在读之前都要切换成读模式</span></span><br><span class="line">            buffer.flip();</span><br><span class="line"></span><br><span class="line">            socketChannel.write(buffer);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 读完切换成写模式，能让管道继续读取文件的数据</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 轮训地获取选择器上已“就绪”的事件---&gt;只要select()&gt;0，说明已就绪</span></span><br><span class="line">        <span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 6. 获取当前选择器所有注册的“选择键”(已就绪的监听事件)</span></span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 7. 获取已“就绪”的事件，(不同的事件做不同的事)</span></span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 8. 读事件就绪</span></span><br><span class="line">                <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 8.1得到对应的通道</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) selectionKey.channel();</span><br><span class="line"></span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">responseBuffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 9. 知道服务端要返回响应的数据给客户端，客户端在这里接收</span></span><br><span class="line">                    <span class="type">int</span> <span class="variable">readBytes</span> <span class="operator">=</span> channel.read(responseBuffer);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (readBytes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">// 切换读模式</span></span><br><span class="line">                        responseBuffer.flip();</span><br><span class="line">                        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(responseBuffer.array(), <span class="number">0</span>, readBytes));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 10. 取消选择键(已经处理过的事件，就应该取消掉了)</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h2 id="就考考相关的概念原理呗"><a href="#就考考相关的概念原理呗" class="headerlink" title="就考考相关的概念原理呗"></a>就考考相关的概念原理呗</h2><h3 id="你知道IO模型有几种吗"><a href="#你知道IO模型有几种吗" class="headerlink" title="你知道IO模型有几种吗"></a>你知道IO模型有几种吗</h3><ol>
<li>在Unix下IO模型分别有：阻塞IO、非阻塞IO、IO复用、信号驱动以及异步I&#x2F;0。在开发中碰得最多的就是阻塞I0、非阻塞IO以及IO复用。</li>
</ol>
<h3 id="来重点讲讲-O复用模型吧"><a href="#来重点讲讲-O复用模型吧" class="headerlink" title="来重点讲讲|O复用模型吧"></a>来重点讲讲|O复用模型吧</h3><ol>
<li>我就以Linux系统为例好了，我们都知道Linux对文件的操作实际上就是通过文件描述符（fd）</li>
<li>1O复用模型指的就是：通过一个进程监听多个文件描述符，一旦某个文件描述符准备就绪，就去通知程序做相对应的处理</li>
<li>这种以通知的方式，优势并不是对于单个连接能处理得更快，而是在于它能处理更多的连接。</li>
<li>在Linux下IO复用模型用的函数有select&#x2F;poll和epoll</li>
</ol>
<h3 id="那你来讲讲这select和epll函数的区别呗？"><a href="#那你来讲讲这select和epll函数的区别呗？" class="headerlink" title="那你来讲讲这select和epll函数的区别呗？"></a>那你来讲讲这select和epll函数的区别呗？</h3><ul>
<li><p>select</p>
<ol>
<li>select函数它支持最大的连接数是1024或 2048，因为在select函数下要传入fd_set参数，这个fd_set的大小要么1024或2048（其实就看操作系统的位数）</li>
<li>fd_set就是bitmap的数据结构，可以简单理解为只要位为0，那说明还没数据到缓冲区，只要位为1，那说明数据已经到缓冲区。</li>
<li>而select函数做的就是每次将fd_set遍历，判断标志位有没有发现变化，如果有变化则通知程序做中断处理。</li>
</ol>
</li>
<li><p>epoll</p>
<ol>
<li>epoll是在Linux2.6内核正式提出，完善了select的一些缺点。</li>
<li>它定义了epoll_event结构体来处理，不存在最大连接数的限制。</li>
<li>并且它不像select函数每次把所有的文件描述符（fd）都遍历，简单理解就是epoll把就绪的文件描述符（fd）专门维护了一块空间，每次从就绪列表里边拿就好了，不再进行对所有文件描述符（fd）进行遍历。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h3 id="嗯，了解了，另外你知道什么叫做零拷贝吗？"><a href="#嗯，了解了，另外你知道什么叫做零拷贝吗？" class="headerlink" title="嗯，了解了，另外你知道什么叫做零拷贝吗？"></a>嗯，了解了，另外你知道什么叫做零拷贝吗？</h3><ol>
<li>知道的。我们以读操作为例，假设用户程序发起一次读请求。</li>
<li>其实会调用read相关的「系统函数」，然后会从用户态切换到内核态，随后CPU会告诉DMA去磁盘把数据拷贝到内核空间。</li>
<li>等到「内核缓冲区」真正有数据之后，CPU会把「内核缓存区」数据拷贝到「用户缓冲区」，最终用户程序才能获取到。</li>
<li>稍微解释一下上面的意思~</li>
<li>为了保证内核的安全，操作系统将虚拟空间划分为「用户空间」和「内核空间」，所以在读系统数据的时候会有状态切换</li>
<li>因为应用程序不能直接去读取硬盘的数据。从上面描述可知读写需要依赖「内核缓冲区」</li>
<li>一次读操作会让DMA拷贝（direct memory access 直接内存拷贝，不使用cpu）将磁盘数据拷贝到内核缓冲区，CPU将内核缓冲区数据拷贝到用户缓冲区。</li>
<li>所谓的零拷贝就是将「CPU将内核缓冲区数据拷贝到用户缓冲区」这次CPU拷贝给省去，来提高效率和性能</li>
<li>常见的零拷贝技术有mmap（内核缓冲区与用户缓冲区的共享） 、sendfile（系统底层函数支持）。</li>
<li>零拷贝可以提高数据传输的性能，这块在Kafka等框架也有相关的实践。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>4、【对线面试官】Java反射 &amp; 动态代理.md</title>
    <url>/posts/986aa405/</url>
    <content><![CDATA[<h1 id="4、【对线面试官】Java反射-amp-动态代理-md"><a href="#4、【对线面试官】Java反射-amp-动态代理-md" class="headerlink" title="4、【对线面试官】Java反射 &amp; 动态代理.md"></a>4、【对线面试官】Java反射 &amp; 动态代理.md</h1><h2 id="今天要不来聊聊Java反射？你对Java反射了解多少？"><a href="#今天要不来聊聊Java反射？你对Java反射了解多少？" class="headerlink" title="今天要不来聊聊Java反射？你对Java反射了解多少？"></a>今天要不来聊聊Java反射？你对Java反射了解多少？</h2><ol>
<li>嗯，Java反射在JavaSE基础中还是很重要的。</li>
<li>简单来说，反射就是Java可以给我们在运行时获取类的信息<br>在初学的时候可能看不懂、又或是学不太会反射，因为初学的时候往往给的例子都是用反射创建对象，用反射去获取对象上的方法&#x2F;属性什么的，感觉没多大用</li>
<li>但毕竟我已经不是以前的我了，跟以前的看法就不一样了。</li>
<li>理解反射重点就在于理解什么是「运行时」，为什么我们要在「运行时」获取类的信息</li>
<li>在当时学注解的时候，我们可以发现注解的生命周期有三个枚举值（当时我还告诉过面试官你呢~）</li>
<li>分别是SOURCE、CLASS和RUNTIME，其实一样的，RUNTIME就是对标着运行时</li>
<li>我们都知道：我们在编译器写的代码是j ava文件，经过javac编译会变成.class文件，class文件会被JVM装载运行（这里就是真正运行着我们所写的代码（虽然是被编译过的），也就所谓的运行时。</li>
</ol>
<h2 id="嗯，你说了那么多，就讲述了什么是运行时，还是快点进入重点吧"><a href="#嗯，你说了那么多，就讲述了什么是运行时，还是快点进入重点吧" class="headerlink" title="嗯，你说了那么多，就讲述了什么是运行时，还是快点进入重点吧"></a>嗯，你说了那么多，就讲述了什么是运行时，还是快点进入重点吧</h2><ol>
<li>在运行时获取类的信息，其实就是为了让我们所写的代码更具有「通用性」和「灵活性」</li>
<li>要理解反射，需要抛开我们日常写的业务代码。以更高的维度或者说是抽象的思维去看待我们所写的“工具”</li>
<li>所谓的“工具”：在单个系统使用叫做“Utils”、被多个系统使用打成jar包叫做“组件”、组件继续发展壮大就叫做“框架”</li>
<li>一个好用的“工具”是需要兼容各种情况的。</li>
<li>你肯定是不知道用该“工具“的用户传入的是什么对象，但你需要帮他们得到需要的结果。</li>
<li>例如SpringMVC你在方法上写上对象，传入的参数就会帮你封装到对象上</li>
<li>Mybatis可以让我们只写接口，不写实现类，就可以执行SQL</li>
<li>你在类上加上@Component注解，Sprin g就帮你创建对象</li>
<li>这些统统都有反射的身影：约定大于配置，配置大于硬编码。</li>
<li>通过”约定“使用姿势，使用反射在运行时获取相应的信息（毕竟作为一个”工具“是真的不知道你是怎么用的），实现代码功能的「通用性」和「灵活性」</li>
</ol>
<h2 id="结合之前说的泛型，想问下：你应该知道泛型是会擦除的，那为什么反射能获取到泛型的信息呢？"><a href="#结合之前说的泛型，想问下：你应该知道泛型是会擦除的，那为什么反射能获取到泛型的信息呢？" class="headerlink" title="结合之前说的泛型，想问下：你应该知道泛型是会擦除的，那为什么反射能获取到泛型的信息呢？"></a>结合之前说的泛型，想问下：你应该知道泛型是会擦除的，那为什么反射能获取到泛型的信息呢？</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 抽象类，定义泛型&lt;T&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">BaseDao</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BaseDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass();</span><br><span class="line">        <span class="type">ParameterizedType</span>  <span class="variable">pt</span> <span class="operator">=</span> (ParameterizedType) clazz.getGenericSuperclass(); </span><br><span class="line">        clazz = (Class) pt.getActualTypeArguments()[<span class="number">0</span>];</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> <span class="keyword">extends</span> <span class="title class_">BaseDao</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        BaseDao&lt;User&gt; userDao = <span class="keyword">new</span> <span class="title class_">UserDao</span>();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行结果输出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">com</span>.entity.User</span><br></pre></td></tr></table></figure>

<ol>
<li>嗯，这个问题我在学习的时候也想过</li>
<li>其实是这样的，可以理解为泛型擦除是有范围的，定义在类上的泛型信息是不会被擦除的。</li>
<li>Java编译器仍在class文件以Signature 属性的方式保留了泛型信息</li>
<li>Type作为顶级接口，Type下还有几种类型，比如TypeVariable、 ParameterizedT ype、 WildCardType、 GenericArrayType、以及Class。通过这些接口我们就可以在运行时获取泛型相关的信息。</li>
</ol>
<h2 id="你了解动态代理吗？"><a href="#你了解动态代理吗？" class="headerlink" title="你了解动态代理吗？"></a>你了解动态代理吗？</h2><ol>
<li>嗯，了解的。动态代理其实就是代理模式的一种，代理模式是设计模式之一。</li>
<li>代理模型有静态代理和动态代理。静态代理需要自己写代理类，实现对应的接口，比较麻烦。</li>
<li>在Java中，动态代理常见的又有两种实现方式：JDK动态代理和CGLIB代理</li>
<li>JDK动态代理其实就是运用了反射的机制，而CGLIB代理则用的是利用ASM框架，通过修改其字节码生成子类来处理。</li>
<li>JDK动态代理会帮我们实现接口的方法，通过invokeHandler对所需要的方法进行增强。</li>
<li>动态代理这一技术在实际或者框架原理中是非常常见的</li>
<li>像上面所讲的Mybatis不用写实现类，只写接口就可以执行SQL，又或是SpringAOP等等好用的技术，实际上用的就是动态代理。</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>5、【对线面试官】多线程基础</title>
    <url>/posts/986aa405/</url>
    <content><![CDATA[<h1 id="5、【对线面试官】多线程基础"><a href="#5、【对线面试官】多线程基础" class="headerlink" title="5、【对线面试官】多线程基础"></a>5、【对线面试官】多线程基础</h1><h2 id="首先你来讲讲进程和线程的区别吧？"><a href="#首先你来讲讲进程和线程的区别吧？" class="headerlink" title="首先你来讲讲进程和线程的区别吧？"></a>首先你来讲讲进程和线程的区别吧？</h2><ol>
<li>进程是系统进行资源分配和调度的独立单位，每一个进程都有它自己的内存空间和系统资源</li>
<li>进程实现多处理机环境下的进程调度，分派，切换时，都需要花费较大的时间和空间开销</li>
<li>为了提高系统的执行效率，减少处理机的空转时间和调度切换的时间，以及便于系统管理，所以有了线程，线程取代了进程了调度的基本功能</li>
<li>简单来说，进程作为资源分配的基本单位，线程作为资源调度的基本单位</li>
</ol>
<h2 id="那我们为什么要用多线程呢？你平时工作中用得多吗？"><a href="#那我们为什么要用多线程呢？你平时工作中用得多吗？" class="headerlink" title="那我们为什么要用多线程呢？你平时工作中用得多吗？"></a>那我们为什么要用多线程呢？你平时工作中用得多吗？</h2><ol>
<li>使用多线程最主要的原因是提高系统的资源利用率。</li>
<li>现在CPU基本都是多核的，如果你只用单线程，那就是只用到了一个核心，其他的核心就相当于空闲在那里了。</li>
<li>在平时工作中多线程是随时都可见的。</li>
<li>比如说，我们系统Web服务器用的是Tomcat，Tomcat处理每一个请求都会从线程连接池里边用一个线程去处理。</li>
<li>又比如说，我们用连接数据库会用对应的连接池Druid&#x2F;C3P0&#x2F;DBCP等等</li>
<li>等等这些都用了多线程的。</li>
<li>上面这些框架已经帮我们屏蔽掉「手写」多线程的问题</li>
</ol>
<h3 id="嗯，了解，那你实际开发中有用过吗？"><a href="#嗯，了解，那你实际开发中有用过吗？" class="headerlink" title="嗯，了解，那你实际开发中有用过吗？"></a>嗯，了解，那你实际开发中有用过吗？</h3><ol>
<li><p>当然有了，在我所负责的系统也会用到多线程的。</p>
</li>
<li><p>比如说，现在要跑一个定时任务，该任务的链路执行时间和过程都非常长，我这边就用一个线程池将该定时任务的请求进行处理。</p>
</li>
<li><p>这样做的好处就是可以及时返回结果给调用方，能够提高系统的吞吐量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 请求直接交给线程池来处理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(PushParam pushParam)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    pushServiceThreadExecutor.submit(() -&gt; &#123;</span><br><span class="line">      handler(pushParam);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;pushServiceThreadExecutor error, exception&#123;&#125;:&quot;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还有就是我的系统中用了很多生产者与消费者模式，会用多个线程去消费队列的消息，来提高并发度</p>
</li>
</ol>
<h2 id="你如果在项目中用到了多线程，那肯定得考虑线程安全的问题的吧"><a href="#你如果在项目中用到了多线程，那肯定得考虑线程安全的问题的吧" class="headerlink" title="你如果在项目中用到了多线程，那肯定得考虑线程安全的问题的吧"></a>你如果在项目中用到了多线程，那肯定得考虑线程安全的问题的吧</h2><ol>
<li>在我的理解下，在Java世界里边，所谓线程安全就是多个线程去执行某类，这个类始终能表现出正确的行为，那么这个类就是线程安全的。</li>
<li>比如我有一个count变量，在service方法不断的累加这个count变量。</li>
<li>假设相同的条件下，count变量每次执行的结果都是相同，那我们就可以说是线程安全的干</li>
<li>显然下面的代码肯定不是线程安全的</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UnsafeCountingServlet</span> <span class="keyword">extends</span> <span class="title class_">GenericServlet</span> <span class="keyword">implements</span> <span class="title class_">Servlet</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">service</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">        ++count;</span><br><span class="line">        <span class="comment">// To something else...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="那你平时是怎么解决，或者怎么思考线程安全问题的呢？"><a href="#那你平时是怎么解决，或者怎么思考线程安全问题的呢？" class="headerlink" title="那你平时是怎么解决，或者怎么思考线程安全问题的呢？"></a>那你平时是怎么解决，或者怎么思考线程安全问题的呢？</h2><ol>
<li>其实大部分时间我们在代码里边都没有显式去处理线程安全问题，因为这大部分都由框架所做了。</li>
<li>正如上面提到的Tomcat、Druid、SpringMVC等等。</li>
<li>很多时候，我们判断是否要处理线程安全问题，就看有没有多个线程同时访问一个共享变量。</li>
<li>像SpringMVC这种，我们日常开发时，不涉及到操作同一个成员变量，那我们就很少需要考虑线程安全问题。</li>
<li>我个人解决线程安全问题的思路有以下：<ul>
<li>能不能保证操作的原子性，考虑atomi c包下的类够不够我们使用。</li>
<li>能不能保证操作的可见性，考虑volatil e关键字够不够我们使用</li>
<li>如果涉及到对线程的控制（比如一次能使用多少个线程，当前线程触发的条件是否依赖其他线程的结果），考虑CountDownLatch&#x2F;Semaphore等等。</li>
<li>如果是集合，考虑java.util.concurrent 包下的集合类。</li>
<li>如果synchronized无法满足，考虑lock 包下的类</li>
</ul>
</li>
<li>总的来说，就是先判断有没有线程安全问题，如果存在则根据具体的情况去判断使用什么方式去处理线程安全的问题。</li>
<li>虽然synchronized很牛逼，但无脑使用synchronized会影响我们程序的性能的。</li>
</ol>
<h2 id="死锁你了解吗？什么情况会造成死锁？要是你能给我讲清楚死锁，我就录取你了"><a href="#死锁你了解吗？什么情况会造成死锁？要是你能给我讲清楚死锁，我就录取你了" class="headerlink" title="死锁你了解吗？什么情况会造成死锁？要是你能给我讲清楚死锁，我就录取你了"></a>死锁你了解吗？什么情况会造成死锁？要是你能给我讲清楚死锁，我就录取你了</h2><ol>
<li>要是你录取我，我就给你讲清楚死锁</li>
<li>造成死锁的原因可以简单概括为：当前线程拥有其他线程需要的资源，当前线程等待其他线程已拥有的资源，都不放弃自己拥有的资源。</li>
<li>避免死锁的方式一般有以下方案：<ul>
<li>固定加锁的顺序，比如我们可以使用Hash值的大小来确定加锁的先后</li>
<li>尽可能缩减加锁的范围，等到操作共享变量的时候才加锁。</li>
<li>使用可释放的定时锁（一段时间申请不到锁的权限了，直接释放掉）</li>
</ul>
</li>
</ol>
<h2 id="价值体现"><a href="#价值体现" class="headerlink" title="价值体现"></a>价值体现</h2><p>嗯，其实我想问，就是我要是..去到贵公司是做什么内容？还有就是..</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>6、【对线面试官】CAS</title>
    <url>/posts/759e745e/</url>
    <content><![CDATA[<h1 id="6、【对线面试官】CAS"><a href="#6、【对线面试官】CAS" class="headerlink" title="6、【对线面试官】CAS"></a>6、【对线面试官】CAS</h1><h2 id="今天我们来聊聊CAS吧？你对CAS了解多少？"><a href="#今天我们来聊聊CAS吧？你对CAS了解多少？" class="headerlink" title="今天我们来聊聊CAS吧？你对CAS了解多少？"></a>今天我们来聊聊CAS吧？你对CAS了解多少？</h2><ol>
<li>CAS的全称为compare and swap，比较并交换</li>
<li>虽然翻译过来是「比较并交换」，但它是一个原子性的操作，对应到CPU指令为cmpxchg</li>
<li>cpu指令你都知道？-&gt;这没什么，都是背的。</li>
<li>回到CAS上吧，CAS的操作其实非常简单。</li>
<li>CAS有三个操作数：当前值A、内存值V、要修改的新值B</li>
<li>假设当前值A跟内存值V相等，那就将内存值V改成B</li>
<li>假设当前值A跟内存值V不相等，要么就重试，要么就放弃更新</li>
<li>将当前值与内存值进行对比，判断是否有被修改过，这就是CAS的核心</li>
</ol>
<h2 id="确实，那为什么要用CAS呢？"><a href="#确实，那为什么要用CAS呢？" class="headerlink" title="确实，那为什么要用CAS呢？"></a>确实，那为什么要用CAS呢？</h2><ol>
<li>嗯，要讲到CAS就不得不说synchronized锁了，它是Java锁..然后..</li>
<li>ok，其实就是synchronized锁每次只会让一个线程去操作共享资源</li>
<li>而CAS相当于没有加锁，多个线程都可以直接操作共享资源，在实际去修改的时候才去判断能否修改成功</li>
<li>在很多的情况下会synchronized锁要高效很多</li>
<li>比如，对一个值进行累加，就没必要使用synchronized锁，使用juc包下的Atomic类就足以。</li>
</ol>
<h2 id="了解，那你知道CAS会有什么缺点吗？"><a href="#了解，那你知道CAS会有什么缺点吗？" class="headerlink" title="了解，那你知道CAS会有什么缺点吗？"></a>了解，那你知道CAS会有什么缺点吗？</h2><ol>
<li>CAS有个缺点就是会带来ABA的问题</li>
<li>从CAS更新的时候，我们可以发现它只比对当前值和内存值是否相等，这会带来个问题，下面我举例说明下：</li>
<li>假设线程A读到当前值是10，可能线程B把值修改为100，然后线程C又把值修改为10。</li>
<li>等到线程A拿到执行权时，因为当前值和内存值是一致的，线程A是可以修改的！</li>
<li>站在线程A的角度来说，这个值是从未被修改的（：</li>
<li>这是不合理的，因为我们从上帝的角度来看，这个变量已经被线程B和线程C修改过了。</li>
<li>这就是所谓的ABA问题</li>
<li>要解决ABA的问题，Java也提供了AtomicStampedReference类供我们用，说白了就是加了个版本，比对的就是内存值+版本是否一致</li>
</ol>
<h2 id="阿里巴巴开发手册提及到推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）"><a href="#阿里巴巴开发手册提及到推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）" class="headerlink" title="阿里巴巴开发手册提及到推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）"></a>阿里巴巴开发手册提及到推荐使用LongAdder对象，比AtomicLong性能更好（减少乐观锁的重试次数）</h2><ol>
<li>AtomicLong做累加的时候实际上就是多个线程操作同一个目标资源</li>
<li>在高并发时，只有一个线程是执行成功的，其他的线程都会失败，不断自旋（重试），自旋会成为瓶颈</li>
<li>而LongAdder的思想就是把要操作的目标资源「分散」到数组Cell中</li>
<li>每个线程对自己的Cell变量的value进行原子操作，大大降低了失败的次数</li>
<li>这就是为什么在高并发场景下，推荐使用LongAdder的原因</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>7、【对线面试官】synchronized</title>
    <url>/posts/844cde9b/</url>
    <content><![CDATA[<h1 id="7、【对线面试官】synchronized"><a href="#7、【对线面试官】synchronized" class="headerlink" title="7、【对线面试官】synchronized"></a>7、【对线面试官】synchronized</h1><h2 id="今天我们来聊聊synchronized吧？"><a href="#今天我们来聊聊synchronized吧？" class="headerlink" title="今天我们来聊聊synchronized吧？"></a>今天我们来聊聊synchronized吧？</h2><ol>
<li>synchronized是一种互斥锁，一次只能允许一个线程进入被锁住的代码块</li>
<li>synchronized是Java的一个关键字，它能够将代码块&#x2F;方法锁起来</li>
<li>如果synchronized修饰的是实例方法，对应的锁则是对象实例</li>
<li>如果synchronized修饰的是静态方法，对应的锁则是当前类的Class实例</li>
<li>如果synchronized修饰的是代码块，对应的锁则是传入synchronized的对象实例</li>
</ol>
<h2 id="嗯，要不你来讲讲synchronized的原理呗？"><a href="#嗯，要不你来讲讲synchronized的原理呗？" class="headerlink" title="嗯，要不你来讲讲synchronized的原理呗？"></a>嗯，要不你来讲讲synchronized的原理呗？</h2><ol>
<li>通过反编译可以发现</li>
<li>当修饰方法时，编译器会生成ACC_SYNCHRONIZED关键字用来标识</li>
<li>当修饰代码块时，会依赖monitorenter和monitorexit指令</li>
<li>但前面已经说了，无论synchronized修饰的是方法还是代码块，对应的锁都是一个实例（对象）</li>
<li>在内存中，对象一般由三部分组成，分别是对象头、对象实际数据和对齐填充</li>
<li>重点在于对象头，对象头又由几部分组成，但我们重点关注对象头Mark Word的信息就好了</li>
<li>Mark Word会记录对象关于锁的信息</li>
<li>又因为每个对象都会有一个与之对应的monitor对象，monitor对象中存储着当前持有锁的线程以及等待锁的线程队列</li>
<li>了解Mark Word和monitor对象是理解synchronized原理的前提</li>
</ol>
<h2 id="嗯，听说synchronized锁在JDK1-6之后做了很多的优化，这块你了解多少呢？"><a href="#嗯，听说synchronized锁在JDK1-6之后做了很多的优化，这块你了解多少呢？" class="headerlink" title="嗯，听说synchronized锁在JDK1.6之后做了很多的优化，这块你了解多少呢？"></a>嗯，听说synchronized锁在JDK1.6之后做了很多的优化，这块你了解多少呢？</h2><ol>
<li>其实是这样的，在JDK1.6之前是重量级锁，线程进入同步代码块&#x2F;方法时</li>
<li>monitor对象就会把当前进入线程的Id进行存储，设置Mark Word的monitor对象地址，并把阻塞的线程存储到monitor的等待线程队列中</li>
<li>它加锁是依赖底层操作系统的mutex相关指令实现，所以会有用户态和内核态之间的切换，性能损耗十分明显</li>
<li>而JDK1.6以后引入偏向锁和轻量级锁在JVM层面实现加锁的逻辑，不依赖底层操作系统，就没有切换的消耗</li>
<li>所以，Mark Word对锁的状态记录一共有4种：无锁、偏向锁、轻量级锁和重量级锁</li>
</ol>
<h3 id="简单来说说偏向锁、轻量级锁和重量级锁吧"><a href="#简单来说说偏向锁、轻量级锁和重量级锁吧" class="headerlink" title="简单来说说偏向锁、轻量级锁和重量级锁吧"></a>简单来说说偏向锁、轻量级锁和重量级锁吧</h3><ol>
<li>偏向锁指的就是JVM会认为只有某个线程才会执行同步代码（没有竞争的环境）</li>
<li>所以在Mark Word会直接记录线程ID，只要线程来执行代码了，会比对线程ID是否相等，相等则当前线程能直接获取得到锁，执行同步代码</li>
<li>如果不相等，则用CAS来尝试修改当前的线程ID，如果CAS修改成功，那还是能获取得到锁，执行同步代码</li>
<li>如果CAS失败了，说明有竞争环境，此时会对偏向锁撤销，升级为轻量级锁。</li>
<li>在轻量级锁状态下，当前线程会在栈帧下创建Lock Record，LockRecord会把 Mark Word的信息拷贝进去，且有个Owner指针指向加锁的对象由由</li>
<li>线程执行到同步代码时，则用CAS试图将Mark Word的指向到线程栈帧的LockRecord，假设CAS修改成功，则获取得到轻量级锁</li>
<li>假设修改失败，则自旋（重试），自旋一定次数后，则升级为重量级锁</li>
<li>简单总结一下<ul>
<li>synchronized锁原来只有重量级锁，依赖操作系统的mutex指令，需要用户态和内核态切换，性能损耗十分明显</li>
<li>重量级锁用到monitor对象而偏向锁则在Mark Word记录线程ID进行比对、轻量级锁则是拷贝Mark Word到Lock Record，用CAS+自旋的方式获取。</li>
</ul>
</li>
<li>引入了偏向锁和轻量级锁，就是为了在不同的使用场景使用不同的锁，进而提高效率。<br>锁只有升级，没有降级<ul>
<li>只有一个线程进入临界区，偏向锁</li>
<li>多个线程交替进入临界区，轻量级锁</li>
<li>多线程同时进入临界区，重量级锁</li>
</ul>
</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>8、【对线面试官】AQS &amp; ReentrantLock</title>
    <url>/posts/3c567306/</url>
    <content><![CDATA[<h1 id="8、【对线面试官】AQS-amp-ReentrantLock"><a href="#8、【对线面试官】AQS-amp-ReentrantLock" class="headerlink" title="8、【对线面试官】AQS &amp; ReentrantLock"></a>8、【对线面试官】AQS &amp; ReentrantLock</h1><h2 id="今天我们来聊聊lock锁吧？"><a href="#今天我们来聊聊lock锁吧？" class="headerlink" title="今天我们来聊聊lock锁吧？"></a>今天我们来聊聊lock锁吧？</h2><h2 id="你知道什么叫做公平和非公平锁吗"><a href="#你知道什么叫做公平和非公平锁吗" class="headerlink" title="你知道什么叫做公平和非公平锁吗"></a>你知道什么叫做公平和非公平锁吗</h2><ol>
<li>公平锁指的就是：在竞争环境下，先到临界区的线程比后到的线程一定更快地获取得到锁</li>
<li>那非公平就很好理解了：先到临界区的线程未必比后到的线程更快地获取得到锁</li>
</ol>
<h2 id="如果让你实现的话，你怎么实现公平和非公平锁？"><a href="#如果让你实现的话，你怎么实现公平和非公平锁？" class="headerlink" title="如果让你实现的话，你怎么实现公平和非公平锁？"></a>如果让你实现的话，你怎么实现公平和非公平锁？</h2><ol>
<li>公平锁可以把竞争的线程放在一个先进先出的队列上</li>
<li>只要持有锁的线程执行完了，唤醒队列的下一个线程去获取锁就好了</li>
<li>非公平锁的概念上面已经提到了：后到的线程可能比前到临界区的线程获取得到锁</li>
<li>那实现也很简单，线程先尝试能不能获取得到锁，如果获取得到锁了就执行同步代码了</li>
<li>如果获取不到锁，那就再把这个线程放到队列呗</li>
<li>所以公平和非公平的区别就是：线程执行同步代码块时，是否会去尝试获取锁。</li>
<li>如果会尝试获取锁，那就是非公平的。如果不会尝试获取锁，直接进队列，再等待唤醒，那就是公平的。</li>
</ol>
<h2 id="为什么要进队列呢？线程一直尝试获取锁不就行了么？"><a href="#为什么要进队列呢？线程一直尝试获取锁不就行了么？" class="headerlink" title="为什么要进队列呢？线程一直尝试获取锁不就行了么？"></a>为什么要进队列呢？线程一直尝试获取锁不就行了么？</h2><ol>
<li>一直尝试获取锁，专业点就叫做自旋，需要耗费资源的。</li>
<li>多个线程一直在自旋，而且大多数都是竞争失败的，哪有人会这样实现的</li>
<li>不会吧，不会吧，你不会就是这样实现的吧</li>
</ol>
<h2 id="那上次面试所问的synchronized锁是公平的还是非公平的？"><a href="#那上次面试所问的synchronized锁是公平的还是非公平的？" class="headerlink" title="那上次面试所问的synchronized锁是公平的还是非公平的？"></a>那上次面试所问的synchronized锁是公平的还是非公平的？</h2><ol>
<li>非公平的。</li>
<li>偏向锁很好理解，如果当前线程ID与markword存储的不相等，则CAS尝试更换线程ID，CAS成功就获取得到锁了</li>
<li>CAS失败则升级为轻量级锁</li>
<li>轻量级锁实际上也是通过CAS来抢占锁资源（只不过多了拷贝Mark Word到Lock Record的过程）</li>
<li>抢占成功到锁就归属给该线程了，但自旋失败一定次数后升级重量级锁</li>
<li>重量级锁通过monitor对象中的队列存储线程，但线程进入队列前，还是会先尝试获取得到锁，如果能获取不到才进入线程等待队列中</li>
<li>综上所述，synchronized无论处理哪种锁，都是先尝试获取，获取不到才升级||放到队列上的，所以是非公平的</li>
</ol>
<h2 id="嗯，讲得挺仔细的。AQS你了解吗？"><a href="#嗯，讲得挺仔细的。AQS你了解吗？" class="headerlink" title="嗯，讲得挺仔细的。AQS你了解吗？"></a>嗯，讲得挺仔细的。AQS你了解吗？</h2><ol>
<li>嗯嗯，AQS全称叫做AbstractQueuedSynchronizer</li>
<li>是可以给我们实现锁的一个 「框架」，内部实现的关键就是维护了一个先进先出的队列以及state状态变量</li>
<li>先进先出队列存储的载体叫做Node节点，该节点标识着当前的状态值、是独占还是共享模式以及它的前驱和后继节点等等信息</li>
<li>简单理解就是：AQS定义了模板，具体实现由各个子类完成。</li>
<li>总体的流程可以总结为：会把需要等待的线程以Node的形式放到这个先进先出的队列上，state变量则表示为当前锁的状态。</li>
<li>像ReentrantLock、 ReentrantReadWrite Lock、 CountDownLatch、 Semaphore 这些常用的实现类都是基于AQS实现的</li>
<li>AQS支持两种模式：独占（锁只会被一个线程独占）和共享（多个线程可同时执行）</li>
</ol>
<h2 id="你以ReentrantLock来讲讲加锁和解锁的过程呗"><a href="#你以ReentrantLock来讲讲加锁和解锁的过程呗" class="headerlink" title="你以ReentrantLock来讲讲加锁和解锁的过程呗"></a>你以ReentrantLock来讲讲加锁和解锁的过程呗</h2><ul>
<li>以非公平锁为了，我们在外界调用lock方法的时候，源码是这样实现的<ol>
<li>CAS尝试获取锁，获取成功则可以执行同步代码</li>
<li>CAS获取失败，则调用acquire方法acquire方法实际上就是AQS的模板方法</li>
<li>acquire首先会调用子类的tryAcquire 方法（又回到了ReentrantLock中）</li>
<li>tryAcquire方法实际上会判断当前的state是否等于0，等于0说明没有线程持有锁，则又尝试CAS直接获取锁</li>
<li>如果CAS获取成功，则可以执行同步代码</li>
<li>如果CAS获取失败，那判断当前线程是否就持有锁，如果是持有的锁，那更新state的值，获取得到锁（这里其实就是处理可重入的逻辑）</li>
<li>CAS失败&amp;&amp;非重入的情况，则回到try Acquire方法执行「入队列」的操作</li>
<li>将节点入队列之后，会判断「前驱节点」是不是头节点，如果是头结点又会用CAS尝试获取锁</li>
<li>如果是「前驱节点」是头节点并获取得到锁，则把当前节点设置为头结点，并且将前驱节点置空（实际上就是原有的头节点已经释放锁了）</li>
<li>没获取得到锁，则判断前驱节点的状态是否为SIGNAL，如果不是，则找到合法的前驱节点，并使用CAS将状态设置为SIGNAL</li>
<li>最后调用park将当前线程挂起</li>
</ol>
</li>
</ul>
<h2 id="你说了一大堆，麻烦使用压缩算法压缩下加锁的过程。"><a href="#你说了一大堆，麻烦使用压缩算法压缩下加锁的过程。" class="headerlink" title="你说了一大堆，麻烦使用压缩算法压缩下加锁的过程。"></a>你说了一大堆，麻烦使用压缩算法压缩下加锁的过程。</h2><p>压缩后：当线程CAS获取锁失败，将当前线程入队列，把前驱节点状态设置为SIGNAL状态，并将自己挂起。</p>
<h2 id="为什么要设置前驱节点为-SIGNAL状态，有啥用？"><a href="#为什么要设置前驱节点为-SIGNAL状态，有啥用？" class="headerlink" title="为什么要设置前驱节点为 SIGNAL状态，有啥用？"></a>为什么要设置前驱节点为 SIGNAL状态，有啥用？</h2><ol>
<li>其实就是表示后继节点需要被唤醒,你咋啥都不知道啊？跟你沟通有点烦.我先把解锁的过程说下吧<ul>
<li>外界调用unlock方法时，实际上会调用AQS的release方法，而release方法会调用子类tryRelease方法（又回到了ReentrantLock中）</li>
<li>tryRelease会把state一直减（锁重入可使state&gt;1），直至到0，说明当前线程已经把锁释放了</li>
<li>随后从队尾往前找节点状态需要&lt;0，并离头节点最近的节点进行唤醒</li>
</ul>
</li>
<li>唤醒之后，被唤醒的线程则尝试使用CAS获取锁，假设获取锁得到则把头节点给干掉，把自己设置为头节点成</li>
<li>解锁的逻辑非常简单哈</li>
<li>压缩一下：把state置0，唤醒头结点下一个合法的节点，被唤醒的节点线程自然就会去获取锁</li>
<li>回到上一个问题，为什么要设置前驱节点为SIGNAL状态</li>
<li>其实归终结底就是为了判断节点的状态，去做些处理。</li>
<li>Node中节点的状态有4种，分别是：CA NCELLED(1)、 SIGNAL(-1)、 CONDITI ON（-2）、 PROPAGATE（-3）和0。</li>
<li>在ReentrantLock解锁的时候，会判断节点的状态是否小于0，小于等于0才说明需要被唤醒</li>
<li>另外一提的是：公平锁的实现与非公平锁是很像的，只不过在获取锁时不会直接尝试使用CAS来获取锁。</li>
<li>只有当队列没节点并且state为0时才会去获取锁，不然都会把当前线程放到队列中</li>
</ol>
<h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/eK7qe3_20211027174549.png"></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA基础</title>
    <url>/posts/43d73074/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E5%9F%BA%E7%A1%80%E7%AF%87">一、基础篇</a><ul>
<li><a href="#%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80">网络基础</a><ul>
<li><a href="#tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"><strong>TCP三次握手</strong></a><ul>
<li><a href="#1osi%E4%B8%8Etcpip-%E6%A8%A1%E5%9E%8B"><strong>1、OSI与TCP&#x2F;IP 模型</strong></a></li>
<li><a href="#2%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82"><strong>2、常见网络服务分层</strong></a></li>
<li><a href="#3tcp%E4%B8%8Eudp%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%9C%BA%E6%99%AF"><strong>3、TCP与UDP区别及场景</strong></a></li>
<li><a href="#4tcp%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6"><strong>4、TCP滑动窗口，拥塞控制</strong></a></li>
<li><a href="#5tcp%E7%B2%98%E5%8C%85%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95"><strong>5、TCP粘包原因和解决方法</strong></a></li>
<li><a href="#6tcpudp%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F"><strong>6、TCP、UDP报文格式</strong></a></li>
</ul>
</li>
<li><a href="#http%E5%8D%8F%E8%AE%AE"><strong>HTTP协议</strong></a><ul>
<li><a href="#1http%E5%8D%8F%E8%AE%AE10_11_20">1、HTTP协议1.0_1.1_2.0</a></li>
<li><a href="#2http%E4%B8%8Ehttps%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">2、HTTP与HTTPS之间的区别</a></li>
<li><a href="#3get%E5%92%8Cpost%E8%AF%B7%E6%B1%82%E5%8C%BA%E5%88%AB"><strong>3、Get和Post请求区别</strong></a></li>
<li><a href="#4http%E5%B8%B8%E8%A7%81%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81"><strong>4、HTTP常见响应状态码</strong></a></li>
<li><a href="#5%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91%E5%8C%BA%E5%88%AB"><strong>5、重定向和转发区别</strong></a></li>
<li><a href="#6cookie%E5%92%8Csession%E5%8C%BA%E5%88%AB"><strong>6、Cookie和Session区别。</strong></a></li>
</ul>
</li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E8%BF%87%E7%A8%8B"><strong>浏览器输入URL过程</strong></a></li>
</ul>
</li>
<li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80"><strong>操作系统基础</strong></a><ul>
<li><a href="#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB"><strong>进程和线程的区别</strong></a><ul>
<li><a href="#1%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8Fipc"><strong>1、进程间通信方式IPC</strong></a></li>
<li><a href="#2%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E6%A0%B8%E5%BF%83%E6%80%81"><strong>2、用户态和核心态</strong></a></li>
<li><a href="#3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4"><strong>3、操作系统的进程空间</strong></a></li>
</ul>
</li>
<li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86">操作系统内存管理</a><ul>
<li><a href="#1%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95fifolru"><strong>1、页面置换算法FIFO、LRU</strong></a></li>
<li><a href="#2%E6%AD%BB%E9%94%81%E6%9D%A1%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F"><strong>2、死锁条件、解决方式。</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#java%E5%9F%BA%E7%A1%80"><strong>Java基础</strong></a><ul>
<li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7">面向对象三大特性</a><ul>
<li><a href="#1java%E4%B8%8Ec%E5%8C%BA%E5%88%AB"><strong>1、Java与C++区别</strong></a></li>
<li><a href="#2%E5%A4%9A%E6%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"><strong>2、多态实现原理</strong></a></li>
<li><a href="#3static%E5%92%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97">3、static和final关键字</a></li>
<li><a href="#4%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3">4、抽象类和接口</a></li>
<li><a href="#5%E6%B3%9B%E5%9E%8B%E4%BB%A5%E5%8F%8A%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4">5、泛型以及泛型擦除</a></li>
<li><a href="#6%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"><strong>6、反射原理以及使用场景</strong></a></li>
<li><a href="#7java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB"><strong>7、Java异常体系</strong></a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul>
<li><a href="#1arraylist%E5%92%8Clinkedlist"><strong>1、ArrayList和LinkedList</strong></a></li>
<li><a href="#2list%E9%81%8D%E5%8E%86%E5%BF%AB%E9%80%9F%E5%92%8C%E5%AE%89%E5%85%A8%E5%A4%B1%E8%B4%A5"><strong>2、List遍历快速和安全失败</strong></a></li>
<li><a href="#3%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8Dhashmap"><strong>3、详细介绍HashMap</strong></a></li>
<li><a href="#4concurrenthashmap-">**4、ConcurrentHashMap **</a></li>
<li><a href="#5%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96"><strong>5、序列化和反序列化</strong></a></li>
<li><a href="#6string"><strong>6、String</strong></a></li>
</ul>
</li>
<li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8E%9F%E5%88%99">设计模式与原则</a><ul>
<li><a href="#1%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">1、单例模式</a></li>
<li><a href="#2%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">2、工厂模式</a></li>
<li><a href="#3%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">3、抽象工厂模式</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a><ul>
<li><a href="#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">构造方法</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97">初始化块</a></li>
<li><a href="#this">This</a></li>
<li><a href="#%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB"><strong>重写和重载的区别</strong></a></li>
<li><a href="#object%E7%B1%BB%E6%96%B9%E6%B3%95">Object类方法</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB">基本数据类型和包装类</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%8Cjvm%E7%AF%87">二、JVM篇</a><ul>
<li><a href="#jvm%E5%86%85%E5%AD%98%E5%88%92%E5%88%86"><strong>JVM内存划分</strong></a><ul>
<li><a href="#1jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F"><strong>1、JVM运行时数据区域</strong></a></li>
<li><a href="#2%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5"><strong>2、堆内存分配策略</strong></a></li>
<li><a href="#3%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A5%E9%AA%A4"><strong>3、创建一个对象的步骤</strong></a></li>
<li><a href="#4%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8">4、<strong>对象引用</strong></a></li>
</ul>
</li>
<li><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B"><strong>JVM类加载过程</strong></a><ul>
<li><a href="#1%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6"><strong>1、双亲委派机制</strong></a></li>
<li><a href="#2tomcat%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6"><strong>2、tomcat的类加载机制</strong></a></li>
</ul>
</li>
<li><a href="#jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">JVM垃圾回收</a><ul>
<li><a href="#1%E5%AD%98%E6%B4%BB%E7%AE%97%E6%B3%95%E5%92%8C%E4%B8%A4%E6%AC%A1%E6%A0%87%E8%AE%B0%E8%BF%87%E7%A8%8B"><strong>1、存活算法和两次标记过程</strong></a></li>
<li><a href="#2%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95"><strong>2、垃圾回收算法</strong></a><ul>
<li><a href="#minorgcmajorgcfullgc"><strong>MinorGC、MajorGC、FullGC</strong></a></li>
</ul>
</li>
<li><a href="#3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"><strong>3、垃圾收集器</strong></a></li>
<li><a href="#4%E9%85%8D%E7%BD%AE%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"><strong>4、配置垃圾收集器</strong></a></li>
<li><a href="#4jvm%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98"><strong>4、JVM性能调优</strong></a></li>
<li><a href="#5jdk%E6%96%B0%E7%89%B9%E6%80%A7">5、JDK新特性</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">线上故障排查</a><ul>
<li><a href="#1%E7%A1%AC%E4%BB%B6%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">1、硬件故障排查</a></li>
<li><a href="#2%E6%8A%A5%E8%A1%A8%E5%BC%82%E5%B8%B8--jvm%E8%B0%83%E4%BC%98">2、报表异常 | JVM调优</a></li>
<li><a href="#3%E5%A4%A7%E5%B1%8F%E5%BC%82%E5%B8%B8--juc%E8%B0%83%E4%BC%98">3、大屏异常 | JUC调优</a></li>
<li><a href="#4%E6%8E%A5%E5%8F%A3%E5%BB%B6%E8%BF%9F--swap%E8%B0%83%E4%BC%98"><strong>4、接口延迟 | SWAP调优</strong></a></li>
<li><a href="#5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA--cache%E8%B0%83%E4%BC%98">5、<strong>内存溢出 | Cache调优</strong></a></li>
<li><a href="#6cpu%E9%A3%99%E9%AB%98--%E6%AD%BB%E5%BE%AA%E7%8E%AF">6：CPU飙高 | 死循环</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87">三、多线程篇</a><ul>
<li><a href="#%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6">线程调度</a><ul>
<li><a href="#1%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81"><strong>1、线程状态</strong></a></li>
<li><a href="#2%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2"><strong>2、线程状态切换</strong></a></li>
<li><a href="#3%E9%98%BB%E5%A1%9E%E5%94%A4%E9%86%92%E8%BF%87%E7%A8%8B"><strong>3、阻塞唤醒过程</strong></a></li>
<li><a href="#4wait%E5%92%8Csleep%E5%8C%BA%E5%88%AB"><strong>4、wait和sleep区别</strong></a></li>
<li><a href="#5%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F">5、创建线程方式</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%B1%A0">线程池</a><ul>
<li><a href="#1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"><strong>1、线程池构造函数</strong></a></li>
<li><a href="#2%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E8%BF%87%E7%A8%8B"><strong>2、线程处理任务过程：</strong></a></li>
<li><a href="#3%E7%BA%BF%E7%A8%8B%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5"><strong>3、线程拒绝策略</strong></a></li>
<li><a href="#4execuors%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%B1%A0"><strong>4、Execuors类实现线程池</strong></a></li>
<li><a href="#5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE"><strong>5、线程池大小设置</strong></a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a><ul>
<li><a href="#1%E4%B9%90%E8%A7%82%E9%94%81cas%E6%80%9D%E6%83%B3"><strong>1、乐观锁，CAS思想</strong></a></li>
<li><a href="#2synchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>2、synchronized底层实现</strong></a></li>
<li><a href="#3reentrantlock%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>3、ReenTrantLock底层实现</strong></a></li>
<li><a href="#4%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%8C%BA%E5%88%AB"><strong>4、公平锁和非公平锁区别</strong></a></li>
<li><a href="#5%E4%BD%BF%E7%94%A8%E5%B1%82%E9%9D%A2%E9%94%81%E4%BC%98%E5%8C%96"><strong>5、使用层面锁优化</strong></a></li>
<li><a href="#6%E7%B3%BB%E7%BB%9F%E5%B1%82%E9%9D%A2%E9%94%81%E4%BC%98%E5%8C%96">6、系统层面锁优化</a></li>
<li><a href="#7threadlocal%E5%8E%9F%E7%90%86"><strong>7、ThreadLocal原理</strong></a></li>
<li><a href="#8hashmap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8"><strong>8、HashMap线程安全</strong></a></li>
<li><a href="#9string%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%8E%9F%E5%9B%A0">9、String不可变原因</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">内存模型</a><ul>
<li><a href="#1volatile%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>1、volatile底层实现</strong></a></li>
<li><a href="#2aqs%E6%80%9D%E6%83%B3"><strong>2、AQS思想</strong></a></li>
<li><a href="#3happens-before">3、happens-before</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%9B%9Bmysql%E7%AF%87">四、MySQL篇</a><ul>
<li><a href="#whymysql">WhyMysql？</a><ul>
<li><a href="#%E6%B5%B7%E9%87%8Faerospike">海量Aerospike</a></li>
<li><a href="#%E5%9B%BE%E8%B0%B1neo4j">图谱Neo4j</a></li>
<li><a href="#%E6%96%87%E6%A1%A3mongodb"><strong>文档MongoDB</strong></a></li>
<li><a href="#%E4%BA%91%E5%AD%98%E5%82%A8"><strong>云存储</strong></a></li>
<li><a href="#fastdfs"><strong>FastDFS</strong></a></li>
</ul>
</li>
<li><a href="#%E4%BA%8B%E5%8A%A1">事务</a><ul>
<li><a href="#1%E4%BA%8B%E5%8A%A14%E5%A4%A7%E7%89%B9%E6%80%A7"><strong>1、事务4大特性</strong></a></li>
<li><a href="#2%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB"><strong>2、事务隔离级别</strong></a></li>
<li><a href="#3%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB-rr"><strong>3、默认隔离级别-RR</strong></a></li>
<li><a href="#4rr%E5%92%8Crc%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"><strong>4、RR和RC使用场景</strong></a></li>
<li><a href="#5%E8%A1%8C%E9%94%81%E8%A1%A8%E9%94%81%E6%84%8F%E5%90%91%E9%94%81"><strong>5、行锁，表锁，意向锁</strong></a></li>
<li><a href="#6mvcc%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6"><strong>6、MVCC多版本并发控制</strong></a></li>
</ul>
</li>
<li><a href="#%E7%B4%A2%E5%BC%95">索引</a><ul>
<li><a href="#1innodb%E5%92%8Cmyisam%E5%BC%95%E6%93%8E"><strong>1、Innodb和Myisam引擎</strong></a></li>
<li><a href="#2%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95"><strong>2、哈希索引</strong></a></li>
<li><a href="#3b%E6%A0%91%E7%B4%A2%E5%BC%95"><strong>3、B+树索引</strong></a></li>
<li><a href="#4%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">4、创建索引</a></li>
<li><a href="#5%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95"><strong>5、聚簇索引和非聚簇索引</strong></a></li>
<li><a href="#6%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E9%97%AE%E9%A2%98">6、最左前缀问题</a></li>
</ul>
</li>
<li><a href="#sql%E6%9F%A5%E8%AF%A2">SQL查询</a><ul>
<li><a href="#1sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B"><strong>1、SQL语句的执行过程</strong></a></li>
<li><a href="#2%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95"><strong>2、回表查询和覆盖索引</strong></a></li>
<li><a href="#3explain%E5%8F%8A%E4%BC%98%E5%8C%96">3、Explain及优化</a></li>
<li><a href="#4join%E6%9F%A5%E8%AF%A2">4、JOIN查询</a></li>
</ul>
</li>
<li><a href="#%E9%9B%86%E7%BE%A4"><strong>集群</strong></a><ul>
<li><a href="#1%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%BF%87%E7%A8%8B">1、主从复制过程</a></li>
<li><a href="#2%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98">2、数据一致性问题</a></li>
<li><a href="#3%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84">3、集群架构</a></li>
<li><a href="#4%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E5%92%8C%E6%81%A2%E5%A4%8D">4、故障转移和恢复</a></li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-1">面试题</a><ul>
<li><a href="#%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">分库分表</a><ul>
<li><a href="#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">如何进行分库分表</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E5%B0%86%E8%80%81%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%81%E7%A7%BB">如何将老数据进行迁移</a></li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9A%84%E8%AF%84%E4%BC%B0%E5%8F%8A%E6%89%A9%E5%AE%B9">系统性能的评估及扩容</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%87%AA%E5%A2%9E%E7%9A%84id%E4%B8%BB%E9%94%AE">如何生成自增的id主键</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E5%8F%8A%E4%BC%98%E5%8C%96">线上故障及优化</a><ul>
<li><a href="#%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5--%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%BB%B6%E6%97%B6">更新失败 | 主从同步延时</a></li>
<li><a href="#%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83--%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%BC%98%E5%8C%96"><strong>应用崩溃 | 分库分表优化</strong></a></li>
<li><a href="#%E6%9F%A5%E8%AF%A2%E5%BC%82%E5%B8%B8--sql-%E8%B0%83%E4%BC%98">查询异常 | SQL 调优</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%94redis%E7%AF%87"><strong>五、Redis篇</strong></a><ul>
<li><a href="#whyredis">WhyRedis</a><ul>
<li><a href="#1%E7%AE%80%E5%8D%95%E9%AB%98%E6%95%88">1、简单高效</a></li>
<li><a href="#2memcache">2、Memcache</a></li>
<li><a href="#3tair">3、Tair</a></li>
<li><a href="#4guava">4、Guava</a></li>
<li><a href="#5evcache">5、EVCache</a></li>
<li><a href="#6etcd">6、ETCD</a></li>
</ul>
</li>
<li><a href="#redis%E5%BA%95%E5%B1%82">Redis底层</a><ul>
<li><a href="#1redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1、redis数据类型</a></li>
<li><a href="#2%E7%9B%B8%E5%85%B3api"><strong>2、相关API</strong></a></li>
<li><a href="#3redis%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84">3、redis底层结构</a></li>
<li><a href="#4zset%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0">4、Zset底层实现</a></li>
</ul>
</li>
<li><a href="#redis%E5%8F%AF%E7%94%A8%E6%80%A7"><strong>Redis可用性</strong></a><ul>
<li><a href="#1redis%E6%8C%81%E4%B9%85%E5%8C%96">1、redis持久化</a></li>
<li><a href="#2redis%E4%BA%8B%E5%8A%A1">2、redis事务</a></li>
<li><a href="#3redis%E5%A4%B1%E6%95%88%E7%AD%96%E7%95%A5">3、redis失效策略</a></li>
<li><a href="#4redis%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F">4、redis读写模式</a></li>
<li><a href="#5%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98">5、多级缓存</a></li>
</ul>
</li>
<li><a href="#redis%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98">Redis七大经典问题</a><ul>
<li><a href="#1%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9">1、缓存雪崩</a></li>
<li><a href="#2%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F"><strong>2、缓存穿透</strong></a></li>
<li><a href="#3%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF"><strong>3、缓存击穿</strong></a></li>
<li><a href="#4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4">4、数据不一致</a></li>
<li><a href="#5%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%91%E7%AB%9E%E4%BA%89">5、数据并发竞争</a></li>
<li><a href="#6%E7%83%AD%E7%82%B9key%E9%97%AE%E9%A2%98">6、热点key问题</a></li>
<li><a href="#7bigkey%E9%97%AE%E9%A2%98">7、BigKey问题</a></li>
</ul>
</li>
<li><a href="#redis%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99">Redis分区容错</a><ul>
<li><a href="#1redis%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA"><strong>1、redis数据分区</strong></a></li>
<li><a href="#2%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95"><strong>2、主从模式&#x3D;简单</strong></a></li>
<li><a href="#3%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%A4%9A">3、<strong>哨兵模式</strong>&#x3D;读多</a></li>
<li><a href="#4%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E5%86%99%E5%A4%9A">4、集群模式&#x3D;写多</a></li>
<li><a href="#5%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">5、分布式锁</a></li>
<li><a href="#6redis%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B">6、redis心跳检测</a></li>
</ul>
</li>
<li><a href="#redis%E5%AE%9E%E6%88%98">Redis实战</a><ul>
<li><a href="#1redis%E4%BC%98%E5%8C%96">1、Redis优化</a></li>
<li><a href="#2redis%E7%83%AD%E5%8D%87%E7%BA%A7">2、Redis热升级</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%85%ADkafka%E7%AF%87">六、Kafka篇</a><ul>
<li><a href="#why-kafka">Why kafka</a></li>
<li><a href="#what-kafka">What Kafka</a></li>
<li><a href="#how-kafka">How Kafka</a></li>
<li><a href="#%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B"><strong>生产消费基本流程</strong></a></li>
<li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7">一致性</a></li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7">可用性</a></li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-2">面试题</a><ul>
<li><a href="#%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98rebalance"><strong>线上问题rebalance</strong></a></li>
<li><a href="#zookeeper-%E7%9A%84%E4%BD%9C%E7%94%A8">ZooKeeper 的作用</a></li>
<li><a href="#replica%E5%89%AF%E6%9C%AC%E7%9A%84%E4%BD%9C%E7%94%A8">Replica副本的作用</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%94%AF%E6%8C%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB">为什么不支持读写分离?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9">如何防止重复消费</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1"><strong>如何保证数据不会丢失</strong></a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9"><strong>如何保证顺序消费</strong></a></li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%A7%AF%E5%8E%8B%E6%B6%88%E8%B4%B9">【线上】如何解决积压消费</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B">如何避免消息积压</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">如何设计消息队列</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%83spring%E7%AF%87">七、Spring篇</a><ul>
<li><a href="#%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3beans">设计思想&amp;Beans</a><ul>
<li><a href="#1ioc-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC"><strong>1、IOC 控制反转</strong></a></li>
<li><a href="#2aop-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86"><strong>2、AOP 动态代理</strong></a></li>
<li><a href="#3bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"><strong>3、Bean生命周期</strong></a></li>
<li><a href="#4bean%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>4</strong>、Bean作用域</a></li>
<li><a href="#5%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96">5、循环依赖</a></li>
</ul>
</li>
<li><a href="#spring%E6%B3%A8%E8%A7%A3">Spring注解</a><ul>
<li><a href="#1springboot">1、@SpringBoot</a></li>
<li><a href="#2springmvc"><strong>2、@SpringMVC</strong></a></li>
<li><a href="#3springmybatis">3、@SpringMybatis</a></li>
<li><a href="#4transactional">4、@Transactional</a></li>
</ul>
</li>
<li><a href="#spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">Spring源码阅读</a><ul>
<li><a href="#1spring%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F"><strong>1、Spring中的设计模式</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%85%ABspringcloud%E7%AF%87">八、SpringCloud篇</a><br>- <a href="#why-springcloud">Why SpringCloud</a><br>- <a href="#spring-boot">Spring Boot</a><br>- <a href="#gateway--zuul">GateWay &#x2F; Zuul</a><br>- <a href="#eureka--zookeeper">Eureka &#x2F; Zookeeper</a><br>- <a href="#feign--ribbon">Feign &#x2F; Ribbon</a><br>- <a href="#hystrix--sentinel">Hystrix &#x2F; Sentinel</a><br>- <a href="#config--nacos">Config &#x2F; Nacos</a><br>- <a href="#bus--stream">Bus &#x2F; Stream</a><br>- <a href="#sleuth--zipkin"><strong>Sleuth &#x2F; Zipkin</strong></a><ul>
<li><a href="#%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81"><strong>安全认证</strong></a></li>
<li><a href="#%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83">灰度发布</a></li>
<li><a href="#%E5%A4%9A%E7%89%88%E6%9C%AC%E9%9A%94%E7%A6%BB">多版本隔离</a><ul>
<li><a href="#%E5%90%84%E7%BB%84%E4%BB%B6%E8%B0%83%E4%BC%98"><strong>各组件调优</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B9%9D%E5%88%86%E5%B8%83%E5%BC%8F%E7%AF%87"><strong>九、分布式篇</strong></a><ul>
<li><a href="#%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B"><strong>发展历程</strong></a></li>
<li><a href="#cap">CAP</a></li>
<li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7-1">一致性</a><ul>
<li><a href="#xa%E6%96%B9%E6%A1%88">XA方案</a></li>
<li><a href="#paxos%E7%AE%97%E6%B3%95"><strong>Paxos算法</strong></a></li>
<li><a href="#zab%E7%AE%97%E6%B3%95"><strong>ZAB算法</strong></a></li>
<li><a href="#raft%E7%AE%97%E6%B3%95">Raft算法</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8Credis%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7">数据库和Redis的一致性</a></li>
</ul>
</li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7-1">可用性</a><ul>
<li><a href="#%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B"><strong>心跳检测</strong></a></li>
<li><a href="#%E5%A4%9A%E6%9C%BA%E6%88%BF%E5%AE%9E%E6%97%B6%E7%83%AD%E5%A4%87"><strong>多机房实时热备</strong></a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">分区容错性</a><ul>
<li><a href="#%E6%97%A5%E5%BF%97%E5%A4%8D%E5%88%B6">日志复制</a></li>
<li><a href="#%E4%B8%BB%E5%A4%87master-slave"><strong>主备（Master-Slave）</strong></a></li>
<li><a href="#%E4%BA%92%E5%A4%87active-active"><strong>互备（Active-Active）</strong></a></li>
<li><a href="#%E9%9B%86%E7%BE%A4cluster%E6%A8%A1%E5%BC%8F"><strong>集群（Cluster）模式</strong></a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1">分布式事务</a><ul>
<li><a href="#xa%E6%96%B9%E6%A1%88-1">XA方案</a></li>
<li><a href="#tcc%E6%96%B9%E6%A1%88">TCC方案</a></li>
<li><a href="#saga%E6%96%B9%E6%A1%88"><strong>Saga方案</strong></a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8ebay"><strong>本地消息表（eBay）</strong></a></li>
<li><a href="#mq%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7"><strong>MQ最终一致性</strong></a></li>
<li><a href="#%E6%9C%80%E5%A4%A7%E5%8A%AA%E5%8A%9B%E9%80%9A%E7%9F%A5%E6%96%B9%E6%A1%88%E8%AE%A2%E5%8D%95---%E7%A7%AF%E5%88%86">最大努力通知方案（订单 -&gt; 积分）</a></li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-3">面试题</a><ul>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8Fsession%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88">分布式Session实现方案</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a><strong>TCP三次握手</strong></h3><p>​    <strong>三次握手过程：</strong></p>
<p>​        客户端——发送带有SYN标志的数据包——服务端       <strong>一次握手</strong>  Client进入syn_sent状态</p>
<p>​        服务端——发送带有SYN&#x2F;ACK标志的数据包——客户端   <strong>二次握手</strong>  服务端进入syn_rcvd</p>
<p>​        客户端——发送带有ACK标志的数据包——服务端               <strong>三次握手</strong>   连接就进入Established状态</p>
<p>​    <strong>为什么三次：</strong></p>
<p>​        主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送、接收数据的能力</p>
<p>​    <strong>为什么两次不行？</strong></p>
<p>​        1、防止已失效的请求报文又传送到了服务端，建立了多余的链接，浪费资源</p>
<p>​        2、 两次握手只能保证单向连接是畅通的。（为了实现可靠数据传输， TCP 协议的通信双方， 都必须维    护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方    相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤；如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认）</p>
<p>**TCP四次挥手过程 **</p>
<p><strong>四次挥手过程：</strong></p>
<p>​    客户端——发送带有FIN标志的数据包——服务端，关闭与服务端的连接 ，客户端进入FIN-WAIT-1状态</p>
<p>​    服务端收到这个 FIN，它发回⼀ 个 ACK，确认序号为收到的序号加1，服务端就进入了CLOSE-WAIT状态</p>
<p>​    服务端——发送⼀个FIN数据包——客户端，关闭与客户端的连接，客户端就进入FIN-WAIT-2状态</p>
<p>​    客户端收到这个 FIN，发回 ACK 报⽂确认，并将确认序号设置为收到序号加1，TIME-WAIT状态</p>
<p><strong>为什么四次：</strong></p>
<p>​    因为需要确保客户端与服务端的数据能够完成传输。</p>
<p><strong>CLOSE-WAIT：</strong></p>
<p>​    这种状态的含义其实是表示在等待关闭</p>
<p><strong>TIME-WAIT：</strong></p>
<p>​    为了解决网络的丢包和网络不稳定所带来的其他问题，确保连接方能在时间范围内，关闭自己的连接</p>
<p><strong>如何查看TIME-WAIT状态的链接数量？</strong>        </p>
<p>​    netstat -an |grep TIME_WAIT|wc -l  查看连接数等待time_wait状态连接数</p>
<p><strong>为什么会TIME-WAIT过多？解决方法是怎样的？</strong></p>
<p>​    <strong>可能原因：</strong> 高并发短连接的TCP服务器上，当服务器处理完请求后立刻按照主动正常关闭连接</p>
<p>​    <strong>解决：</strong>负载均衡服务器；Web服务器首先关闭来自负载均衡服务器的连接</p>
<h4 id="1、OSI与TCP-x2F-IP-模型"><a href="#1、OSI与TCP-x2F-IP-模型" class="headerlink" title="1、OSI与TCP&#x2F;IP 模型"></a><strong>1、OSI与TCP&#x2F;IP 模型</strong></h4><p>​        OSI七层：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<p>​        TCP&#x2F;IP五层：物理层、数据链路层、网络层、传输层、应用层</p>
<h4 id="2、常见网络服务分层"><a href="#2、常见网络服务分层" class="headerlink" title="2、常见网络服务分层"></a><strong>2、常见网络服务分层</strong></h4><p>​        应用层：HTTP、SMTP、DNS、FTP</p>
<p>​        传输层：TCP 、UDP</p>
<p>​        网络层：ICMP 、IP、路由器、防火墙</p>
<p>​        数据链路层：网卡、网桥、交换机</p>
<p>​        物理层：中继器、集线器</p>
<h4 id="3、TCP与UDP区别及场景"><a href="#3、TCP与UDP区别及场景" class="headerlink" title="3、TCP与UDP区别及场景"></a><strong>3、TCP与UDP区别及场景</strong></h4><table>
<thead>
<tr>
<th>类型</th>
<th align="center">特点</th>
<th align="center">性能</th>
<th align="center">应用过场景</th>
<th align="center">首部字节</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>TCP</td>
<td align="center">面向连接、可靠、字节流</td>
<td align="center">传输效率慢、所需资源多</td>
<td align="center">文件、邮件传输</td>
<td align="center">20-60</td>
<td></td>
</tr>
<tr>
<td>UDP</td>
<td align="center">无连接、不可靠、数据报文段</td>
<td align="center">传输效率快、所需资源少</td>
<td align="center">语音、视频、直播</td>
<td align="center">8个字节</td>
<td></td>
</tr>
</tbody></table>
<p>​    <strong>基于TCP的协议：</strong>HTTP、FTP、SMTP</p>
<p>​    <strong>基于UDP的协议：</strong>RIP、DNS、SNMP</p>
<h4 id="4、TCP滑动窗口，拥塞控制"><a href="#4、TCP滑动窗口，拥塞控制" class="headerlink" title="4、TCP滑动窗口，拥塞控制"></a><strong>4、TCP滑动窗口，拥塞控制</strong></h4><p>​        <strong>TCP通过：</strong>应用数据分割、对数据包进行编号、校验和、流量控制、拥塞控制、超时重传等措施保证数据的可靠传输；</p>
<p>​        <strong>拥塞控制目的：</strong>为了防止过多的数据注入到网络中，避免网络中的路由器、链路过载</p>
<p>​        <strong>拥塞控制过程：</strong>TCP维护一个拥塞窗口，该窗口随着网络拥塞程度动态变化，通过慢开始、拥塞避免等算法减少网络拥塞的发生。</p>
<h4 id="5、TCP粘包原因和解决方法"><a href="#5、TCP粘包原因和解决方法" class="headerlink" title="5、TCP粘包原因和解决方法"></a><strong>5、TCP粘包原因和解决方法</strong></h4><p>​    <strong>TCP粘包是指</strong>：发送方发送的若干包数据到接收方接收时粘成一包</p>
<p>​    <strong>发送方原因：</strong></p>
<p>​        TCP默认使用Nagle算法（主要作用：减少网络中报文段的数量）：</p>
<p>​            收集多个小分组，在一个确认到来时一起发送、导致发送方可能会出现粘包问题</p>
<p>​    <strong>接收方原因：</strong></p>
<p>​            TCP将接收到的数据包保存在接收缓存里，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。</p>
<p>​    <strong>解决粘包问题：</strong></p>
<p>​        最本质原因在与接收对等方无法分辨消息与消息之间的边界在哪，通过使用某种方案给出边界，例如：</p>
<ul>
<li><p>发送定长包。每个消息的大小都是一样的，接收方只要累计接收数据，直到数据等于一个定长的数值就将它作为一个消息。</p>
</li>
<li><p>包尾加上\r\n标记。FTP协议正是这么做的。但问题在于如果数据正文中也含有\r\n，则会误判为消息的边界。</p>
</li>
<li><p>包头加上包体长度。包头是定长的4个字节，说明了包体的长度。接收对等方先接收包体长度，依据包体长度来接收包体。</p>
</li>
</ul>
<h4 id="6、TCP、UDP报文格式"><a href="#6、TCP、UDP报文格式" class="headerlink" title="6、TCP、UDP报文格式"></a><strong>6、TCP、UDP报文格式</strong></h4><p>​    <strong>TCP报文格式：</strong></p>
<p>​        <img src="https://farm1.staticflickr.com/792/27194088468_4cb0141fc8_b.jpg" style="zoom: 67%;" /></p>
<p>​    <strong>源端口号和目的端口号</strong>：</p>
<p>​        用于寻找发端和收端应用进程。这两个值加上ip首部源端ip地址和目的端ip地址唯一确定一个tcp连接。</p>
<p>​    <strong>序号字段：</strong></p>
<p>​        序号用来标识从T C P发端向T C P收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则 T C P用序号对每个字节进行计数。序号是32 bit的无符号数，序号到达 2^32-1后又从0开始。</p>
<p>　　当建立一个新的连接时，SYN标志变1。序号字段包含由这个主机选择的该连接的初始序号ISN（Initial Sequence Number）。该主机要发送数据的第一个字节序号为这个ISN加1，因为SYN标志消耗了一个序号</p>
<p>​    <strong>确认序号</strong>：</p>
<p>​        既然每个传输的字节都被计数，确认序号包含发送确认的一端所期望收到的下一个序号。因此，确认序号应当是上次已成功收到数据字节序号加 1。只有ACK标志为 1时确认序号字段才有效。发送ACK无需任何代价，因为 32 bit的确认序号字段和A C K标志一样，总是T C P首部的一部分。因此，我们看到一旦一个连接建立起来，这个字段总是被设置， ACK标志也总是被设置为1。TCP为应用层提供全双工服务。这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据序号。</p>
<p>​    <strong>首都长度</strong>：</p>
<p>​        首部长度给出首部中 32 bit字的数目。需要这个值是因为任选字段的长度是可变的。这个字段占4 bit，因此T C P最多有6 0字节的首部。然而，没有任选字段，正常的长度是 2 0字节。</p>
<p>​    <strong>标志字段</strong>：在T C P首部中有 6个标志比特。它们中的多个可同时被设置为1.<br>　　URG紧急指针（u rgent pointer）有效<br>　　ACK确认序号有效。<br>　　PSH接收方应该尽快将这个报文段交给应用层。<br>　　RST重建连接。<br>　　SYN同步序号用来发起一个连接。这个标志和下一个标志将在第 1 8章介绍。<br>　　FIN发端完成发送任务。</p>
<p>​    <strong>窗口大小</strong>：</p>
<p>​        T C P的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端期望接收的字节。窗口大小是一个 16 bit字段，因而窗口大小最大为 65535字节。</p>
<p>​    <strong>检验和：</strong></p>
<p>​        检验和覆盖了整个的 T C P报文段：T C P首部和T C P数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。</p>
<p>​    <strong>紧急指针</strong>：</p>
<p>​        只有当URG标志置1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 T C P的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>
<p>​    <strong>选项</strong>：</p>
<p>​        最常见的可选字段是最长报文大小，又称为 MSS (Maximum Segment Size)。每个连接方通常都在通信的第一个报文段（为建立连接而设置 S Y N标志的那个段）中指明这个选项。它指明本端所能接收的最大长度的报文段。</p>
<p>​    <strong>UDP报文格式：</strong></p>
<p>​    <img src="https://appwk.baidu.com/naapi/doc/view?ih=482&o=png_6_0_0_176_917_504_247_892.979_1262.879&iw=986&ix=0&iy=0&aimw=986&rn=1&doc_id=182d935c3186bceb18e8bb77&pn=1&sign=b88bda03b9954e506622f97b8b2ae438&type=1&app_ver=2.9.8.2&ua=bd_800_800_IncredibleS_2.9.8.2_2.3.7&bid=1&app_ua=IncredibleS&uid=&cuid=&fr=3&Bdi_bear=WIFI&from=3_10000&bduss=&pid=1&screen=800_800&sys_ver=2.3.7" style="zoom:50%;" /></p>
<p>​    <strong>端口号</strong>：</p>
<p>​        用来表示发送和接受进程。由于 I P层已经把I P数据报分配给T C P或U D P（根据I P首部中协议字段值），因此T C P端口号由T C P来查看，而 U D P端口号由UDP来查看。T C P端口号与UDP端口号是相互独立的。</p>
<p>​    <strong>长度</strong>：</p>
<p>​        UDP长度字段指的是UDP首部和UDP数据的字节长度。该字段的最小值为 8字节（发送一份0字节的UDP数据报是 O K）。</p>
<p>​    <strong>检验和</strong>：</p>
<p>​        UDP检验和是一个端到端的检验和。它由发送端计算，然后由接收端验证。其目的是为了发现UDP首部和数据在发送端到接收端之间发生的任何改动。</p>
<p>​    <strong>IP报文格式：</strong>普通的IP首部长为20个字节，除非含有可选项字段。</p>
<p>​                <img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1614312792,1954581760&fm=26&gp=0.jpg" style="zoom:67%;" /></p>
<p>​    <strong>4位版本</strong>：</p>
<p>​        目前协议版本号是4，因此IP有时也称作IPV4.</p>
<p>​    <strong>4位首部长度</strong>：</p>
<p>​        首部长度指的是首部占32bit字的数目，包括任何选项。由于它是一个4比特字段，因此首部长度最长为60个字节。</p>
<p>​    <strong>服务类型（TOS）</strong>：</p>
<p>​        服务类型字段包括一个3bit的优先权字段（现在已经被忽略），4bit的TOS子字段和1bit未用位必须置0。4bit的TOS分别代表：最小时延，最大吞吐量，最高可靠性和最小费用。4bit中只能置其中1比特。如果所有4bit均为0，那么就意味着是一般服务。</p>
<p>​    <strong>总长度</strong>：</p>
<p>​        总长度字段是指整个IP数据报的长度，以字节为单位。利用首部长度和总长度字段，就可以知道IP数据报中数据内容的起始位置和长度。由于该字段长16bit，所以IP数据报最长可达65535字节。当数据报被分片时，该字段的值也随着变化。</p>
<p>​    <strong>标识字段</strong>：</p>
<p>​        标识字段唯一地标识主机发送的每一份数据报。通常每发送一份报文它的值就会加1。</p>
<p>​    <strong>生存时间</strong>：</p>
<p>​        TTL（time-to-live）生存时间字段设置了数据报可以经过的最多路由器数。它指定了数据报的生存时间。TTL的初始值由源主机设置（通常为 3 2或6 4），一旦经过一个处理它的路由器，它的值就减去 1。当该字段的值为 0时，数据报就被丢弃，并发送 ICMP 报文通知源主机。</p>
<p>​    <strong>首部检验和</strong>：</p>
<p>​        首部检验和字段是根据 I P首部计算的检验和码。它不对首部后面的数据进行计算。 ICMP、IGMP、UDP和TCP在它们各自的首部中均含有同时覆盖首部和数据检验和码。</p>
<p>​    <strong>以太网报文格式：</strong></p>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2733576797,55677727&fm=26&gp=0.jpg"></p>
<p>​    <strong>目的地址和源地址：</strong></p>
<p>​        是指网卡的硬件地址（也叫MAC 地址），长度是48 位，是在网卡出厂时固化的。</p>
<p>​    <strong>数据：</strong></p>
<p>​        以太网帧中的数据长度规定最小46 字节，最大1500 字节，ARP 和RARP 数据包的长度不够46 字节，要在后面补填充位。最大值1500 称为以太网的最大传输单元（MTU），不同的网络类型有不同的MTU，如果一个数据包从以太网路由到拨号链路上，数据包度大于拨号链路的MTU了，则需要对数据包进行分片fragmentation）。ifconfig 命令的输出中也有“MTU:1500”。注意，MTU 个概念指数据帧中有效载荷的最大长度，不包括帧首部的长度。</p>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><strong>HTTP协议</strong></h3><h4 id="1、HTTP协议1-0-1-1-2-0"><a href="#1、HTTP协议1-0-1-1-2-0" class="headerlink" title="1、HTTP协议1.0_1.1_2.0"></a>1、HTTP协议1.0_1.1_2.0</h4><p>​    <strong>HTTP1.0：</strong>服务器处理完成后立即断开TCP连接（<strong>无连接</strong>），服务器不跟踪每个客户端也不记录过去的请求（<strong>无状态</strong>）</p>
<p>​    <strong>HTTP1.1：</strong>KeepAlived<strong>长连接</strong>避免了连接建立和释放的开销；通过Content-Length来判断当前请求数据是否已经全部接受（<strong>有状态</strong>）</p>
<p>​    <strong>HTTP2.0：</strong>引入二进制数据帧和流的概念，其中帧对数据进行顺序标识；因为有了序列，服务器可以<strong>并行</strong>的传输数据。</p>
<p>​    <strong>http1.0和http1.1的主要区别如下：</strong><br>​        1、缓存处理：1.1添加更多的缓存控制策略（如：Entity tag，If-Match）<br>​        2、网络连接的优化：1.1支持断点续传<br>​        3、错误状态码的增多：1.1新增了24个错误状态响应码，丰富的错误码更加明确各个状态<br>​        4、Host头处理：支持Host头域，不在以IP为请求方标志<br>​        5、长连接：减少了建立和关闭连接的消耗和延迟。</p>
<p>​    <strong>http1.1和http2.0的主要区别：</strong><br>​        1、新的传输格式：2.0使用二进制格式，1.0依然使用基于文本格式<br>​        2、多路复用：连接共享，不同的request可以使用同一个连接传输（最后根据每个request上的id号组合成正常的请求）<br>​        3、header压缩：由于1.X中header带有大量的信息，并且得重复传输，2.0使用encoder来减少需要传输的hearder大小<br>​        4、服务端推送：同google的SPDUY（1.0的一种升级）一样</p>
<h4 id="2、HTTP与HTTPS之间的区别"><a href="#2、HTTP与HTTPS之间的区别" class="headerlink" title="2、HTTP与HTTPS之间的区别"></a>2、HTTP与HTTPS之间的区别</h4><p>​        <strong>HTTP与HTTPS之间的区别：</strong></p>
<table>
<thead>
<tr>
<th align="center">HTTP</th>
<th align="center">HTTPS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认端口80</td>
<td align="center">HTTPS默认使用端口443</td>
</tr>
<tr>
<td align="center">明文传输、数据未加密、安全性差</td>
<td align="center">传输过程ssl加密、安全性较好</td>
</tr>
<tr>
<td align="center">响应速度快、消耗资源少</td>
<td align="center">响应速度较慢、消耗资源多、需要用到CA证书</td>
</tr>
</tbody></table>
<p>​        <strong>HTTPS链接建立的过程：</strong></p>
<p>​            1.首先客户端先给服务器发送一个请求</p>
<p>​            2.服务器发送一个SSL证书给客户端，内容包括：证书的发布机构、有效期、所有者、签名以及公钥</p>
<p>​            3.客户端对发来的公钥进行真伪校验，校验为真则使用公钥对对称加密算法以及对称密钥进行加密</p>
<p>​            4.服务器端使用私钥进行解密并使用对称密钥加密确认信息发送给客户端</p>
<p>​            5.随后客户端和服务端就使用对称密钥进行信息传输</p>
<p>​        <strong>对称加密算法：</strong></p>
<p>​            双方持有相同的密钥，且加密速度快，典型对称加密算法：DES、AES</p>
<p>​        <strong>非对称加密算法：</strong></p>
<p>​            密钥成对出现（私钥、公钥），私钥只有自己知道，不在网络中传输；而公钥可以公开。相比对称加密速度较慢，典型的非对称加密算法有：RSA、DSA</p>
<h4 id="3、Get和Post请求区别"><a href="#3、Get和Post请求区别" class="headerlink" title="3、Get和Post请求区别"></a><strong>3、Get和Post请求区别</strong></h4><p><strong>HTTP请求：</strong></p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GET</td>
<td>向特定资源发送请求，查询数据，并返回实体</td>
</tr>
<tr>
<td align="left">POST</td>
<td>向指定资源提交数据进行处理请求，可能会导致新的资源建立、已有资源修改</td>
</tr>
<tr>
<td align="left">PUT</td>
<td>向服务器上传新的内容</td>
</tr>
<tr>
<td align="left">HEAD</td>
<td>类似GET请求，返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td>请求服务器删除指定标识的资源</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td>可以用来向服务器发送请求来测试服务器的功能性</td>
</tr>
<tr>
<td align="left">TRACE</td>
<td>回显服务器收到的请求，用于测试或诊断</td>
</tr>
<tr>
<td align="left">CONNECT</td>
<td>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td>
</tr>
</tbody></table>
<p><strong>get和Post区别：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody><tr>
<td>可见性</td>
<td>数据在URL中对所有人可见</td>
<td>数据不会显示在URL中</td>
</tr>
<tr>
<td>安全性</td>
<td>与post相比，get的安全性较差，因为所<br/>发送的数据是URL的一部分</td>
<td>安全，因为参数不会被保存在浏览器<br/>历史或web服务器日志中</td>
</tr>
<tr>
<td>数据长度</td>
<td>受限制，最长2kb</td>
<td>无限制</td>
</tr>
<tr>
<td>编码类型</td>
<td>application&#x2F;x-www-form-urlencoded</td>
<td>multipart&#x2F;form-data</td>
</tr>
<tr>
<td>缓存</td>
<td>能被缓存</td>
<td>不能被缓存</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="4、HTTP常见响应状态码"><a href="#4、HTTP常见响应状态码" class="headerlink" title="4、HTTP常见响应状态码"></a><strong>4、HTTP常见响应状态码</strong></h4><p>​        100：Continue — 继续。客户端应继续其请求。</p>
<p>​        200：OK — 请求成功。一般用于GET与POST请求。</p>
<p>​        301：Moved Permanently — 永久重定向。</p>
<p>​        302：Found — 暂时重定向。</p>
<p>​        400：Bad Request — 客户端请求的语法错误，服务器无法理解。</p>
<p>​        403：Forbideen — 服务器理解请求客户端的请求，但是拒绝执行此请求。</p>
<p>​        404：Not Found — 服务器无法根据客户端的请求找到资源（网页）。</p>
<p>​        500：Internal Server Error — 服务器内部错误，无法完成请求。</p>
<p>​        502：Bad Gateway — 作为网关或者代理服务器尝试执行请求时，从远程服务器接收到了无效的响应。</p>
<h4 id="5、重定向和转发区别"><a href="#5、重定向和转发区别" class="headerlink" title="5、重定向和转发区别"></a><strong>5、重定向和转发区别</strong></h4><p>​    <strong>重定向：redirect：</strong></p>
<p>​            地址栏发生变化    </p>
<p>​            重定向可以访问其他站点（服务器）的资源</p>
<p>​            重定向是两次请求。不能使用request对象来共享数据</p>
<p>​    <strong>转发：forward：</strong></p>
<p>​            转发地址栏路径不变</p>
<p>​            转发只能访问当前服务器下的资源</p>
<p>​            转发是一次请求，可以使用request对象共享数据</p>
<h4 id="6、Cookie和Session区别。"><a href="#6、Cookie和Session区别。" class="headerlink" title="6、Cookie和Session区别。"></a><strong>6、Cookie和Session区别。</strong></h4><p>​    Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但两者有所区别：</p>
<p>​            Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>
<p>​            cookie不是很安全，别人可以分析存放在本地的COOKIE并进行欺骗,考虑到安全应当使用session。</p>
<p>​            Cookie ⼀般⽤来保存⽤户信息，Session 的主要作⽤就是通过服务端记录⽤户的状态</p>
<h3 id="浏览器输入URL过程"><a href="#浏览器输入URL过程" class="headerlink" title="浏览器输入URL过程"></a><strong>浏览器输入URL过程</strong></h3><p>​    <strong>过程：</strong>DNS解析、TCP连接、发送HTTP请求、服务器处理请求并返回HTTP报文、浏览器渲染、结束</p>
<table>
<thead>
<tr>
<th>过程</th>
<th>使用的协议</th>
</tr>
</thead>
<tbody><tr>
<td>1、浏览器查找域名DNS的IP地址<br />DNS查找过程（浏览器缓存、路由器缓存、DNS缓存）</td>
<td>DNS：获取域名对应的ip</td>
</tr>
<tr>
<td>2、根据ip建立TCP连接</td>
<td>TCP：与服务器建立连接</td>
</tr>
<tr>
<td>3、浏览器向服务器发送HTTP请求</td>
<td>HTTP：发送请求</td>
</tr>
<tr>
<td>4、服务器响应HTTP响应</td>
<td>HTTP</td>
</tr>
<tr>
<td>5、浏览器进行渲染</td>
<td></td>
</tr>
</tbody></table>
<div style="page-break-after: always;"></div>

<h2 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a><strong>操作系统基础</strong></h2><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a><strong>进程和线程的区别</strong></h3><p>​        <strong>进程：</strong>是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器</p>
<p>​        <strong>线程：</strong>是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题</p>
<p>​        <strong>协程：</strong>是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。</p>
<h4 id="1、进程间通信方式IPC"><a href="#1、进程间通信方式IPC" class="headerlink" title="1、进程间通信方式IPC"></a><strong>1、进程间通信方式IPC</strong></h4><p><strong>管道pipe：</strong></p>
<p>​        亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；</p>
<p><strong>信号：</strong></p>
<p>​        信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。</p>
<p><strong>消息队列：</strong></p>
<p>​        消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。</p>
<p><strong>共享内存(share memory)：</strong></p>
<ul>
<li>使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。</li>
<li>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</li>
</ul>
<p><strong>信号量(Semaphores) ：</strong></p>
<p>​        信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。</p>
<p><strong>套接字(Sockets) :</strong> </p>
<p>​        简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。</p>
<h4 id="2、用户态和核心态"><a href="#2、用户态和核心态" class="headerlink" title="2、用户态和核心态"></a><strong>2、用户态和核心态</strong></h4><p><strong>用户态：</strong>只能受限的访问内存，运行所有的应用程序</p>
<p><strong>核心态：</strong>运行操作系统程序，cpu可以访问内存的所有数据，包括外围设备</p>
<p><strong>为什么要有用户态和内核态：</strong></p>
<p>​        由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据, 并发送到网络</p>
<p><strong>用户态切换到内核态的3种方式：</strong></p>
<p>​    <strong>a. 系统调用</strong></p>
<p>​        主动调用，系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断。</p>
<p>​    <strong>b. 异常</strong></p>
<p>​        当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，比如缺页异常，这时会触发切换内核态处理异常。</p>
<p>​    <strong>c. 外围设备的中断</strong></p>
<p>​        当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会由用户态到内核态的切换。</p>
<h4 id="3、操作系统的进程空间"><a href="#3、操作系统的进程空间" class="headerlink" title="3、操作系统的进程空间"></a><strong>3、操作系统的进程空间</strong></h4><p>​    栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。</p>
<p>​    堆区（heap）— 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。</p>
<p>​    静态区（static）—存放全局变量和静态变量的存储</p>
<p>​    代码区(text)—存放函数体的二进制代码。</p>
<p>​    <strong>线程共享堆区、静态区</strong></p>
<h3 id="操作系统内存管理"><a href="#操作系统内存管理" class="headerlink" title="操作系统内存管理"></a>操作系统内存管理</h3><p><strong>存管理方式：</strong>页式管理、段式管理、段页式管理</p>
<p><strong>分段管理：</strong></p>
<p>​        将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）</p>
<p><strong>分页管理：</strong></p>
<p>​        在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的页框，程序加载时，可以将任意一页放入内存中任意一个页框，这些页框不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）</p>
<p><strong>段页式管理：</strong></p>
<p>​        段⻚式管理机制结合了段式管理和⻚式管理的优点。简单来说段⻚式管理机制就是把主存先分成若⼲段，每个段⼜分成若⼲⻚，也就是说 段⻚式管理机制 中段与段之间以及段的内部的都是离散的</p>
<h4 id="1、页面置换算法FIFO、LRU"><a href="#1、页面置换算法FIFO、LRU" class="headerlink" title="1、页面置换算法FIFO、LRU"></a><strong>1、页面置换算法FIFO、LRU</strong></h4><p><strong>置换算法：</strong>先进先出FIFO、最近最久未使用LRU、最佳置换算法OPT</p>
<p><strong>先进先出FIFO:</strong></p>
<p>​        缺点：没有考虑到实际的页面使用频率，性能差、与通常页面使用的规则不符合，实际应用较少</p>
<p><strong>最近最久未使用LRU:</strong></p>
<p>​        原理：选择最近且最久未使用的页面进行淘汰</p>
<p>​        优点：考虑到了程序访问的时间局部性，有较好的性能，实际应用也比较多</p>
<p>​        缺点：没有合适的算法，只有适合的算法，lFU、random都可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: LRU最近最久未使用置换算法，通过LinkedHashMap实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-07-17 10:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;Integer,Integer&gt; cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;   <span class="comment">//容量大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *初始化构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(capacity);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//缓存中不存在此key，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(!cache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        cache.remove(key);   <span class="comment">//先从链表中删除</span></span><br><span class="line">        cache.put(key,res);  <span class="comment">//再把该节点放到链表末尾处</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache.containsKey(key)) &#123;</span><br><span class="line">            cache.remove(key); <span class="comment">//已经存在，在当前链表移除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(capacity == cache.size()) &#123;</span><br><span class="line">            <span class="comment">//cache已满，删除链表头位置</span></span><br><span class="line">            Set&lt;Integer&gt; keySet = cache.keySet();</span><br><span class="line">            Iterator&lt;Integer&gt; iterator = keySet.iterator();</span><br><span class="line">            cache.remove(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key,value);  <span class="comment">//插入到链表末尾</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: LRU最近最久未使用置换算法，通过LinkedHashMap内部removeEldestEntry方法实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-07-17 10:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *初始化构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; capacity;  <span class="comment">// 容量大于capacity 时就删除</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//返回key对应的value值，若不存在，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> map.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最佳置换算法OPT:</strong></p>
<p>​        原理：每次选择当前物理块中的页面在未来长时间不被访问的或未来不再使用的页面进行淘汰</p>
<p>​        优点：具有较好的性能，可以保证获得最低的缺页率</p>
<p>​        缺点：过于理想化，但是实际上无法实现（没办法预知未来的页面）</p>
<h4 id="2、死锁条件、解决方式。"><a href="#2、死锁条件、解决方式。" class="headerlink" title="2、死锁条件、解决方式。"></a><strong>2、死锁条件、解决方式。</strong></h4><p>​    死锁是指两个或两个以上进程在执行过程中，因争夺资源而造成的相互等待的现象；</p>
<p>​    <strong>死锁的条件：</strong></p>
<p>​        互斥条件：进程对所分配到的资源不允许其他进程访问，若其他进程访问该资源，只能等待至占有该资源的进程释放该资源；</p>
<p>​        请求与保持条件：进程获得一定的资源后，又对其他资源发出请求，阻塞过程中不会释放自己已经占有的资源</p>
<p>​        非剥夺条件：进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用后自己释放</p>
<p>​        循环等待条件：系统中若干进程组成环路，环路中每个进程都在等待相邻进程占用的资源</p>
<p>​    <strong>解决方法：</strong>破坏死锁的任意一条件</p>
<p>​        乐观锁，破坏资源互斥条件，<strong>CAS</strong></p>
<p>​        资源一次性分配，从而剥夺请求和保持条件、<strong>tryLock</strong></p>
<p>​        可剥夺资源：即当进程新的资源未得到满足时，释放已占有的资源，从而破坏不可剥夺的条件，<strong>数据库deadlock超时</strong></p>
<p>​        资源有序分配法：系统给每类资源赋予一个序号，每个进程按编号递增的请求资源，从而破坏环路等待的条件，<strong>转账场景</strong></p>
<div style="page-break-after: always;"></div>

<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a><strong>Java基础</strong></h2><h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><p><strong>特性：</strong>封装、继承、多态</p>
<p>​    <strong>封装：</strong>对抽象的事物抽象化成一个对象，并对其对象的属性私有化，同时提供一些能被外界访问属性的方法；</p>
<p>​    <strong>继承</strong>：子类扩展新的数据域或功能，并复用父类的属性与功能，单继承，多实现；</p>
<p>​    <strong>多态：</strong>通过继承（多个⼦类对同⼀⽅法的重写）、也可以通过接⼝（实现接⼝并覆盖接⼝）</p>
<h4 id="1、Java与C-区别"><a href="#1、Java与C-区别" class="headerlink" title="1、Java与C++区别"></a><strong>1、Java与C++区别</strong></h4><p>​    不同点：c++支持多继承，并且有指针的概念，由程序员自己管理内存；Java是单继承，可以用接口实现多继承，Java 不提供指针来直接访问内存，程序内存更加安全，并且Java有JVM⾃动内存管理机制，不需要程序员⼿动释放⽆⽤内存</p>
<h4 id="2、多态实现原理"><a href="#2、多态实现原理" class="headerlink" title="2、多态实现原理"></a><strong>2、多态实现原理</strong></h4><p>多态的底层实现是动态绑定，即在运行时才把方法调用与方法实现关联起来。</p>
<p><strong>静态绑定与动态绑定：</strong></p>
<p>​    一种是在编译期确定，被称为静态分派，比如方法的重载；</p>
<p>​    一种是在运行时确定，被称为动态分派，比如方法的覆盖（重写）和接口的实现。</p>
<p><strong>多态的实现</strong></p>
<p>​        虚拟机栈中会存放当前方法调用的栈帧（局部变量表、操作栈、动态连接 、返回地址）。多态的实现过程，就是方法调用动态分派的过程，如果子类覆盖了父类的方法，则在多态调用中，动态绑定过程会首先确定实际类型是子类，从而先搜索到子类中的方法。这个过程便是方法覆盖的本质。</p>
<h4 id="3、static和final关键字"><a href="#3、static和final关键字" class="headerlink" title="3、static和final关键字"></a>3、static和final关键字</h4><p><strong>static：</strong>可以修饰属性、方法</p>
<p>​    <strong>static修饰属性：</strong></p>
<p>​        类级别属性，所有对象共享一份，随着类的加载而加载（只加载一次），先于对象的创建；可以使用类名直接调用。</p>
<p>​    <strong>static修饰方法：</strong></p>
<p>​        随着类的加载而加载；可以使用类名直接调用；静态方法中，只能调用静态的成员，不可用this；</p>
<p><strong>final：</strong>关键字主要⽤在三个地⽅：变量、⽅法、类。</p>
<p>​    <strong>final修饰变量：</strong></p>
<p>​        如果是基本数据类型的变量，则其数值⼀旦在初始化之后便不能更改；</p>
<p>​        如果是引⽤类型的变量，则在对其初始化之后便不能再让其指向另⼀个对象。</p>
<p>​    <strong>final修饰方法：</strong></p>
<p>​        把⽅法锁定，以防任何继承类修改它的含义（重写）；类中所有的 private ⽅法都隐式地指定为 final。</p>
<p>​    <strong>final修饰类：</strong></p>
<p>​         final 修饰类时，表明这个类不能被继承。final 类中的所有成员⽅法都会被隐式地指定为 final ⽅法。</p>
<p>一个类不能被继承，除了final关键字之外，还有可以私有化构造器。（内部类无效）</p>
<h4 id="4、抽象类和接口"><a href="#4、抽象类和接口" class="headerlink" title="4、抽象类和接口"></a>4、抽象类和接口</h4><p><strong>抽象类：</strong>包含抽象方法的类，即使用abstract修饰的类；抽象类只能被继承，所以不能使用final修饰，抽象类不能被实例化，</p>
<p><strong>接口：</strong>接口是一个抽象类型，是抽象方法的集合，接口支持多继承，接口中定义的方法，默认是public abstract修饰的抽象方法</p>
<p><strong>相同点：</strong></p>
<p>​    ① 抽象类和接口都不能被实例化</p>
<p>​    ② 抽象类和接口都可以定义抽象方法，子类&#x2F;实现类必须覆写这些抽象方法</p>
<p><strong>不同点：</strong></p>
<p>​    ① 抽象类有构造方法，接口没有构造方法</p>
<p>​    ③抽象类可以包含普通方法，接口中只能是public abstract修饰抽象方法（Java8之后可以）</p>
<p>​    ③ 抽象类只能单继承，接口可以多继承</p>
<p>​    ④ 抽象类可以定义各种类型的成员变量，接口中只能是public static final修饰的静态常量</p>
<p><strong>抽象类的使用场景：</strong></p>
<p>​    既想约束子类具有共同的行为（但不再乎其如何实现），又想拥有缺省的方法，又能拥有实例变量</p>
<p><strong>接口的应用场景：</strong></p>
<p>​    约束多个实现类具有统一的行为，但是不在乎每个实现类如何具体实现；实现类中各个功能之间可能没有任何联系</p>
<h4 id="5、泛型以及泛型擦除"><a href="#5、泛型以及泛型擦除" class="headerlink" title="5、泛型以及泛型擦除"></a>5、泛型以及泛型擦除</h4><p>参考：<a href="https://blog.csdn.net/baoyinwang/article/details/107341997">https://blog.csdn.net/baoyinwang/article/details/107341997</a></p>
<p><strong>泛型：</strong></p>
<p>​        泛型的本质是参数化类型。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法。</p>
<p><strong>泛型擦除：</strong></p>
<p>​        Java的泛型是伪泛型，使用泛型的时候加上类型参数，在编译器编译生成的字节码的时候会去掉，这个过程成为类型擦除。</p>
<p>​        如List<String>等类型，在编译之后都会变成 List。JVM 看到的只是 List，而由泛型附加的类型信息对 JVM 来说是不可见的。</p>
<p>可以通过反射添加其它类型元素</p>
<h4 id="6、反射原理以及使用场景"><a href="#6、反射原理以及使用场景" class="headerlink" title="6、反射原理以及使用场景"></a><strong>6、反射原理以及使用场景</strong></h4><p><strong>Java反射：</strong></p>
<p>​        是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且都能够调用它的任意一个方法；</p>
<p><strong>反射原理：</strong></p>
<p>​        反射首先是能够获取到Java中的反射类的字节码，然后将字节码中的方法，变量，构造函数等映射成 相应的 Method、Filed、Constructor 等类</p>
<p>​    <strong>如何得到Class的实例:</strong></p>
<pre><code>     1.类名.class(就是一份字节码)
     2.Class.forName(String className);根据一个类的全限定名来构建Class对象
     3.每一个对象多有getClass()方法:obj.getClass();返回对象的真实类型
</code></pre>
<p><strong>使用场景：</strong></p>
<ul>
<li><p><strong>开发通用框架 -</strong> 反射最重要的用途就是开发各种通用框架。很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 JavaBean、Filter 等），为了保证框架的通用性，需要根据配置文件运行时动态加载不同的对象或类，调用不同的方法。</p>
</li>
<li><p><strong>动态代理</strong> - 在切面编程（AOP）中，需要拦截特定的方法，通常，会选择动态代理方式。这时，就需要反射技术来实现了。</p>
<p>JDK：spring默认动态代理，需要实现接口</p>
<p>CGLIB：通过asm框架序列化字节流，可配置，性能差</p>
</li>
<li><p><strong>自定义注解</strong> - 注解本身仅仅是起到标记作用，它需要利用反射机制，根据注解标记去调用注解解释器，执行行为。</p>
</li>
</ul>
<h4 id="7、Java异常体系"><a href="#7、Java异常体系" class="headerlink" title="7、Java异常体系"></a><strong>7、Java异常体系</strong></h4><p>​                <img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3137389296,1222888772&fm=26&gp=0.jpg" style="zoom:67%;" /></p>
<p>Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception</p>
<p><strong>Error ：</strong></p>
<p>​        是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。</p>
<p><strong>Exception 包含：RuntimeException 、CheckedException</strong></p>
<p>编程错误可以分成三类：语法错误、逻辑错误和运行错误。</p>
<p><strong>语法错误</strong>（也称编译错误）是在编译过程中出现的错误，由编译器检查发现语法错误</p>
<p><strong>逻辑错误</strong>指程序的执行结果与预期不符，可以通过调试定位并发现错误的原因</p>
<p><strong>运行错误</strong>是引起程序非正常终端的错误，需要通过异常处理的方式处理运行错误</p>
<p><strong>RuntimeException：</strong> 运行时异常，程序应该从逻辑角度尽可能避免这类异常的发生。</p>
<p>​     如 NullPointerException 、 ClassCastException ； </p>
<p><strong>CheckedException：</strong>受检异常，程序使用trycatch进行捕捉处理</p>
<p>​        如IOException、SQLException、NotFoundException；</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goe17hajvzj316d0lhju3.jpg" alt="JavaCollection"></p>
<h4 id="1、ArrayList和LinkedList"><a href="#1、ArrayList和LinkedList" class="headerlink" title="1、ArrayList和LinkedList"></a><strong>1、ArrayList和LinkedList</strong></h4><p><strong>ArrayList：</strong></p>
<p>​        底层基于数组实现，支持对元素进行快速随机访问，适合随机查找和遍历，不适合插入和删除。（提一句实际上）<br>​        默认初始大小为10，当数组容量不够时，会触发扩容机制（扩大到当前的1.5倍），需要将原来数组的数据复制到新的数组中；当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。</p>
<p><strong>LinkedList：</strong></p>
<p>​        底层基于双向链表实现，适合数据的动态插入和删除；<br>​        内部提供了 List 接口中没有定义的方法，用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。（比如jdk官方推荐使用基于linkedList的Deque进行堆栈操作）</p>
<p><strong>ArrayList与LinkedList区别：</strong></p>
<p>​        都是线程不安全的，ArrayList 适用于查找的场景，LinkedList 适用于增加、删除多的场景</p>
<p><strong>实现线程安全：</strong></p>
<p>​        可以使用原生的Vector，或者是Collections.synchronizedList(List list)函数返回一个线程安全的ArrayList集合。<br>​        建议使用concurrent并发包下的<strong>CopyOnWriteArrayList</strong>的。</p>
<p>​            ①<strong>Vector:</strong> 底层通过synchronize修饰保证线程安全，效率较差</p>
<p>​            ②<strong>CopyOnWriteArrayList：</strong>写时加锁，使用了一种叫<strong>写时复制</strong>的方法；读操作是可以不用加锁的</p>
<p>​            </p>
<h4 id="2、List遍历快速和安全失败"><a href="#2、List遍历快速和安全失败" class="headerlink" title="2、List遍历快速和安全失败"></a><strong>2、List遍历快速和安全失败</strong></h4><p><strong>①普通for循环遍历List删除指定元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(list.get(i) == <span class="number">5</span>) </span><br><span class="line">       list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 迭代遍历,用list.remove(i)方法删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">5</span>)&#123;</span><br><span class="line">        list.remove(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③foreach遍历List删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Integer i:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>) list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>fail—fast：</strong>快速失败</p>
<p>​        当异常产生时，直接抛出异常，程序终止;</p>
<p>​        fail-fast主要是体现在当我们在遍历集合元素的时候，经常会使用迭代器，但在迭代器遍历元素的过程中，如果集合的结构（modCount）被改变的话，就会抛出异常ConcurrentModificationException，防止继续遍历。这就是所谓的快速失败机制。</p>
<p><strong>fail—safe：</strong>安全失败</p>
<p>    采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。由于在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发ConcurrentModificationException。</p>
<p>    缺点：基于拷贝内容的优点是避免了ConcurrentModificationException，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p>
<p>    场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p>
<h4 id="3、详细介绍HashMap"><a href="#3、详细介绍HashMap" class="headerlink" title="3、详细介绍HashMap"></a><strong>3、详细介绍HashMap</strong></h4><p>角度：数据结构+扩容情况+put查找的详细过程+哈希函数+容量为什么始终都是2^N，JDK1.7与1.8的区别。</p>
<p>参考：<a href="https://www.jianshu.com/p/9fe4cb316c05">https://www.jianshu.com/p/9fe4cb316c05</a></p>
<p><strong>数据结构：</strong></p>
<p>​        HashMap在底层数据结构上采用了数组＋链表＋红黑树，通过散列映射来存储键值对数据</p>
<p><strong>扩容情况：</strong></p>
<p>​        默认的负载因子是0.75，如果数组中已经存储的元素个数大于数组长度的75%，将会引发扩容操作。</p>
<p>​        【1】创建一个长度为原来数组长度<strong>两倍的新数组</strong>。</p>
<p>​        【2】1.7采用Entry的重新hash运算，1.8采用高于与运算。</p>
<p><strong>put操作步骤：</strong></p>
<p>​                <img src="https://s0.lgstatic.com/i/image3/M01/73/D9/CgpOIF5rDYmATP43AAB3coc0R64799.png" alt="img" style="zoom:67%;" /></p>
<p>​    1、判断数组是否为空，为空进行初始化;</p>
<p>​    2、不为空，则计算 key 的 hash 值，通过(n - 1) &amp; hash计算应当存放在数组中的下标 index;</p>
<p>​    3、查看 table[index] 是否存在数据，没有数据就构造一个Node节点存放在 table[index] 中；</p>
<p>​    4、存在数据，说明发生了hash冲突(存在二个节点key的hash值一样), 继续判断key是否相等，相等，用新的value替换原数据；</p>
<p>​    5、若不相等，判断当前节点类型是不是树型节点，如果是树型节点，创造树型节点插入红黑树中；</p>
<p>​    6、若不是红黑树，创建普通Node加入链表中；判断链表长度是否大于 8，大于则将链表转换为红黑树；</p>
<p>​    7、插入完成之后判断当前节点数是否大于阈值，若大于，则扩容为原数组的二倍</p>
<p><strong>哈希函数：</strong></p>
<p>​     通过hash函数（优质因子31循环累加）先拿到 key 的hashcode，是一个32位的值，然后让hashcode的高16位和低16位进行<strong>异或</strong>操作。该函数也称为扰动函数，做到尽可能降低hash碰撞，通过尾插法进行插入。</p>
<p><strong>容量为什么始终都是2^N：</strong></p>
<p>​        先做对数组的⻓度取模运算，得到的余数才能⽤来要存放的位置也就是对应的数组下标。这个数组下标的计算⽅法是“  (n - 1) &amp; hash ”。（n代表数组⻓度）。方便数组的扩容和增删改时的取模。</p>
<p><strong>JDK1.7与1.8的区别：</strong></p>
<p><strong>JDK1.7 HashMap：</strong></p>
<p>​        底层是 <strong>数组和链表</strong> 结合在⼀起使⽤也就是链表散列。如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。扩容翻转时顺序不一致使用头插法会产生死循环，导致cpu100%</p>
<p><strong>JDK1.8 HashMap：</strong>    </p>
<p>​        底层数据结构上采用了<strong>数组＋链表＋红黑树</strong>；当链表⻓度⼤于阈值（默认为 8-泊松分布），数组的⻓度大于 64时，链表将转化为红⿊树，以减少搜索时间。（解决了tomcat臭名昭著的url参数dos攻击问题）</p>
<h4 id="4、ConcurrentHashMap"><a href="#4、ConcurrentHashMap" class="headerlink" title="**4、ConcurrentHashMap **"></a>**4、ConcurrentHashMap **</h4><p>​        可以通过<strong>ConcurrentHashMap</strong> 和 <strong>Hashtable</strong>来实现线程安全；Hashtable 是原始API类，通过synchronize同步修饰，效率低下；ConcurrentHashMap 通过分段锁实现，效率较比Hashtable要好；</p>
<p><strong>ConcurrentHashMap的底层实现：</strong></p>
<p>​        <strong>JDK1.7的 ConcurrentHashMap</strong> 底层采⽤ 分段的数组+链表 实现；采用 <strong>分段锁</strong>（Sagment） 对整个桶数组进⾏了分割分段(Segment默认16个)，每⼀把锁只锁容器其中⼀部分数据，多线程访问容器⾥不同数据段的数据，就不会存在锁竞争，提⾼并发访问率。</p>
<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1035283471,1167301443&fm=26&gp=0.jpg"></p>
<p>​        <strong>JDK1.8的 ConcurrentHashMap</strong> 采⽤的数据结构跟HashMap1.8的结构⼀样，数组+链表&#x2F;红⿊树；摒弃了Segment的概念，⽽是直接⽤ Node 数组+链表+红⿊树的数据结构来实现，通过并发控制 <strong>synchronized 和CAS</strong>来操作保证线程的安全。</p>
<h4 id="5、序列化和反序列化"><a href="#5、序列化和反序列化" class="headerlink" title="5、序列化和反序列化"></a><strong>5、序列化和反序列化</strong></h4><p>​        序列化的意思就是将对象的状态转化成字节流，以后可以通过这些值再生成相同状态的对象。对象序列化是对象持久化的一种实现方法，它是将对象的属性和方法转化为一种序列化的形式用于存储和传输。反序列化就是根据这些保存的信息重建对象的过程。</p>
<p><strong>序列化：</strong>将java对象转化为字节序列的过程。</p>
<p><strong>反序列化：</strong>将字节序列转化为java对象的过程。 </p>
<p><strong>优点：</strong></p>
<p>​    a、实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里）Redis的RDB</p>
<p>​    b、利用序列化实现远程通信，即在网络上传送对象的字节序列。 Google的protoBuf</p>
<p><strong>反序列化失败的场景：</strong></p>
<p>​        序列化ID：serialVersionUID不一致的时候，导致反序列化失败</p>
<h4 id="6、String"><a href="#6、String" class="headerlink" title="6、String"></a><strong>6、String</strong></h4><p>String 使用<strong>数组</strong>存储内容，数组使用 <strong>final</strong> 修饰，因此 String 定义的字符串的值也是<strong>不可变的</strong></p>
<p>StringBuffer 对方法加了同步锁，线程安全，效率略低于 StringBuilder</p>
<h3 id="设计模式与原则"><a href="#设计模式与原则" class="headerlink" title="设计模式与原则"></a>设计模式与原则</h3><h4 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h4><p>​    某个类只能生成一个实例，该实例全局访问，例如Spring容器里一级缓存里的单例池。</p>
<p><strong>优点</strong>：</p>
<p>​    <strong>唯一访问</strong>：如生成唯一序列化的场景、或者spring默认的bean类型。</p>
<p>​    <strong>提高性能</strong>：频繁实例化创建销毁或者耗时耗资源的场景，如连接池、线程池。</p>
<p><strong>缺点</strong>：</p>
<p>​    不适合有状态且需变更的</p>
<p><strong>实现方式</strong>：</p>
<p>​    <strong>饿汉式</strong>：线程安全速度快</p>
<p>​    <strong>懒汉式</strong>：双重检测锁，第一次减少锁的开销、第二次防止重复、volatile防止重排序导致实例化未完成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">          singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>静态内部类</strong>：线程安全利用率高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​    <strong>枚举</strong>：effictiveJAVA推荐，反射也无法破坏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">        SINGLETON;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">SingletonEnum</span><span class="params">()</span>&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h4><p>​    定义一个用于创建产品的接口，由子类决定生产何种产品。</p>
<p><strong>优点：</strong>解耦：提供参数即可获取产品，通过配置文件可以不修改代码增加具体产品。</p>
<p><strong>缺点：</strong>每增加一个产品就得新增一个产品类</p>
<h4 id="3、抽象工厂模式"><a href="#3、抽象工厂模式" class="headerlink" title="3、抽象工厂模式"></a>3、抽象工厂模式</h4><p>​    提供一个接口，用于创建相关或者依赖对象的家族，并由此进行约束。</p>
<p><strong>优点：</strong>可以在类的内部对产品族进行约束</p>
<p><strong>缺点</strong>：假如产品族中需要增加一个新的产品，则几乎所有的工厂类都需要进行修改。</p>
<div style="page-break-after: always;"></div>

<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法可以被重载，只有当类中没有显性声明任何构造方法时，才会有默认构造方法。</p>
<p>构造方法没有返回值，构造方法的作用是创建新对象。</p>
<h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><p>静态初始化块的优先级最高，会最先执行，在非静态初始化块之前执行。</p>
<p>静态初始化块会在类第一次被加载时最先执行，因此在 main 方法之前。</p>
<h3 id="This"><a href="#This" class="headerlink" title="This"></a>This</h3><p>关键字 <code>this</code> 代表当前对象的引用。当前对象指的是调用类中的属性或方法的对象</p>
<p>关键字 <code>this</code> 不可以在静态方法中使用。静态方法不依赖于类的具体对象的引用</p>
<h3 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a><strong>重写和重载的区别</strong></h3><p>重载指在同一个类中定义多个方法，这些方法名称相同，签名不同。</p>
<p>重写指在子类中的方法的名称和签名都和父类相同，使用override注解</p>
<h3 id="Object类方法"><a href="#Object类方法" class="headerlink" title="Object类方法"></a>Object类方法</h3><p><strong>toString</strong>     默认是个指针，一般需要重写</p>
<p><strong>equals</strong>        比较对象是否相同，默认和&#x3D;&#x3D;功能一致</p>
<p><strong>hashCode</strong>  散列码，equals则hashCode相同，所以重写equals必须重写hashCode</p>
<p>**finalize   **    用于垃圾回收之前做的遗嘱，默认空，子类需重写</p>
<p><strong>clone</strong>           深拷贝，类需实现cloneable的接口</p>
<p><strong>getClass</strong>     反射获取对象元数据，包括类名、方法、</p>
<p><strong>notify、wait</strong>   用于线程通知和唤醒</p>
<h3 id="基本数据类型和包装类"><a href="#基本数据类型和包装类" class="headerlink" title="基本数据类型和包装类"></a>基本数据类型和包装类</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goe1gq2yipj318s0ruwj4.jpg" alt="image-20210309224910999"></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>缓存范围</th>
</tr>
</thead>
<tbody><tr>
<td>Byte,Short,Integer,Long</td>
<td>[-128, 127]</td>
</tr>
<tr>
<td>Character</td>
<td>[0, 127]</td>
</tr>
<tr>
<td>Boolean</td>
<td>[false, true]</td>
</tr>
</tbody></table>
<h1 id="二、JVM篇"><a href="#二、JVM篇" class="headerlink" title="二、JVM篇"></a>二、JVM篇</h1><h3 id="JVM内存划分"><a href="#JVM内存划分" class="headerlink" title="JVM内存划分"></a><strong>JVM内存划分</strong></h3><h4 id="1、JVM运行时数据区域"><a href="#1、JVM运行时数据区域" class="headerlink" title="1、JVM运行时数据区域"></a><strong>1、JVM运行时数据区域</strong></h4><p>​        堆、方法区（元空间）、虚拟机栈、本地方法栈、程序计数器</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobgnw8m8uj30l10bejs4.jpg" alt="xxx"></p>
<p><strong>Heap(堆)：</strong></p>
<p>​        对象的实例以及数组的内存都是要在堆上进行分配的，堆是线程共享的一块区域，用来存放对象实例，也是垃圾回收（GC）的主要区域；开启逃逸分析后，某些未逃逸的对象可以通过标量替换的方式在栈中分配</p>
<p>​        堆细分：新生代、老年代，对于新生代又分为：<strong>Eden区</strong>和<strong>Surviver1</strong>和<strong>Surviver2</strong>区；</p>
<p><strong>方法区：</strong></p>
<p>​        对于JVM的方法区也可以称之为永久区，它储存的是已经被java虚拟机加载的类信息、常量、静态变量；Jdk1.8以后取消了方法区这个概念，称之为元空间（MetaSpace）；</p>
<p>​        当应用中的 Java 类过多时，比如 <strong>Spring 等一些使用动态代理的框架生成了很多类</strong>，如果占用空间超出了我们的设定值，就会发生<strong>元空间溢出</strong></p>
<p><strong>虚拟机栈：</strong></p>
<p>​        虚拟机栈<strong>是线程私有的</strong>，他的生命周期和线程的生命周期是一致的。里面装的是一个一个的<strong>栈帧</strong>，每一个方法在执行的时候都会创建一个栈帧，栈帧中用来存放（<strong>局部变量表</strong>、<strong>操作数栈</strong> 、<strong>动态链接</strong> 、<strong>返回地址</strong>）；在Java虚拟机规范中，对此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出<strong>StackOverflowError</strong>异常；如果虚拟机栈动态扩展时无法申请到足够的内存，就会抛出<strong>OutOfMemoryError</strong>异常。</p>
<ul>
<li><p><strong>局部变量表：</strong>局部变量表是一组变量值存储空间，用来存放<strong>方法参数</strong>、方法内部定义的<strong>局部变量</strong>。底层是变量槽（variable slot）</p>
</li>
<li><p><strong>操作数栈：</strong>是用来记录一个方法在执行的过程中，<strong>字节码指令向操作数栈中进行入栈和出栈的过程</strong>。大小在编译的时候已经确定了，当一个方法刚开始执行的时候，操作数栈中是空发的，在方法执行的过程中会有各种<strong>字节码指令</strong>往操作数栈中<strong>入栈和出栈</strong>。</p>
</li>
<li><p><strong>动态链接：</strong>因为字节码文件中有很多符号的引用，这些符号引用一部分会在<strong>类加载的解析阶段</strong>或<strong>第一次使用</strong>的时候转化成<strong>直接引用</strong>，这种称为<strong>静态解析</strong>；另一部分会<strong>在运行期间</strong>转化为直接引用，称为<strong>动态链接</strong>。</p>
</li>
<li><p><strong>返回地址（returnAddress）：</strong>类型（指向了一条字节码指令的地址）</p>
<p><strong>JIT即时编译器（Just In Time Compiler），简称 JIT 编译器</strong>: </p>
<p>为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，比如锁粗化等</p>
</li>
</ul>
<p><strong>本地方法栈：</strong></p>
<p>​        本地方法栈和虚拟机栈类似，不同的是虚拟机栈服务的是Java方法，而<strong>本地方法栈服务的是Native方法</strong>。在HotSpot虚拟机实现中是把本地方法栈和虚拟机栈合二为一的，同理它也会抛出<strong>StackOverflowError</strong>和<strong>OOM</strong>异常。</p>
<p><strong>PC程序计数器：</strong></p>
<p>​        PC，指的是存放下一条指令的位置的一个指针。它是一块较小的内存空间，且是<strong>线程私有</strong>的。由于线程的切换，CPU在执行的过程中，需要记住原线程的下一条指令的位置，所以每一个线程都需要有自己的PC。</p>
<h4 id="2、堆内存分配策略"><a href="#2、堆内存分配策略" class="headerlink" title="2、堆内存分配策略"></a><strong>2、堆内存分配策略</strong></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnjl5glvj30l10h9jrt.jpg" alt="img"></p>
<ul>
<li><p>对象优先分配在Eden区，如果Eden区没有足够的空间进行分配时，虚拟机执行一次MinorGC。而那些无需回收的存活对象，将会进到 Survivor 的 From 区（From 区内存不足时，直接进入 Old 区）。</p>
</li>
<li><p>大对象直接进入老年代（需要大量连续内存空间的对象）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。</p>
</li>
<li><p>长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄（Age Count）计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，直到达到阀值（默认15次），对象进入老年区。</p>
<p>（<strong>动态对象年龄判定</strong>：程序从年龄最小的对象开始累加，如果累加的对象大小，大于幸存区的一半，则将当前的对象 age 作为新的阈值，年龄大于此阈值的对象则直接进入老年代）</p>
</li>
<li><p>每次进行Minor GC或者大对象直接进入老年区时，JVM会计算所需空间大小如小于老年区的剩余值大小，则进行一次<strong>Full GC</strong>。</p>
</li>
</ul>
<h4 id="3、创建一个对象的步骤"><a href="#3、创建一个对象的步骤" class="headerlink" title="3、创建一个对象的步骤"></a><strong>3、创建一个对象的步骤</strong></h4><p><strong>步骤：类加载检查、分配内存、初始化零值、设置对象头、执行init方法</strong></p>
<p><strong>①类加载检查：</strong> </p>
<p>​        虚拟机遇到 new 指令时，⾸先去检查是否能在常量池中定位到这个类的符号引⽤，并且检查这个符号引⽤代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执⾏相应的类加载过程。</p>
<p><strong>②分配内存：</strong></p>
<p>​         在类加载检查通过后，接下来虚拟机将为新⽣对象分配内存，分配⽅式有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，选择那种分配⽅式由 Java 堆是否规整决定，⽽Java堆是否规整⼜由所采⽤的垃圾收集器是否带有压缩整理功能决定。</p>
<p><strong>③初始化零值：</strong></p>
<p>​         内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值，这⼀步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使⽤，程序能访问到这些字段的数据类型所对应的零值。</p>
<p><strong>④设置对象头：</strong> </p>
<p>​        初始化零值完成之后，虚拟机要对对象进⾏必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运⾏状态的不同，如是否启⽤偏向锁等，对象头会有不同的设置⽅式。</p>
<p><strong>⑤执⾏ init ⽅法：</strong> </p>
<p>​        从虚拟机的视⻆来看，⼀个新的对象已经产⽣了，但从Java 程序的视⻆来看， <init> ⽅法还没有执⾏，所有的字段都还为零。所以⼀般来说（除循环依赖），执⾏ new 指令之后会接着执⾏  <init> ⽅法，这样⼀个真正可⽤的对象才算产⽣出来。</p>
<h4 id="4、对象引用"><a href="#4、对象引用" class="headerlink" title="4、对象引用"></a>4、<strong>对象引用</strong></h4><p>普通的对象引用关系就是<strong>强引用</strong>。</p>
<p><strong>软引用</strong>用于维护一些可有可无的对象。只有在<strong>内存不足时，系统则会回收软引用对象</strong>，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。</p>
<p><strong>弱引用</strong>对象相比软引用来说，要更加无用一些，它拥有更短的生命周期，当 JVM 进行垃圾回收时，<strong>无论内存是否充足</strong>，都会回收被弱引用关联的对象。</p>
<p><strong>虚引用</strong>是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来<strong>跟踪对象被垃圾回收</strong>的活动。</p>
<div style="page-break-after: always;"></div>

<h3 id="JVM类加载过程"><a href="#JVM类加载过程" class="headerlink" title="JVM类加载过程"></a><strong>JVM类加载过程</strong></h3><p><strong>过程：加载、验证、准备、解析、初始化</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnnbem87j30eq0cogmj.jpg" alt="img" style="zoom:50%;" />

<p><strong>加载阶段：</strong></p>
<p>​        1.通过一个类的全限定名来获取定义此类的二进制字节流。</p>
<p>​        2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<p>​        3.在Java堆中生成一个代表这个类的java.lang.class对象，作为方法区这些数据的访问入口。</p>
<p><strong>验证阶段：</strong></p>
<p>​        1.文件格式验证（是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理）</p>
<p>​        2.元数据验证（对字节码描述的信息进行语意分析，以保证其描述的信息符合Java语言规范要求）</p>
<p>​        3.字节码验证（保证被校验类的方法在运行时不会做出危害虚拟机安全的行为）</p>
<p>​        4.符号引用验证（虚拟机将符号引用转化为直接引用时，解析阶段中发生）</p>
<p><strong>准备阶段：</strong></p>
<p>​        准备阶段是正式为类变量分配内存并设置类变量初始值的阶段。将对象初始化为“零”值</p>
<p><strong>解析阶段：</strong></p>
<p>​        解析阶段时虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>​        <strong>字符串常量池</strong>：堆上，默认class文件的静态常量池</p>
<p>​        <strong>运行时常量池</strong>：在方法区，属于元空间</p>
<p><strong>初始化阶段：</strong></p>
<p>​        初始化阶段时加载过程的最后一步，而这一阶段也是真正意义上开始执行类中定义的Java程序代码。</p>
<h4 id="1、双亲委派机制"><a href="#1、双亲委派机制" class="headerlink" title="1、双亲委派机制"></a><strong>1、双亲委派机制</strong></h4><p>​        每⼀个类都有⼀个对应它的类加载器。系统中的 ClassLoder 在协同⼯作的时候会默认使⽤ 双亲委派模型 。即在类加载的时候，系统会⾸先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，⾸先会把该请求委派该⽗类加载器的  loadClass() 处理，因此所有的请求最终都应该传送到顶层的启动类加载器  BootstrapClassLoader 中。当⽗类加载器⽆法处理时，才由⾃⼰来处理。当⽗类加载器为null时，会使⽤启动类加载器  BootstrapClassLoader 作为⽗类加载器。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobn5lh4f6j30hk08rjso.jpg" alt="img"></p>
<p><strong>使用好处：</strong></p>
<p>​        此机制保证JDK核心类的优先加载；使得Java程序的稳定运⾏，可以避免类的重复加载，也保证了 Java 的核⼼ API 不被篡改。如果不⽤没有使⽤双亲委派模型，⽽是每个类加载器加载⾃⼰的话就会出现⼀些问题，⽐如我们编写⼀个称为  java.lang.Object 类的话，那么程序运⾏的时候，系统就会出现多个不同的Object 类。</p>
<p><strong>破坏双亲委派机制：</strong></p>
<ul>
<li><p>可以⾃⼰定义⼀个类加载器，重写loadClass方法；</p>
</li>
<li><p>Tomcat 可以加载自己目录下的 class 文件，并不会传递给父类的加载器；</p>
</li>
<li><p>Java 的 SPI，发起者 BootstrapClassLoader 已经是最上层了，它直接获取了 AppClassLoader 进行驱动加载，和双亲委派是相反的。</p>
</li>
</ul>
<h4 id="2、tomcat的类加载机制"><a href="#2、tomcat的类加载机制" class="headerlink" title="2、tomcat的类加载机制"></a><strong>2、tomcat的类加载机制</strong></h4><p><strong>步骤：</strong></p>
<ol>
<li>先在本地cache查找该类是否已经加载过，看看 Tomcat 有没有加载过这个类。</li>
<li>如果Tomcat 没有加载过这个类，则从系统类加载器的cache中查找是否加载过。</li>
<li>如果没有加载过这个类，尝试用ExtClassLoader类加载器类加载，重点来了，这里并没有首先使用 AppClassLoader 来加载类。这个Tomcat 的 WebAPPClassLoader 违背了双亲委派机制，直接使用了 ExtClassLoader来加载类。这里注意 ExtClassLoader 双亲委派依然有效，ExtClassLoader 就会使用 Bootstrap ClassLoader 来对类进行加载，保证了 Jre 里面的核心类不会被重复加载。 比如在 Web 中加载一个 Object 类。WebAppClassLoader → ExtClassLoader → Bootstrap ClassLoader，这个加载链，就保证了 Object 不会被重复加载。</li>
<li>如果 BoostrapClassLoader，没有加载成功，就会调用自己的 findClass 方法由自己来对类进行加载，findClass 加载类的地址是自己本 web 应用下的 class。</li>
<li>加载依然失败，才使用 AppClassLoader 继续加载。</li>
<li>都没有加载成功的话，抛出异常。</li>
</ol>
<p>总结一下以上步骤，WebAppClassLoader 加载类的时候，故意打破了JVM 双亲委派机制，绕开了 AppClassLoader，直接先使用 ExtClassLoader 来加载类。</p>
<div style="page-break-after: always;"></div>

<h3 id="JVM垃圾回收"><a href="#JVM垃圾回收" class="headerlink" title="JVM垃圾回收"></a>JVM垃圾回收</h3><h4 id="1、存活算法和两次标记过程"><a href="#1、存活算法和两次标记过程" class="headerlink" title="1、存活算法和两次标记过程"></a><strong>1、存活算法和两次标记过程</strong></h4><p><strong>引用计数法：</strong></p>
<p>​        给对象添加一个引用计数器，每当由一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<p>​    优点：实现简单，判定效率也很高</p>
<p>​    缺点：他很难解决对象之间相互循环引用的问题，基本上被抛弃</p>
<p><strong>可达性分析法：</strong></p>
<p>​        通过一系列的成为“GC Roots”(活动线程相关的各种引用，虚拟机<strong>栈帧引用</strong>，<strong>静态变量引用</strong>，<strong>JNI引用</strong>)的对象作为起始点，从这些节点ReferenceChains开始向下搜索，搜索所走过的路径成为引用链，当一个对象到GC ROOTS没有任何引用链相连时，则证明此对象时不可用的；</p>
<p><strong>两次标记过程：</strong></p>
<p>​        对象被回收之前，该对象的finalize()方法会被调用；两次标记，即第一次标记不在“关系网”中的对象。第二次的话就要先判断该对象有没有实现finalize()方法了，如果没有实现就直接判断该对象可回收；如果实现了就会先放在一个队列中，并由虚拟机建立的一个低优先级的线程去执行它，随后就会进行第二次的小规模标记，在这次被标记的对象就会真正的被回收了。</p>
<h4 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a><strong>2、垃圾回收算法</strong></h4><p><strong>垃圾回收算法</strong>：复制算法、标记清除、标记整理、分代收集</p>
<p><strong>复制算法：(young)</strong></p>
<p>​        将内存分为⼤⼩相同的两块，每次使⽤其中的⼀块。当这⼀块的内存使⽤完后，就将还存活的对象复制到另⼀块去，然后再把使⽤的空间⼀次清理掉。这样就使每次的内存回收都是对内存区间的⼀半进⾏回收；</p>
<p>​        优点：实现简单，内存效率高，不易产生碎片</p>
<p>​        缺点：内存压缩了一半，倘若存活对象多，Copying 算法的效率会大大降低</p>
<p><strong>标记清除：(cms)</strong></p>
<p>​        标记出所有需要回收的对象，在标记完成后统⼀回收所有被标记的对象</p>
<p>​        缺点：效率低，标记清除后会产⽣⼤量不连续的碎⽚，需要预留空间给分配阶段的浮动垃圾</p>
<p><strong>标记整理：(old)</strong></p>
<p>​        标记过程仍然与“标记-清除”算法⼀样，再让所有存活的对象向⼀端移动，然后直接清理掉端边界以外的内存；解决了产生大量不连续碎片问题</p>
<p><strong>分代收集：</strong></p>
<p>​        根据各个年代的特点选择合适的垃圾收集算法。</p>
<p>​        新生代采用复制算法，新生代每次垃圾回收都要回收大部分对象，存活对象较少，即要复制的操作比较少，一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。</p>
<p>​        老年代的对象存活⼏率是⽐较⾼的，⽽且没有额外的空间对它进⾏分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进⾏垃圾收集。</p>
<p><strong>Safepoint</strong> 当发生 GC 时，用户线程必须全部停下来，才可以进行垃圾回收，这个状态我们可以认为 JVM 是安全的（safe），整个堆的状态是稳定的。如果在 GC 前，有线程迟迟进入不了 safepoint，那么整个 JVM 都在等待这个阻塞的线程，造成了整体 GC 的时间变长</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnmip32vj30l109q0t3.jpg" alt="img"></p>
<h5 id="MinorGC、MajorGC、FullGC"><a href="#MinorGC、MajorGC、FullGC" class="headerlink" title="MinorGC、MajorGC、FullGC"></a><strong>MinorGC、MajorGC、FullGC</strong></h5><p><strong>MinorGC</strong> 在年轻代空间不足的时候发生，</p>
<p><strong>MajorGC</strong> 指的是老年代的 GC，出现 MajorGC 一般经常伴有 MinorGC。</p>
<p><strong>FullGC</strong> 1、当老年代无法再分配内存的时候；2、元空间不足的时候；3、显示调用 System.gc 的时候。另外，像 CMS 一类的垃圾回收器，在 MinorGC 出现 promotion failure 的时候也会发生 FullGC。</p>
<p><strong>对象优先在 Eden 区分配</strong><br>    大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。</p>
<p><strong>大对象直接进入老年代</strong><br>    大对象是指需要连续内存空间的对象，比如很长的字符串以及数组。老年代直接分配的<strong>目的是</strong>避免在 Eden 区和 Survivor 区之间出现大量内存复制。</p>
<p><strong>长期存活的对象进入老年代</strong><br>    虚拟机给每个对象定义了年龄计数器，对象在 Eden 区出生之后，如果经过一次 Minor GC 之后，将进入 Survivor 区，同时对象年龄变为 1，增加到一定阈值时则进入老年代（阈值默认为 15）</p>
<p><strong>动态对象年龄判定</strong><br>    为了能更好地适应不同程序的内存状况，虚拟机并不总是要求对象的年龄必须达到阈值才能进入老年代。如果在 Survivor 区中相同年龄的所有对象的空间总和大于 Survivor 区空间的一半，则年龄大于或等于该年龄的对象直接进入老年代。</p>
<p><strong>空间分配担保</strong><br>    在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的空间总和，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立则进行 Full GC。</p>
<h4 id="3、垃圾收集器"><a href="#3、垃圾收集器" class="headerlink" title="3、垃圾收集器"></a><strong>3、垃圾收集器</strong></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnjx3zcej30l10ctaat.jpg" alt="img"></p>
<p>​    <strong>JDK3：Serial Parnew 关注效率</strong></p>
<p><strong>Serial：</strong></p>
<p>​        Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。适合用于客户端垃圾收集器。</p>
<p><strong>Parnew：</strong></p>
<p>​        ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。</p>
<p>​    <strong>JDK5：parallel Scavenge+（Serial old&#x2F;parallel old）关注吞吐量</strong></p>
<p><strong>parallel Scavenge：</strong>(关注吞吐量)</p>
<p>​        Parallel Scavenge收集器关注点是吞吐量（⾼效率的利⽤CPU）。CMS等垃圾收集器的关注点更多的是⽤户线程的停顿时间（提⾼⽤户体验）；高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。</p>
<p><strong>Serial old：</strong></p>
<p>Serial收集器的⽼年代版本，它同样是⼀个单线程收集器，使用标记-整理算法。主要有两个用途：</p>
<ul>
<li><p>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</p>
</li>
<li><p>作为年老代中使用 CMS 收集器的后备垃圾收集方案。</p>
</li>
</ul>
<p><strong>parallel old：</strong></p>
<p>​        Parallel Scavenge收集器的⽼年代版本。使⽤多线程和“标记-整理”算法。</p>
<p><strong>JDK8-CMS：（关注最短垃圾回收停顿时间）</strong></p>
<p>​        CMS收集器是一种年老代垃圾收集器，其最主要目标是获取<strong>最短垃圾回收停顿时间</strong>，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：</p>
<p>​        <strong>初始标记：</strong>只是标记一下 GC Roots 能直接关联的对象，速度很快，STW。</p>
<p>​        <strong>并发标记：</strong>进行 ReferenceChains跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p>
<p>​        <strong>重新标记：</strong>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，STW。</p>
<p>​        <strong>并发清除：</strong>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。</p>
<p>​        由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。</p>
<p>​        <strong>优点：</strong>并发收集、低停顿</p>
<p>​        <strong>缺点：</strong>对CPU资源敏感；⽆法处理浮动垃圾；使⽤“标记清除”算法，会导致⼤量空间碎⽚产⽣。</p>
<p><strong>JDK9-G1：（精准控制停顿时间，避免垃圾碎片）</strong></p>
<p>​        是⼀款⾯向服务器的垃圾收集器,主要针对配备多颗处理器及⼤容量内存的机器.以极⾼概率满⾜GC停顿时间要求的同时,还具备⾼吞吐量性能特征；相比与 CMS 收集器，G1 收集器两个最突出的改进是：</p>
<p>​        【1】基于标记-整理算法，不产生内存碎片。</p>
<p>​        【2】可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</p>
<p>​        G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。<strong>区域划分</strong>和<strong>优先级区域</strong>回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</p>
<ul>
<li><p><strong>初始标记</strong>：<strong>Stop The World，</strong>仅使用一条初始标记线程对GC Roots关联的对象进行标记</p>
</li>
<li><p><strong>并发标记</strong>：使用一条标记线程与用户线程并发执行。此过程进行<strong>可达性分析，速度很慢</strong></p>
</li>
<li><p><strong>最终标记</strong>：<strong>Stop The World</strong>，使用多条标记线程并发执行</p>
</li>
<li><p><strong>筛选回收</strong>：回收废弃对象，此时也要 <strong>Stop The World</strong>，并使用多条筛选回收线程并发执行</p>
</li>
</ul>
<p>**JDK11-ZGC:**（在不关注容量的情况获取最小停顿时间5TB&#x2F;10ms）</p>
<p>​    着色笔技术：加快标记过程</p>
<p>​    读屏障：解决GC和应用之间并发导致的STW问题</p>
<ul>
<li><p>支持 TB 级堆内存（最大 4T， JDK13 最大16TB）</p>
</li>
<li><p>最大 GC 停顿 10ms</p>
</li>
<li><p>对吞吐量影响最大，不超过 15%</p>
</li>
</ul>
<h4 id="4、配置垃圾收集器"><a href="#4、配置垃圾收集器" class="headerlink" title="4、配置垃圾收集器"></a><strong>4、配置垃圾收集器</strong></h4><ul>
<li>首先是内存大小问题，基本上每一个内存区域我都会设置一个上限，来避免溢出问题，比如元空间。</li>
<li>通常，堆空间我会设置成操作系统的 2&#x2F;3，超过 8GB 的堆，优先选用 G1</li>
<li>然后我会对 JVM 进行初步优化，比如根据老年代的对象提升速度，来调整年轻代和老年代之间的比例</li>
<li>依据系统容量、访问延迟、吞吐量等进行专项优化，我们的服务是高并发的，对 STW 的时间敏感</li>
<li>我会通过记录详细的 GC 日志，来找到这个瓶颈点，借用 GCeasy 这样的日志分析工具，定位问题</li>
</ul>
<h4 id="4、JVM性能调优"><a href="#4、JVM性能调优" class="headerlink" title="4、JVM性能调优"></a><strong>4、JVM性能调优</strong></h4><p>对应进程的JVM状态以定位问题和解决问题并作出相应的优化</p>
<p><strong>常用命令：</strong>jps、jinfo、jstat、jstack、jmap</p>
<p><strong>jps：查看java进程及相关信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jps -l 输出jar包路径，类全名</span><br><span class="line">jps -m 输出main参数</span><br><span class="line">jps -v 输出JVM参数</span><br></pre></td></tr></table></figure>

<p><strong>jinfo：查看JVM参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jinfo <span class="number">11666</span></span><br><span class="line">jinfo -flags <span class="number">11666</span></span><br><span class="line">Xmx、Xms、Xmn、MetaspaceSize</span><br></pre></td></tr></table></figure>

<p><strong>jstat：查看JVM运行时的状态信息，包括内存状态、垃圾回收</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstat [option] LVMID [interval] [count]</span><br><span class="line">其中LVMID是进程id，interval是打印间隔时间（毫秒），count是打印次数（默认一直打印）</span><br><span class="line">  </span><br><span class="line">option参数解释：</span><br><span class="line">-gc 垃圾回收堆的行为统计</span><br><span class="line">-gccapacity 各个垃圾回收代容量(young,old,perm)和他们相应的空间统计</span><br><span class="line">-gcutil 垃圾回收统计概述</span><br><span class="line">-gcnew 新生代行为统计</span><br><span class="line">-gcold 年老代和永生代行为统计</span><br></pre></td></tr></table></figure>

<p><strong>jstack：查看JVM线程快照，jstack命令可以定位线程出现长时间卡顿的原因，例如死锁，死循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack [-l] &lt;pid&gt; (连接运行中的进程)</span><br><span class="line">  </span><br><span class="line">option参数解释：</span><br><span class="line">-F 当使用jstack &lt;pid&gt;无响应时，强制输出线程堆栈。</span><br><span class="line">-m 同时输出java和本地堆栈(混合模式)</span><br><span class="line">-l 额外显示锁信息</span><br></pre></td></tr></table></figure>

<p><strong>jmap：可以用来查看内存信息</strong>(配合jhat使用)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jmap [option] &lt;pid&gt; (连接正在执行的进程)</span><br><span class="line"></span><br><span class="line">option参数解释：</span><br><span class="line">-heap 打印java heap摘要</span><br><span class="line">-dump:&lt;dump-options&gt; 生成java堆的dump文件</span><br></pre></td></tr></table></figure>



<h4 id="5、JDK新特性"><a href="#5、JDK新特性" class="headerlink" title="5、JDK新特性"></a>5、JDK新特性</h4><p>JDK8</p>
<p>支持 Lamda 表达式、集合的 stream 操作、提升HashMap性能</p>
<p><strong>JDK9</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stream API中iterate方法的新重载方法，可以指定什么时候结束迭代</span></span><br><span class="line">IntStream.iterate(<span class="number">1</span>, i -&gt; i &lt; <span class="number">100</span>, i -&gt; i + <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>默认G1垃圾回收器</p>
<p><strong>JDK10</strong> </p>
<p>其重点在于通过完全GC并行来改善G1最坏情况的等待时间。</p>
<p><strong>JDK11</strong></p>
<p>ZGC (并发回收的策略) 4TB</p>
<p>用于 Lambda 参数的局部变量语法</p>
<p><strong>JDK12</strong></p>
<p>Shenandoah GC (GC 算法)停顿时间和堆的大小没有任何关系，并行关注停顿响应时间。</p>
<p><strong>JDK13</strong></p>
<p>增加ZGC以将未使用的堆内存返回给操作系统，16TB</p>
<p><strong>JDK14</strong></p>
<p>删除cms垃圾回收器、弃用ParallelScavenge+SerialOldGC垃圾回收算法组合</p>
<p>将ZGC垃圾回收器应用到macOS和windows平台</p>
<div style="page-break-after: always;"></div>

<h3 id="线上故障排查"><a href="#线上故障排查" class="headerlink" title="线上故障排查"></a>线上故障排查</h3><h4 id="1、硬件故障排查"><a href="#1、硬件故障排查" class="headerlink" title="1、硬件故障排查"></a>1、硬件故障排查</h4><p>如果一个实例发生了问题，根据情况选择，要不要着急去重启。如果出现的CPU、内存飙高或者日志里出现了OOM异常</p>
<p><strong>第一步是隔离</strong>，第二步是<strong>保留现场</strong>，第三步才是<strong>问题排查</strong>。</p>
<p><strong>隔离</strong></p>
<p>就是把你的这台机器从请求列表里摘除，比如把 nginx 相关的权重设成零。</p>
<p><strong>现场保留</strong></p>
<p><strong>瞬时态和历史态</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnwy22d2j30l10cpt9d.jpg" alt="img"></p>
<p>查看比如 CPU、系统内存等，通过历史状态可以体现一个趋势性问题，而这些信息的获取一般依靠监控系统的协作。           </p>
<p><strong>保留信息</strong></p>
<p>（1）<strong>系统当前网络连接</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ss</span> -antp &gt; $DUMP_DIR/ss.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>使用 ss 命令而不是 netstat 的原因，是因为 netstat 在网络连接非常多的情况下，执行非常缓慢。</p>
<p>后续的处理，可通过查看各种网络连接状态的梳理，来排查 TIME_WAIT 或者 CLOSE_WAIT，或者其他连接过高的问题，非常有用。</p>
<p>（2）<strong>网络状态统计</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -s &gt; $DUMP_DIR/netstat-s.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>它能够按照各个协议进行统计输出，对把握当时整个网络状态，有非常大的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sar -n DEV <span class="number">1</span> <span class="number">2</span> &gt; $DUMP_DIR/sar-traffic.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>在一些速度非常高的模块上，比如 Redis、Kafka，就经常发生跑满网卡的情况。表现形式就是网络通信非常缓慢。</p>
<p>（3）<strong>进程资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lsof -p $PID &gt; $DUMP_DIR/lsof-$PID.dump</span><br></pre></td></tr></table></figure>


<p>通过查看进程，能看到打开了哪些文件，可以以进程的维度来查看整个资源的使用情况，包括每条网络连接、每个打开的文件句柄。同时，也可以很容易的看到连接到了哪些服务器、使用了哪些资源。这个命令在资源非常多的情况下，输出稍慢，请耐心等待。</p>
<p>（4）<strong>CPU 资源</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mpstat</span> &gt; $DUMP_DIR/mpstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">vmstat</span> <span class="number">1</span> <span class="number">3</span> &gt; $DUMP_DIR/vmstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">sar</span> -p <span class="literal">ALL</span>  &gt; $DUMP_DIR/sar-cpu.dump  <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">uptime</span> &gt; $DUMP_DIR/uptime.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>主要用于输出当前系统的 CPU 和负载，便于事后排查。</p>
<p>（5）<strong>I&#x2F;O 资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iostat -x &gt; $DUMP_DIR/iostat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>一般，以计算为主的服务节点，I&#x2F;O 资源会比较正常，但有时也会发生问题，比如<strong>日志输出过多，或者磁盘问题</strong>等。此命令可以输出每块磁盘的基本性能信息，用来排查 I&#x2F;O 问题。在第 8 课时介绍的 GC 日志分磁盘问题，就可以使用这个命令去发现。</p>
<p>（6）<strong>内存问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">free -h &gt; $DUMP_DIR/free.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>free 命令能够大体展现操作系统的内存概况，这是故障排查中一个非常重要的点，比如 SWAP 影响了 GC，SLAB 区挤占了 JVM 的内存。</p>
<p>（7）<strong>其他全局</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps -ef &gt; $DUMP_DIR/ps.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">dmesg &gt; $DUMP_DIR/dmesg.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">sysctl -a &gt; $DUMP_DIR/sysctl.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>dmesg 是许多静悄悄死掉的服务留下的最后一点线索。当然，ps 作为执行频率最高的一个命令，由于内核的配置参数，会对系统和 JVM 产生影响，所以我们也输出了一份。</p>
<p>（8）<strong>进程快照</strong>，最后的遗言（jinfo）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jinfo $PID &gt; $DUMP_DIR/jinfo.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>此命令将输出 Java 的基本进程信息，包括<strong>环境变量和参数配置</strong>，可以查看是否因为一些错误的配置造成了 JVM 问题。</p>
<p><strong>（9）dump 堆信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jstat -gcutil $PID &gt; $DUMP_DIR/jstat-gcutil.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jstat -gccapacity $PID &gt; $DUMP_DIR/jstat-gccapacity.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jstat 将输出当前的 gc 信息。一般，基本能大体看出一个端倪，如果不能，可将借助 jmap 来进行分析。</p>
<p><strong>（10）堆信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jmap $PID &gt; $DUMP_DIR/jmap.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -heap $PID &gt; $DUMP_DIR/jmap-heap.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -histo $PID &gt; $DUMP_DIR/jmap-histo.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -dump:format=b,file=$DUMP_DIR/heap.bin $PID &gt; /dev/<span class="literal">null</span>  <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jmap 将会得到当前 Java 进程的 dump 信息。如上所示，其实最有用的就是第 4 个命令，但是前面三个能够让你初步对系统概况进行大体判断。因为，第 4 个命令产生的文件，一般都非常的大。而且，需要下载下来，导入 MAT 这样的工具进行深入分析，才能获取结果。这是分析内存泄漏一个必经的过程。</p>
<p><strong>（11）JVM 执行栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jstack $PID &gt; $DUMP_DIR/jstack.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jstack 将会获取当时的执行栈。一般会多次取值，我们这里取一次即可。这些信息非常有用，能够还原 Java 进程中的线程情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top -Hp $PID -b -n <span class="number">1</span> -c &gt;  $DUMP_DIR/top-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>为了能够得到更加精细的信息，我们使用 top 命令，来获取进程中所有线程的 CPU 信息，这样，就可以看到资源到底耗费在什么地方了。</p>
<p><strong>（12）高级替补</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kill -<span class="number">3</span> $PID</span><br></pre></td></tr></table></figure>


<p>有时候，jstack 并不能够运行，有很多原因，比如 Java 进程几乎不响应了等之类的情况。我们会尝试向进程发送 kill -3 信号，这个信号将会打印 jstack 的 trace 信息到日志文件中，是 jstack 的一个替补方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gcore -o $DUMP_DIR/core $PID</span><br></pre></td></tr></table></figure>


<p>对于 jmap 无法执行的问题，也有替补，那就是 GDB 组件中的 gcore，将会生成一个 core 文件。我们可以使用如下的命令去生成 dump：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jhsdb jmap --exe $&#123;JDK&#125;java  --core $DUMP_DIR/core --binaryheap</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>内存泄漏的现象</strong></li>
</ol>
<p>稍微提一下 jmap 命令，它在 9 版本里被干掉了，取而代之的是 jhsdb，你可以像下面的命令一样使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jhsdb jmap  --heap --pid  <span class="number">37340</span></span><br><span class="line">jhsdb jmap  --pid  <span class="number">37288</span></span><br><span class="line">jhsdb jmap  --histo --pid  <span class="number">37340</span></span><br><span class="line">jhsdb jmap  --binaryheap --pid  <span class="number">37340</span></span><br></pre></td></tr></table></figure>

<p>一般内存溢出，表现形式就是 Old 区的占用持续上升，即使经过了多轮 GC 也没有明显改善。比如ThreadLocal里面的GC Roots，内存泄漏的根本就是，这些对象并没有切断和 GC Roots 的关系，可通过一些工具，能够看到它们的联系。</p>
<h4 id="2、报表异常-JVM调优"><a href="#2、报表异常-JVM调优" class="headerlink" title="2、报表异常 | JVM调优"></a>2、报表异常 | JVM调优</h4><p>有一个报表系统，频繁发生内存溢出，在高峰期间使用时，还会频繁的发生拒绝服务，由于大多数使用者是管理员角色，所以很快就反馈到研发这里。</p>
<p>业务场景是由于有些结果集的字段不是太全，因此需要对结果集合进行循环，并通过 HttpClient 调用其他服务的接口进行数据填充。使用 Guava 做了 JVM 内缓存，但是响应时间依然很长。</p>
<p>初步排查，JVM 的资源太少。接口 A 每次进行报表计算时，都要涉及几百兆的内存，而且在内存里驻留很长时间，有些计算又非常耗 CPU，特别的“吃”资源。而我们分配给 JVM 的内存只有 3 GB，在多人访问这些接口的时候，内存就不够用了，进而发生了 OOM。在这种情况下，没办法，只有升级机器。把机器配置升级到 4C8G，给 JVM 分配 6GB 的内存，这样 OOM 问题就消失了。但随之而来的是频繁的 GC 问题和超长的 GC 时间，平均 GC 时间竟然有 5 秒多。</p>
<p>进一步，由于报表系统和高并发系统不太一样，它的对象，存活时长大得多，并不能仅仅通过增加年轻代来解决；而且，如果增加了年轻代，那么必然减少了老年代的大小，由于 CMS 的碎片和浮动垃圾问题，我们可用的空间就更少了。虽然服务能够满足目前的需求，但还有一些不太确定的风险。</p>
<p>第一，了解到程序中有很多缓存数据和静态统计数据，为了减少 MinorGC 的次数，通过分析 GC 日志打印的对象年龄分布，把 MaxTenuringThreshold 参数调整到了 3（特殊场景特殊的配置）。这个参数是让年轻代的这些对象，赶紧回到老年代去，不要老呆在年轻代里。</p>
<p>第二，我们的 GC 时间比较长，就一块开了参数 CMSScavengeBeforeRemark，使得在 CMS remark 前，先执行一次 Minor GC 将新生代清掉。同时配合上个参数，其效果还是比较好的，一方面，对象很快晋升到了老年代，另一方面，年轻代的对象在这种情况下是有限的，在整个 MajorGC 中占的时间也有限。</p>
<p>第三，由于缓存的使用，有大量的弱引用，拿一次长达 10 秒的 GC 来说。我们发现在 GC 日志里，处理 weak refs 的时间较长，达到了 4.5 秒。这里可以加入参数 ParallelRefProcEnabled 来并行处理Reference，以加快处理速度，缩短耗时。</p>
<p>优化之后，效果不错，但并不是特别明显。经过评估，针对高峰时期的情况进行调研，我们决定再次提升机器性能，改用 8core16g 的机器。但是，这带来另外一个问题。</p>
<p><strong>高性能的机器带来了非常大的服务吞吐量</strong>，通过 jstat 进行监控，能够看到年轻代的分配速率明显提高，但随之而来的 MinorGC 时长却变的不可控，有时候会超过 1 秒。累积的请求造成了更加严重的后果。</p>
<p>这是由于堆空间明显加大造成的回收时间加长。为了获取较小的停顿时间，我们在堆上<strong>改用了 G1 垃圾回收器</strong>，把它的目标设定在 200ms。G1 是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的 GC 暂停目标，就能得到不错的性能。修改之后，虽然 GC 更加频繁了一些，但是停顿时间都比较小，应用的运行较为平滑。</p>
<p>到目前为止，也只是勉强顶住了已有的业务，但是，这时候领导层面又发力，<strong>要求报表系统可以支持未来两年业务10到100倍的增长</strong>，并保持其可用性，但是这个“千疮百孔”的报表系统，稍微一压测，就宕机，那如何应对十倍百倍的压力呢 ? 硬件即使可以做到动态扩容，但是毕竟也有极限。</p>
<p>使用 MAT 分析堆快照，发现很多地方可以通过代码优化，那些占用内存特别多的对象：</p>
<p>1、select * 全量排查，只允许获取必须的数据</p>
<p>2、报表系统中cache实际的命中率并不高，将Guava 的 Cache 引用级别改成弱引用（WeakKeys）</p>
<p>3、限制报表导入文件大小，同时拆分用户超大范围查询导出请求。</p>
<p>每一步操作都使得JVM使用变得更加可用，一系列优化以后，机器相同压测数据性能提升了数倍。</p>
<h4 id="3、大屏异常-JUC调优"><a href="#3、大屏异常-JUC调优" class="headerlink" title="3、大屏异常 | JUC调优"></a>3、大屏异常 | JUC调优</h4><p>有些数据需要使用 HttpClient 来获取进行补全。提供数据的服务提供商有的响应时间可能会很长，也有可能会造成服务整体的阻塞。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobr4whjzwj30l1058dfx.jpg" alt="img"></p>
<p>接口 A 通过 HttpClient 访问服务 2，响应 100ms 后返回；接口 B 访问服务 3，耗时 2 秒。HttpClient 本身是有一个最大连接数限制的，如果服务 3 迟迟不返回，就会造成 HttpClient 的连接数达到上限，<strong>概括来讲，就是同一服务，由于一个耗时非常长的接口，进而引起了整体的服务不可用</strong></p>
<p>这个时候，通过 jstack 打印栈信息，会发现大多数竟然阻塞在了接口 A 上，而不是耗时更长的接口 B，这个现象起初十分具有迷惑性，不过经过分析后，我们猜想其实是因为接口 A 的速度比较快，在问题发生点进入了更多的请求，它们全部都阻塞住的同时被打印出来了。</p>
<p>为了验证这个问题，我搭建了一个demo 工程，模拟了两个使用同一个 HttpClient 的接口。fast 接口用来访问百度，很快就能返回；slow 接口访问谷歌，由于众所周知的原因，会阻塞直到超时，大约 10 s。 利用ab对两个接口进行压测，同时使用 jstack 工具 dump 堆栈。首先使用 jps 命令找到进程号，然后把结果重定向到文件（可以参考 10271.jstack 文件）。</p>
<p>过滤一下 nio 关键字，可以查看 tomcat 相关的线程，足足有 200 个，这和 Spring Boot 默认的 maxThreads 个数不谋而合。更要命的是，有大多数线程，都处于 BLOCKED 状态，说明线程等待资源超时。通过grep fast | wc -l 分析，确实200个中有150个都是blocked的fast的进程。</p>
<p>问题找到了，解决方式就顺利成章了。</p>
<p>1、fast和slow争抢连接资源，通过线程池限流或者熔断处理</p>
<p>2、有时候slow的线程也不是一直slow，所以就得加入监控</p>
<p>3、使用带countdownLaunch对线程的执行顺序逻辑进行控制</p>
<h4 id="4、接口延迟-SWAP调优"><a href="#4、接口延迟-SWAP调优" class="headerlink" title="4、接口延迟 | SWAP调优"></a><strong>4、接口延迟 | SWAP调优</strong></h4><p>有一个关于服务的某个实例，经常发生服务卡顿。由于服务的并发量是比较高的，每多停顿 1 秒钟，几万用户的请求就会感到延迟。</p>
<p>我们统计、类比了此服务其他实例的 CPU、内存、网络、I&#x2F;O 资源，区别并不是很大，所以一度怀疑是机器硬件的问题。</p>
<p>接下来我们对比了节点的 GC 日志，发现无论是 Minor GC，还是 Major GC，这个节点所花费的时间，都比其他实例长得多。</p>
<p>通过仔细观察，我们发现在 GC 发生的时候，vmstat 的 si、so 飙升的非常严重，这和其他实例有着明显的不同。</p>
<p>使用 free 命令再次确认，发现 SWAP 分区，使用的比例非常高，引起的具体原因是什么呢？</p>
<p>更详细的操作系统内存分布，从 &#x2F;proc&#x2F;meminfo 文件中可以看到具体的逻辑内存块大小，有多达 40 项的内存信息，这些信息都可以通过遍历 &#x2F;proc 目录的一些文件获取。我们注意到 slabtop 命令显示的有一些异常，dentry（目录高速缓冲）占用非常高。</p>
<p>问题最终定位到是由于某个运维工程师删除日志时，定时执行了一句命令：</p>
<p>find &#x2F; | grep “xxx.log”</p>
<p>他是想找一个叫做 要被删除 的日志文件，看看在哪台服务器上，结果，这些老服务器由于文件太多，扫描后这些文件信息都缓存到了 slab 区上。而服务器开了 swap，操作系统发现物理内存占满后，并没有立即释放 cache，导致每次 GC 都要和硬盘打一次交道。</p>
<p><strong>解决方式就是关闭 SWAP 分区。</strong></p>
<p>swap 是很多性能场景的万恶之源，建议禁用。在高并发 SWAP 绝对能让你体验到它魔鬼性的一面：进程倒是死不了了，但 GC 时间长的却让人无法忍受。</p>
<h4 id="5、内存溢出-Cache调优"><a href="#5、内存溢出-Cache调优" class="headerlink" title="5、内存溢出 | Cache调优"></a>5、<strong>内存溢出 | Cache调优</strong></h4><blockquote>
<p>有一次线上遇到故障，重新启动后，使用 jstat 命令，发现 Old 区一直在增长。我使用 jmap 命令，导出了一份线上堆栈，然后使用 MAT 进行分析，通过对 GC Roots 的分析，发现了一个非常大的 HashMap 对象，这个原本是其他同事做缓存用的，但是做了一个无界缓存，没有设置超时时间或者 LRU 策略，在使用上又没有重写key类对象的hashcode和equals方法，对象无法取出也直接造成了堆内存占用一直上升，后来，将这个缓存改成 guava 的 Cache，并设置了弱引用，故障就消失了。</p>
<p>关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，<strong>close 方法又没有放在 finally</strong> 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。</p>
</blockquote>
<p>内存溢出是一个结果，而<strong>内存泄漏</strong>是一个原因。内存溢出的原因有<strong>内存空间不足、配置错误</strong>等因素。一些错误的编程方式，不再被使用的对象、没有被回收、没有及时切断与 GC Roots 的联系，这就是内存泄漏。</p>
<p>举个例子，有团队使用了 HashMap 做缓存，但是并没有设置超时时间或者 LRU 策略，造成了放入 Map 对象的数据越来越多，而产生了内存泄漏。</p>
<p>再来看一个经常发生的内存泄漏的例子，也是由于 HashMap 产生的。代码如下，由于没有重写 Key 类的 hashCode 和 equals 方法，造成了放入 HashMap 的所有对象都无法被取出来，它们和外界失联了。所以下面的代码结果是 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//leak example</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapLeakDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Key</span> &#123;</span><br><span class="line">        String title;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Key</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;Key, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;1&quot;</span>), <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;2&quot;</span>), <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;3&quot;</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> map.get(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>即使提供了 equals 方法和 hashCode 方法，也要非常小心，尽量避免使用自定义的对象作为 Key。</p>
<p>再看一个例子，关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，<strong>close 方法又没有放在 finally</strong> 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。</p>
<h4 id="6：CPU飙高-死循环"><a href="#6：CPU飙高-死循环" class="headerlink" title="6：CPU飙高 | 死循环"></a>6：CPU飙高 | 死循环</h4><p>我们有个线上应用，单节点在运行一段时间后，CPU 的使用会飙升，一旦飙升，一般怀疑某个业务逻辑的计算量太大，或者是触发了死循环（比如著名的 HashMap 高并发引起的死循环），但排查到最后其实是 GC 的问题。        </p>
<p>（1）使用 top 命令，查找到使用 CPU 最多的某个进程，记录它的 pid。使用 Shift + P 快捷键可以按 CPU 的使用率进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>


<p>（2）再次使用 top 命令，加 -H 参数，查看某个进程中使用 CPU 最多的某个线程，记录线程的 ID。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top -Hp $pid</span><br></pre></td></tr></table></figure>


<p>（3）使用 printf 函数，将十进制的 tid 转化成十六进制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">printf %x $tid</span><br></pre></td></tr></table></figure>


<p>（4）使用 jstack 命令，查看 Java 进程的线程栈。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack $pid &gt;$pid.log</span><br></pre></td></tr></table></figure>


<p>（5）使用 less 命令查看生成的文件，并查找刚才转化的十六进制 tid，找到发生问题的线程上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">less $pid.log</span><br></pre></td></tr></table></figure>


<p>我们在 jstack 日志搜关键字DEAD，以及中找到了 CPU 使用最多的几个线程id。</p>
<p>可以看到问题发生的根源，是我们的堆已经满了，但是又没有发生 OOM，于是 GC 进程就一直在那里回收，回收的效果又非常一般，造成 CPU 升高应用假死。接下来的具体问题排查，就需要把内存 dump 一份下来，使用 MAT 等工具分析具体原因了。</p>
<h1 id="三、多线程篇"><a href="#三、多线程篇" class="headerlink" title="三、多线程篇"></a>三、多线程篇</h1><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><h4 id="1、线程状态"><a href="#1、线程状态" class="headerlink" title="1、线程状态"></a><strong>1、线程状态</strong></h4><p>​        线程是cpu任务调度的最小执行单位，每个线程拥有自己独立的程序计数器、虚拟机栈、本地方法栈</p>
<p><strong>线程状态：创建、就绪、运行、阻塞、死亡</strong></p>
<img src="https://s0.lgstatic.com/i/image3/M01/77/29/Cgq2xl5xxGKAKBpeAAEw9Ifr07Y662.png" alt="img" style="zoom: 40%;" />



<h4 id="2、线程状态切换"><a href="#2、线程状态切换" class="headerlink" title="2、线程状态切换"></a><strong>2、线程状态切换</strong></h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
<th>区别</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>启动线程，由虚拟机自动调度执行run()方法</td>
<td>线程处于就绪状态</td>
</tr>
<tr>
<td>run</td>
<td>线程逻辑代码块处理，JVM调度执行</td>
<td>线程处于运行状态</td>
</tr>
<tr>
<td>sleep</td>
<td>让当前正在执行的线程休眠（暂停执行）</td>
<td>不释放锁</td>
</tr>
<tr>
<td>wait</td>
<td>使得当前线程等待</td>
<td>释放同步锁</td>
</tr>
<tr>
<td>notify</td>
<td>唤醒在此对象监视器上等待的单个线程</td>
<td>唤醒单个线程</td>
</tr>
<tr>
<td>notifyAll</td>
<td>唤醒在此对象监视器上等待的所有线程</td>
<td>唤醒多个线程</td>
</tr>
<tr>
<td>yiled</td>
<td>停止当前线程，让同等优先权的线程运行</td>
<td>用Thread类调用</td>
</tr>
<tr>
<td>join</td>
<td>使当前线程停下来等待，直至另一个调用join方法的线程终止</td>
<td>用线程对象调用</td>
</tr>
</tbody></table>
<img src="https://s0.lgstatic.com/i/image/M00/80/24/Ciqc1F_Qfy2ACkrLAAD2DLkc2qw212.png" alt="img" style="zoom:67%;" />

<h4 id="3、阻塞唤醒过程"><a href="#3、阻塞唤醒过程" class="headerlink" title="3、阻塞唤醒过程"></a><strong>3、阻塞唤醒过程</strong></h4><p><strong>阻塞：</strong></p>
<p>​        这三个方法的调用都会使当前线程阻塞。该线程将会被放置到对该Object的请求等待队列中，然后让出当前对Object所拥有的所有的同步请求。线程会一直暂停所有线程调度，直到下面其中一种情况发生：</p>
<p>　　　　① 其他线程调用了该Object的notify方法，而该线程刚好是那个被唤醒的线程；</p>
<p>　　　　② 其他线程调用了该Object的notifyAll方法；</p>
<p><strong>唤醒：</strong></p>
<p>​        线程将会从等待队列中移除，重新成为可调度线程。它会与其他线程以常规的方式竞争对象同步请求。<strong>一旦它重新获得对象的同步请求，所有之前的请求状态都会恢复，也就是线程调用wait的地方的状态。线程将会在之前调用wait的地方继续运行下去。</strong></p>
<p><strong>为什么要出现在同步代码块中：</strong></p>
<p>​        由于<code>wait()属于Object方法，调用之后会强制释放当前对象锁，所以在wait()</code> 调用时必须拿到当前对象的监视器monitor对象。因此，wait()方法在同步方法&#x2F;代码块中调用。</p>
<h4 id="4、wait和sleep区别"><a href="#4、wait和sleep区别" class="headerlink" title="4、wait和sleep区别"></a><strong>4、wait和sleep区别</strong></h4><ul>
<li><p>wait 方法必须在 synchronized 保护的代码中使用，而 sleep 方法并没有这个要求。</p>
</li>
<li><p>wait 方法会主动释放 monitor 锁，在同步代码中执行 sleep 方法时，并不会释放 monitor 锁。</p>
</li>
<li><p>wait 方法意味着永久等待，直到被中断或被唤醒才能恢复，不会主动恢复，sleep 方法中会定义一个时间，时间到期后会主动恢复。</p>
</li>
<li><p>wait&#x2F;notify 是 Object 类的方法，而 sleep 是 Thread 类的方法。</p>
</li>
</ul>
<h4 id="5、创建线程方式"><a href="#5、创建线程方式" class="headerlink" title="5、创建线程方式"></a>5、创建线程方式</h4><p><strong>实现 Runnable 接口</strong>（优先使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;System.out.println(<span class="string">&#x27;用实现Runnable接口实现线程&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现Callable接口</strong>（有返回值可抛出异常）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallableTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承Thread类</strong>（java不支持多继承）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;System.out.println(<span class="string">&#x27;用Thread类实现线程&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用线程池</strong>（底层都是实现run方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> + poolNumber.getAndIncrement() +<span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,namePrefix + threadNumber.getAndIncrement(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon()) t.setDaemon(<span class="literal">false</span>);  <span class="comment">//是否守护线程</span></span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY) t.setPriority(Thread.NORM_PRIORITY); <span class="comment">//线程优先级</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div style="page-break-after: always;"></div>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>优点：通过复用已创建的线程，<strong>降低资源损耗</strong>、线程可以直接处理队列中的任务<strong>加快响应速度</strong>、同时便于<strong>统一监控和管理</strong>。</p>
<h4 id="1、线程池构造函数"><a href="#1、线程池构造函数" class="headerlink" title="1、线程池构造函数"></a><strong>1、线程池构造函数</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 线程池构造函数7大参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">    TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>corePoolSize</td>
<td>核心线程池大小</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>最大线程池大小</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>线程池中超过 corePoolSize 数目的空闲线程最大存活时间；</td>
</tr>
<tr>
<td>TimeUnit</td>
<td>keepAliveTime 时间单位</td>
</tr>
<tr>
<td>workQueue</td>
<td>阻塞任务队列</td>
</tr>
<tr>
<td>threadFactory</td>
<td>新建线程工厂</td>
</tr>
<tr>
<td>RejectedExecutionHandler</td>
<td>拒绝策略。当提交任务数超过 maxmumPoolSize+workQueue 之和时，任务会交给RejectedExecutionHandler 来处理</td>
</tr>
</tbody></table>
<h4 id="2、线程处理任务过程："><a href="#2、线程处理任务过程：" class="headerlink" title="2、线程处理任务过程："></a><strong>2、线程处理任务过程：</strong></h4><img src="https://s0.lgstatic.com/i/image3/M01/78/50/Cgq2xl5zjxGAXOA-AABF0Dv8GMI518.png" alt="img" style="zoom: 67%;" />

<ol>
<li>当线程池小于corePoolSize，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。</li>
<li>当线程池达到corePoolSize时，新提交任务将被放入 workQueue 中，等待线程池中任务调度执行。</li>
<li>当workQueue已满，且 maximumPoolSize 大于 corePoolSize 时，新提交任务会创建新线程执行任务。</li>
<li>当提交任务数超过 maximumPoolSize 时，新提交任务由 RejectedExecutionHandler 处理。</li>
<li>当线程池中超过corePoolSize 线程，空闲时间达到 keepAliveTime 时，关闭空闲线程 。</li>
</ol>
<h4 id="3、线程拒绝策略"><a href="#3、线程拒绝策略" class="headerlink" title="3、线程拒绝策略"></a><strong>3、线程拒绝策略</strong></h4><p>​        线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。</p>
<p>JDK 内置的拒绝策略如下：</p>
<p>​        <strong>AbortPolicy：</strong>直接抛出异常，阻止系统正常运行。可以根据业务逻辑选择重试或者放弃提交等策略。</p>
<p>​        <strong>CallerRunsPolicy ：</strong>只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。</p>
<p>​                不会造成任务丢失，同时减缓提交任务的速度，给执行任务缓冲时间。</p>
<p>​        <strong>DiscardOldestPolicy ：</strong>丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。</p>
<p>​        <strong>DiscardPolicy ：</strong>该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</p>
<h4 id="4、Execuors类实现线程池"><a href="#4、Execuors类实现线程池" class="headerlink" title="4、Execuors类实现线程池"></a><strong>4、Execuors类实现线程池</strong></h4><img src="https://s0.lgstatic.com/i/image3/M01/63/5A/CgpOIF4z1EiAFjNQAAAtVe5xjgQ999.png" alt="img" style="zoom: 50%;" />

<ul>
<li><strong>newSingleThreadExecutor()：</strong>只有一个线程的线程池，任务是顺序执行，适用于一个一个任务执行的场景</li>
<li><strong>newCachedThreadPool()：</strong>线程池里有很多线程需要同时执行，60s内复用，适用执行很多短期异步的小程序或者负载较轻的服务</li>
<li><strong>newFixedThreadPool()：</strong>拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待，适用执行长期的任务。</li>
<li><strong>newScheduledThreadPool()：</strong>用来调度即将执行的任务的线程池</li>
<li>**newWorkStealingPool()**：底层采用forkjoin的Deque，采用独立的任务队列可以减少竞争同时加快任务处理</li>
<li></li>
<li><img src="https://s0.lgstatic.com/i/image2/M01/AF/80/CgoB5l3kzomAckv5AAAxf6FCPco696.png" alt="img" style="zoom:50%;" /></li>
</ul>
<p><strong>因为以上方式都存在弊端：</strong></p>
<p>​        FixedThreadPool 和 SingleThreadExecutor ： 允许请求的<strong>队列⻓度</strong>为 Integer.MAX_VALUE，会导致OOM。<br>​        CachedThreadPool 和 ScheduledThreadPool ： 允许创建的<strong>线程数量</strong>为 Integer.MAX_VALUE，会导致OOM。</p>
<p>手动创建的线程池底层使用的是ArrayBlockingQueue可以防止OOM。</p>
<h4 id="5、线程池大小设置"><a href="#5、线程池大小设置" class="headerlink" title="5、线程池大小设置"></a><strong>5、线程池大小设置</strong></h4><ul>
<li>CPU 密集型（n+1）</li>
</ul>
<p>​    CPU 密集的意思是该任务需要大量的运算，而没有阻塞，CPU 一直全速运行。</p>
<p>​    CPU 密集型任务尽可能的少的线程数量，一般为 CPU 核数 + 1 个线程的线程池。</p>
<ul>
<li>IO 密集型（2*n）</li>
</ul>
<p>​    由于 IO 密集型任务线程并不是一直在执行任务，可以多分配一点线程数，如 CPU * 2 </p>
<p>​    也可以使用公式：CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）。</p>
<div style="page-break-after: always;"></div>

<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="1、乐观锁，CAS思想"><a href="#1、乐观锁，CAS思想" class="headerlink" title="1、乐观锁，CAS思想"></a><strong>1、乐观锁，CAS思想</strong></h4><p><strong>java乐观锁机制：</strong></p>
<p>​        乐观锁体现的是悲观锁的反面。它是一种积极的思想，它总是认为数据是不会被修改的，所以是不会对数据上锁的。但是乐观锁在更新的时候会去判断数据是否被更新过。乐观锁的实现方案一般有两种（版本号机制和CAS）。乐观锁适用于<strong>读多写少的场景，这样可以提高系统的并发量</strong>。在Java中 <strong>java.util.concurrent.atomic</strong>下的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p>
<p>　　乐观锁，大多是基于数据版本  (Version)记录机制实现。即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来 实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提 交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p>
<p><strong>CAS思想：</strong></p>
<p>​        CAS就是compare and swap（<strong>比较交换</strong>），是一种很出名的无锁的算法，就是可以不使用锁机制实现线程间的同步。使用CAS线程是不会被阻塞的，所以又称为非阻塞同步。CAS算法涉及到三个操作：</p>
<p>​        需要读写内存值V；进行比较的值A；准备写入的值B</p>
<p>​        当且仅当V的值等于A的值等于V的值的时候，才用B的值去更新V的值，否则不会执行任何操作（比较和替换是一个原子操作-A和V比较，V和B替换），一般情况下是一个<strong>自旋操作</strong>，即<strong>不断重试</strong></p>
<p><strong>缺点：</strong></p>
<p>​        <a href="https://www.zhihu.com/question/23281499/answer/854522984">ABA问题-知乎</a></p>
<p>​        高并发的情况下，很容易发生并发冲突，如果CAS一直失败，那么就会一直重试，浪费CPU资源</p>
<p><strong>原子性：</strong></p>
<p>​        功能限制CAS是能保证单个变量的操作是原子性的，在Java中要配合使用volatile关键字来保证线程的安全；当涉及到多个变量的时候CAS无能为力；除此之外CAS实现需要硬件层面的支持，在Java的普通用户中无法直接使用，只能<strong>借助atomic包下的原子类</strong>实现，灵活性受到了限制</p>
<h4 id="2、synchronized底层实现"><a href="#2、synchronized底层实现" class="headerlink" title="2、synchronized底层实现"></a><strong>2、synchronized底层实现</strong></h4><p><strong>使用方法：</strong>主要的三种使⽤⽅式</p>
<p>​        <strong>修饰实例⽅法:</strong> 作⽤于当前对象实例加锁，进⼊同步代码前要获得当前对象实例的锁</p>
<p>​        <strong>修饰静态⽅法:</strong> 也就是给当前类加锁，会作⽤于类的所有对象实例，因为静态成员不属于任何⼀个实例对象，是类成员。</p>
<p>​        <strong>修饰代码块:</strong> 指定加锁对象，对给定对象加锁，进⼊同步代码库前要获得给定对象的锁。</p>
<p>​        <strong>总结：</strong>synchronized锁住的资源只有两类：一个是<strong>对象</strong>，一个是<strong>类</strong>。</p>
<p><strong>底层实现：</strong></p>
<p>​        对象头是我们需要关注的重点，它是synchronized实现锁的基础，因为synchronized申请锁、上锁、释放锁都与对象头有关。对象头主要结构是由<code>Mark Word</code> 组成，<strong>其中<code>Mark Word</code>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</strong>。</p>
<p>​        锁也分不同状态，JDK6之前只有两个状态：无锁、有锁（重量级锁），而在JDK6之后对synchronized进行了优化，新增了两种状态，总共就是四个状态：<strong>无锁状态、偏向锁、轻量级锁、重量级锁</strong>，其中无锁就是一种状态了。锁的类型和状态在对象头<code>Mark Word</code>中都有记录，在申请锁、锁升级等过程中JVM都需要读取对象的<code>Mark Word</code>数据。</p>
<p>​        同步代码块是利用 monitorenter 和 monitorexit 指令实现的，而同步方法则是利用 flags 实现的。</p>
<h4 id="3、ReenTrantLock底层实现"><a href="#3、ReenTrantLock底层实现" class="headerlink" title="3、ReenTrantLock底层实现"></a><strong>3、ReenTrantLock底层实现</strong></h4><p>​        由于ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，ReentrantLock类提供了一些高级功能</p>
<p><strong>使用方法：</strong></p>
<p>​        基于API层面的互斥锁，需要lock()和unlock()方法配合try&#x2F;finally语句块来完成</p>
<p><strong>底层实现：</strong></p>
<p>​        ReenTrantLock的实现是一种自旋锁，通过循环调用CAS操作来实现加锁。它的性能比较好也是因为避免了使线程进入内核态的阻塞状态。想尽办法避免线程进入内核的阻塞状态是我们去分析和理解锁设计的关键钥匙。</p>
<p><strong>和synchronized区别：</strong></p>
<p>​        1、<strong>底层实现</strong>：synchronized 是<strong>JVM</strong>层面的锁，是<strong>Java关键字</strong>，通过monitor对象来完成（monitorenter与monitorexit），ReentrantLock 是从jdk1.5以来（java.util.concurrent.locks.Lock）提供的<strong>API层面</strong>的锁。</p>
<p>​        2、<strong>实现原理****：synchronized 的实现涉及到</strong>锁的升级<strong>，具体为无锁、偏向锁、自旋锁、向OS申请重量级锁；ReentrantLock实现则是通过利用</strong>CAS**（CompareAndSwap）自旋机制保证线程操作的原子性和volatile保证数据可见性以实现锁的功能。</p>
<p>​        3、<strong>是否可手动释放：</strong>synchronized 不需要用户去手动释放锁，synchronized 代码执行完后系统会自动让线程释放对锁的占用； ReentrantLock则需要用户去手动释放锁，如果没有手动释放锁，就可能导致<strong>死锁现象</strong>。</p>
<p>​        4、<strong>是否可中断</strong>synchronized是不可中断类型的锁，除非加锁的代码中出现异常或正常执行完成； ReentrantLock则可以中断，可通过trylock(long timeout,TimeUnit unit)设置超时方法或者将lockInterruptibly()放到代码块中，调用interrupt方法进行中断。</p>
<p>​        5、<strong>是否公平锁</strong>synchronized为非公平锁 ReentrantLock则即可以选公平锁也可以选非公平锁，通过构造方法new ReentrantLock时传入boolean值进行选择，为空默认false非公平锁，true为公平锁,公平锁性能非常低。</p>
<h4 id="4、公平锁和非公平锁区别"><a href="#4、公平锁和非公平锁区别" class="headerlink" title="4、公平锁和非公平锁区别"></a><strong>4、公平锁和非公平锁区别</strong></h4><p><strong>公平锁：</strong></p>
<p>​        公平锁自然是遵循<strong>FIFO</strong>（先进先出）原则的，先到的线程会优先获取资源，后到的会进行排队等待</p>
<p>​        <strong>优点：</strong>所有的线程都能得到资源，不会饿死在队列中。适合大任务</p>
<p>​        <strong>缺点：</strong>吞吐量会下降，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销大</p>
<p><strong>非公平锁：</strong></p>
<p>​        多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p>
<p>​        <strong>优点：</strong>可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。</p>
<p>​        <strong>缺点：</strong>你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁</p>
<img src="https://s0.lgstatic.com/i/image3/M01/02/7D/Ciqah157DAiAK_DJAAC0JawhGp4730.png" alt="img" style="zoom:67%;" />

<p><strong>公平锁效率低原因：</strong></p>
<p>​        公平锁要维护一个队列，后来的线程要加锁，即使锁空闲，也要先检查有没有其他线程在 wait，如果有自己要挂起，加到队列后面，然后唤醒队列最前面线程。这种情况下相比较非公平锁多了一次<strong>挂起和唤醒</strong>。</p>
<p>​        <strong>线程切换的开销</strong>，其实就是非公平锁效率高于公平锁的原因，因为<strong>非公平锁减少了线程挂起的几率</strong>，后来的线程有一定几率逃离被挂起的开销。</p>
<h4 id="5、使用层面锁优化"><a href="#5、使用层面锁优化" class="headerlink" title="5、使用层面锁优化"></a><strong>5、使用层面锁优化</strong></h4><p>​    【1】<strong>减少锁的时间：</strong><br>​        不需要同步执行的代码，能不放在同步快里面执行就不要放在同步快内，可以让锁尽快释放；</p>
<p>​    【2】<strong>减少锁的粒度：</strong><br>​        它的思想是将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。它的思想也是用空间来换时间；java中很多数据结构都是采用这种方法提高并发操作的效率，比如：</p>
<p>​        <strong>ConcurrentHashMap：</strong></p>
<p>​        java中的ConcurrentHashMap在jdk1.8之前的版本，使用一个Segment 数组：Segment&lt; K,V &gt;[] segments</p>
<p>​        Segment继承自ReenTrantLock，所以每个Segment是个可重入锁，每个Segment 有一个HashEntry&lt; K,V &gt;数组用来存放数据，put操作时，先确定往哪个Segment放数据，只需要锁定这个Segment，执行put，其它的Segment不会被锁定；所以数组中有多少个Segment就允许同一时刻多少个线程存放数据，这样增加了并发能力。</p>
<p>​    【3】<strong>锁粗化：</strong><br>​        大部分情况下我们是要让锁的粒度最小化，锁的粗化则是要增大锁的粒度; </p>
<p>​        假如有一个循环，循环内的操作需要加锁，我们应该把锁放到循环外面，否则每次进出循环，都进出一次临界区，效率是非常差的；</p>
<p>​    【4】<strong>使用读写锁：</strong></p>
<p>​        ReentrantReadWriteLock 是一个读写锁，读操作加读锁，可并发读，写操作使用写锁，只能单线程写；</p>
<p>​    【5】<strong>使用CAS：</strong></p>
<p>​        如果需要同步的操作执行速度非常快，并且线程竞争并不激烈，这时候使用cas效率会更高，因为加锁会导致线程的上下文切换，如果上下文切换的耗时比同步操作本身更耗时，且线程对资源的竞争不激烈，使用volatiled+cas操作会是非常高效的选择；</p>
<h4 id="6、系统层面锁优化"><a href="#6、系统层面锁优化" class="headerlink" title="6、系统层面锁优化"></a>6、系统层面锁优化</h4><p><strong>自适应自旋锁：</strong></p>
<p>​        自旋锁可以避免等待竞争锁进入阻塞挂起状态被唤醒造成的<strong>内核态和用户态之间的切换</strong>的损耗，它们只需要等一等（自旋），但是如果锁被其他线程长时间占用，一直不释放CPU，死等会带来更多的性能开销；自旋次数默认值是10</p>
<p>​        对上面自旋锁优化方式的进一步优化，它的自旋的次数不再固定，其自旋的次数由前一次在同一个锁上的<strong>自旋时间及锁的拥有者的状态</strong>来决定，这就解决了自旋锁带来的缺点</p>
<p><strong>锁消除：</strong></p>
<p>​        锁削除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行削除。Netty中无锁化设计pipeline中channelhandler会进行锁消除的优化。</p>
<p><strong>锁升级：</strong></p>
<p>​    <strong>偏向锁：</strong></p>
<p>​        如果线程已经占有这个锁，当他在次试图去获取这个锁的时候，他会已最快的方式去拿到这个锁，而不需要在进行一些monitor操作，因为在大部分情况下是没有竞争的，所以使用偏向锁是可以提高性能的；</p>
<p>​    <strong>轻量级锁：</strong></p>
<p>​        在竞争不激烈的情况下，通过CAS避免线程上下文切换，可以显著的提高性能。</p>
<p>​    <strong>重量级锁：</strong></p>
<p>​        重量级锁的加锁、解锁过程造成的损耗是固定的，重量级锁适合于竞争激烈、高并发、同步块执行时间长的情况。</p>
<h4 id="7、ThreadLocal原理"><a href="#7、ThreadLocal原理" class="headerlink" title="7、ThreadLocal原理"></a><strong>7、ThreadLocal原理</strong></h4><p><strong>ThreadLocal简介：</strong></p>
<p>​        通常情况下，我们创建的变量是可以被任何⼀个线程访问并修改的。如果想实现每⼀个线程都有⾃⼰的<br>专属本地变量该如何解决呢？ JDK中提供的 ThreadLocal 类正是为了解决这样的问题。类似操作系统中的TLAB</p>
<p><strong>原理：</strong></p>
<p>​        首先 ThreadLocal 是一个泛型类，保证可以接受任何类型的对象。因为一个线程内可以存在多个 ThreadLocal 对象，所以其实是 ThreadLocal 内部维护了一个 Map ，是 ThreadLocal 实现的一个叫做 ThreadLocalMap 的静态内部类。</p>
<p>​        最终的变量是放在了当前线程的 <code>ThreadLocalMap</code> 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。</p>
<p>​        我们使用的 get()、set() 方法其实都是调用了这个ThreadLocalMap类对应的 get()、set() 方法。例如下面的 </p>
<p><strong>如何使用：</strong></p>
<p>​        1）存储用户Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">threadSession</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br></pre></td></tr></table></figure>

<p>​        2）解决线程安全的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; format1 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SimpleDateFormat&gt;()</span><br></pre></td></tr></table></figure>



<p><strong>ThreadLocal内存泄漏的场景</strong> </p>
<p>​        实际上 ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，⽽ value 是强引⽤。弱引用的特点是，如果这个对象持有弱引用，那么在下一次垃圾回收的时候必然会被清理掉。</p>
<p>​        所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。 假如我们不做任何措施的话，value 永远⽆法被GC 回收，如果线程长时间不被销毁，可能会产⽣内存泄露。</p>
<img src="https://s0.lgstatic.com/i/image3/M01/68/C4/Cgq2xl5Pld-AHFhJAADLtGXmSxc833.png" alt="img" style="zoom:67%;" />

<p>​        ThreadLocalMap实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。如果说会出现内存泄漏，那只有在出现了 key 为 null 的记录后，没有手动调用 remove() 方法，并且之后也不再调用 get()、set()、remove() 方法的情况下。因此使⽤完ThreadLocal ⽅法后，<strong>最好⼿动调⽤ remove() ⽅法</strong>。</p>
<h4 id="8、HashMap线程安全"><a href="#8、HashMap线程安全" class="headerlink" title="8、HashMap线程安全"></a><strong>8、HashMap线程安全</strong></h4><p>​    <strong>死循环造成 CPU 100%</strong></p>
<p>​        HashMap 有可能会发生死循环并且造成  CPU 100% ，这种情况发生最主要的原因就是在<strong>扩容</strong>的时候，也就是内部<strong>新建新的 HashMap</strong> 的时候，扩容的逻辑会<strong>反转散列桶中的节点顺序</strong>，当有多个线程同时进行扩容的时候，由于 HashMap 并非线程安全的，所以如果<strong>两个线程同时反转的话，便可能形成一个循环</strong>，并且这种循环是链表的循环，相当于 A 节点指向 B 节点，B 节点又指回到 A 节点，这样一来，在下一次想要获取该 key 所对应的 value 的时候，便会在遍历链表的时候发生永远无法遍历结束的情况，也就发生 CPU 100% 的情况。</p>
<p>​        所以综上所述，HashMap 是线程不安全的，在多线程使用场景中推荐使用线程安全同时性能比较好的 ConcurrentHashMap。</p>
<h4 id="9、String不可变原因"><a href="#9、String不可变原因" class="headerlink" title="9、String不可变原因"></a>9、String不可变原因</h4><ol>
<li><p>可以使用<strong>字符串常量池</strong>，多次创建同样的字符串会指向同一个内存地址</p>
</li>
<li><p>可以很方便地用作 <strong>HashMap 的 key</strong>。通常建议把不可变对象作为 HashMap的 key</p>
</li>
<li><p>hashCode生成后就不会改变，使用时无需重新计算</p>
</li>
<li><p>线程安全，因为具备不变性的对象一定是线程安全的</p>
</li>
</ol>
<div style="page-break-after: always;"></div>

<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>​        Java 内存模型（Java Memory Model，JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了 Java 程序在各种平台下对内存的访问都能保证效果一致的机制及规范。</p>
<p><img src="https://s0.lgstatic.com/i/image3/M01/7A/05/Cgq2xl54fTKALhevAAB_l3axT_o532.png" alt="img"></p>
<p>​        JMM 是一种规范，是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。目的是保证并发编程场景中的原子性、可见性和有序性。</p>
<p><strong>原子性：</strong></p>
<p>​        在 Java 中，为了保证原子性，提供了两个高级的字节码指令 Monitorenter 和 Monitorexit。这两个字节码，在 Java 中对应的关键字就是 Synchronized。因此，在 Java 中可以使用 Synchronized 来保证方法和代码块内的操作是原子性的。</p>
<p><strong>可见性：</strong></p>
<p>​        Java 中的 Volatile 关键字修饰的变量在被修改后可以立即同步到主内存。被其修饰的变量在每次使用之前都从主内存刷新。因此，可以使用 Volatile 来保证多线程操作时变量的可见性。除了 Volatile，Java 中的 Synchronized 和 Final 两个关键字也可以实现可见性。只不过实现方式不同</p>
<p><strong>有序性</strong></p>
<p>​        在 Java 中，可以使用 Synchronized 和 Volatile 来保证多线程之间操作的有序性。区别：Volatile 禁止指令重排。Synchronized 保证同一时刻只允许一条线程操作。</p>
<h4 id="1、volatile底层实现"><a href="#1、volatile底层实现" class="headerlink" title="1、volatile底层实现"></a><strong>1、volatile底层实现</strong></h4><p><strong>作用：</strong></p>
<p>​        保证数据的“可见性”：被volatile修饰的变量能够保证每个线程能够获取该变量的最新值，从而避免出现数据脏读的现象。</p>
<p>​        禁止指令重排：在多线程操作情况下，指令重排会导致计算结果不一致</p>
<p><strong>底层实现：</strong></p>
<p>​        “观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p>
<p>　　lock前缀指令实际上相当于一个<strong>内存屏障</strong>（也成内存栅栏），内存屏障会提供3个功能：</p>
<p>　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；</p>
<p>　　2）它会强制将对缓存的修改操作立即写入主存；</p>
<p>　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p>
<p><strong>单例模式中volatile的作用：</strong></p>
<p>防止代码读取到instance不为null时，instance引用的对象有可能还没有完成初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;   <span class="comment">//禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123; <span class="comment">//减少加锁的损耗</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>) <span class="comment">//确认是否初始化完成</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、AQS思想"><a href="#2、AQS思想" class="headerlink" title="2、AQS思想"></a><strong>2、AQS思想</strong></h4><p>​        AQS的全称为（AbstractQueuedSynchronizer）抽象的队列式的同步器，是⼀个⽤来构建锁和同步器的框架，使⽤AQS能简单且⾼效地构造出应⽤⼴泛的⼤量的同步器，如：基于AQS实现的lock, CountDownLatch、CyclicBarrier、Semaphore需解决的问题：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">状态的原子性管理</span><br><span class="line">线程的阻塞与解除阻塞</span><br><span class="line">队列的管理</span><br></pre></td></tr></table></figure>

<p>​        AQS核⼼思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的⼯作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占⽤，那么就需要⼀套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是⽤<strong>CLH（虚拟的双向队列）</strong>队列锁实现的，即将暂时获取不到锁的线程加⼊到队列中。</p>
<p><strong>lock：</strong></p>
<p>​        是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。默认为非公平锁，但可以初始化为公平锁； 通过方法 lock()与 unlock()来进行加锁与解锁操作；</p>
<p><strong>CountDownLatch：</strong></p>
<p>​        通过计数法（倒计时器），让一些线程堵塞直到另一个线程完成一系列操作后才被唤醒；该⼯具通常⽤来控制线程等待，它可以让某⼀个线程等待直到倒计时结束，再开始执⾏。具体可以使用countDownLatch.await()来等待结果。多用于多线程信息汇总。</p>
<p><strong>CompletableFuture：</strong></p>
<p>​        通过设置参数，可以完成CountDownLatch同样的多平台响应问题，但是可以针对其中部分返回结果做更加灵活的展示。</p>
<p><strong>CyclicBarrier：</strong></p>
<p>​        字面意思是可循环(Cyclic)使用的屏障（Barrier）。他要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await()方法。可以用于批量发送消息队列信息、异步限流。</p>
<p><strong>Semaphore：</strong></p>
<p>​        信号量主要用于两个目的，一个是用于多个共享资源的互斥作用，另一个用于并发线程数的控制。SpringHystrix限流的思想</p>
<h4 id="3、happens-before"><a href="#3、happens-before" class="headerlink" title="3、happens-before"></a>3、happens-before</h4><p>​        用来描述和可见性相关问题：如果第一个操作 happens-before 第二个操作，那么我们就说第一个操作对于第二个操作是可见的</p>
<p>​        常见的happens-before：volatile 、锁、线程生命周期。</p>
<h1 id="四、MySQL篇"><a href="#四、MySQL篇" class="headerlink" title="四、MySQL篇"></a>四、MySQL篇</h1><h3 id="WhyMysql？"><a href="#WhyMysql？" class="headerlink" title="WhyMysql？"></a>WhyMysql？</h3><p>NoSQL数据库四大家族 </p>
<ul>
<li>列存储 Hbase</li>
<li>K-V存储 Redis</li>
<li>图像存储 Neo4j</li>
<li>文档存储 MongoDB</li>
</ul>
<p>云存储OSS</p>
<h4 id="海量Aerospike"><a href="#海量Aerospike" class="headerlink" title="海量Aerospike"></a>海量Aerospike</h4><p>​    Aerospike（简称AS）是一个分布式，可扩展的键值存储的NoSQL<strong>数据库</strong>。T级别大数据高并发的结构化<strong>数据存储，</strong>采用混合架构，索引存储在内存中，而数据可存储在机械硬盘(HDD)或固态硬盘(SSD) 上，读写操作达微妙级，99%的响应可在1毫秒内实现。</p>
<table>
<thead>
<tr>
<th></th>
<th>Aerospike</th>
<th>Redis</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>Nosql数据库</td>
<td>缓存</td>
</tr>
<tr>
<td>线程数</td>
<td>多线程</td>
<td>单线程</td>
</tr>
<tr>
<td>数据分片</td>
<td>自动处理相当于分片</td>
<td>提供分片算法、平衡各分片数据</td>
</tr>
<tr>
<td>数据扩容</td>
<td>动态增加数据卷平衡流量</td>
<td>需停机</td>
</tr>
<tr>
<td>数据同步</td>
<td>设置复制因子后可以透明的完成故障转移</td>
<td>手动故障转移和数据同步</td>
</tr>
<tr>
<td>载体</td>
<td>内存存储索引+SSD存储数据</td>
<td>内存</td>
</tr>
</tbody></table>
<p>​    Aerospike作为一个大容量的NoSql解决方案，适合对<strong>容量要求比较大，QPS相对低</strong>一些的场景，主要用在广告行业，<strong>个性化推荐厂告</strong>是建立在了和掌握消费者独特的偏好和习性的基础之上，对消费者的购买需求做出准确的预测或引导，在合适的位置、合适的时间，以合适的形式向消费者呈现与其需求高度吻合的广告，以此来促进用户的消费行为。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmam43b44bj30d90d4aa7.jpg" alt="image-20210103170039711" style="zoom:50%;" />

<p>​    （ETL数据仓库技术）抽取（extract）、转换（transform）、加载（load）</p>
<ul>
<li><p>用户行为日志收集系统收集日志之后推送到ETL做数据的清洗和转换</p>
</li>
<li><p>把ETL过后的数据发送到推荐引擎计算每个消费者的推荐结果，其中推荐逻辑包括规则和算法两部分</p>
</li>
<li><p>收集用户最近浏览、最长停留等特征，分析商品相似性、用户相似性、相似性等算法。</p>
</li>
<li><p>把推荐引擎的结果存入Aerospike集群中，并提供给广告投放引擎实时获取</p>
<p>分别通过HDFS和HBASE对日志进行离线和实时的分析，然后把用户画像的标签(tag : 程序猿、宅男…)结果存入高性能的Nosql数据库Aerospike中，同时把数据备份到异地数据中心。前端广告投放请求通过决策引擎（投放引擎）向用户画像数据库中读取相应的用户画像数据，然后根据竞价算法出价进行竞价。竞价成功之后就可以展现广告了。而在竞价成功之后，具体给用户展现什么样的广告，就是有上面说的个性化推荐广告来完成的。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Aerospike</th>
<th>Mysql</th>
</tr>
</thead>
<tbody><tr>
<td>库名</td>
<td>Namespace</td>
<td>Database</td>
</tr>
<tr>
<td>表名</td>
<td>Set</td>
<td>Table</td>
</tr>
<tr>
<td>记录</td>
<td>Bin</td>
<td>Column</td>
</tr>
<tr>
<td>字段</td>
<td>Record</td>
<td>Row</td>
</tr>
<tr>
<td>索引</td>
<td>key 、 pk 、kv</td>
<td>pk</td>
</tr>
</tbody></table>
<h4 id="图谱Neo4j"><a href="#图谱Neo4j" class="headerlink" title="图谱Neo4j"></a>图谱Neo4j</h4><blockquote>
<p>Neo4j是一个开源基于java开发的图形noSql数据库，它将结构化数据存储在图中而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎。程序数据是在一个面向对象的、灵活的网络结构下，而不是严格的表中，但具备完全的事务特性、企业级的数据库的所有好处。</p>
</blockquote>
<p>一种基于图的数据结构，由节点(Node)和边(Edge)组成。其中节点即实体，由一个全局唯一的ID标示，边就是关系用于连接两个节点。通俗地讲，知识图谱就是把所有不同种类的信息，连接在一起而得到的一个关系网络。知识图谱提供了从“关系”的角度去分析问题的能力。</p>
<p>互联网、大数据的背景下，谷歌、百度、搜狗等搜索引擎纷纷基于该背景，创建自己的知识图<strong>Knowledge Graph（谷歌</strong>）、<strong>知心（百度）</strong>和<strong>知立方（搜狗）</strong>，主要用于改进搜索质量。</p>
<p>自己项目主要用作好友推荐，图数据库(Graph database)指的是以图数据结构的形式来存储和查询数据的数据库。关系图谱中，关系的组织形式采用的就是图结构，所以非常适合用图库进行存储。</p>
<ul>
<li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaq0j9otdj30pz0en0vm.jpg" alt="image-20210103191540372"></p>
<p>优势总结:</p>
</li>
<li><p>性能上，使用cql查询，对长程关系的查询速度快</p>
</li>
<li><p>擅于发现隐藏的关系，例如通过判断图上两点之间有没有走的通的路径，就可以发现事物间的关联</p>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaqc75y6bj30wc0d60u4.jpg" alt="image-20210103192653004"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询三层级关系节点如下：with可以将前面查询结果作为后面查询条件</span></span><br><span class="line">match (na:Person)-[re]-(nb:Person) where na.name=<span class="string">&quot;林婉儿&quot;</span> WITH na,re,nb <span class="title function_">match</span> <span class="params">(nb:Person)</span>- [re2:Friends]-&gt;(nc:Person) <span class="keyword">return</span> na,re,nb,re2,nc</span><br><span class="line"><span class="comment">// 直接拼接关系节点查询</span></span><br><span class="line">match data=(na:Person&#123;name:<span class="string">&quot;范闲&quot;</span>&#125;)-[re]-&gt;(nb:Person)-[re2]-&gt;(nc:Person) <span class="keyword">return</span> data</span><br><span class="line"><span class="comment">// 使用深度运算符</span></span><br><span class="line">显然使用以上方式比较繁琐,可变数量的关系-&gt;节点可以使用-[:TYPE*minHops..maxHops]-。</span><br><span class="line">match data=(na:Person&#123;name:<span class="string">&quot;范闲&quot;</span>&#125;)-[*<span class="number">1.</span><span class="number">.2</span>]-(nb:Person) <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<h4 id="文档MongoDB"><a href="#文档MongoDB" class="headerlink" title="文档MongoDB"></a><strong>文档MongoDB</strong></h4><blockquote>
<p>MongoDB 是一个基于分布式文件存储的数据库，是非关系数据库中功能最丰富、最像关系数据库的。在高负载的情况下，通过添加更多的节点，可以保证服务器性能。由 C++ 编写，可以为 WEB 应用提供可扩展、高性能、易部署的数据存储解决方案。</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaqyp75qsj312q0i8q5f.jpg" alt="image-20210103194830654" style="zoom:80%;" />

<p><strong>什么是BSON</strong></p>
<blockquote>
<p>{key:value,key2:value2}和Json类似，是一种二进制形式的存储格式，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，比如 value包括字符串,double,Array,DateBSON可以做为网络数据交换的一种存储形式,它的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p>
</blockquote>
<p>BSON有三个特点：轻量性、可遍历性、高效性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 查询 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开*/</span><br><span class="line">db.collection.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br><span class="line">/* 更新 $set ：设置字段值 $unset :删除指定字段 $inc：对修改的值进行自增*/</span><br><span class="line">db.collection.update(&#123;where&#125;,&#123;$set:&#123;字段名:值&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line">/* 删除 justOne :如果设为true，只删除一个文档，默认false，删除所有匹配条件的文档*/</span><br><span class="line">db.collection.remove(&#123;where&#125;, &#123;justOne: &lt;boolean&gt;, writeConcern: &lt;回执&gt; &#125; )</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ul>
<li><p><strong>文档结构的存储方式，能够更便捷的获取数据。</strong></p>
<p>对于一个层级式的数据结构来说，使用扁平式的，表状的结构来查询保存数据非常的困难。</p>
</li>
<li><p><strong>内置GridFS，支持大容量的存储。</strong></p>
<p>GridFS是一个出色的分布式文件系统，支持海量的数据存储，满足对大数据集的快速范围查询。</p>
</li>
<li><p><strong>性能优越</strong></p>
<p>千万级别的文档对象，近10G的数据，对有索引的ID的查询 不会比mysql慢，而对非索引字段的查询，则是全面胜出。 mysql实际无法胜任大数据量下任意字段的查询，而mongodb的查询性能实在牛逼。写入性能同样很令人满意，同样写入百万级别的数据，mongodb基本10分钟以下可以解决。</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>不支持事务</li>
<li>磁盘占用空间大</li>
</ul>
<p>MySQL 8.0 版本</p>
<p><strong>1. 性能</strong>：MySQL 8.0 的速度要比 MySQL 5.7 快 2 倍。</p>
<p><strong>2. NoSQL</strong>：MySQL 从 5.7 版本开始提供 NoSQL 存储功能，在 8.0 版本中nosql得到了更大的改进。</p>
<p><strong>3. 窗口函数</strong>：实现若干新的查询方式。窗口函数与 SUM()、COUNT() 这种集合函数类似，但它不会将多行查询结果合并为一行，而是将结果放回多行当中，即窗口函数不需要 GROUP BY。</p>
<p><strong>4. 隐藏索引</strong>：在 MySQL 8.0 中，索引可以被“隐藏”和“显示”。当对索引进行隐藏时，它不会被查询优化器所使用。我们可以使用这个特性用于性能调试，例如我们先隐藏一个索引，然后观察其对数据库的影响。如果数据库性能有所下降，说明这个索引是有用的，然后将其“恢复显示”即可；如果数据库性能看不出变化，说明这个索引是多余的，可以考虑删掉。</p>
<h4 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a><strong>云存储</strong></h4><table>
<thead>
<tr>
<th></th>
<th>OSS</th>
<th>自建</th>
</tr>
</thead>
<tbody><tr>
<td>可靠性</td>
<td>可用性不低于99.995%<br />数据设计持久性不低于99.9999999999%（12个9）</td>
<td>受限于硬件可靠性，易出问题，一旦出现磁盘坏道，容易出现不可逆转的数据丢失。人工数据恢复困难、耗时、耗力。</td>
</tr>
<tr>
<td>安全</td>
<td>服务端加密、客户端加密、防盗链、IP黑白名单等。多用户资源隔离机制，支持异地容灾机制。</td>
<td>需要另外购买清洗和黑洞设备。需要单独实现安全机制。</td>
</tr>
<tr>
<td>成本</td>
<td>多线BGP骨干网络，无带宽限制，上行流量免费。无需运维人员与托管费用，0成本运维。</td>
<td>单线或双线接入速度慢，有带宽限制，峰值时期需人工扩容。需专人运维，成本高。</td>
</tr>
</tbody></table>
<p><strong>使用步骤</strong></p>
<p>​    1、开通服务</p>
<p>​    2、创建存储空间</p>
<p>​    3、上传文件、下载文件、删除文件</p>
<p>​    4、域名绑定、日志记录</p>
<p>​    5、根据开放接口进行鉴权访问</p>
<p><strong>功能</strong></p>
<p>​    图片编辑（裁剪、模糊、水印）</p>
<p>​    视频截图</p>
<p>​    音频转码、视频修复</p>
<p><strong>CDN加速</strong></p>
<p>​    对象存储OSS与阿里云CDN服务结合，可优化静态热点文件下载加速的场景（即同一地区大量用户同时下载同一个静态文件的场景）。可以将OSS的存储空间（Bucket）作为源站，利用阿里云CDN将源内容发布到边缘节点。当大量终端用户重复访问同一文件时，可以直接从边缘节点获取已缓存的数据，提高访问的响应速度</p>
<h4 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a><strong>FastDFS</strong></h4><blockquote>
<p><strong>开源的轻量级分布式文件系统</strong>。它对文件进行管理，功能包括：<strong>文件存储、文件同步、文件访问</strong>（文件上传、文件下载）等，解决了<strong>大容量存储和负载均衡</strong>的问题。使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。如<strong>相册网站、视频网站</strong>等</p>
</blockquote>
<p><strong>扩展能力:</strong> 支持水平扩展，可以动态扩容；</p>
<p><strong>高可用性:</strong> 一是整个文件系统的可用性，二是数据的完整和一致性；</p>
<p><strong>弹性存储:</strong> 可以根据业务需要灵活地增删存储池中的资源，而不需要中断系统运行。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhjkvo59j30zu0b4dib.jpg" alt="image-20210107221022658"></p>
<p>特性</p>
<ul>
<li>和流行的web server无缝衔接，FastDFS已提供apache和nginx扩展模块</li>
<li>文件ID由FastDFS生成，作为文件访问凭证，FastDFS不需要传统的name server</li>
<li>分组存储，灵活简洁、对等结构，不存在单点</li>
<li>文件不分块存储，上传的文件和OS文件系统中的文件一一对应</li>
<li>中、小文件均可以很好支持，支持海量小文件存储</li>
<li>支持相同内容的文件只保存一份，节约磁盘空间</li>
<li>支持多块磁盘，支持单盘数据恢复</li>
<li>支持在线扩容 支持主从文件</li>
<li>下载文件支持多线程方式，支持断点续传</li>
</ul>
<p><strong>组成</strong></p>
<ul>
<li><p><strong>客户端（client）</strong></p>
<p>通过专有接口，使用TCP&#x2F;IP协议与跟踪器服务器或存储节点进行数据交互。</p>
</li>
<li><p><strong>跟踪器（tracker）</strong> </p>
<p>Trackerserver作用是负载均衡和调度，通过Tracker server在文件上传时可以根据策略找到文件上传的地址。Tracker在访问上起负载均衡的作用。</p>
</li>
<li><p><strong>存储节点（storage）</strong></p>
<p>Storageserver作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server<strong>没有实现自己的文件系统而是利用操作系统的文件系统来管理文件</strong>。存储节点中的服务器均可以<strong>随时增加或下线而不会影响线上服务</strong>。</p>
</li>
</ul>
<p><strong>上传</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhvk0wwzj30ue0h4dlw.jpg" alt="image-20210107222155291" style="zoom:50%;" />

<p><strong>下载</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhww8zmfj30uw0g6n37.jpg" alt="image-20210107222312338" style="zoom:50%;" />

<p><strong>断点续传</strong></p>
<p>​    续传涉及到的文件大小MD5不会改变。续传流程与文件上传类似，先<strong>定位到源storage</strong>，完成完整或部分上传，再<strong>通过binlog进行同group内server文件同步</strong>。</p>
<p><strong>配置优化</strong></p>
<p>配置文件：tracker.conf 和 storage.conf </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FastDFS采用内存池的做法。 </span></span><br><span class="line"><span class="comment">// v5.04对预分配采用增量方式，tracker一次预分配 1024个，storage一次预分配256个。 </span></span><br><span class="line">max_connections = <span class="number">10240</span></span><br><span class="line"><span class="comment">// 根据实际需要将 max_connections 设置为一个较大的数值，比如 10240 甚至更大。</span></span><br><span class="line"><span class="comment">// 同时需要将一个进程允许打开的最大文件数调大</span></span><br><span class="line">vi /etc/security/limits.conf 重启系统生效 </span><br><span class="line">* soft nofile <span class="number">65535</span> </span><br><span class="line">* hard nofile <span class="number">65535</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">work_threads = <span class="number">4</span> </span><br><span class="line"><span class="comment">// 说明：为了避免CPU上下文切换的开销，以及不必要的资源消耗，不建议将本参数设置得过大。</span></span><br><span class="line"><span class="comment">// 公式为： work_threads + (reader_threads + writer_threads) = CPU数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于单盘挂载方式，磁盘读写线程分 别设置为 1即可 </span></span><br><span class="line"><span class="comment">// 如果磁盘做了RAID，那么需要酌情加大读写线程数，这样才能最大程度地发挥磁盘性能</span></span><br><span class="line">disk_rw_separated：磁盘读写是否分离 </span><br><span class="line">disk_reader_threads：单个磁盘读线程数 </span><br><span class="line">disk_writer_threads：单个磁盘写线程数 </span><br></pre></td></tr></table></figure>

<p><strong>避免重复</strong></p>
<p>​    如何避免文件重复上传 解决方案 上传成功后计算文件对应的MD5然后<strong>存入MySQL</strong>,添加文件时把<strong>文件MD5和之前存入MYSQL中的存储的信息对比</strong> 。DigestUtils.md5DigestAsHex(bytes)。</p>
<div style="page-break-after: always;"></div>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1、事务4大特性"><a href="#1、事务4大特性" class="headerlink" title="1、事务4大特性"></a><strong>1、事务4大特性</strong></h4><p><strong>事务4大特性：</strong>原子性、一致性、隔离性、持久性</p>
<p>​    <strong>原⼦性：</strong> 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部完成，要么全不执行</p>
<p>​    <strong>一致性：</strong> 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；</p>
<p>​    <strong>隔离性：</strong> 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；</p>
<p>​    <strong>持久性：</strong> ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何影响。</p>
<p><strong>实现保证：</strong></p>
<p>​        MySQL的存储引擎InnoDB使用重做日志保证一致性与持久性，回滚日志保证原子性，使用各种锁来保证隔离性。</p>
<h4 id="2、事务隔离级别"><a href="#2、事务隔离级别" class="headerlink" title="2、事务隔离级别"></a><strong>2、事务隔离级别</strong></h4><p><strong>读未提交：</strong>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>
<p><strong>读已提交：</strong>允许读取并发事务已经提交的数据，可以阻⽌脏读，但是幻读或不可重复读仍有可能发⽣。</p>
<p><strong>可重复读：</strong>同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，会有幻读。</p>
<p><strong>串行化：</strong>最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>并发问题</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>可能会导致脏读、幻读或不可重复读</td>
</tr>
<tr>
<td>读已提交</td>
<td>可能会导致幻读或不可重复读</td>
</tr>
<tr>
<td>可重复读</td>
<td>可能会导致幻读</td>
</tr>
<tr>
<td>可串行化</td>
<td>不会产⽣⼲扰</td>
</tr>
</tbody></table>
<h4 id="3、默认隔离级别-RR"><a href="#3、默认隔离级别-RR" class="headerlink" title="3、默认隔离级别-RR"></a><strong>3、默认隔离级别-RR</strong></h4><p><strong>默认隔离级别：</strong>可重复读；</p>
<p>​        同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改；</p>
<p>​        可重复读是有可能出现幻读的，如果要保证绝对的安全只能把隔离级别设置成SERIALIZABLE；这样所有事务都只能顺序执行，自然不会因为并发有什么影响了，但是性能会下降许多。</p>
<p>​        第二种方式，使用MVCC解决<strong>快照读幻读问题</strong>（如简单select），读取的不是最新的数据。维护一个字段作为version，这样可以控制到每次只能有一个人更新一个版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from table_xx where id = ? and version = V</span><br><span class="line">update id from table_xx where id = ? and version = V+1</span><br></pre></td></tr></table></figure>

<p>​        第三种方式，如果需要读最新的数据，可以通过GapLock+Next-KeyLock可以解决<strong>当前读幻读问题</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from table_xx where id &gt; 100 for update;</span><br><span class="line">select id from table_xx where id &gt; 100 lock in share mode;</span><br></pre></td></tr></table></figure>



<h4 id="4、RR和RC使用场景"><a href="#4、RR和RC使用场景" class="headerlink" title="4、RR和RC使用场景"></a><strong>4、RR和RC使用场景</strong></h4><p>​        事务隔离级别RC(read commit)和RR（repeatable read）两种事务隔离级别基于多版本并发控制MVCC(multi-version concurrency control）来实现。</p>
<table>
<thead>
<tr>
<th></th>
<th>RC</th>
<th>RR</th>
</tr>
</thead>
<tbody><tr>
<td>实现</td>
<td>多条查询语句会创建多个不同的ReadView</td>
<td>仅需要一个版本的ReadView</td>
</tr>
<tr>
<td>粒度</td>
<td>语句级读一致性</td>
<td>事务级读一致性</td>
</tr>
<tr>
<td>准确性</td>
<td>每次语句执行时间点的数据</td>
<td>第一条语句执行时间点的数据</td>
</tr>
</tbody></table>
<h4 id="5、行锁，表锁，意向锁"><a href="#5、行锁，表锁，意向锁" class="headerlink" title="5、行锁，表锁，意向锁"></a><strong>5、行锁，表锁，意向锁</strong></h4><p><strong>InnoDB⽀持⾏级锁(row-level locking)和表级锁,默认为⾏级锁</strong>    </p>
<p>​    InnoDB按照不同的分类的锁：</p>
<p>​    共享&#x2F;排它锁(Shared and Exclusive Locks)：行级别锁，</p>
<p>​    意向锁(Intention Locks)，表级别锁</p>
<p>​    间隙锁(Gap Locks)，锁定一个区间</p>
<p>​    记录锁(Record Locks)，锁定一个行记录</p>
<p><strong>表级锁：（串行化）</strong></p>
<p>​        Mysql中锁定 粒度最大的一种锁，对当前操作的整张表加锁，实现简单 ，资源消耗也比较少，加锁快，不会出现死锁 。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。</p>
<p><strong>行级锁：（RR、RC）</strong></p>
<p>​        Mysql中锁定 粒度最小 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。 InnoDB支持的行级锁，包括如下几种：</p>
<p>​        <strong>记录锁（Record Lock）:</strong> 对索引项加锁，锁定<strong>符合条件的行</strong>。其他事务不能修改和删除加锁项；</p>
<p>​        <strong>间隙锁（Gap Lock）:</strong> 对索引项之间的“间隙”加锁，锁定<strong>记录的范围</strong>，不包含索引项本身，其他事务不能在锁范围内插入数据。</p>
<p>​        <strong>Next-key Lock：</strong> 锁定索引项本身和索引范围。即Record Lock和Gap Lock的结合。可解决幻读问题。</p>
<p>InnoDB 支持多粒度锁（multiple granularity locking），它允许行级锁与表级锁共存，而意向锁就是其中的一种表锁。</p>
<p><strong>共享锁</strong>（ shared lock, S ）锁允许持有锁读取行的事务。加锁时将自己和子节点全加S锁，父节点直到表头全加IS锁</p>
<p><strong>排他锁</strong>（ exclusive lock， X ）锁允许持有锁修改行的事务。 加锁时将自己和子节点全加X锁，父节点直到表头全加IX锁  </p>
<p><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加<strong>共享锁</strong>（S锁）</p>
<p><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加<strong>排他锁</strong>（X锁）</p>
<table>
<thead>
<tr>
<th>互斥性</th>
<th>共享锁（S）</th>
<th>排它锁（X）</th>
<th>意向共享锁IS</th>
<th>意向排他锁IX</th>
</tr>
</thead>
<tbody><tr>
<td>共享锁（S）</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>排它锁（X）</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>意向共享锁IS</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>意向排他锁IX</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody></table>
<h4 id="6、MVCC多版本并发控制"><a href="#6、MVCC多版本并发控制" class="headerlink" title="6、MVCC多版本并发控制"></a><strong>6、MVCC多版本并发控制</strong></h4><p>​        MVCC是一种多版本并发控制机制，通过事务的可见性看到自己预期的数据，能降低其系统开销.（RC和RR级别工作）</p>
<p>​        InnoDB的MVCC,是通过在每行记录后面保存系统版本号(可以理解为事务的ID)，每开始一个新的事务，系统版本号就会自动递增，事务开始时刻的系统版本号会作为事务的ID。这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的，防止幻读的产生。</p>
<p>​        1.MVCC手段只适用于Msyql隔离级别中的读已提交（Read committed）和可重复读（Repeatable Read）.</p>
<p>​        2.Read uncimmitted由于存在脏读，即能读到未提交事务的数据行，所以不适用MVCC.</p>
<p>​        3.简单的select快照度不会加锁，删改及select for update等需要当前读的场景会加锁</p>
<p>​        原因是MVCC的创建版本和删除版本只要在事务提交后才会产生。客观上，mysql使用的是乐观锁的一整实现方式，就是每行都有版本号，保存时根据版本号决定是否成功。Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。</p>
<p><strong>版本链</strong></p>
<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>
<p><strong>trx_id</strong></p>
<p>这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id。</p>
<p><strong>roll_pointer</strong></p>
<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>
<p>每次修改都会在版本链中记录。<strong>SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，</strong>提升了系统的性能。</p>
<div style="page-break-after: always;"></div>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="1、Innodb和Myisam引擎"><a href="#1、Innodb和Myisam引擎" class="headerlink" title="1、Innodb和Myisam引擎"></a><strong>1、Innodb和Myisam引擎</strong></h4><p><strong>Myisam：</strong>支持表锁，适合读密集的场景，不支持外键，不支持事务，索引与数据在不同的文件</p>
<p><strong>Innodb：</strong>支持行、表锁，默认为行锁，适合并发场景，支持外键，支持事务，索引与数据同一文件</p>
<h4 id="2、哈希索引"><a href="#2、哈希索引" class="headerlink" title="2、哈希索引"></a><strong>2、哈希索引</strong></h4><p>​        哈希索引用索引列的值计算该值的hashCode，然后在hashCode相应的位置存执该值所在行数据的物理位置，因为使用散列算法，因此访问速度非常快，但是一个值只能对应一个hashCode，而且是散列的分布方式，因此哈希索引不支持范围查找和排序的功能</p>
<h4 id="3、B-树索引"><a href="#3、B-树索引" class="headerlink" title="3、B+树索引"></a><strong>3、B+树索引</strong></h4><p><strong>优点：</strong></p>
<p>​        B+树的磁盘读写代价低，更少的查询次数，查询效率更加稳定，有利于对数据库的扫描</p>
<p>​        B+树是B树的升级版，B+树只有叶节点存放数据，其余节点用来索引。索引节点可以全部加入内存，增加查询效率，叶子节点可以做双向链表，从而<strong>提高范围查找的效率，增加的索引的范围</strong></p>
<p>​        在大规模数据存储的时候，红黑树往往出现由于<strong>树的深度过大</strong>而造成磁盘IO读写过于频繁，进而导致效率低下的情况。所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树与B+树可以有多个子女，从几十到上千，可以降低树的高度。</p>
<p>​        <strong>磁盘预读原理</strong>：将一个节点的大小设为等于一个页，这样每个节点只需要一次I&#x2F;O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：每次新建节点时，直接申请一个页的空间，这样就保证<strong>一个节点物理上也存储在一个页里</strong>，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I&#x2F;O。</p>
<h4 id="4、创建索引"><a href="#4、创建索引" class="headerlink" title="4、创建索引"></a>4、创建索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT]  INDEX  索引名 <span class="keyword">ON</span>  表名(字段名) [<span class="keyword">USING</span> 索引方法]；</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="keyword">UNIQUE</span>:可选。表示索引为唯一性索引。</span><br><span class="line">FULLTEXT:可选。表示索引为全文索引。</span><br><span class="line">INDEX和KEY:用于指定字段为索引，两者选择其中之一就可以了，作用是一样的。</span><br><span class="line">索引名:可选。给创建的索引取一个新名称。</span><br><span class="line">字段名<span class="number">1</span>:指定索引对应的字段的名称，该字段必须是前面定义好的字段。</span><br><span class="line">注：索引方法默认使用B<span class="operator">+</span>TREE。</span><br></pre></td></tr></table></figure>



<h4 id="5、聚簇索引和非聚簇索引"><a href="#5、聚簇索引和非聚簇索引" class="headerlink" title="5、聚簇索引和非聚簇索引"></a><strong>5、聚簇索引和非聚簇索引</strong></h4><p>​    <strong>聚簇索引：</strong>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据（<strong>主键索引</strong>）</p>
<p>​    <strong>非聚簇索引：</strong>将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置（<strong>辅助索引</strong>）</p>
<p>​    聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。</p>
<h4 id="6、最左前缀问题"><a href="#6、最左前缀问题" class="headerlink" title="6、最左前缀问题"></a>6、最左前缀问题</h4><p>​        最左前缀原则主要使用在联合索引中，联合索引的B+Tree是按照第一个关键字进行索引排列的。</p>
<p>​        联合索引的底层是一颗B+树，只不过联合索引的B+树节点中存储的是键值。由于构建一棵B+树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建。</p>
<p>​        采用&gt;、&lt;等进行匹配都会导致后面的列无法走索引，因为通过以上方式匹配到的数据是不可知的。</p>
<div style="page-break-after: always;"></div>

<h3 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h3><h4 id="1、SQL语句的执行过程"><a href="#1、SQL语句的执行过程" class="headerlink" title="1、SQL语句的执行过程"></a><strong>1、SQL语句的执行过程</strong></h4><p><strong>查询语句：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from student  A where A.age=&#x27;18&#x27; and A.name=&#x27;张三&#x27;;</span><br></pre></td></tr></table></figure>

<img src="http://s0.lgstatic.com/i/image2/M01/8B/0F/CgotOV14ySKAMxohAAH2VHcAzkE612.png" alt="img" style="zoom: 67%;" />

<p>结合上面的说明，我们分析下这个语句的执行流程：</p>
<p>①通过客户端&#x2F;服务器通信协议与 MySQL 建立连接。并查询是否有权限</p>
<p>②Mysql8.0之前开看是否开启缓存，开启了 Query Cache 且命中完全相同的 SQL 语句，则将查询结果直接返回给客户端；</p>
<p>③由解析器进行语法语义解析，并生成解析树。如查询是select、表名tb_student、条件是id&#x3D;’1’</p>
<p>④查询优化器生成执行计划。根据索引看看是否可以优化</p>
<p>⑤查询执行引擎执行 SQL 语句，根据存储引擎类型，得到查询结果。若开启了 Query Cache，则缓存，否则直接返回。</p>
<h4 id="2、回表查询和覆盖索引"><a href="#2、回表查询和覆盖索引" class="headerlink" title="2、回表查询和覆盖索引"></a><strong>2、回表查询和覆盖索引</strong></h4><p><strong>普通索引</strong>（唯一索引+联合索引+全文索引）需要扫描两遍索引树</p>
<p>（1）先通过普通索引定位到主键值id&#x3D;5；</p>
<p>（2）在通过聚集索引定位到行记录；</p>
<p>这就是所谓的<strong>回表查询</strong>，先定位主键值，再定位行记录，它的性能较扫一遍索引树更低。</p>
<p><strong>覆盖索引</strong>：主键索引&#x3D;&#x3D;聚簇索引&#x3D;&#x3D;覆盖索引</p>
<p>​    如果where条件的列和返回的数据在一个索引中，那么不需要回查表，那么就叫覆盖索引。</p>
<p><strong>实现覆盖索引</strong>：常见的方法是，将被查询的字段，建立到联合索引里去。</p>
<h4 id="3、Explain及优化"><a href="#3、Explain及优化" class="headerlink" title="3、Explain及优化"></a>3、Explain及优化</h4><p>参考：<a href="https://www.jianshu.com/p/8fab76bbf448">https://www.jianshu.com/p/8fab76bbf448</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from staff;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | staff | ALL  | NULL          | 索引  | NULL    | NULL |    2 | NULL  |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure>

<p><strong>索引优化：</strong></p>
<p>​    ①最左前缀索引：like只用于’string%’，语句中的&#x3D;和in会动态调整顺序</p>
<p>​    ②唯一索引：唯一键区分度在0.1以上</p>
<p>​    ③无法使用索引：!&#x3D;  、is null 、 or、&gt;&lt; 、（<strong>5.7以后根据数量自动判定）in 、not in</strong></p>
<p>​    ④联合索引：避免select * ，查询列使用覆盖索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uid From user Where gid = 2 order by ctime asc limit 10</span><br><span class="line">ALTER TABLE user add index idx_gid_ctime_uid(gid,ctime,uid) #创建联合覆盖索引，避免回表查询</span><br></pre></td></tr></table></figure>



<p><strong>语句优化：</strong></p>
<p>​    ①char固定长度查询效率高，varchar第一个字节记录数据长度</p>
<p>​    ②应该针对Explain中Rows增加索引</p>
<p>​    ③group&#x2F;order by字段均会涉及索引</p>
<p>​    ④Limit中分页查询会随着start值增大而变缓慢，通过子查询+表连接解决</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">10</span>  改进后的<span class="keyword">SQL</span>语句如下：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">where</span> id <span class="operator">&gt;=</span> ( <span class="keyword">select</span> id <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">1</span> ) limit <span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">inner</span> ori <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">10</span>) <span class="keyword">as</span> tmp <span class="keyword">on</span> tmp.id<span class="operator">=</span>ori.id;</span><br></pre></td></tr></table></figure>

<p>​    ⑤count会进行全表扫描，如果估算可以使用explain</p>
<p>​    ⑥delete删除表时会增加大量undo和redo日志， 确定删除可使用trancate</p>
<p><strong>表结构优化：</strong></p>
<p>​    ①单库不超过200张表</p>
<p>​    ②单表不超过500w数据</p>
<p>​    ③单表不超过40列</p>
<p>​    ④单表索引不超过5个</p>
<p><strong>数据库范式</strong> ：</p>
<p>​    ①第一范式（1NF）列不可分割</p>
<p>​    ②第二范式（2NF）属性完全依赖于主键 [ 消除部分子函数依赖 ]</p>
<p>​    ③第三范式（3NF）属性不依赖于其它非主属性 [ 消除传递依赖 ]</p>
<p><strong>配置优化：</strong></p>
<p>​    配置连接数、禁用Swap、增加内存、升级SSD硬盘</p>
<h4 id="4、JOIN查询"><a href="#4、JOIN查询" class="headerlink" title="4、JOIN查询"></a>4、JOIN查询</h4><img src="https://image-static.segmentfault.com/276/780/2767807589-5c122586a23c4_articlex" style="align:left;zoom: 60%;" />

<p><strong>left join(左联接)</strong> 返回包括左表中的所有记录和右表中关联字段相等的记录 </p>
<p><strong>right join(右联接)</strong> 返回包括右表中的所有记录和左表中关联字段相等的记录</p>
<p><strong>inner join(等值连接)</strong> 只返回两个表中关联字段相等的行</p>
<div style="page-break-after: always;"></div>

<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a><strong>集群</strong></h3><h4 id="1、主从复制过程"><a href="#1、主从复制过程" class="headerlink" title="1、主从复制过程"></a>1、主从复制过程</h4><p><strong>MySQl主从复制：</strong></p>
<ul>
<li><strong>原理</strong>：将主服务器的binlog日志复制到从服务器上执行一遍，达到主从数据的一致状态。</li>
<li><strong>过程</strong>：从库开启一个I&#x2F;O线程，向主库请求Binlog日志。主节点开启一个binlog dump线程，检查自己的二进制日志，并发送给从节点；从库将接收到的数据保存到中继日志（Relay log）中，另外开启一个SQL线程，把Relay中的操作在自身机器上执行一遍</li>
<li><strong>优点</strong>：<ul>
<li>作为备用数据库，并且不影响业务</li>
<li>可做读写分离，一个写库，一个或多个读库，在不同的服务器上，充分发挥服务器和数据库的性能，但要保证数据的一致性</li>
</ul>
</li>
</ul>
<p><strong>binlog记录格式：</strong>statement、row、mixed</p>
<p>​        基于语句statement的复制、基于行row的复制、基于语句和行（mix）的复制。其中基于row的复制方式更能保证主从库数据的一致性，但日志量较大，在设置时考虑磁盘的空间问题</p>
<h4 id="2、数据一致性问题"><a href="#2、数据一致性问题" class="headerlink" title="2、数据一致性问题"></a>2、数据一致性问题</h4><p>“主从复制有延时”，这个延时期间读取从库，可能读到不一致的数据。</p>
<p><strong>缓存记录写key法：</strong></p>
<p>​        在cache里记录哪些记录发生过的写请求，来路由读主库还是读从库</p>
<p><strong>异步复制：</strong></p>
<p>​        在异步复制中，主库执行完操作后，写入binlog日志后，就返回客户端，这一动作就结束了，并不会验证从库有没有收到，完不完整，所以这样可能<strong>会造成数据的不一致</strong>。</p>
<p><strong>半同步复制：</strong></p>
<p>​        当主库每提交一个事务后，不会立即返回，而是等待其中一个从库接收到Binlog并成功写入Relay-log中才返回客户端，通过一份在主库的Binlog，另一份在其中一个从库的Relay-log，可以保证了数据的安全性和一致性。</p>
<p><strong>全同步复制：</strong></p>
<p>​        指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的<strong>性能必然会收到严重的影响</strong>。</p>
<h4 id="3、集群架构"><a href="#3、集群架构" class="headerlink" title="3、集群架构"></a>3、集群架构</h4><p> <strong>Keepalived + VIP + MySQL 主从&#x2F;双主</strong></p>
<p>​        当写节点 Master db1 出现故障时，由 MMM Monitor 或 Keepalived 触发切换脚本，将 VIP 漂移到可用的 Master db2 上。当出现网络抖动或网络分区时，MMM Monitor 会误判，严重时来回切换写 VIP 导致集群双写，当数据复制延迟时，应用程序会出现数据错乱或数据冲突的故障。有效避免单点失效的架构就是采用共享存储，单点故障切换可以通过分布式哨兵系统监控。</p>
<img src="http://s0.lgstatic.com/i/image2/M01/89/48/CgoB5l12KuGALf-cAAGuHVmMkHs743.png" alt="img" style="zoom: 67%;" />

<p> <strong>架构选型：</strong>MMM 集群  -&gt; MHA集群 -&gt; MHA+Arksentinel。</p>
<img src="http://s0.lgstatic.com/i/image2/M01/89/68/CgotOV12KuKAe_HOAABl-wRATa0772.png" alt="img"  />



<h4 id="4、故障转移和恢复"><a href="#4、故障转移和恢复" class="headerlink" title="4、故障转移和恢复"></a>4、故障转移和恢复</h4><p><strong>转移方式及恢复方法</strong></p>
<pre><code>1. 虚拟IP或DNS服务 （Keepalived +VIP/DNS  和 MMM 架构）
</code></pre>
<p>​    问题：在虚拟 IP 运维过程中，刷新ARP过程中有时会出现一个 VIP 绑定在多台服务器同时提供连接的问题。这也是为什么要避免使用 Keepalived+VIP 和 MMM 架构的原因之一，因为它处理不了这类问题而导致集群多点写入。</p>
<pre><code>2. 提升备库为主库（MHA、QMHA）
</code></pre>
<p>​    尝试将原 Master 设置 read_only 为 on，避免集群多点写入。借助 binlog server 保留 Master 的 Binlog；当出现数据延迟时，再提升 Slave 为新 Master 之前需要进行数据补齐，否则会丢失数据。</p>
<div style="page-break-after: always;"></div>

<h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h5 id="如何进行分库分表"><a href="#如何进行分库分表" class="headerlink" title="如何进行分库分表"></a>如何进行分库分表</h5><blockquote>
<p><strong>分表</strong>用户id进行分表，每个表控制在300万数据。</p>
<p><strong>分库</strong>根据业务场景和地域分库，每个库并发不超过2000</p>
</blockquote>
<p><strong>Sharding-jdbc</strong> 这种 client 层方案的<strong>优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高</strong>，但是各个系统都需要<strong>耦合</strong> Sharding-jdbc 的依赖，升级比较麻烦</p>
<p><strong>Mycat</strong> 这种 proxy 层方案的<strong>缺点在于需要部署</strong>，自己运维一套中间件，运维成本高，但是<strong>好处在于对于各个项目是透明的</strong>，如果遇到升级之类的都是自己中间件那里搞就行了</p>
<p><strong>水平拆分</strong>：一个表放到多个库，分担高并发，加快查询速度</p>
<ul>
<li><strong>id</strong>保证业务在关联多张表时可以在同一库上操作</li>
<li><strong>range</strong>方便扩容和数据统计</li>
<li><strong>hash</strong>可以使得数据更加平均</li>
</ul>
<p><strong>垂直拆分</strong>：一个表拆成多个表，可以将一些冷数据拆分到冗余库中</p>
<blockquote>
<p>不是写瓶颈优先进行分表</p>
</blockquote>
<ul>
<li><p>分库数据间的数据无法再通过数据库直接查询了。会产生深分页的问题</p>
</li>
<li><p>分库越多，出现问题的可能性越大，维护成本也变得更高。</p>
</li>
<li><p>分库后无法保障跨库间事务，只能借助其他中间件实现最终一致性。</p>
</li>
</ul>
<p>分库首先需考虑满足业务最核心的场景：</p>
<p>1、订单数据按<strong>用户</strong>分库，可以<strong>提升用户的全流程体验</strong></p>
<p>2、超级客户导致<strong>数据倾斜</strong>可以使用最细粒度唯一标识进行hash拆分</p>
<p>3、按照最细粒度如订单号拆分以后，数据库就无法进行单库排重了</p>
<p>三个问题：</p>
<ul>
<li><p>富查询：采用分库分表之后，如何满足跨越分库的查询？<strong>使用ES</strong>的宽表</p>
<p>借助<strong>分库网关+分库业务</strong>虽然能够实现<strong>多维度查询的能力</strong>，但整体上性能不佳且对正常的写入请求有一定的影响。业界应对<strong>多维度实时查询</strong>的最常见方式便是借助 <strong>ElasticSearch</strong></p>
</li>
<li><p>数据倾斜：数据分库基础上再进行分表</p>
</li>
<li><p>分布式事务：跨多库的修改及多个微服务间的写操作导致的分布式事务问题？</p>
</li>
<li><p>深分页问题：按游标查询，或者叫每次查询都带上上一次查询经过排序后的最大 ID</p>
</li>
</ul>
<h4 id="如何将老数据进行迁移"><a href="#如何将老数据进行迁移" class="headerlink" title="如何将老数据进行迁移"></a>如何将老数据进行迁移</h4><p><strong>双写不中断迁移</strong></p>
<ul>
<li>线上系统里所有写库的地方，增删改操作，<strong>除了对老库增删改，都加上对新库的增删改</strong></li>
<li>系统部署以后，还需要跑程序读老库数据写新库，写的时候需要判断updateTime</li>
<li>循环执行，直至两个库的数据完全一致，最后重新部署分库分表的代码就行了</li>
</ul>
<h4 id="系统性能的评估及扩容"><a href="#系统性能的评估及扩容" class="headerlink" title="系统性能的评估及扩容"></a>系统性能的评估及扩容</h4><p>和家亲目前有1亿用户：场景 10万写并发，100万读并发，60亿数据量</p>
<p>设计时考虑极限情况，32库*32表~64个表，一共1000 ~ 2000张表</p>
<ul>
<li><p>支持<strong>3万</strong>的写并发，配合MQ实现每秒10万的写入速度</p>
</li>
<li><p>读写分离<strong>6万</strong>读并发，配合分布式缓存每秒100读并发</p>
</li>
<li><p>2000张表每张300万，可以最多写入60亿的数据</p>
</li>
<li><p>32张用户表，支撑亿级用户，后续最多也就扩容一次</p>
</li>
</ul>
<p><strong>动态扩容的步骤</strong></p>
<ol>
<li>推荐是 32 库 * 32 表，对于我们公司来说，可能几年都够了。</li>
<li>配置路由的规则，uid % 32 &#x3D; 库，uid &#x2F; 32 % 32 &#x3D; 表</li>
<li>扩容的时候，申请增加更多的数据库服务器，呈倍数扩容</li>
<li>由 DBA 负责将原先数据库服务器的库，迁移到新的数据库服务器上去</li>
<li>修改一下配置，重新发布系统，上线，原先的路由规则变都不用变</li>
<li>直接可以基于 n 倍的数据库服务器的资源，继续进行线上系统的提供服务。</li>
</ol>
<h4 id="如何生成自增的id主键"><a href="#如何生成自增的id主键" class="headerlink" title="如何生成自增的id主键"></a>如何生成自增的id主键</h4><ul>
<li>使用redis可以</li>
<li>并发不高可以单独起一个<strong>服务</strong>，生成自增id</li>
<li>设置数据库<strong>step</strong>自增步长可以支撑水平伸缩</li>
<li>UUID适合文件名、编号，但是<strong>不适合做主键</strong></li>
<li><strong>snowflake雪花算法</strong>，综合了<strong>41时间</strong>（ms）、<strong>10机器</strong>、<strong>12序列号</strong>（ms内自增）</li>
</ul>
<p>其中机器预留的10bit可以根据自己的业务场景配置</p>
<div style="page-break-after: always;"></div>

<h3 id="线上故障及优化"><a href="#线上故障及优化" class="headerlink" title="线上故障及优化"></a>线上故障及优化</h3><h4 id="更新失败-主从同步延时"><a href="#更新失败-主从同步延时" class="headerlink" title="更新失败 | 主从同步延时"></a>更新失败 | 主从同步延时</h4><p>以前线上确实处理过因为主从同步延时问题而导致的线上的 bug，属于小型的生产事故。</p>
<p>是这个么场景。有个同学是这样写代码逻辑的。先插入一条数据，再把它查出来，然后更新这条数据。在生产环境高峰期，写并发达到了 2000&#x2F;s，这个时候，主从复制延时大概是在小几十毫秒。线上会发现，每天总有那么一些数据，我们期望更新一些重要的数据状态，但在高峰期时候却没更新。用户跟客服反馈，而客服就会反馈给我们。</p>
<p>我们通过 MySQL 命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> slave <span class="built_in">status</span></span><br></pre></td></tr></table></figure>

<p>查看 <code>Seconds_Behind_Master</code> ，可以看到从库复制主库的数据落后了几 ms。</p>
<p>一般来说，如果主从延迟较为严重，有以下解决方案：</p>
<ul>
<li>分库，拆分为多个主库，每个主库的写并发就减少了几倍，主从延迟可以忽略不计。</li>
<li>重写代码，写代码的同学，要慎重，插入数据时立马查询可能查不到。</li>
<li>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询<strong>设置直连主库</strong>或者<strong>延迟查询</strong>。主从复制延迟一般不会超过50ms</li>
</ul>
<h4 id="应用崩溃-分库分表优化"><a href="#应用崩溃-分库分表优化" class="headerlink" title="应用崩溃 | 分库分表优化"></a><strong>应用崩溃 | 分库分表优化</strong></h4><p>​    我们有一个线上通行记录的表，由于数据量过大，进行了分库分表，当时分库分表初期经常产生一些问题。典型的就是通行记录查询中使用了深分页，通过一些工具如MAT、Jstack追踪到是由于sharding-jdbc内部引用造成的。</p>
<p>​    通行记录数据被存放在两个库中。如果没有提供<strong>切分键</strong>，查询语句就会被分发到所有的数据库中，比如查询语句是 limit 10、offset 1000，最终结果只需要返回 10 条记录，但是数据库中间件要完成这种计算，则需要 (1000+10)*2&#x3D;2020 条记录来完成这个计算过程。如果 offset 的值过大，使用的内存就会暴涨。虽然 sharding-jdbc 使用归并算法进行了一些优化，但在实际场景中，深分页仍然引起了<strong>内存和性能</strong>问题。</p>
<p>​    这种在中间节点进行<strong>归并聚合</strong>的操作，在分布式框架中非常常见。比如在 ElasticSearch 中，就存在相似的数据获取逻辑，<strong>不加限制的深分页</strong>，同样会造成 ES 的内存问题。</p>
<p><strong>业界解决方案：</strong></p>
<p><strong>方法一：全局视野法</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y</p>
<p>（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录</p>
<p>这种方法随着翻页的进行，性能越来越低。</p>
<p><strong>方法二：业务折衷法-禁止跳页查询</strong></p>
<p>（1）用正常的方法取得第一页数据，并得到第一页记录的time_max</p>
<p>（2）每次翻页，将order by time offset X limit Y，改写成order by time where time&gt;$time_max limit Y</p>
<p>以保证每次只返回一页数据，性能为常量。</p>
<p><strong>方法三：业务折衷法-允许模糊数据</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset X&#x2F;N limit Y&#x2F;N</p>
<p><strong>方法四：二次查询法</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset X&#x2F;N limit Y</p>
<p>（2）找到最小值time_min</p>
<p>（3）between二次查询，order by time between $time_min and $time_i_max</p>
<p>（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset</p>
<p>（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y</p>
<h4 id="查询异常-SQL-调优"><a href="#查询异常-SQL-调优" class="headerlink" title="查询异常 | SQL 调优"></a>查询异常 | SQL 调优</h4><p>分库分表前，有一段用用户名来查询某个用户的 SQL 语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> user where name = <span class="string">&quot;xxx&quot;</span> <span class="keyword">and</span> community=<span class="string">&quot;other&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>为了达到动态拼接的效果，这句 SQL 语句被一位同事进行了如下修改。他的本意是，当 name 或者 community 传入为空的时候，动态去掉这些查询条件。这种写法，在 MyBaits 的配置文件中，也非常常见。大多数情况下，这种写法是没有问题的，因为结果集合是可以控制的。但随着系统的运行，用户表的记录越来越多，当传入的 name 和 community 全部为空时，悲剧的事情发生了:</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>数据库中的所有记录，都会被查询出来，载入到 JVM 的内存中。由于数据库记录实在太多，直接把内存给撑爆了。由于这种原因引起的内存溢出，发生的频率非常高，比如导入Excel文件时。</p>
<p>通常的解决方式是<strong>强行加入分页功能</strong>，或者对一些<strong>必填的参数进行校验</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobovqjvijj30zd0lctbp.jpg" alt="img"></p>
<p><strong>Controller 层</strong></p>
<p>现在很多项目都采用前后端分离架构，所以 Controller 层的方法，一般使用 @ResponseBody 注解，把查询的结果，解析成 JSON 数据返回。这在数据集非常大的情况下，会占用很多内存资源。假如结果集在解析成 JSON 之前，占用的内存是 10MB，那么在解析过程中，有可能会使用 20M 或者更多的内存</p>
<p>因此，保持结果集的精简，是非常有必要的，这也是 DTO（Data Transfer Object）存在的必要。互联网环境不怕小结果集的高并发请求，却非常恐惧大结果集的耗时请求，这是其中一方面的原因。</p>
<p><strong>Service 层</strong></p>
<p>Service 层用于处理具体的业务，更加贴合业务的功能需求。一个 Service，可能会被多个 Controller 层所使用，也可能会使用多个 dao 结构的查询结果进行计算、拼装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getUserSize</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = dao.getAllUser();</span><br><span class="line">        <span class="type">return</span> <span class="variable">null</span> <span class="operator">=</span>= users ? <span class="number">0</span> : users.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码review中发现了定时炸弹，这种在数据量达到一定程度后，才会暴露问题。</p>
<p><strong>ORM 层</strong></p>
<p>比如使用Mybatis时，有一个批量导入服务，在 MyBatis 执行批量插入的时候，竟然产生了内存溢出，按道理这种插入操作是不会引起额外内存占用的，最后通过源码追踪到了问题。</p>
<p>这是因为 MyBatis 循环处理 batch 的时候，操作对象是数组，而我们在接口定义的时候，使用的是 List；当传入一个非常大的 List 时，它需要调用 List 的 toArray 方法将列表转换成数组（浅拷贝）；在最后的拼装阶段，又使用了 StringBuilder 来拼接最终的 SQL，所以实际使用的内存要比 List 多很多。</p>
<p>事实证明，不论是插入操作还是查询动作，只要涉及的数据集非常大，就容易出现问题。由于项目中众多框架的引入，想要分析这些具体的内存占用，就变得非常困难。所以保持小批量操作和结果集的干净，是一个非常好的习惯。</p>
<h1 id="五、Redis篇"><a href="#五、Redis篇" class="headerlink" title="五、Redis篇"></a><strong>五、Redis篇</strong></h1><h3 id="WhyRedis"><a href="#WhyRedis" class="headerlink" title="WhyRedis"></a>WhyRedis</h3><p>​        速度快，完全基于内存，使用C语言实现，网络层使用epoll解决高并发问题，单线程模型避免了不必要的上下文切换及竞争条件；</p>
<table>
<thead>
<tr>
<th></th>
<th>GuavaCache</th>
<th>Tair</th>
<th>EVCache</th>
<th>Aerospike</th>
</tr>
</thead>
<tbody><tr>
<td>类别</td>
<td>本地JVM缓存</td>
<td>分布式缓存</td>
<td>分布式缓存</td>
<td>分布式nosql数据库</td>
</tr>
<tr>
<td>应用</td>
<td>本地缓存</td>
<td>淘宝</td>
<td>Netflix、AWS</td>
<td>广告</td>
</tr>
<tr>
<td>性能</td>
<td>非常高</td>
<td>较高</td>
<td>很高</td>
<td>较高</td>
</tr>
<tr>
<td>持久化</td>
<td>无</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>集群</td>
<td>无</td>
<td>灵活配置</td>
<td>有</td>
<td>自动扩容</td>
</tr>
</tbody></table>
<p>​        与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p>
<h4 id="1、简单高效"><a href="#1、简单高效" class="headerlink" title="1、简单高效"></a>1、简单高效</h4><p>​        1）完全基于内存，绝大部分请求是纯粹的内存操作。数据存在内存中，类似于 HashMap，查找和操作的时间复杂度都是O(1)；</p>
<p>​        2）数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p>
<p>​        3）采用单线程，避免了多线程不必要的上下文切换和竞争条件，不存在加锁释放锁操作，减少了因为锁竞争导致的性能消耗；（6.0以后多线程）</p>
<p>​        4）使用EPOLL多路 I&#x2F;O 复用模型，非阻塞 IO；</p>
<p>​        5）使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p>
<h4 id="2、Memcache"><a href="#2、Memcache" class="headerlink" title="2、Memcache"></a>2、Memcache</h4><table>
<thead>
<tr>
<th>redis</th>
<th>Memcached</th>
</tr>
</thead>
<tbody><tr>
<td>内存高速数据库</td>
<td>高性能分布式内存缓存数据库</td>
</tr>
<tr>
<td>支持hash、list、set、zset、string结构</td>
<td>只支持key-value结构</td>
</tr>
<tr>
<td>将大部分数据放到内存</td>
<td>全部数据放到内存中</td>
</tr>
<tr>
<td>支持持久化、主从复制备份</td>
<td>不支持数据持久化及数据备份</td>
</tr>
<tr>
<td>数据丢失可通过AOF恢复</td>
<td>挂掉后，数据不可恢复</td>
</tr>
<tr>
<td>单线程（2~4万TPS）</td>
<td>多线程（20-40万TPS）</td>
</tr>
</tbody></table>
<p><strong>使用场景：</strong></p>
<p>​    1、如果有持久方面的需求或对数据类型和处理有要求的应该选择redis。<br>​    2、如果简单的key&#x2F;value 存储应该选择memcached。    </p>
<h4 id="3、Tair"><a href="#3、Tair" class="headerlink" title="3、Tair"></a>3、Tair</h4><p>​    Tair(Taobao Pair)是淘宝开发的分布式Key-Value存储引擎，既可以做缓存也可以做数据源（三种引擎切换）</p>
<ul>
<li>MDB（Memcache）属于内存型产品,支持kv和类hashMap结构,性能最优</li>
<li>RDB（Redis）支持List.Set.Zset等复杂的数据结构,性能次之,可提供缓存和持久化存储两种模式</li>
<li>LDB（levelDB）属于持久化产品,支持kv和类hashmap结构,性能较前两者稍低,但持久化可靠性最高</li>
</ul>
<p><strong>分布式缓存</strong></p>
<p>大访问少量临时数据的存储（kb左右）</p>
<p>用于缓存，降低对后端数据库的访问压力</p>
<p>session场景</p>
<p>高速访问某些数据结构的应用和计算（rdb）</p>
<p><strong>数据源存储</strong></p>
<p>快速读取数据（fdb）</p>
<p>持续大数据量的存入读取（ldb），交易快照</p>
<p>高频度的更新读取（ldb），库存</p>
<p><strong>痛点</strong>：redis集群中，想借用缓存资源必须得指明redis服务器地址去要。这就增加了程序的维护复杂度。因为redis服务器很可能是需要频繁变动的。所以人家淘宝就想啊，为什么不能像操作分布式数据库或者hadoop那样。增加一个中央节点，让他去代理所有事情。在tair中程序只要跟tair中心节点交互就OK了。同时tair里还有配置服务器概念。又免去了像操作hadoop那样，还得每台hadoop一套一模一样配置文件。改配置文件得整个集群都跟着改。</p>
<h4 id="4、Guava"><a href="#4、Guava" class="headerlink" title="4、Guava"></a>4、Guava</h4><p>​        分布式缓存一致性更好一点，用于集群环境下多节点使用同一份缓存的情况；有网络IO，吞吐率与缓存的数据大小有较大关系；</p>
<p>​        本地缓存非常高效，本地缓存会占用堆内存，影响垃圾回收、影响系统性能。</p>
<p><strong>本地缓存设计：</strong></p>
<p>​        以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p>
<p><strong>解决缓存过期：</strong></p>
<p>​    1、将缓存过期时间调为永久</p>
<p>​    2、将缓存失效时间分散开，不要将缓存时间长度都设置成一样；比如我们可以在原有的失效时间基础上增加一个随机值，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<p><strong>解决内存溢出：</strong></p>
<p>​    <strong>第一步</strong>，修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p>
<p>　<strong>第二步</strong>，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</p>
<p>　<strong>第三步</strong>，对代码进行走查和分析，找出可能发生内存溢出的位置。</p>
<p><strong>Google Guava Cache</strong> </p>
<p><strong>自己设计本地缓存痛点：</strong></p>
<ul>
<li>不能按照一定的规则淘汰数据，如 LRU，LFU，FIFO 等。</li>
<li>清除数据时的回调通知</li>
<li>并发处理能力差，针对并发可以使用CurrentHashMap，但缓存的其他功能需要自行实现</li>
<li>缓存过期处理，缓存数据加载刷新等都需要手工实现</li>
</ul>
<p><strong>Guava Cache 的场景：</strong></p>
<ul>
<li>对性能有非常高的要求</li>
<li>不经常变化，占用内存不大</li>
<li>有访问整个集合的需求</li>
<li>数据允许不实时一致</li>
</ul>
<p><strong>Guava Cache 的优势</strong>：</p>
<ul>
<li>缓存过期和淘汰机制</li>
</ul>
<p>在GuavaCache中可以设置Key的过期时间，包括访问过期和创建过期。GuavaCache在缓存容量达到指定大小时，采用LRU的方式，将不常使用的键值从Cache中删除</p>
<ul>
<li>并发处理能力</li>
</ul>
<p>GuavaCache类似CurrentHashMap，是线程安全的。提供了设置并发级别的api，使得缓存支持并发的写入和读取，采用分离锁机制，分离锁能够减小锁力度，提升并发能力，分离锁是分拆锁定，把一个集合看分成若干partition, 每个partiton一把锁。更新锁定</p>
<ul>
<li>防止缓存击穿</li>
</ul>
<p>一般情况下，在缓存中查询某个key，如果不存在，则查源数据，并回填缓存。（Cache Aside Pattern）在高并发下会出现，多次查源并重复回填缓存，可能会造成源的宕机（DB），性能下降 GuavaCache可以在CacheLoader的load方法中加以控制，对同一个key，只让一个请求去读源并回填缓存，其他请求阻塞等待。（相当于集成数据源，方便用户使用）</p>
<ul>
<li>监控缓存加载&#x2F;命中情况</li>
</ul>
<p>统计</p>
<p><strong>问题：</strong></p>
<p>​    OOM-&gt;设置过期时间、使用弱引用、配置过期策略</p>
<h4 id="5、EVCache"><a href="#5、EVCache" class="headerlink" title="5、EVCache"></a>5、EVCache</h4><p>EVCache是一个Netflflix（网飞）公司开源、快速的分布式缓存，是基于Memcached的内存存储实现的，用以构建超大容量、高性能、低延时、跨区域的全球可用的缓存数据层。</p>
<p>E：Ephemeral：数据存储是短暂的，有自身的存活时间</p>
<p>V：Volatile：数据可以在任何时候消失</p>
<p>EVCache典型地适合对强一致性没有必须要求的场合</p>
<p>典型用例：Netflflix向用户推荐用户感兴趣的电影</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmapdnh0yaj30ku0aigmc.jpg" alt="image-20210103185340548" style="zoom:50%;" />

<p><strong>EVCache集群</strong>在峰值每秒可以处理<strong>200kb</strong>的请求，</p>
<p>Netflflix生产系统中部署的EVCache经常要处理超过<strong>每秒3000万个</strong>请求，存储数十亿个对象，</p>
<p>跨数千台memcached服务器。整个EVCache集群<strong>每天处理近2万亿个</strong>请求。</p>
<p>EVCache集群响应平均延时大约是1-5毫秒，最多不会超过20毫秒。</p>
<p>EVCache集群的缓存命中率在99%左右。</p>
<p><strong>典型部署</strong></p>
<p>EVCache 是线性扩展的，可以在一分钟之内完成扩容，在几分钟之内完成负载均衡和缓存预热。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmapg99q8lj30ix0f3jrw.jpg" alt="image-20210103185611516" style="zoom:50%;" />

<p>1、集群启动时，EVCache向服务注册中心（Zookeeper、Eureka）注册各个实例</p>
<p>2、在web应用启动时，查询命名服务中的EVCache服务器列表，并建立连接。</p>
<p>3、客户端通过key使用一致性hash算法，将数据分片到集群上。</p>
<h4 id="6、ETCD"><a href="#6、ETCD" class="headerlink" title="6、ETCD"></a>6、ETCD</h4><p>​    <strong>和Zookeeper一样，CP模型追求数据一致性，</strong>越来越多的系统开始用它保存关键数据。比如，秒杀系统经常用它<strong>保存各节点信</strong>息，以便控制消费 MQ 的服务数量。还有些业务系统的<strong>配置数据</strong>，也会通过 etcd 实时同步给业务系统的各节点，比如，秒杀管理后台会使用 etcd 将秒杀活动的<strong>配置数据实时同步给秒杀 API 服务各节点</strong>。</p>
<p>![image-20210418174251742](&#x2F;Users&#x2F;suhongliu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210418174251742.png)</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis底层"><a href="#Redis底层" class="headerlink" title="Redis底层"></a>Redis底层</h3><h4 id="1、redis数据类型"><a href="#1、redis数据类型" class="headerlink" title="1、redis数据类型"></a>1、redis数据类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>底层</th>
<th>应用场景</th>
<th>编码类型</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>SDS数组</td>
<td>帖子、评论、热点数据、输入缓冲</td>
<td>RAW &lt;&lt; EMBSTR &lt;&lt; INT</td>
</tr>
<tr>
<td>List</td>
<td>QuickList</td>
<td>评论列表、商品列表、发布与订阅、慢查询、监视器</td>
<td>LINKEDLIST &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Set</td>
<td>intSet</td>
<td>适合交集、并集、查集操作，例如朋友关系</td>
<td>HT &lt;&lt; INSET</td>
</tr>
<tr>
<td>Zset</td>
<td>跳跃表</td>
<td>去重后排序，适合排名场景</td>
<td>SKIPLIST &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Hash</td>
<td>哈希</td>
<td>结构化数据，比如存储对象</td>
<td>HT &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Stream</td>
<td>紧凑列表</td>
<td>消息队列</td>
<td></td>
</tr>
</tbody></table>
<h4 id="2、相关API"><a href="#2、相关API" class="headerlink" title="2、相关API"></a><strong>2、相关API</strong></h4><blockquote>
<p><a href="http://redisdoc.com/">http://redisdoc.com</a></p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>SET</td>
<td>SETNX</td>
<td>SETEX</td>
<td>GET</td>
<td>GETSET</td>
<td>INCR</td>
<td>DECR</td>
<td>MSET</td>
<td>MGET</td>
</tr>
<tr>
<td>Hash</td>
<td>HSET</td>
<td>HSETNX</td>
<td>HGET</td>
<td>HDEL</td>
<td>HLEN</td>
<td>HMSET</td>
<td>HMGET</td>
<td>HKEYS</td>
<td>HGETALL</td>
</tr>
<tr>
<td>LIST</td>
<td>LPUSH</td>
<td>LPOP</td>
<td>RPUSH</td>
<td>RPOP</td>
<td>LINDEX</td>
<td>LREM</td>
<td>LRANGE</td>
<td>LLEN</td>
<td>RPOPLPUSH</td>
</tr>
<tr>
<td>ZSET</td>
<td>ZADD</td>
<td>ZREM</td>
<td>ZSCORE</td>
<td>ZCARD</td>
<td>ZRANGE</td>
<td>ZRANK</td>
<td>ZREVRANK</td>
<td></td>
<td>ZREVRANGE</td>
</tr>
<tr>
<td>SET</td>
<td>SADD</td>
<td>SREM</td>
<td>SISMEMBER</td>
<td>SCARD</td>
<td>SINTER</td>
<td>SUNION</td>
<td>SDIFF</td>
<td>SPOP</td>
<td>SMEMBERS</td>
</tr>
<tr>
<td>事务</td>
<td>MULTI</td>
<td>EXEC</td>
<td>DISCARD</td>
<td>WATCH</td>
<td>UNWATCH</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="3、redis底层结构"><a href="#3、redis底层结构" class="headerlink" title="3、redis底层结构"></a>3、redis底层结构</h4><p><strong>SDS数组结构</strong>，用于存储字符串和整型数据及输入缓冲。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">struct sdshdr&#123; </span><br><span class="line">  <span class="type">int</span> len;<span class="comment">//记录buf数组中已使用字节的数量 </span></span><br><span class="line">  <span class="type">int</span> free; <span class="comment">//记录 buf 数组中未使用字节的数量 </span></span><br><span class="line">  <span class="type">char</span> buf[];<span class="comment">//字符数组，用于保存字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>跳跃表</strong>：将有序链表中的部分节点分层，每一层都是一个有序链表。</p>
<p>​    1、可以快速查找到需要的节点 O(logn) ，额外存储了一倍的空间</p>
<p>​    2、可以在O(1)的时间复杂度下，快速获得跳跃表的头节点、尾结点、长度和高度。            </p>
<p><strong>字典dict:</strong> 又称散列表(hash)，是用来存储键值对的一种数据结构。 </p>
<p>​    Redis整个数据库是用字典来存储的(K-V结构) —Hash+数组+链表</p>
<p>​    Redis字典实现包括:**字典(dict)、Hash表(dictht)、Hash表节点(dictEntry)**。</p>
<p>​    字典达到存储上限(阈值 0.75)，需要rehash(扩容)</p>
<p>​    1、初次申请默认容量为4个dictEntry，非初次申请为当前hash表容量的一倍。</p>
<p>​    2、rehashidx&#x3D;0表示要进行rehash操作。</p>
<p>​    3、新增加的数据在新的hash表h[1] 、修改、删除、查询在老hash表h[0]</p>
<p>​    4、将老的hash表h[0]的数据重新计算索引值后全部迁移到新的hash表h[1]中，这个过程称为 rehash。</p>
<p>​    <strong>渐进式rehash</strong></p>
<pre><code> 由于当数据量巨大时rehash的过程是非常缓慢的，所以需要进行优化。 可根据服务器空闲程度批量rehash部分节点
</code></pre>
<p><strong>压缩列表zipList</strong></p>
<p>​    压缩列表(ziplist)是由一系列特殊编码的连续内存块组成的顺序型数据结构，节省内容</p>
<p>​    <strong>sorted-set和hash元素个数少</strong>且是小整数或短字符串(直接使用) </p>
<p>​    list用快速链表(quicklist)数据结构存储，而<strong>快速链表是双向列表与压缩列表</strong>的组合。(间接使用)</p>
<p><strong>整数集合intSet</strong></p>
<p>​    整数集合(intset)是一个有序的(整数升序)、存储整数的连续存储结构。 </p>
<p>​    当Redis集合类型的元素都是整数并且都处在64位有符号整数范围内(2^64)，使用该结构体存储。</p>
<p><strong>快速列表quickList</strong></p>
<p>​    快速列表(quicklist)是Redis底层重要的数据结构。是Redis3.2列表的底层实现。</p>
<p>​    (在Redis3.2之前，Redis采 用双向链表(adlist)和压缩列表(ziplist)实现。)</p>
<p><strong>Redis Stream</strong>的底层主要使用了listpack(紧凑列表)和Rax树(基数树)。</p>
<p>​    <strong>listpack</strong>表示一个字符串列表的序列化，listpack可用于存储字符串或整数。用于存储stream的消息内 容。</p>
<p>​    <strong>Rax树</strong>是一个有序字典树 (基数树 Radix Tree)，按照 key 的字典序排列，支持快速地定位、插入和删除操 作。</p>
<h4 id="4、Zset底层实现"><a href="#4、Zset底层实现" class="headerlink" title="4、Zset底层实现"></a>4、Zset底层实现</h4><p>​        跳表(skip List)是一种随机化的数据结构，基于并联的链表，实现简单，插入、删除、查找的复杂度均为O(logN)。简单说来跳表也是链表的一种，只不过它在链表的基础上增加了跳跃功能，正是这个跳跃的功能，使得在查找元素时，跳表能够提供O(logN)的时间复杂度</p>
<p>​        Zset<strong>数据量少的时候使用压缩链表ziplist</strong>实现，有序集合使用紧挨在一起的压缩列表节点来保存，第一个节点保存member，第二个保存score。ziplist内的集合元素按score从小到大排序，score较小的排在表头位置。 <strong>数据量大的时候使用跳跃列表skiplist和哈希表hash_map</strong>结合实现，查找删除插入的时间复杂度都是O(longN)</p>
<p>​        Redis使用跳表而不使用红黑树，是因为跳表的索引结构序列化和反序列化更加快速，方便持久化。</p>
<p><strong>搜索</strong></p>
<p>​        跳跃表按 score 从小到大保存所有集合元素，查找时间复杂度为平均 <em>O(logN)，最坏 O(N) 。</em></p>
<p><strong>插入</strong></p>
<p>  选用链表作为底层结构支持，为了高效地动态增删。因为跳表底层的单链表是有序的，为了维护这种有序性，在插入前需要遍历链表，找到该插入的位置，单链表遍历查找的时间复杂度是O(n)，同理可得，跳表的遍历也是需要遍历索引数，所以是O(logn)。</p>
<p><strong>删除</strong></p>
<p>  如果该节点还在索引中，删除时不仅要删除单链表中的节点，还要删除索引中的节点；单链表在知道删除的节点是谁时，时间复杂度为O(1)，但针对单链表来说，删除时都需要拿到前驱节点O(logN)才可改变引用关系从而删除目标节点。</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis可用性"><a href="#Redis可用性" class="headerlink" title="Redis可用性"></a><strong>Redis可用性</strong></h3><h4 id="1、redis持久化"><a href="#1、redis持久化" class="headerlink" title="1、redis持久化"></a>1、redis持久化</h4><p>持久化就是把内存中的数据持久化到本地磁盘，防止服务器宕机了内存数据丢失</p>
<p>Redis 提供两种持久化机制 <strong>RDB（默认）</strong> 和 <strong>AOF 机制</strong>，Redis4.0以后采用混合持久化，用 AOF 来<strong>保证数据不丢失</strong>，作为数据恢复的第一选择; 用 RDB 来做不同程度的<strong>冷备</strong></p>
<p><strong>RDB：</strong>是Redis DataBase缩写快照</p>
<p>​        RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p>
<p>​    <strong>优点：</strong></p>
<p>​    1）只有一个文件 dump.rdb，方便持久化；</p>
<p>​    2）容灾性好，一个文件可以保存到安全的磁盘。</p>
<p>​    3）性能最大化，fork 子进程来进行持久化写操作，让主进程继续处理命令，只存在毫秒级不响应请求。</p>
<p>​    4）相对于数据集大时，比 AOF 的启动效率更高。</p>
<p>​    <strong>缺点：</strong></p>
<p>​    数据安全性低，RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。</p>
<p><strong>AOF：持久化</strong></p>
<p>​        AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p>
<p>​    <strong>优点：</strong></p>
<p>​    1）数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</p>
<p>​    2）通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</p>
<p><strong>缺点：</strong></p>
<p>​    1）AOF 文件比 RDB 文件大，且恢复速度慢。</p>
<p>​    2）数据集大的时候，比 rdb 启动效率低。</p>
<h4 id="2、redis事务"><a href="#2、redis事务" class="headerlink" title="2、redis事务"></a>2、redis事务</h4><p>​        事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p>
<p><strong>Redis事务的概念</strong></p>
<p>​        Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p>
<p>Redis的事务总是具有ACID中的<strong>一致性和隔离性</strong>，其他特性是不支持的。当服务器运行在AOF持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</p>
<p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的</p>
<p><strong>事务命令：</strong></p>
<p><strong>MULTI：</strong>用于开启一个事务，它总是返回OK。MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。</p>
<p><strong>EXEC：</strong>执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 nil 。</p>
<p><strong>WATCH ：</strong>是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。（<strong>秒杀场景</strong>）</p>
<p><strong>DISCARD：</strong>调用该命令，客户端可以清空事务队列，并放弃执行事务，且客户端会从事务状态中退出。</p>
<p><strong>UNWATCH</strong>：命令可以取消watch对所有key的监控。</p>
<h4 id="3、redis失效策略"><a href="#3、redis失效策略" class="headerlink" title="3、redis失效策略"></a>3、redis失效策略</h4><p><strong>内存淘汰策略</strong></p>
<p>1）全局的键空间选择性移除</p>
<p>​    <strong>noeviction</strong>：当内存不足以容纳新写入数据时，新写入操作会报错。（字典库常用）</p>
<p>​    <strong>allkeys-lru</strong>：在键空间中，移除最近最少使用的key。（缓存常用）</p>
<p>​    <strong>allkeys-random</strong>：在键空间中，随机移除某个key。</p>
<p>2）设置过期时间的键空间选择性移除</p>
<p>​    <strong>volatile-lru</strong>：在设置了过期时间的键空间中，移除最近最少使用的key。</p>
<p>​    <strong>volatile-random</strong>：在设置了过期时间的键空间中，随机移除某个key。</p>
<p>​    <strong>volatile-ttl</strong>：在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p>
<p><strong>缓存失效策略</strong></p>
<p>​    <strong>定时清除：</strong>针对每个设置过期时间的key都创建指定定时器</p>
<p>​    <strong>惰性清除：</strong>访问时判断，对内存不友好</p>
<p>​    <strong>定时扫描清除：</strong>定时100ms随机20个检查过期的字典，若存在25%以上则继续循环删除。</p>
<h4 id="4、redis读写模式"><a href="#4、redis读写模式" class="headerlink" title="4、redis读写模式"></a>4、redis读写模式</h4><p>​    <strong>CacheAside旁路缓存</strong></p>
<p>写请求更新数据库后删除缓存数据。读请求不命中查询数据库，查询完成写入缓存</p>
<img src="https://img-blog.csdnimg.cn/20200806194316539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 15%;" />

<img src="https://img-blog.csdnimg.cn/20200806194300826.png" style="zoom: 15%;" />

<p>​    业务端处理所有数据访问细节，同时利用 <strong>Lazy 计算</strong>的思想，更新 DB 后，直接删除 cache 并通过 DB 更新，确保数据以 DB 结果为准，则可以大幅降低 cache 和 DB 中数据不一致的概率</p>
<p>​    如果没有专门的存储服务，同时是对<strong>数据一致性要求比较高的业务，或者是缓存数据更新比较复杂的业务</strong>，适合使用 Cache Aside 模式。如微博发展初期，不少业务采用这种模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟双删，用以保证最终一致性,防止小概率旧数据读请求在第一次删除后更新数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String key,Object data)</span>&#123;</span><br><span class="line">	redis.delKey(key);</span><br><span class="line">	db.updateData(data);</span><br><span class="line">	Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">	redis.delKey(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>高并发下保证绝对的一致，先删缓存再更新数据，需要用到<strong>内存队列做异步串行化</strong>。非高并发场景，先更新数据再删除缓存，<strong>延迟双删</strong>策略基本满足了</p>
<ul>
<li>先更新db后删除redis：删除redis失败则出现问题</li>
<li>先删redis后更新db：删除redis瞬间，旧数据被回填redis</li>
<li>先删redis后更新db休眠后删redis：同第二点，休眠后删除redis 可能宕机</li>
<li>java内部jvm队列：不适用分布式场景且降低并发</li>
</ul>
<p>​    <strong>Read&#x2F;Write Though</strong>（读写穿透）</p>
<p>​        <strong>先查询</strong>缓存中数据是否存在,如果存在则直接返回,如果<strong>不存在</strong>,则由<strong>缓存组件负责从数据库中同步加载数据.</strong></p>
<p>​    <img src="https://img-blog.csdnimg.cn/20200806194334623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /></p>
<p>​    先查询要<strong>写入的数据在缓存中</strong>是否已经存在,如果已经存在,则<strong>更新缓存中的数据</strong>，并且由<strong>缓存组件同步更新</strong>到数据库中。</p>
<p>​    <img src="https://img-blog.csdnimg.cn/20200806194346642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%" /></p>
<p>​    用户<strong>读操作</strong>较多.相较于Cache aside而言更适合缓存一致的场景。使用简单屏蔽了<strong>底层数据库的操作</strong>,只是操作缓存.</p>
<p><strong>场景：</strong></p>
<p>微博 Feed 的 Outbox Vector（即用户最新微博列表）就采用这种模式。一些粉丝较少且不活跃的用户发表微博后，Vector 服务会首先查询 Vector Cache，如果 cache 中没有该用户的 Outbox 记录，则不写该用户的 cache 数据，直接更新 DB 后就返回，只有 cache 中存在才会通过 CAS 指令进行更新。</p>
<p>​    </p>
<p><strong>Write Behind Caching（异步缓存写入）</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gorlsg74i6j31950e3dhs.jpg" alt="img" style="zoom:35%;" />

<p>比如对一些计数业务，一条 <strong>Feed 被点赞</strong> 1万 次，如果更新 1万 次 DB 代价很大，而合并成一次请求直接加 1万，则是一个非常轻量的操作。但这种模型有个显著的缺点，即数据的一致性变差，甚至在一些极端场景下可能会丢失数据。</p>
<h4 id="5、多级缓存"><a href="#5、多级缓存" class="headerlink" title="5、多级缓存"></a>5、多级缓存</h4><p><strong>浏览器本地内存缓存：</strong>专题活动，一旦上线，在活动期间是不会随意变更的。</p>
<p><strong>浏览器本地磁盘缓存：</strong>Logo缓存，大图片懒加载</p>
<p><strong>服务端本地内存缓存：</strong>由于没有持久化，重启时必定会被穿透</p>
<p><strong>服务端网络内存缓存</strong>：Redis等，针对穿透的情况下可以继续分层，必须保证数据库不被压垮</p>
<p><strong>为什么不是使用服务器本地磁盘做缓存？</strong></p>
<p>​    当系统处理大量磁盘 IO 操作的时候，由于 CPU 和内存的速度远高于磁盘，可能导致 CPU 耗费太多时间等待磁盘返回处理的结果。对于这部分 CPU 在 IO 上的开销，我们称为 <strong>iowait</strong></p>
<div style="page-break-after: always;"></div>

<h3 id="Redis七大经典问题"><a href="#Redis七大经典问题" class="headerlink" title="Redis七大经典问题"></a>Redis七大经典问题</h3><h4 id="1、缓存雪崩"><a href="#1、缓存雪崩" class="headerlink" title="1、缓存雪崩"></a>1、缓存雪崩</h4><p>​        指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>​    <strong>解决方案：</strong></p>
<ul>
<li><p><strong>Redis 高可用</strong>，主从+哨兵，Redis cluster，避免全盘崩溃</p>
</li>
<li><p>本地 ehcache 缓存 + hystrix <strong>限流&amp;降级</strong>，避免 MySQL 被打死</p>
</li>
<li><p>缓存数据的<strong>过期时间设置随机</strong>，防止同一时间大量数据过期现象发生。</p>
</li>
<li><p><strong>逻辑上永不过期</strong>给每一个缓存数据增加相应的<strong>缓存标记</strong>，缓存标记失效则更新数据缓存</p>
</li>
<li><p><strong>多级缓存</strong>，失效时通过二级更新一级，由第三方插件更新二级缓存。</p>
</li>
</ul>
<h4 id="2、缓存穿透"><a href="#2、缓存穿透" class="headerlink" title="2、缓存穿透"></a><strong>2、缓存穿透</strong></h4><p>​        <a href="https://blog.csdn.net/lin777lin/article/details/105666839">https://blog.csdn.net/lin777lin/article/details/105666839</a></p>
<p>​        缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>​    <strong>解决方案：</strong></p>
<p>​    1）<strong>接口层增加校验</strong>，如用户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；</p>
<p>​    2）从缓存取不到的数据，在数据库中也没有取到，这时也可以将<strong>key-value对写为key-null</strong>，缓存有效时间可以设置短点，如30秒。这样可以防止攻击用户反复用同一个id暴力攻击；</p>
<p>​    3）采用<strong>布隆过滤器</strong>，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。（宁可错杀一千不可放过一人）</p>
<h4 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a><strong>3、缓存击穿</strong></h4><p>​        这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库</p>
<p>​    <strong>解决方案：</strong></p>
<p>​    1）设置<strong>热点数据永远不过期</strong>，异步线程处理。</p>
<p>​    2）加<strong>写回操作加互斥锁</strong>，查询失败默认值快速返回。</p>
<p>​    3）缓存预热</p>
<p>​        系统上线后，将相关<strong>可预期（例如排行榜）</strong>热点数据直接加载到缓存。</p>
<p>​        写一个缓存刷新页面，手动操作热点数据<strong>（例如广告推广）</strong>上下线。</p>
<h4 id="4、数据不一致"><a href="#4、数据不一致" class="headerlink" title="4、数据不一致"></a>4、数据不一致</h4><p>​    在缓存机器的带宽被打满，或者机房网络出现波动时，缓存更新失败，新数据没有写入缓存，就会导致缓存和 DB 的数据不一致。缓存 rehash 时，某个缓存机器反复异常，多次上下线，更新请求多次 rehash。这样，一份数据存在多个节点，且每次 rehash 只更新某个节点，导致一些缓存节点产生脏数据。</p>
<ul>
<li><p>Cache 更新失败后，可以进行重试，则将重试失败的 key 写入mq，待缓存访问恢复后，将这些 key 从缓存删除。这些 key 在再次被查询时，重新从 DB 加载，从而保证数据的一致性</p>
</li>
<li><p>缓存时间适当调短，让缓存数据及早过期后，然后从 DB 重新加载，确保数据的最终一致性。</p>
</li>
<li><p>不采用 rehash 漂移策略，而采用缓存分层策略，尽量避免脏数据产生。</p>
</li>
</ul>
<h4 id="5、数据并发竞争"><a href="#5、数据并发竞争" class="headerlink" title="5、数据并发竞争"></a>5、数据并发竞争</h4><p>​    数据并发竞争在大流量系统也比较常见，比如车票系统，如果某个火车车次缓存信息过期，但仍然有大量用户在查询该车次信息。又比如微博系统中，如果某条微博正好被缓存淘汰，但这条微博仍然有大量的转发、评论、赞。上述情况都会造成并发竞争读取的问题。</p>
<ul>
<li>​    加<strong>写回操作加互斥锁</strong>，查询失败默认值快速返回。</li>
<li>​    对缓存数据保持多个备份，减少并发竞争的概率</li>
</ul>
<p>​    </p>
<h4 id="6、热点key问题"><a href="#6、热点key问题" class="headerlink" title="6、热点key问题"></a>6、热点key问题</h4><p>​    明星结婚、离婚、出轨这种特殊突发事件，比如奥运、春节这些重大活动或节日，还比如秒杀、双12、618 等线上促销活动，都很容易出现 Hot key 的情况。</p>
<p>如何提前发现HotKey？</p>
<ul>
<li>对于重要节假日、线上促销活动这些提前已知的事情，可以提前评估出可能的热 key 来。</li>
<li>而对于突发事件，无法提前评估，可以<strong>通过 Spark，对应流任务进行实时分析</strong>，及时发现新发布的热点 key。而对于之前已发出的事情，逐步发酵成为热 key 的，则可以通过 Hadoop 对批处理任务离线计算，找出最近历史数据中的高频热 key。</li>
</ul>
<p><strong>解决方案：</strong></p>
<ul>
<li><p>这 n 个 key 分散存在多个缓存节点，然后 client 端请求时，随机访问其中某个后缀的 hotkey，这样就可以把热 key 的请求打散，避免一个缓存节点过载</p>
</li>
<li><p>缓存集群可以单节点进行主从复制和垂直扩容</p>
</li>
<li><p>利用应用内的前置缓存，但是需注意需要设置上限</p>
</li>
<li><p>延迟不敏感，定时刷新，实时感知用主动刷新</p>
</li>
<li><p>和缓存穿透一样，限制逃逸流量，单请求进行数据回源并刷新前置</p>
</li>
<li><p>无论如何设计，最后都要写一个兜底逻辑，千万级流量说来就来</p>
</li>
</ul>
<h4 id="7、BigKey问题"><a href="#7、BigKey问题" class="headerlink" title="7、BigKey问题"></a>7、BigKey问题</h4><p>​    比如互联网系统中需要保存用户最新 1万 个粉丝的业务，比如一个用户个人信息缓存，包括基本资料、关系图谱计数、发 feed 统计等。微博的 feed 内容缓存也很容易出现，一般用户微博在 140 字以内，但很多用户也会发表 1千 字甚至更长的微博内容，这些长微博也就成了大 key</p>
<ul>
<li>首先Redis底层数据结构里，根据Value的不同，会进行数据结构的重新选择</li>
<li>可以扩展新的数据结构，进行序列化构建，然后通过 restore 一次性写入</li>
<li>将大 key 分拆为多个 key，设置较长的过期时间</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="Redis分区容错"><a href="#Redis分区容错" class="headerlink" title="Redis分区容错"></a>Redis分区容错</h3><h4 id="1、redis数据分区"><a href="#1、redis数据分区" class="headerlink" title="1、redis数据分区"></a><strong>1、redis数据分区</strong></h4><p><strong>Hash：（不稳定）</strong></p>
<p>​        客户端分片：哈希+取余</p>
<p>​        节点伸缩：数据节点关系变化，导致数据迁移</p>
<p>​        迁移数量和添加节点数量有关：建议翻倍扩容</p>
<p>​        一个简单直观的想法是直接用Hash来计算，以Key做哈希后对节点数取模。可以看出，在key足够分散的情况下，均匀性可以获得，但一旦有节点加入或退出，所有的原有节点都会受到影响，稳定性无从谈起。</p>
<p><strong>一致性Hash：（不均衡）</strong></p>
<p>​        客户端分片：哈希+顺时针（优化取余）</p>
<p>​        节点伸缩：只影响邻近节点，但是还是有数据迁移</p>
<p>​        翻倍伸缩：保证最小迁移数据和负载均衡</p>
<p>​        一致性Hash可以很好的解决稳定问题，可以将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会顺时针找到先遇到的一组存储节点存放。而当有节点加入或退出时，仅影响该节点在Hash环上顺时针相邻的后续节点，将数据从该节点接收或者给予。但这又带来均匀性的问题，即使可以将存储节点等距排列，也会在<strong>存储节点个数变化时带来数据的不均匀</strong>。</p>
<p><strong>Codis的Hash槽</strong></p>
<p>​        Codis 将所有的 key 默认划分为 1024 个槽位(slot)，它首先对客户端传过来的 key 进行 crc32 运算计算 哈希值，再将 hash 后的整数值对 1024 这个整数进行取模得到一个余数，这个余数就是对应 key 的槽位。</p>
<p><strong>RedisCluster</strong></p>
<p>​        Redis-cluster把所有的物理节点映射到[0-16383]个<strong>slot</strong>上,对key采用crc16算法得到hash值后对16384取模，基本上采用平均分配和连续分配的方式。</p>
<h4 id="2、主从模式-x3D-简单"><a href="#2、主从模式-x3D-简单" class="headerlink" title="2、主从模式&#x3D;简单"></a><strong>2、主从模式&#x3D;简单</strong></h4><p>​    主从模式最大的优点是<strong>部署简单</strong>，最少<strong>两个节点便可以构成主从模式</strong>，并且可以通过<strong>读写分离避免读和写同时不可用</strong>。不过，一旦 Master 节点出现故障，主从节点就<strong>无法自动切换</strong>，直接导致 SLA 下降。所以，主从模式一般<strong>适合业务发展初期，并发量低，运维成本低</strong>的情况</p>
<img src="https://s0.lgstatic.com/i/image/M00/80/25/Ciqc1F_QgPOAaL8TAAC5EiNlvo4795.png" alt="Drawing 1.png" style="zoom:50%;" />



<p><strong>主从复制原理：</strong></p>
<p>​    ①通过从服务器发送到PSYNC命令给主服务器</p>
<p>​    ②如果是首次连接，触发一次<strong>全量复制</strong>。此时主节点会启动一个后台线程，生成 RDB 快照文件</p>
<p>​    ③主节点会将这个 RDB 发送给从节点，slave 会先写入本地磁盘，再从本地磁盘加载到内存中</p>
<p>​    ④master会将此过程中的写命令写入缓存，从节点<strong>实时同步</strong>这些数据</p>
<p>​    ⑤如果网络断开了连接，自动重连后主节点通过命令传播<strong>增量复制</strong>给从节点部分缺少的数据</p>
<p><strong>缺点</strong></p>
<p>​    所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主从从结构来解决，redis4.0中引入psync2 解决了slave重启后仍然可以增量同步。</p>
<h4 id="3、哨兵模式-x3D-读多"><a href="#3、哨兵模式-x3D-读多" class="headerlink" title="3、哨兵模式&#x3D;读多"></a>3、<strong>哨兵模式</strong>&#x3D;读多</h4><p>​    由一个或多个sentinel实例组成sentinel集群可以监视一个或多个主服务器和多个从服务器。<strong>哨兵模式适合读请求远多于写请求的业务场景，比如在秒杀系统</strong>中用来缓存活动信息。 如果写请求较多，当集群 Slave 节点数量多了后，Master 节点同步数据的压力会非常大。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gluq6vlvglj30nw0e076f.jpg" alt="image-20201220231241725" style="zoom:50%;" />

<p>当主服务器进入下线状态时，sentinel可以将该主服务器下的某一从服务器升级为主服务器继续提供服务，从而保证redis的高可用性。</p>
<p><strong>检测主观下线状态</strong></p>
<p>​    Sentinel每秒一次向所有与它建立了命令连接的实例(主服务器、从服务器和其他Sentinel)发送PING命 令</p>
<p>​    实例在down-after-milliseconds毫秒内返回无效回复Sentinel就会认为该实例主观下线(<strong>SDown</strong>)</p>
<p><strong>检查客观下线状态</strong></p>
<p>​    当一个Sentinel将一个主服务器判断为主观下线后 ，Sentinel会向监控这个主服务器的所有其他Sentinel发送查询主机状态的命令</p>
<p>​    如果达到Sentinel配置中的quorum数量的Sentinel实例都判断主服务器为主观下线，则该主服务器就会被判定为客观下线(<strong>ODown</strong>)。</p>
<p><strong>选举Leader Sentinel</strong> </p>
<p>​    当一个主服务器被判定为客观下线后，监视这个主服务器的所有Sentinel会通过选举算法(raft)，选出一个Leader Sentinel去执行**failover(故障转移)**操作。</p>
<p>​    <strong>Raft算法</strong></p>
<p>​    Raft协议是用来解决分布式系统一致性问题的协议。 Raft协议描述的节点共有三种状态:Leader, Follower, Candidate。 Raft协议将时间切分为一个个的Term(任期)，可以认为是一种“逻辑时间”。 选举流程:<br>     ①Raft采用心跳机制触发Leader选举系统启动后，全部节点初始化为Follower，term为0</p>
<p>​     ②节点如果收到了RequestVote或者AppendEntries，就会保持自己的Follower身份 </p>
<p>​     ③节点如果一段时间内没收到AppendEntries消息，在该节点的超时时间内还没发现Leader，Follower就会转换成Candidate，自己开始竞选Leader。 一旦转化为Candidate，该节点立即开始下面几件事情:<br>​        –增加自己的term，启动一个新的定时器<br>​        –给自己投一票，向所有其他节点发送RequestVote，并等待其他节点的回复。</p>
<p>​     ④如果在计时器超时前，节点收到多数节点的同意投票，就转换成Leader。同时通过 AppendEntries，向其他节点发送通知。</p>
<p>​     ⑤每个节点在一个term内只能投一票，采取先到先得的策略，Candidate投自己， Follower会投给第一个收到RequestVote的节点。</p>
<p>​     ⑥Raft协议的定时器采取随机超时时间（选举的关键），先转为Candidate的节点会先发起投票，从而获得多数票。</p>
<p><strong>主服务器的选择</strong></p>
<p>​    当选举出Leader Sentinel后，Leader Sentinel会根据以下规则去从服务器中选择出新的主服务器。</p>
<ol>
<li>过滤掉主观、客观下线的节点</li>
<li>选择配置slave-priority最高的节点，如果有则返回没有就继续选择</li>
<li>选择出复制偏移量最大的系节点，因为复制偏移量越大则数据复制的越完整</li>
<li>选择run_id最小的节点，因为run_id越小说明重启次数越少</li>
</ol>
<p><strong>故障转移</strong></p>
<p>​    当Leader Sentinel完成新的主服务器选择后，Leader Sentinel会对下线的主服务器执行故障转移操作，主要有三个步骤:</p>
<p>​    1、它会将失效 Master 的其中一个 Slave 升级为新的 Master , 并让失效 Master 的其他 Slave 改为复制新的 Master ;</p>
<p>​    2、当客户端试图连接失效的 Master 时，集群会向客户端返回新 Master 的地址，使得集群当前状态只有一个Master。</p>
<p>​    3、Master 和 Slave 服务器切换后， Master 的 redis.conf 、 Slave 的 redis.conf 和 sentinel.conf 的配置文件的内容都会发生相应的改变，即 Master 主服务器的 redis.conf配置文件中会多一行 replicaof 的配置， sentinel.conf 的监控目标会随之调换。</p>
<h4 id="4、集群模式-x3D-写多"><a href="#4、集群模式-x3D-写多" class="headerlink" title="4、集群模式&#x3D;写多"></a>4、集群模式&#x3D;写多</h4><p>​    为了避免单一节点负载过高导致不稳定，集群模式采用<strong>一致性哈希算法或者哈希槽的方法</strong>将 Key 分布到各个节点上。其中，每个 Master 节点后跟若干个 Slave 节点，用于<strong>出现故障时做主备切换</strong>，客户端可以<strong>连接任意 Master 节点</strong>，集群内部会按照<strong>不同 key 将请求转发到不同的 Master</strong> 节点</p>
<p>​    集群模式是如何实现高可用的呢？集群内部节点之间会<strong>互相定时探测</strong>对方是否存活，如果多数节点判断某个节点挂了，则会将其踢出集群，然后从 <strong>Slave</strong> 节点中选举出一个节点<strong>替补</strong>挂掉的 Master 节点。<strong>整个原理基本和哨兵模式一致</strong></p>
<p>​    虽然集群模式避免了 Master 单节点的问题，但<strong>集群内同步数据时会占用一定的带宽</strong>。所以，只有在<strong>写操作比较多的情况下人们才使用集群模式</strong>，其他大多数情况，使用<strong>哨兵模式</strong>都能满足需求</p>
<h4 id="5、分布式锁"><a href="#5、分布式锁" class="headerlink" title="5、分布式锁"></a>5、分布式锁</h4><p><strong>利用Watch实现Redis乐观锁</strong></p>
<p>​    乐观锁基于CAS(Compare And Swap)比较并替换思想，不会产生锁等待而消耗资源，但是需要反复的重试，但也是因为重试的机制，能比较快的响应。因此我们可以利用redis来实现乐观锁<strong>（秒杀）</strong>。具体思路如下:</p>
<p>1、利用redis的watch功能，监控这个redisKey的状态值<br>2、获取redisKey的值，创建redis事务，给这个key的值+1<br>3、执行这个事务，如果key的值被修改过则回滚，key不加1</p>
<p><strong>利用setnx防止库存超卖</strong><br>    分布式锁是控制分布式系统之间同步访问共享资源的一种方式。 利用Redis的单线程特性对共享资源进行串行化处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁推荐使用set的方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, expireTime);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.setnx(lockKey, requestId); <span class="comment">//如线程死掉，其他线程无法获取到锁</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放锁，非原子操作，可能会释放其他线程刚加上的锁</span></span><br><span class="line"><span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123; </span><br><span class="line">  jedis.del(lockKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推荐使用redis+lua脚本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(lua, Collections.singletonList(lockKey),</span><br></pre></td></tr></table></figure>



<p><strong>分布式锁存在的问题</strong>：</p>
<ul>
<li><strong>客户端长时间阻塞导致锁失效问题</strong></li>
</ul>
<p>​    计算时间内异步启动另外一个线程去检查的问题，这个key是否超时，当锁超时时间快到期且逻辑未执行完，延长锁超时时间。</p>
<ul>
<li><p>**Redis服务器时钟漂移问题导致同时加锁<br>redis的过期时间是依赖系统时钟的，如果时钟漂移过大时 理论上是可能出现的 **会影响到过期时间的计算。</p>
</li>
<li><p><strong>单点实例故障，锁未及时同步导致丢失</strong></p>
<p><strong>RedLock算法</strong></p>
</li>
</ul>
<ol>
<li><p>获取当前时间戳T0，配置时钟漂移误差T1</p>
</li>
<li><p>短时间内逐个获取全部N&#x2F;2+1个锁，结束时间点T2</p>
</li>
<li><p>实际锁能使用的处理时长变为：TTL - （T2 - T0）- T1</p>
<p>该方案通过多节点来<strong>防止Redis的单点故障</strong>，效果一般，也无法防止：</p>
</li>
</ol>
<ul>
<li><p><strong>主从切换导致的两个客户端同时持有锁</strong></p>
<p>大部分情况下<strong>持续时间极短</strong>，而且使用<strong>Redlock在切换的瞬间</strong>获取到节点的锁，也存在问题。已经是极低概率的时间，无法避免。<strong>Redis分布式锁适合幂等性事务</strong>，如果一定要<strong>保证安全</strong>，应该<strong>使用Zookeeper或者DB</strong>，但是，<strong>性能会急剧下降</strong>。</p>
</li>
</ul>
<p><strong>与zookeeper分布式锁对比</strong></p>
<ul>
<li>redis 分布式锁，其实<strong>需要自己不断去尝试获取锁</strong>，比较消耗性能。</li>
<li>zk 分布式锁，注册个监听器即可，不需要不断主动尝试获取锁，ZK获取锁会按照加锁的顺序，所以是公平锁，性能和mysql差不多，和redis差别大</li>
</ul>
<p><strong>Redission生产环境的分布式锁</strong></p>
<p>​    Redisson是基于NIO的Netty框架上的一个Java驻内存数据网格(In-Memory Data Grid)分布式锁开源组件。 </p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1glurlfrrp4j30qk0g876c.jpg" alt="image-20201221000119586" style="zoom:67%;" />

<p>但当业务必须要数据的强一致性，即不允许重复获得锁，比如金融场景(重复下单，重复转账)，<strong>请不要使用redis分布式锁</strong>。可以使用CP模型实现，比如:<strong>zookeeper和etcd。</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Redis</th>
<th>zookeeper</th>
<th>etcd</th>
</tr>
</thead>
<tbody><tr>
<td>一致性算法</td>
<td>无</td>
<td>paxos(ZAB)</td>
<td>raft</td>
</tr>
<tr>
<td>CAP</td>
<td>AP</td>
<td>CP</td>
<td>CP</td>
</tr>
<tr>
<td>高可用</td>
<td>主从集群</td>
<td>n+1</td>
<td>n+1</td>
</tr>
<tr>
<td>实现</td>
<td>setNX</td>
<td>createNode</td>
<td>restfulAPI</td>
</tr>
</tbody></table>
<h4 id="6、redis心跳检测"><a href="#6、redis心跳检测" class="headerlink" title="6、redis心跳检测"></a>6、redis心跳检测</h4><p>在命令传播阶段，从服务器默认会以每秒一次的频率向主服务器发送ACK命令:</p>
<p>​    1、检测主从的连接状态 检测主从服务器的网络连接状态</p>
<p>​            lag的值应该在0或1之间跳动，如果超过1则说明主从之间的连接有 故障。</p>
<p>​    2、辅助实现min-slaves,Redis可以通过配置防止主服务器在不安全的情况下执行写命令</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">min-slaves-to-write</span> <span class="number">3</span> <span class="string">(min-replicas-to-write</span> <span class="number">3</span> <span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="string">min-slaves-max-lag</span> <span class="number">10</span> <span class="string">(min-replicas-max-lag</span> <span class="number">10</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>​        上面的配置表示:从服务器的数量少于3个，或者三个从服务器的延迟(lag)值都大于或等于10 秒时，主服务器将拒绝执行写命令。</p>
<p>​    3、检测命令丢失，增加重传机制</p>
<p>​        如果因为网络故障，主服务器传播给从服务器的写命令在半路丢失，那么当从服务器向主服务器发 送REPLCONF ACK命令时，主服务器将发觉从服务器当前的复制偏移量少于自己的复制偏移量， 然后主服务器就会根据从服务器提交的复制偏移量，在复制积压缓冲区里面找到从服务器缺少的数据，并将这些数据重新发送给从服务器。</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis实战"><a href="#Redis实战" class="headerlink" title="Redis实战"></a>Redis实战</h3><h4 id="1、Redis优化"><a href="#1、Redis优化" class="headerlink" title="1、Redis优化"></a>1、Redis优化</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gorm5m7b4gj30uy0hjwfp.jpg" alt="img"></p>
<p><strong>读写方式</strong><br>    简单来说就是不用<strong>keys</strong>等，用<strong>range、contains</strong>之类。比如，用户粉丝数，大 V 的粉丝更是高达几千万甚至过亿，因此，获取粉丝列表只能部分获取。另外在判断某用户是否关注了另外一个用户时，也只需要关注列表上进行检查判断，然后返回 True&#x2F;False 或 0&#x2F;1 的方式更为高效。</p>
<p><strong>KV size</strong><br>    如果单个业务的 KV size 过大，需要分拆成多个 KV 来缓存。拆分时应<strong>考虑访问频率</strong></p>
<p><strong>key 的数量</strong><br>    如果数据量巨大，则在缓存中尽可能只保留频繁访问的热数据，对于冷数据直接访问 DB。</p>
<p><strong>读写峰值</strong><br>    如果小于 10万 级别，简单分拆到独立 Cache 池即可<br>    如果达到 100万 级的QPS，则需要对 Cache 进行分层处理，可以同时使用 Local-Cache 配合远程 cache，甚至远程缓存内部继续分层叠加分池进行处理。<strong>（多级缓存）</strong></p>
<p><strong>命中率</strong><br>    缓存的命中率对整个服务体系的性能影响甚大。对于核心高并发访问的业务，需要预留足够的容量，确保核心业务缓存维持较高的命中率。比如微博中的 Feed Vector Cache（<strong>热点资讯</strong>），常年的命中率高达 99.5% 以上。为了持续保持缓存的命中率，缓存体系需要持续监控，及时进行故障处理或故障转移。同时在部分缓存节点异常、命中率下降时，故障转移方案，需要考虑是采用一致性 Hash 分布的访问漂移策略，还是采用数据多层备份策略。</p>
<p><strong>过期策略</strong></p>
<p>​    可以设置较短的过期时间，让冷 key 自动过期；也可以让 key 带上时间戳，同时设置较长的过期时间，比如很多业务系统内部有这样一些 key：key_20190801。</p>
<p><strong>缓存穿透时间</strong><br>    平均缓存穿透加载时间在某些业务场景下也很重要，对于一些缓存穿透后，加载时间特别长或者需要复杂计算的数据，而且访问量还比较大的业务数据，要配置更多容量，维持更高的命中率，从而减少穿透到 DB 的概率，来确保整个系统的访问性能。</p>
<p><strong>缓存可运维性</strong><br>    对于缓存的可运维性考虑，则需要考虑缓存体系的集群管理，如何进行一键扩缩容，如何进行缓存组件的升级和变更，如何快速发现并定位问题，如何持续监控报警，最好有一个完善的运维平台，将各种运维工具进行集成。</p>
<p><strong>缓存安全性</strong><br>    对于缓存的安全性考虑，一方面可以限制来源 IP，只允许内网访问，同时加密鉴权访问。</p>
<h4 id="2、Redis热升级"><a href="#2、Redis热升级" class="headerlink" title="2、Redis热升级"></a>2、Redis热升级</h4><blockquote>
<p>在 Redis 需要升级版本或修复 bug 时，如果直接重启变更，由于需要数据恢复，这个过程需要近 10 分钟的时间，时间过长，会严重影响系统的可用性。面对这种问题，可以对 Redis 扩展热升级功能，从而在毫秒级完成升级操作，完全不影响业务访问。</p>
</blockquote>
<p>热升级方案如下，首先构建一个 Redis 壳程序，将 redisServer 的所有属性（包括redisDb、client等）保存为全局变量。然后将 Redis 的处理逻辑代码全部封装到动态连接库 so 文件中。Redis 第一次启动，从磁盘加载恢复数据，在后续升级时，通过指令，壳程序重新加载 Redis 新的 redis-4.so 到 redis-5.so 文件，即可完成功能升级，毫秒级完成 Redis 的版本升级。而且整个过程中，所有 Client 连接仍然保留，在升级成功后，原有 Client 可以继续进行读写操作，整个过程对业务完全透明。</p>
<h1 id="六、Kafka篇"><a href="#六、Kafka篇" class="headerlink" title="六、Kafka篇"></a>六、Kafka篇</h1><h3 id="Why-kafka"><a href="#Why-kafka" class="headerlink" title="Why kafka"></a>Why kafka</h3><p>消息队列的作用：<strong>异步、削峰填谷、解耦</strong></p>
<p><strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 <strong>RabbitMQ</strong> （开源、社区活跃）是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 <strong>RocketMQ</strong>（Java二次开发） 是很好的选择。</p>
<p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 <strong>Kafka</strong> 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfiyienm0j30zu0hago7.jpg" alt="image-20210107225921930" style="zoom:50%;" />



<p><strong>RabbitMQ</strong></p>
<p>RabbitMQ开始是用在电信业务的可靠通信的，也是少有的几款<strong>支持AMQP</strong>协议的产品之一。</p>
<p><strong>优点：</strong></p>
<ul>
<li>轻量级，快速，部署使用方便</li>
<li>支持灵活的路由配置。RabbitMQ中，在生产者和队列之间有一个交换器模块。根据配置的路由规则，生产者发送的消息可以发送到不同的队列中。路由规则很灵活，还可以自己实现。</li>
<li>RabbitMQ的客户端支持大多数的编程语言，支持<strong>AMQP</strong>协议。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfjicxzb2j30u80hx0uw.jpg" alt="image-20210107231826261" style="zoom:40%;" />

<p><strong>缺点：</strong></p>
<ul>
<li>如果有大量消息堆积在队列中，性能会急剧下降</li>
<li>每秒处理几万到几十万的消息。如果应用要求高的性能，不要选择RabbitMQ。 </li>
<li>RabbitMQ是Erlang开发的，功能扩展和二次开发代价很高。</li>
</ul>
<p><strong>RocketMQ</strong></p>
<p>借鉴了Kafka的设计并做了很多改进，<strong>几乎具备了消息队列应该具备的所有特性和功能</strong>。</p>
<ul>
<li>RocketMQ主要用于有序，事务，流计算，消息推送，日志流处理，binlog分发等场景。</li>
<li>经过了历次的双11考验，性能，稳定性可靠性没的说。</li>
<li>java开发，阅读源代码、扩展、二次开发很方便。</li>
<li>对电商领域的响应延迟做了很多优化。</li>
<li>每秒处理几十万的消息，同时响应在毫秒级。如果应用很关注响应时间，可以使用RocketMQ。</li>
<li>性能比RabbitMQ高一个数量级，。</li>
<li>支持死信队列，DLX 是一个非常有用的特性。它可以处理<strong>异常情况下，消息不能够被消费者正确消费而被置入死信队列中</strong>的情况，后续分析程序可以通过消费这个死信队列中的内容来分析当时所遇到的异常情况，进而可以<strong>改善和优化系统</strong>。</li>
</ul>
<p><strong>缺点</strong>：</p>
<p>​    跟周边系统的整合和兼容不是很好。</p>
<p><strong>Kafka</strong></p>
<p><strong>高可用</strong>，几乎所有相关的开源软件都支持，满足大多数的应用场景，尤其是<strong>大数据和流计算</strong>领域，</p>
<ul>
<li>Kafka高效，可伸缩，消息持久化。支持分区、副本和容错。</li>
<li>对批处理和异步处理做了大量的设计，因此Kafka可以得到非常高的性能。</li>
<li>每秒处理几十万异步消息消息，如果开启了压缩，最终可以达到每秒处理2000w消息的级别。</li>
<li>但是由于是异步的和批处理的，延迟也会高，不适合电商场景。</li>
</ul>
<h3 id="What-Kafka"><a href="#What-Kafka" class="headerlink" title="What Kafka"></a>What Kafka</h3><ul>
<li>Producer API：允许应用程序将记录流发布到一个或多个Kafka主题。</li>
<li>Consumer API：允许应用程序订阅一个或多个主题并处理为其生成的记录流。</li>
<li>Streams API：允许应用程序充当流处理器，将输入流转换为输出流。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gme95cirjfj31000kb41j.jpg" alt="image-20210106203420526" style="zoom: 40%;" />



<p><strong>消息Message</strong></p>
<p>​    Kafka的数据单元称为消息。可以把消息看成是数据库里的一个“数据行”或一条“记录”。</p>
<p><strong>批次</strong></p>
<p>​    为了提高效率，消息被分批写入Kafka。提高吞吐量却加大了响应时间</p>
<p><strong>主题Topic</strong></p>
<p>​    通过主题进行分类，类似数据库中的表，</p>
<p><strong>分区Partition</strong></p>
<p>​    Topic可以被分成若干分区分布于kafka集群中，方便扩容</p>
<p>​    单个分区内是有序的，partition设置为一才能保证全局有序</p>
<p><strong>副本Replicas</strong></p>
<p>​    每个主题被分为若干个分区，每个分区有多个副本。</p>
<p><strong>生产者Producer</strong></p>
<p>​    生产者在默认情况下把<strong>消息均衡地分布</strong>到主题的所有分区上：</p>
<ul>
<li>直接指定消息的分区</li>
<li>根据消息的key散列取模得出分区</li>
<li>轮询指定分区。</li>
</ul>
<p><strong>消费者Comsumer</strong></p>
<p>​    消费者通过<strong>偏移量</strong>来区分已经读过的消息，从而消费消息。把每个分区最后读取的消息偏移量保存在Zookeeper 或Kafka上，如果消费者关闭或重启，它的<strong>读取状态不会丢失</strong>。</p>
<p><strong>消费组ComsumerGroup</strong></p>
<p>​    消费组保证<strong>每个分区只能被一个消费者</strong>使用，避免重复消费。如果群组内一个<strong>消费者失效</strong>，消费组里的其他消费者可以<strong>接管失效消费者的工作再平衡</strong>，重新分区</p>
<p><strong>节点Broker</strong></p>
<p>​    连接生产者和消费者，<strong>单个</strong>broker<strong>可以轻松处理</strong>数千个分区<strong>以及</strong>每秒百万级的消息量。</p>
<ul>
<li>broker接收来自生产者的消息，为消息设置偏移量，并提交<strong>消息到磁盘保存</strong>。</li>
<li>broker为消费者提供服务，响应读取分区的请求，<strong>返回已经提交到磁盘上的消息</strong>。</li>
</ul>
<p><strong>集群</strong></p>
<p>​    每隔分区都有一个<strong>首领</strong>，当分区被分配给多个broker时，会通过首领进行<strong>分区复制</strong>。    </p>
<p><strong>生产者Offset</strong></p>
<p>​    消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。</p>
<p><strong>消费者Offset</strong></p>
<p>​    不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响</p>
<p><strong>LogSegment</strong></p>
<ul>
<li>一个分区由多个LogSegment组成，</li>
<li>一个LogSegment由<code>.log .index .timeindex</code>组成</li>
<li><code>.log</code>追加是顺序写入的，文件名是以文件中第一条message的offset来命名的</li>
<li><code>.Index</code>进行日志删除的时候和数据查找的时候可以快速定位。</li>
<li><code>.timeStamp</code>则根据<strong>时间戳查找对应的偏移量</strong>。</li>
</ul>
<h3 id="How-Kafka"><a href="#How-Kafka" class="headerlink" title="How Kafka"></a>How Kafka</h3><p><strong>优点</strong></p>
<ul>
<li><strong>高吞吐量</strong>：单机每秒处理几十上百万的消息量。即使存储了TB及消息，也保持稳定的性能。<ul>
<li><strong>零拷贝</strong> 减少内核态到用户态的拷贝，磁盘通过sendfile实现<strong>DMA</strong> 拷贝Socket buffer</li>
<li><strong>顺序读写</strong> 充分利用磁盘顺序读写的超高性能</li>
<li><strong>页缓存mmap</strong>，将磁盘文件<strong>映射</strong>到内存, 用户通过修改内存就能修改磁盘文件。</li>
</ul>
</li>
<li><strong>高性能</strong>：单节点支持上千个客户端，并保证零停机和零数据丢失。</li>
<li><strong>持久化</strong>：将消息持久化到磁盘。通过将数据持久化到硬盘以及replication防止数据丢失。</li>
<li><strong>分布式系统</strong>，易扩展。所有的组件均为分布式的，无需停机即可扩展机器。</li>
<li><strong>可靠性</strong> - Kafka是分布式，分区，复制和容错的。</li>
<li><strong>客户端状态维护</strong>：消息被处理的状态是在Consumer端维护，当失败时能自动平衡。</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li><strong>日志收集：</strong>用Kafka可以收集各种服务的Log，通过大数据平台进行处理；</li>
<li><strong>消息系统：</strong>解耦生产者和消费者、缓存消息等；</li>
<li><strong>用户活动跟踪：</strong>Kafka经常被用来记录Web用户或者App用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到Kafka的Topic中，然后消费者通过订阅这些Topic来做<strong>运营数据</strong>的实时的监控分析，也可保存到数据库；</li>
</ul>
<h3 id="生产消费基本流程"><a href="#生产消费基本流程" class="headerlink" title="生产消费基本流程"></a><strong>生产消费基本流程</strong></h3><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmeb1cw09gj313m0kgwgb.jpg" alt="image-20210106213944461" style="zoom:40%;" />

<ol>
<li><p>Producer创建时，会创建一个Sender线程并设置为守护线程。</p>
</li>
<li><p>生产的消息先经过拦截器-&gt;序列化器-&gt;分区器，然后将消息缓存在缓冲区。</p>
</li>
<li><p>批次发送的条件为：缓冲区数据大小达到<strong>batch.size</strong>或者<strong>linger.ms</strong>达到上限。</p>
</li>
<li><p>批次发送后，发往指定分区，然后落盘到broker；</p>
<ul>
<li><p><strong>acks&#x3D;0</strong>只要将消息放到缓冲区，就认为消息已经发送完成。</p>
</li>
<li><p><strong>acks&#x3D;1</strong>表示消息<strong>只需要写到主分区</strong>即可。在该情形下，如果主分区收到消息确认之后就宕机了，而副本分区还没来得及同步该消息，则该消息丢失。</p>
</li>
<li><p><strong>acks&#x3D;all （默认）</strong>首领分区会等待<strong>所有的ISR副本分区确认记录</strong>。该处理保证了只要有一个ISR副本分区存活，消息就不会丢失。</p>
</li>
</ul>
</li>
<li><p>如果生产者配置了<strong>retrires参数大于0并且未收到确认</strong>，那么客户端会对该消息进行重试。</p>
</li>
<li><p>落盘到broker成功，返回生产元数据给生产者。</p>
</li>
</ol>
<p><strong>Leader选举</strong></p>
<ul>
<li><p>Kafka会在Zookeeper上针对每个Topic维护一个称为ISR（in-sync replica）的集合</p>
</li>
<li><p>当集合中副本都跟Leader中的副本同步了之后，kafka才会认为消息已提交</p>
</li>
<li><p>只有这些跟Leader保持同步的Follower才应该被选作新的Leader</p>
</li>
<li><p>假设某个topic有N+1个副本，kafka可以容忍N个服务器不可用，冗余度较低</p>
<p>如果ISR中的副本都丢失了，则：</p>
<ul>
<li>可以等待ISR中的副本任何一个恢复，接着对外提供服务，需要时间等待</li>
<li>从OSR中选出一个副本做Leader副本，此时会造成数据丢失</li>
</ul>
</li>
</ul>
<p><strong>副本消息同步</strong></p>
<p>​    首先，Follower 发送 FETCH 请求给 Leader。接着，Leader 会读取底层日志文件中的消 息数据，再更新它内存中的 Follower 副本的 LEO 值，更新为 FETCH 请求中的 fetchOffset 值。最后，尝试更新分区高水位值。Follower 接收到 FETCH 响应之后，会把消息写入到底层日志，接着更新 LEO 和 HW 值。</p>
<p><strong>相关概念</strong>：<strong>LEO</strong>和<strong>HW</strong>。</p>
<ul>
<li>LEO：即日志末端位移(log end offset)，记录了该副本日志中下一条消息的位移值。如果LEO&#x3D;10，那么表示该副本保存了10条消息，位移值范围是[0, 9]</li>
<li>HW：水位值HW（high watermark）即已备份位移。对于同一个副本对象而言，其HW值不会大于LEO值。小于等于HW值的所有消息都被认为是“已备份”的（replicated）</li>
</ul>
<p><strong>Rebalance</strong></p>
<ul>
<li>组成员数量发生变化</li>
<li>订阅主题数量发生变化</li>
<li>订阅主题的分区数发生变化</li>
</ul>
<p>leader选举完成后，当以上三种情况发生时，Leader根据配置的<strong>RangeAssignor</strong>开始分配消费方案，即哪个consumer负责消费哪些topic的哪些partition。一旦完成分配，leader会将这个方案封装进<strong>SyncGroup</strong>请求中发给coordinator，非leader也会发SyncGroup请求，只是内容为空。coordinator接收到分配方案之后会把方案塞进SyncGroup的response中发给各个consumer。这样组内的所有成员就都知道自己应该消费哪些分区了。</p>
<p><strong>分区分配算法RangeAssignor</strong></p>
<ul>
<li><p>原理是按照消费者总数和分区总数进行整除运算平均分配给所有的消费者。</p>
</li>
<li><p>订阅Topic的消费者按照名称的字典序排序，分均分配，剩下的字典序从前往后分配</p>
</li>
</ul>
<p><strong>增删改查</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --create --topic topic_x </span><br><span class="line">								--partitions 1 --replication-factor 1</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --delete --topic topic_x</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --alter --topic topic_x</span><br><span class="line">								--config max.message.bytes=1048576</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --describe --topic topic_x</span><br></pre></td></tr></table></figure>

<p><strong>如何查看偏移量为23的消息？</strong></p>
<p>通过查询跳跃表<code>ConcurrentSkipListMap</code>，定位到在00000000000000000000.index ，通过二分法在偏移量索引文件中找到不大于 23 的<strong>最大索引项</strong>，即offset 20 那栏，然后从日志分段文件中的物理位置为320 开始顺序查找偏移量为 23 的消息。</p>
<img src="https://img-blog.csdnimg.cn/20191230225447849.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjMzNzA2,size_16,color_FFFFFF,t_70" alt="img" style="zoom:50%;" />





<p><strong>切分文件</strong></p>
<ul>
<li><strong>大小分片</strong> 当前日志分段文件的大小超过了 broker 端参数 <code>log.segment.bytes</code> 配置的值</li>
<li><strong>时间分片</strong> 当前日志分段中消息的最大时间戳与系统的时间戳的差值大于<code>log.roll.ms</code>配置的值</li>
<li><strong>索引分片</strong> 偏移量或时间戳索引文件大小达到broker端 <code>log.index.size.max.bytes</code>配置的值</li>
<li><strong>偏移分片</strong> 追加的消息的偏移量与当前日志分段的偏移量之间的差值大于 Integer.MAX_VALUE</li>
</ul>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p><strong>幂等性</strong></p>
<p>保证在消息重发的时候，消费者不会重复处理。即使在<strong>消费者收到重复消息的时候，重复处理</strong>，也</p>
<p>要<strong>保证最终结果的一致性</strong>。所谓幂等性，数学概念就是： f(f(x)) &#x3D; f(x) </p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmefdeas1vj315i0bgmya.jpg" alt="image-20210107000942286"></p>
<p><strong>如何实现？</strong></p>
<p>​    添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ProducerID：<span class="comment">#在每个新的Producer初始化时，会被分配一个唯一的PID</span></span><br><span class="line">SequenceNumber：<span class="comment">#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值</span></span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmefjpeet8j317e0cgmyp.jpg" alt="image-20210107001546404" style="zoom:80%;" />

<p><strong>如何选举</strong></p>
<ol>
<li>使用 Zookeeper 的<strong>分布式锁选举控制器</strong>，并在节点加入集群或退出集群时通知控制器。</li>
<li>控制器负责在节点加入或离开集群时进行分区Leader选举。</li>
<li>控制器使用epoch<code>忽略小的纪元</code>来避免<strong>脑裂</strong>：两个节点同时认为自己是当前的控制器。</li>
</ol>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><ul>
<li>创建Topic的时候可以指定 –replication-factor 3 ，表示不超过broker的副本数</li>
<li>只有Leader是负责读写的节点，Follower定期地到Leader上Pull数据。</li>
<li>ISR是Leader负责维护的与其保持同步的Replica列表，即当前活跃的副本列表。如果一个Follow落后太多，Leader会将它从ISR中移除。选举时优先从ISR中挑选Follower。 </li>
<li>设置 acks&#x3D;all 。Leader收到了ISR中所有Replica的ACK，才向Producer发送ACK。</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h3><h4 id="线上问题rebalance"><a href="#线上问题rebalance" class="headerlink" title="线上问题rebalance"></a><strong>线上问题rebalance</strong></h4><blockquote>
<p>因集群架构变动导致的消费组内重平衡，如果kafka集内节点较多，比如数百个，那重平衡可能会耗时导致<strong>数分钟到数小时</strong>，此时kafka基本处于不可用状态，对kafka的TPS影响极大</p>
</blockquote>
<p>产生的原因：</p>
<ul>
<li><p>组成员数量发生变化</p>
</li>
<li><p>订阅主题数量发生变化</p>
</li>
<li><p>订阅主题的分区数发生变化</p>
<p><strong>组成员崩溃和组成员主动离开是两个不同的场景。</strong>因为在崩溃时成员并不会主动地告知coordinator此事，coordinator有可能需要一个完整的session.timeout周期(心跳周期)才能检测到这种崩溃，这必然会造成consumer的滞后。可以说离开组是主动地发起rebalance；而崩溃则是被动地发起rebalance。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gooe9o07fvj30p00btju1.jpg" alt="img"></p>
</li>
</ul>
<p>解决方案：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">加大超时时间</span> <span class="string">session.timout.ms=6s</span></span><br><span class="line"><span class="attr">加大心跳频率</span> <span class="string">heartbeat.interval.ms=2s</span></span><br><span class="line"><span class="attr">增长推送间隔</span> <span class="string">max.poll.interval.ms=t+1 minutes</span></span><br></pre></td></tr></table></figure>



<h4 id="ZooKeeper-的作用"><a href="#ZooKeeper-的作用" class="headerlink" title="ZooKeeper 的作用"></a>ZooKeeper 的作用</h4><p>目前，Kafka 使用 ZooKeeper 存放集群元数据、成员管理、Controller 选举，以及其他一些管理类任务。之后，等 KIP-500 提案完成后，Kafka 将完全不再依赖于 ZooKeeper。</p>
<ul>
<li><strong>存放元数据</strong>是指主题分区的所有数据都保存在 ZooKeeper 中，其他“人”都要与它保持对齐。</li>
<li><strong>成员管理</strong>是指 Broker 节点的注册、注销以及属性变更等 。</li>
<li><strong>Controller 选举</strong>是指选举集群 Controller，包括但不限于主题删除、参数配置等。</li>
</ul>
<p>一言以蔽之:<strong>KIP-500 ，是使用社区自研的基于 Raft 的共识算法，实现 Controller 自选举</strong>。</p>
<p>同样是存储元数据，这几年<strong>基于Raft算法的etcd</strong>认可度越来越高</p>
<p>​    越来越多的系统开始用它保存关键数据。比如，<strong>秒杀系统经常用它保存各节点信息</strong>，以便控制消费 MQ 的服务数量。还有些<strong>业务系统的配置数据</strong>，也会通过 etcd 实时<strong>同步给业务系统的各节点</strong>，比如，秒杀管理后台会使用 etcd 将<strong>秒杀活动的配置数据实时同步给秒杀 API 服务各节点</strong>。</p>
<h4 id="Replica副本的作用"><a href="#Replica副本的作用" class="headerlink" title="Replica副本的作用"></a>Replica副本的作用</h4><p><strong>Kafka 只有 Leader 副本才能 对外提供读写服务，响应 Clients 端的请求。Follower 副本只是采用拉(PULL)的方 式，被动地同步 Leader 副本中的数据，并且在 Leader 副本所在的 Broker 宕机后，随时准备应聘 Leader 副本。</strong></p>
<ul>
<li><strong>自 Kafka 2.4 版本开始</strong>，社区可以通过配置参数，允许 Follower 副本有限度地提供读服务。</li>
<li>之前确保一致性的主要手段是高水位机制， 但高水位值无法保证 Leader 连续变更场景下的数据一致性，因此，社区引入了 <strong>Leader Epoch</strong> 机制，来修复高水位值的弊端。</li>
</ul>
<h4 id="为什么不支持读写分离"><a href="#为什么不支持读写分离" class="headerlink" title="为什么不支持读写分离?"></a>为什么不支持读写分离?</h4><ul>
<li><p><strong>自 Kafka 2.4 之后</strong>，Kafka 提供了有限度的读写分离。</p>
</li>
<li><p><strong>场景不适用</strong>。读写分离适用于那种读负载很大，而写操作相对不频繁的场景。</p>
</li>
<li><p><strong>同步机制</strong>。Kafka 采用 PULL 方式实现 Follower 的同步，同时复制延迟较大。</p>
</li>
</ul>
<h4 id="如何防止重复消费"><a href="#如何防止重复消费" class="headerlink" title="如何防止重复消费"></a>如何防止重复消费</h4><ul>
<li>代码层面每次消费需提交offset</li>
<li>通过Mysql的<strong>唯一键约束</strong>，结合Redis查看<strong>id是否被消费</strong>，存Redis可以直接使用set方法</li>
<li>量大且允许误判的情况下，使用布隆过滤器也可以</li>
</ul>
<h4 id="如何保证数据不会丢失"><a href="#如何保证数据不会丢失" class="headerlink" title="如何保证数据不会丢失"></a><strong>如何保证数据不会丢失</strong></h4><ul>
<li><strong>生产者</strong>生产消息可以通过comfirm配置<strong>ack&#x3D;all</strong>解决</li>
<li><strong>Broker</strong>同步过程中leader宕机可以通过配置<strong>ISR副本+重试</strong>解决</li>
<li><strong>消费者</strong>丢失可以<strong>关闭自动提交</strong>offset功能，系统处理完成时提交offset</li>
</ul>
<h4 id="如何保证顺序消费"><a href="#如何保证顺序消费" class="headerlink" title="如何保证顺序消费"></a><strong>如何保证顺序消费</strong></h4><ul>
<li>单 topic，单partition，单 consumer，单线程消费，吞吐量低，不推荐</li>
<li><strong>如只需保证单key有序</strong>，为每个key申请单独内存 queue，每个线程分别消费一个内存 queue 即可，这样就能保证单key（例如用户id、活动id）顺序性。</li>
</ul>
<h4 id="【线上】如何解决积压消费"><a href="#【线上】如何解决积压消费" class="headerlink" title="【线上】如何解决积压消费"></a>【线上】如何解决积压消费</h4><ul>
<li><strong>修复consumer</strong>，使其具备消费能力，并且扩容N台</li>
<li>写一个<strong>分发的程序</strong>，将Topic均匀分发到临时Topic中</li>
<li>同时<strong>起N台consumer</strong>，消费不同的<strong>临时Topic</strong></li>
</ul>
<h4 id="如何避免消息积压"><a href="#如何避免消息积压" class="headerlink" title="如何避免消息积压"></a>如何避免消息积压</h4><ul>
<li>提高消费并行度</li>
<li>批量消费</li>
<li>减少组件IO的交互次数</li>
<li>优先级消费</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (maxOffset - curOffset &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO 消息堆积情况的优先处理逻辑</span></span><br><span class="line">  <span class="comment">// 未处理的消息可以选择丢弃或者打日志</span></span><br><span class="line">  <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 正常消费过程</span></span><br><span class="line"><span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br></pre></td></tr></table></figure>



<h4 id="如何设计消息队列"><a href="#如何设计消息队列" class="headerlink" title="如何设计消息队列"></a>如何设计消息队列</h4><p>需要支持快速水平扩容，broker+partition，partition放不同的机器上，增加机器时将数据根据topic做迁移，分布式需要考虑一致性、可用性、分区容错性</p>
<ul>
<li><strong>一致性：</strong>生产者的消息确认、消费者的幂等性、Broker的数据同步</li>
<li><strong>可用性：</strong>数据如何保证不丢不重、数据如何持久化、持久化时如何读写</li>
<li><strong>分区容错：</strong>采用何种选举机制、如何进行多副本同步</li>
<li><strong>海量数据：</strong>如何解决消息积压、海量Topic性能下降</li>
</ul>
<p>性能上，可以借鉴<strong>时间轮、零拷贝、IO多路复用、顺序读写、压缩批处理</strong></p>
<h1 id="七、Spring篇"><a href="#七、Spring篇" class="headerlink" title="七、Spring篇"></a>七、Spring篇</h1><h3 id="设计思想-amp-Beans"><a href="#设计思想-amp-Beans" class="headerlink" title="设计思想&amp;Beans"></a>设计思想&amp;Beans</h3><h4 id="1、IOC-控制反转"><a href="#1、IOC-控制反转" class="headerlink" title="1、IOC 控制反转"></a><strong>1、IOC 控制反转</strong></h4><p>​        IoC（Inverse of Control:控制反转）是⼀种设计思想，就是将原本在程序中⼿动创建对象的控制权，交由Spring框架来管理。 IoC 在其他语⾔中也有应⽤，并⾮ Spring 特有。 </p>
<p>​        IoC 容器是 Spring⽤来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注⼊。这样可以很⼤程度上简化应⽤的开发，把应⽤从复杂的依赖关系中解放出来。 IoC 容器就像是⼀个⼯⼚⼀样，当我们需要创建⼀个对象的时候，只需要配置好配置⽂件&#x2F;注解即可，完全不⽤考虑对象是如何被创建出来的。</p>
<p><strong>DI 依赖注入</strong></p>
<p>​    DI:（Dependancy Injection：依赖注入)站在容器的角度，将对象创建依赖的其他对象注入到对象中。</p>
<h4 id="2、AOP-动态代理"><a href="#2、AOP-动态代理" class="headerlink" title="2、AOP 动态代理"></a><strong>2、AOP 动态代理</strong></h4><p>​        AOP(Aspect-Oriented Programming:⾯向切⾯编程)能够将那些与业务⽆关，却为业务模块所共同调⽤的逻辑或责任（例如事务处理、⽇志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<p>​        Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接⼝，那么Spring AOP会使⽤JDKProxy，去创建代理对象，⽽对于没有实现接⼝的对象，就⽆法使⽤ JDK Proxy 去进⾏代理了，这时候Spring AOP会使⽤基于asm框架字节流的Cglib动态代理 ，这时候Spring AOP会使⽤ Cglib ⽣成⼀个被代理对象的⼦类来作为代理。</p>
<h4 id="3、Bean生命周期"><a href="#3、Bean生命周期" class="headerlink" title="3、Bean生命周期"></a><strong>3、Bean生命周期</strong></h4><p><strong>单例对象：</strong> singleton                    </p>
<p>总结：单例对象的生命周期和容器相同        </p>
<p><strong>多例对象：</strong> prototype           </p>
<p>出生：使用对象时spring框架为我们创建            </p>
<p>活着：对象只要是在使用过程中就一直活着            </p>
<p>死亡：当对象长时间不用且没有其它对象引用时，由java的垃圾回收机制回收</p>
<img src="https://s0.lgstatic.com/i/image3/M01/89/0C/Cgq2xl6WvHqAdmt4AABGAn2eSiI631.png" alt="img" style="zoom:67%;" />

<p>IOC容器初始化加载Bean流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123; <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">  <span class="comment">// 第一步:刷新前的预处理 </span></span><br><span class="line">  prepareRefresh();</span><br><span class="line">  <span class="comment">//第二步: 获取BeanFactory并注册到 BeanDefitionRegistry</span></span><br><span class="line">  <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line">  <span class="comment">// 第三步:加载BeanFactory的预准备工作(BeanFactory进行一些设置，比如context的类加载器等)</span></span><br><span class="line">  prepareBeanFactory(beanFactory);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 第四步:完成BeanFactory准备工作后的前置处理工作 </span></span><br><span class="line">    postProcessBeanFactory(beanFactory);</span><br><span class="line">    <span class="comment">// 第五步:实例化BeanFactoryPostProcessor接口的Bean </span></span><br><span class="line">    invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    <span class="comment">// 第六步:注册BeanPostProcessor后置处理器，在创建bean的后执行 </span></span><br><span class="line">    registerBeanPostProcessors(beanFactory);</span><br><span class="line">    <span class="comment">// 第七步:初始化MessageSource组件(做国际化功能;消息绑定，消息解析); </span></span><br><span class="line">    initMessageSource();</span><br><span class="line">    <span class="comment">// 第八步:注册初始化事件派发器 </span></span><br><span class="line">    initApplicationEventMulticaster();</span><br><span class="line">    <span class="comment">// 第九步:子类重写这个方法，在容器刷新的时候可以自定义逻辑 </span></span><br><span class="line">    onRefresh();</span><br><span class="line">    <span class="comment">// 第十步:注册应用的监听器。就是注册实现了ApplicationListener接口的监听器</span></span><br><span class="line">    registerListeners();</span><br><span class="line">    <span class="comment">//第十一步:初始化所有剩下的非懒加载的单例bean 初始化创建非懒加载方式的单例Bean实例(未设置属性)</span></span><br><span class="line">    finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">    <span class="comment">//第十二步: 完成context的刷新。主要是调用LifecycleProcessor的onRefresh()方法，完成创建</span></span><br><span class="line">    finishRefresh();</span><br><span class="line">	&#125;</span><br><span class="line">  ……</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p><strong>四个阶段</strong></p>
<ul>
<li>实例化 Instantiation</li>
<li>属性赋值 Populate</li>
<li>初始化 Initialization</li>
<li>销毁 Destruction</li>
</ul>
<p><strong>多个扩展点</strong></p>
<ul>
<li>影响多个Bean<ul>
<li>BeanPostProcessor</li>
<li>InstantiationAwareBeanPostProcessor</li>
</ul>
</li>
<li>影响单个Bean<ul>
<li>Aware</li>
</ul>
</li>
</ul>
<p><strong>完整流程</strong>  </p>
<ol>
<li>实例化一个Bean－－也就是我们常说的<strong>new</strong>；</li>
<li>按照Spring上下文对实例化的Bean进行配置－－<strong>也就是IOC注入</strong>；</li>
<li>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，也就是根据就是Spring配置文件中<strong>Bean的id和name进行传递</strong></li>
<li>如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现setBeanFactory(BeanFactory)也就是Spring配置文件配置的<strong>Spring工厂自身进行传递</strong>；</li>
<li>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，和4传递的信息一样但是因为ApplicationContext是BeanFactory的子接口，所以<strong>更加灵活</strong></li>
<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization()方法，BeanPostProcessor经常被用作是Bean内容的更改，由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于<strong>内存或缓存技</strong>术</li>
<li>如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</li>
<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization()，<strong>打印日志或者三级缓存技术里面的bean升级</strong></li>
<li>以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。</li>
<li>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，或者根据spring配置的destroy-method属性，调用实现的destroy()方法</li>
</ol>
<h4 id="4、Bean作用域"><a href="#4、Bean作用域" class="headerlink" title="4、Bean作用域"></a><strong>4</strong>、Bean作用域</h4><table>
<thead>
<tr>
<th>名称</th>
<th>作用域</th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td><strong>单例对象，默认值的作用域</strong></td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td><strong>每次获取都会创建⼀个新的 bean 实例</strong></td>
</tr>
<tr>
<td>request</td>
<td>每⼀次HTTP请求都会产⽣⼀个新的bean，该bean仅在当前HTTP request内有效。</td>
</tr>
<tr>
<td>session</td>
<td>在一次 HTTP session 中，容器将返回同一个实例</td>
</tr>
<tr>
<td>global-session</td>
<td>将对象存入到web项目集群的session域中,若不存在集群,则global session相当于session</td>
</tr>
</tbody></table>
<p>默认作用域是singleton，多个线程访问同一个bean时会存在线程不安全问题</p>
<p><strong>保障线程安全方法：</strong></p>
<ol>
<li><p>在Bean对象中尽量避免定义可变的成员变量（不太现实）。</p>
</li>
<li><p>在类中定义⼀个ThreadLocal成员变量，将需要的可变成员变量保存在 ThreadLocal 中</p>
</li>
</ol>
<p>  <strong>ThreadLocal</strong>：</p>
<p>  ​        每个线程中都有一个自己的ThreadLocalMap类对象，可以将线程自己的对象保持到其中，各管各的，线程可以正确的访问到自己的对象。</p>
<p>  ​        将一个共用的ThreadLocal静态实例作为key，将不同对象的引用保存到不同线程的ThreadLocalMap中，然后<strong>在线程执行的各处通过这个静态ThreadLocal实例的get()方法取得自己线程保存的那个对象</strong>，避免了将这个对象作为参数传递的麻烦。</p>
<h4 id="5、循环依赖"><a href="#5、循环依赖" class="headerlink" title="5、循环依赖"></a>5、循环依赖</h4><p>​    循环依赖其实就是循环引用，也就是两个或者两个以上的 Bean 互相持有对方，最终形成闭环。比如A 依赖于B，B又依赖于A</p>
<p>Spring中循环依赖场景有: </p>
<ul>
<li><p>prototype 原型 bean循环依赖</p>
</li>
<li><p>构造器的循环依赖（构造器注入）</p>
</li>
<li><p>Field 属性的循环依赖（set注入）</p>
<p>其中，构造器的循环依赖问题无法解决，在解决属性循环依赖时，可以使用懒加载，spring采用的是提前暴露对象的方法。</p>
</li>
</ul>
<p><strong>懒加载@Lazy解决循环依赖问题</strong></p>
<p>​    Spring 启动的时候会把所有bean信息(包括XML和注解)解析转化成Spring能够识别的BeanDefinition并存到Hashmap里供下面的初始化时用，然后对每个 BeanDefinition 进行处理。普通 Bean 的初始化是在容器启动初始化阶段执行的，而被lazy-init&#x3D;true修饰的 bean 则是在从容器里第一次进行<strong>context.getBean() 时进行触发</strong>。</p>
<p><strong>三级缓存解决循环依赖问题</strong></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1glv7ivru2lj31980qcn13.jpg" alt="循环依赖问题" style="zoom: 33%;" />

<ol>
<li><p>Spring容器初始化ClassA通过构造器初始化对象后提前暴露到Spring容器中的singletonFactorys（三级缓存中）。</p>
</li>
<li><p>ClassA调用setClassB方法，Spring首先尝试从容器中获取ClassB，此时ClassB不存在Spring 容器中。</p>
</li>
<li><p>Spring容器初始化ClassB，ClasssB首先将自己暴露在三级缓存中，然后从Spring容器一级、二级、三级缓存中一次中获取ClassA 。</p>
</li>
<li><p>获取到ClassA后将自己实例化放入单例池中，实例 ClassA通过Spring容器获取到ClassB，完成了自己对象初始化操作。</p>
</li>
<li><p>这样ClassA和ClassB都完成了对象初始化操作，从而解决了循环依赖问题。</p>
</li>
</ol>
<div style="page-break-after: always;"></div>

<h3 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h3><h4 id="1、-SpringBoot"><a href="#1、-SpringBoot" class="headerlink" title="1、@SpringBoot"></a>1、@SpringBoot</h4><p>​    <strong>声明bean的注解</strong></p>
<p>​    <strong>@Component</strong> 通⽤的注解，可标注任意类为  Spring 组件</p>
<p>​    <strong>@Service</strong> 在业务逻辑层使用（service层）</p>
<p>​    <strong>@Repository</strong> 在数据访问层使用（dao层）</p>
<p>​    <strong>@Controller</strong> 在展现层使用，控制器的声明（controller层）</p>
<p>​    <strong>注入bean的注解</strong></p>
<p>​    <strong>@Autowired</strong>：默认按照类型来装配注入，**@Qualifier**：可以改成名称</p>
<p>​    <strong>@Resource</strong>：默认按照名称来装配注入，JDK的注解，新版本已经弃用</p>
<p><strong>@Autowired注解原理</strong> </p>
<p>​         @Autowired的使用简化了我们的开发，</p>
<p>​                实现 AutowiredAnnotationBeanPostProcessor 类，该类实现了 Spring 框架的一些扩展接口。<br>​                实现 BeanFactoryAware 接口使其内部持有了 BeanFactory（可轻松的获取需要依赖的的 Bean）。<br>​                实现 MergedBeanDefinitionPostProcessor 接口，实例化Bean 前获取到 里面的 @Autowired 信息并缓存下来；<br>​                实现 postProcessPropertyValues 接口， 实例化Bean 后从缓存取出注解信息，通过反射将依赖对象设置到 Bean 属性里面。</p>
<p><strong>@SpringBootApplication</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(JpaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@SpringBootApplication</strong>注解等同于下面三个注解：</p>
<ul>
<li><strong>@SpringBootConfiguration：</strong> 底层是<strong>Configuration</strong>注解，说白了就是支持<strong>JavaConfig</strong>的方式来进行配置</li>
<li><strong>@EnableAutoConfiguration：</strong>开启<strong>自动配置</strong>功能</li>
<li><strong>@ComponentScan：</strong>就是<strong>扫描</strong>注解，默认是扫描<strong>当前类下</strong>的package</li>
</ul>
<p>其中<code>@EnableAutoConfiguration</code>是关键(启用自动配置)，内部实际上就去加载<code>META-INF/spring.factories</code>文件的信息，然后筛选出以<code>EnableAutoConfiguration</code>为key的数据，加载到IOC容器中，实现自动配置功能！</p>
<p>它主要加载了@SpringBootApplication注解主配置类，这个@SpringBootApplication注解主配置类里边最主要的功能就是SpringBoot开启了一个@EnableAutoConfiguration注解的自动配置功能。</p>
<p> <strong>@EnableAutoConfiguration作用：</strong></p>
<p>它主要利用了一个</p>
<p>EnableAutoConfigurationImportSelector选择器给Spring容器中来导入一些组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration </span><br></pre></td></tr></table></figure>





<h4 id="2、-SpringMVC"><a href="#2、-SpringMVC" class="headerlink" title="2、@SpringMVC"></a><strong>2、@SpringMVC</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> 声明该类为SpringMVC中的Controller</span><br><span class="line"><span class="meta">@RequestMapping</span> 用于映射Web请求</span><br><span class="line"><span class="meta">@ResponseBody</span> 支持将返回值放在response内，而不是一个页面，通常用户返回json数据</span><br><span class="line"><span class="meta">@RequestBody</span> 允许request的参数在request体中，而不是在直接连接在地址后面。</span><br><span class="line"><span class="meta">@PathVariable</span> 用于接收路径参数</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;name&#125;&quot;)</span>申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</span><br></pre></td></tr></table></figure>

<p><strong>SpringMVC原理</strong> </p>
<img src="https://img-blog.csdn.net/20181022224058617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F3YWtlX2xxaA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="zoom: 50%;" />

<ol>
<li>客户端（浏览器）发送请求，直接请求到  DispatcherServlet 。</li>
<li>DispatcherServlet 根据请求信息调⽤  HandlerMapping ，解析请求对应的  Handler 。</li>
<li>解析到对应的  Handler （也就是  Controller 控制器）后，开始由HandlerAdapter 适配器处理。</li>
<li>HandlerAdapter 会根据  Handler 来调⽤真正的处理器开处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完业务后，会返回⼀个  ModelAndView 对象， Model 是返回的数据对象</li>
<li>ViewResolver 会根据逻辑  View 查找实际的  View 。</li>
<li>DispaterServlet 把返回的  Model 传给  View （视图渲染）。</li>
<li>把  View 返回给请求者（浏览器）</li>
</ol>
<h4 id="3、-SpringMybatis"><a href="#3、-SpringMybatis" class="headerlink" title="3、@SpringMybatis"></a>3、@SpringMybatis</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span> ： 插入sql ,和xml insert sql语法完全一样</span><br><span class="line"><span class="meta">@Select</span> ： 查询sql, 和xml select sql语法完全一样</span><br><span class="line"><span class="meta">@Update</span> ： 更新sql, 和xml update sql语法完全一样</span><br><span class="line"><span class="meta">@Delete</span> ： 删除sql, 和xml delete sql语法完全一样</span><br><span class="line"><span class="meta">@Param</span> ： 入参</span><br><span class="line"><span class="meta">@Results</span> ： 设置结果集合<span class="meta">@Result</span> ： 结果</span><br><span class="line"><span class="meta">@ResultMap</span> ： 引用结果集合</span><br><span class="line"><span class="meta">@SelectKey</span> ： 获取最新插入id </span><br></pre></td></tr></table></figure>

<p><strong>mybatis如何防止sql注入？</strong></p>
<p>​    简单的说就是#{}是经过预编译的，是安全的，**$<strong>{}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。在编写mybatis的映射语句时，尽量采用</strong>“#{xxx}”<strong>这样的格式。如果需要实现动态传入表名、列名，还需要做如下修改：添加属性</strong>statementType&#x3D;”STATEMENT”<strong>，同时sql里的属有变量取值都改成</strong>${xxxx}**</p>
<p><strong>Mybatis和Hibernate的区别</strong> </p>
<p><strong>Hibernate 框架：</strong> </p>
<p>​    <strong>Hibernate</strong>是一个开放源代码的对象关系映射框架,它对JDBC进行了非常轻量级的对象封装,建立对象与数据库表的映射。是一个全自动的、完全面向对象的持久层框架。</p>
<p><strong>Mybatis框架：</strong></p>
<p>​    <strong>Mybatis</strong>是一个开源对象关系映射框架，原名：ibatis,2010年由谷歌接管以后更名。是一个半自动化的持久层框架。</p>
<p><strong>区别：</strong></p>
<p>  <strong>开发方面</strong></p>
<p>​    在项目开发过程当中，就速度而言：</p>
<p>​      hibernate开发中，sql语句已经被封装，直接可以使用，加快系统开发；</p>
<p>​      Mybatis 属于半自动化，sql需要手工完成，稍微繁琐；</p>
<p>​    但是，凡事都不是绝对的，如果对于庞大复杂的系统项目来说，复杂语句较多，hibernate 就不是好方案。</p>
<p>  <strong>sql优化方面</strong></p>
<p>​    Hibernate 自动生成sql,有些语句较为繁琐，会多消耗一些性能；</p>
<p>​    Mybatis 手动编写sql，可以避免不需要的查询，提高系统性能；</p>
<p>  <strong>对象管理比对</strong></p>
<p>​    Hibernate 是完整的对象-关系映射的框架，开发工程中，无需过多关注底层实现，只要去管理对象即可；</p>
<p>​    Mybatis 需要自行管理映射关系；</p>
<h4 id="4、-Transactional"><a href="#4、-Transactional" class="headerlink" title="4、@Transactional"></a>4、@Transactional</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span> </span><br><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>​    ①事务函数中不要处理耗时任务，会导致长期占有数据库连接。</p>
<p>​    ②事务函数中不要处理无关业务，防止产生异常导致事务回滚。</p>
<p><strong>事务传播属性</strong></p>
<p><strong>1) REQUIRED（默认属性）</strong> 如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。 </p>
<ol start="2">
<li><p>MANDATORY  支持当前事务，如果当前没有事务，就抛出异常。 </p>
</li>
<li><p>NEVER  以非事务方式执行，如果当前存在事务，则抛出异常。 </p>
</li>
<li><p>NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </p>
</li>
<li><p>REQUIRES_NEW  新建事务，如果当前存在事务，把当前事务挂起。 </p>
</li>
<li><p>SUPPORTS  支持当前事务，如果当前没有事务，就以非事务方式执行。</p>
</li>
</ol>
<p><strong>7) NESTED</strong> （<strong>局部回滚</strong>） 支持当前事务，新增Savepoint点，与当前事务同步提交或回滚。 <strong>嵌套事务一个非常重要的概念就是内层事务依赖于外层事务。外层事务失败时，会回滚内层事务所做的动作。而内层事务操作失败并不会引起外层事务的回滚。</strong></p>
<div style="page-break-after: always;"></div>

<h3 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h3><h4 id="1、Spring中的设计模式"><a href="#1、Spring中的设计模式" class="headerlink" title="1、Spring中的设计模式"></a><strong>1、Spring中的设计模式</strong></h4><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485303&idx=1&sn=9e4626a1e3f001f9b0d84a6fa0cff04a&chksm=cea248bcf9d5c1aaf48b67cc52bac74eb29d6037848d6cf213b0e5466f2d1fda970db700ba41&token=255050878&lang=zh_CN%23rd">spring中的设计模式</a></p>
<p><strong>单例设计模式 :</strong> Spring 中的 Bean 默认都是单例的。</p>
<p><strong>⼯⼚设计模式 :</strong> Spring使⽤⼯⼚模式通过  BeanFactory 、 ApplicationContext 创建bean 对象。</p>
<p><strong>代理设计模式 :</strong> Spring AOP 功能的实现。</p>
<p><strong>观察者模式：</strong> Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</p>
<p><strong>适配器模式：</strong>Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、spring MVC 中也是⽤到了适配器模式适配 Controller 。</p>
<h1 id="八、SpringCloud篇"><a href="#八、SpringCloud篇" class="headerlink" title="八、SpringCloud篇"></a>八、SpringCloud篇</h1><h4 id="Why-SpringCloud"><a href="#Why-SpringCloud" class="headerlink" title="Why SpringCloud"></a>Why SpringCloud</h4><blockquote>
<p>​    Spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用 spring boot 的开发风格做到一键启动和部署。</p>
</blockquote>
<table>
<thead>
<tr>
<th>SpringCloud（微服务解决方案）</th>
<th>Dubbo（分布式服务治理框架）</th>
</tr>
</thead>
<tbody><tr>
<td>Rest API （轻量、灵活、swagger）</td>
<td>RPC远程调用（高效、耦合）</td>
</tr>
<tr>
<td>Eureka、Nacos</td>
<td>Zookeeper</td>
</tr>
<tr>
<td>使用方便</td>
<td>性能好</td>
</tr>
<tr>
<td>即将推出SpringCloud2.0</td>
<td>断档5年后17年重启</td>
</tr>
</tbody></table>
<p>​    SpringBoot是Spring推出用于解决传统框架配置文件冗余,装配组件繁杂的基于Maven的解决方案,<strong>旨在快速搭建单个微服务</strong>，SpringCloud是依赖于SpringBoot的,而SpringBoot并不是依赖与SpringCloud,甚至还可以和Dubbo进行优秀的整合开发</p>
<p>​    MartinFlower 提出的微服务之间是通过RestFulApi进行通信，具体实现</p>
<ul>
<li>RestTemplate：基于HTTP协议</li>
<li>Feign：封装了ribbon和Hystrix 、RestTemplate 简化了客户端开发工作量</li>
<li>RPC：基于TCP协议，序列化和传输效率提升明显</li>
<li>MQ：异步解耦微服务之间的调用</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmawejgpgwj30ht0bnt9d.jpg" alt="img" style="zoom:67%;" />

<h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><blockquote>
<p>Spring Boot 通过<strong>简单的步骤</strong>就可以创建一个 Spring 应用。</p>
<p>Spring Boot 为 Spring 整合第三方框架提供了<strong>开箱即用功能</strong>。</p>
<p>Spring Boot 的核心思想是<strong>约定大于配置</strong>。</p>
</blockquote>
<p><strong>Spring Boot 解决的问题</strong></p>
<ul>
<li><p>搭建后端框架时需要手动添加 Maven 配置，涉及很多 XML 配置文件，增加了搭建难度和时间成本。</p>
</li>
<li><p>将项目编译成 war 包，部署到 Tomcat 中，项目部署依赖 Tomcat，这样非常不方便。</p>
</li>
<li><p>应用监控做的比较简单，通常都是通过一个没有任何逻辑的接口来判断应用的存活状态。</p>
</li>
</ul>
<p><strong>Spring Boot 优点</strong></p>
<p><strong>自动装配：</strong>Spring Boot 会根据某些规则对所有配置的 Bean 进行初始化。可以减少了很多重复性的工作。</p>
<p>​    比如使用 MongoDB 时，只需加入 MongoDB 的 Starter 包，然后配置  的连接信息，就可以直接使用 MongoTemplate 自动装配来操作数据库了。简化了 Maven Jar 包的依赖，降低了烦琐配置的出错几率。</p>
<p><strong>内嵌容器：</strong>Spring Boot 应用程序可以不用部署到外部容器中，比如 Tomcat。</p>
<p>​    应用程序可以直接通过 Maven 命令编译成可执行的 jar 包，通过 java-jar 命令启动即可，非常方便。</p>
<p><strong>应用监控：</strong>Spring Boot 中自带监控功能 Actuator，可以实现对程序内部运行情况进行监控，</p>
<p>​    比如 Bean 加载情况、环境变量、日志信息、线程信息等。当然也可以自定义跟业务相关的监控，通过Actuator 的端点信息进行暴露。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-web          <span class="comment">//用于快速构建基于 Spring MVC 的 Web 项目。</span></span><br><span class="line">spring-boot-starter-data-redis   <span class="comment">//用于快速整合并操作 Redis。</span></span><br><span class="line">spring-boot-starter-data-mongodb <span class="comment">//用于对 MongoDB 的集成。</span></span><br><span class="line">spring-boot-starter-data-jpa     <span class="comment">//用于操作 MySQL。</span></span><br></pre></td></tr></table></figure>

<p><strong>自定义一个Starter</strong></p>
<ol>
<li><p>创建 Starter 项目，定义 Starter 需要的配置（Properties）类，比如数据库的连接信息；</p>
</li>
<li><p>编写自动配置类，自动配置类就是获取配置，根据配置来自动装配 Bean；</p>
</li>
<li><p>编写 spring.factories 文件加载自动配置类，Spring 启动的时候会扫描 spring.factories 文件，；</p>
</li>
<li><p>编写配置提示文件 spring-configuration-metadata.json（不是必须的），在添加配置的时候，我们想要知道具体的配置项是什么作用，可以通过编写提示文件来提示；</p>
</li>
<li><p>在项目中引入自定义 Starter 的 Maven 依赖，增加配置值后即可使用。</p>
</li>
</ol>
<p><strong>Spring Boot Admin</strong>（将 actuator 提供的数据进行可视化）</p>
<ul>
<li><p>显示应用程序的监控状态、查看 JVM 和线程信息</p>
</li>
<li><p>应用程序上下线监控  </p>
</li>
<li><p>可视化的查看日志、动态切换日志级别</p>
</li>
<li><p>HTTP 请求信息跟踪等实用功能</p>
</li>
</ul>
<h4 id="GateWay-x2F-Zuul"><a href="#GateWay-x2F-Zuul" class="headerlink" title="GateWay &#x2F; Zuul"></a>GateWay &#x2F; Zuul</h4><blockquote>
<p>GateWay⽬标是取代Netflflix Zuul，它基于Spring5.0+SpringBoot2.0+WebFlux等技术开发，提供<strong>统⼀的路由</strong>⽅式（反向代理）并且基于 <strong>Filter</strong>(定义过滤器对请求过滤，完成⼀些功能) 链的⽅式提供了⽹关基本的功能，例如：鉴权、流量控制、熔断、路径重写、⽇志监控。</p>
</blockquote>
<p><strong>组成：</strong></p>
<ul>
<li><p><strong>路由route：</strong> ⽹关最基础的⼯作单元。路由由⼀个ID、⼀个⽬标URL、⼀系列的断⾔（匹配条件判断）和Filter过滤器组成。如果断⾔为true，则匹配该路由。</p>
</li>
<li><p><strong>断⾔predicates：</strong>参考了Java8中的断⾔Predicate，匹配Http请求中的所有内容（类似于nginx中的location匹配⼀样），如果断⾔与请求相匹配则路由。</p>
</li>
<li><p><strong>过滤器filter：</strong>标准的Spring webFilter，使⽤过滤器在请求之前或者之后执⾏业务逻辑。</p>
<p>请求前<code>pre</code>类型过滤器：做<strong>参数校验</strong>、<strong>权限校验</strong>、<strong>流量监控</strong>、<strong>⽇志输出</strong>、<strong>协议转换</strong>等，</p>
<p>请求前<code>post</code>类型的过滤器：做<strong>响应内容</strong>、<strong>响应头</strong>的修改、<strong>⽇志的输出</strong>、<strong>流量监控</strong>等。</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmc49l9babj31do0n7n13.jpg" alt="image-20210105001419761" style="zoom: 50%;" />

<p><strong>GateWayFilter</strong> 应⽤到单个路由路由上 、<strong>GlobalFilter</strong> 应⽤到所有的路由上</p>
<h4 id="Eureka-x2F-Zookeeper"><a href="#Eureka-x2F-Zookeeper" class="headerlink" title="Eureka &#x2F; Zookeeper"></a>Eureka &#x2F; Zookeeper</h4><blockquote>
<p>服务注册中⼼本质上是为了解耦服务提供者和服务消费者，为了⽀持弹性扩缩容特性，⼀个微服务的提供者的数量和分布往往是动态变化的。</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmawwm3k7bj30o80ecq3u.jpg" alt="image-20210103231405882" style="zoom: 50%;" />

<table>
<thead>
<tr>
<th>区别</th>
<th>Zookeeper</th>
<th>Eureka</th>
<th>Nacos</th>
</tr>
</thead>
<tbody><tr>
<td>CAP</td>
<td>CP</td>
<td>AP</td>
<td>CP&#x2F;AP切换</td>
</tr>
<tr>
<td>可用性</td>
<td>选举期间不可用</td>
<td>自我保护机制，数据不是最新的</td>
<td></td>
</tr>
<tr>
<td>组成</td>
<td>Leader和Follower</td>
<td>节点平等</td>
<td></td>
</tr>
<tr>
<td>优势</td>
<td>分布式协调</td>
<td>注册与发现</td>
<td>注册中心和配置中心</td>
</tr>
<tr>
<td>底层</td>
<td>进程</td>
<td>服务</td>
<td>Jar包</td>
</tr>
</tbody></table>
<p><strong>Eureka</strong>通过<strong>⼼跳检测</strong>、<strong>健康检查</strong>和<strong>客户端缓存</strong>等机制，提⾼系统的灵活性、可伸缩性和可⽤性。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaxc493qyj30ji0a6mxx.jpg" alt="image-20210103232900353" style="zoom:67%;" />

<ol>
<li>us-east-1c、us-east-1d，us-east-1e代表不同的机房，<strong>每⼀个Eureka Server都是⼀个集群</strong>。</li>
<li>Service作为服务提供者向Eureka中注册服务，Eureka接受到注册事件会在<strong>集群和分区中进⾏数据同步</strong>，Client作为消费端（服务消费者）可以从Eureka中获取到服务注册信息，进⾏服务调⽤。</li>
<li>微服务启动后，会周期性地向Eureka<strong>发送⼼跳</strong>（默认周期为30秒）以续约⾃⼰的信息</li>
<li>Eureka在⼀定时间内<strong>（默认90秒）没有接收</strong>到某个微服务节点的⼼跳，Eureka将会注销该微服务节点</li>
<li>Eureka Client<strong>会缓存Eureka Server中的信息</strong>。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使⽤缓存中的信息找到服务提供者</li>
</ol>
<p><strong>Eureka缓存</strong></p>
<blockquote>
<p>新服务上线后，服务消费者<strong>不能立即访问</strong>到刚上线的新服务，需要过⼀段时间后才能访问？或是将服务下线后，服务还是会被调⽤到，⼀段时候后<strong>才彻底停⽌服务</strong>，访问前期会导致频繁报错！</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaxmk97q0j30vw0j6gmu.jpg" alt="image-20210103233902439" style="zoom:50%;" />

<p>​    服务注册到注册中⼼后，服务实例信息是<strong>存储在Registry表</strong>中的，也就是内存中。但Eureka为了提⾼响应速度，在内部做了优化，加⼊了两层的缓存结构，将Client需要的实例信息，直接缓存起来，获取的时候直接从缓存中拿数据然后响应给 Client。 </p>
<ul>
<li><p>第⼀层缓存是<strong>readOnlyCacheMap</strong>，采⽤<strong>ConcurrentHashMap</strong>来存储数据的，主要负责定时与readWriteCacheMap进⾏数据同步，默认同步时间为 <strong>30</strong> 秒⼀次。</p>
</li>
<li><p>第⼆层缓存是<strong>readWriteCacheMap</strong>，采⽤<strong>Guava</strong>来实现缓存。缓存过期时间默认为<strong>180</strong>秒，当服务<strong>下线、过期、注册、状态变更</strong>等操作都会清除此缓存中的数据。</p>
</li>
<li><p>如果两级缓存都无法查询，会<strong>触发缓存的加载</strong>，从存储层拉取数据到缓存中，然后再返回给 Client。</p>
<p>Eureka之所以设计⼆级缓存机制，也是为了<strong>提⾼ Eureka Server 的响应速度</strong>，缺点是缓存会导致 Client<strong>获取不到最新的服务实例信息</strong>，然后导致⽆法快速发现新的服务和已下线的服务。</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>我们可以<strong>缩短读缓存的更新时间</strong>让服务发现变得更加及时，或者<strong>直接将只读缓存关闭</strong>，同时可以缩短客户端如ribbon服务的定时刷新间隔，多级缓存也导致C层⾯（数据⼀致性）很薄弱。</li>
<li>Eureka Server 中会有<strong>定时任务去检测失效</strong>的服务，将服务实例信息从注册表中移除，也可以将这个失效检测的<strong>时间缩短</strong>，这样服务下线后就能够及时从注册表中清除。</li>
</ul>
<p><strong>自我保护机制开启条件</strong></p>
<ul>
<li>期望最小每分钟能够续租的次数（实例* 频率 * 比例&#x3D;&#x3D;10* 2 *0.85）</li>
<li>期望的服务实例数量（10）</li>
</ul>
<p><strong>健康检查</strong></p>
<ul>
<li><p>Eureka Client 会定时发送心跳给 Eureka Server 来证明自己处于健康的状态</p>
</li>
<li><p>集成SBA以后可以把所有健康状态信息一并返回给eureka</p>
</li>
</ul>
<h4 id="Feign-x2F-Ribbon"><a href="#Feign-x2F-Ribbon" class="headerlink" title="Feign &#x2F; Ribbon"></a>Feign &#x2F; Ribbon</h4><ul>
<li>Feign 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡，</li>
<li>Feign 可以与 Hystrix 组合使用，支持熔断回退</li>
<li>Feign 可以与ProtoBuf实现快速的RPC调用</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmbxsh2rfnj30uo0fgmxz.jpg" alt="img" style="zoom:80%;" />

<ul>
<li><p><strong>InvocationHandlerFactory 代理</strong></p>
<p>采用 JDK 的动态代理方式生成代理对象，当我们调用这个接口，实际上是要去调用远程的 HTTP API</p>
</li>
<li><p><strong>Contract 契约组件</strong></p>
<p>比如请求类型是 GET 还是 POST，请求的 URI 是什么</p>
</li>
<li><p><strong>Encoder 编码组件 \ Decoder 解码组件</strong></p>
<p>通过该组件我们可以将请求信息采用指定的编码方式进行编解码后传输</p>
</li>
<li><p><strong>Logger 日志记录</strong></p>
<p>负责 Feign 中记录日志的，可以指定 Logger 的级别以及自定义日志的输出</p>
</li>
<li><p><strong>Client 请求执行组件</strong></p>
<p>负责 HTTP 请求执行的组件，Feign 中默认的 Client 是通过 JDK 的 HttpURLConnection 来发起请求的，在每次发送请求的时候，都会创建新的 HttpURLConnection 链接，Feign 的性能会很差，可以通过扩展该接口，使用 Apache HttpClient 等基于连接池的高性能 HTTP 客户端。</p>
</li>
<li><p><strong>Retryer 重试组件</strong></p>
<p>负责重试的组件，Feign 内置了重试器，当 HTTP 请求出现 IO 异常时，Feign 会限定一个最大重试次数来进行重试操作。</p>
</li>
<li><p><strong>RequestInterceptor 请求拦截器</strong></p>
<p>可以为 Feign 添加多个拦截器，在请求执行前设置一些扩展的参数信息。</p>
</li>
</ul>
<p><strong>Feign最佳使用技巧</strong></p>
<ul>
<li><p>继承特性</p>
</li>
<li><p>拦截器</p>
<p>比如添加指定的请求头信息，这个可以用在服务间传递某些信息的时候。</p>
</li>
<li><p>GET 请求多参数传递</p>
</li>
<li><p>日志配置</p>
<p>FULL 会输出全部完整的请求信息。</p>
</li>
<li><p>异常解码器</p>
<p>异常解码器中可以获取异常信息，而不是简单的一个code，然后转换成对应的异常对象返回。</p>
</li>
<li><p>源码查看是如何继承Hystrix</p>
<p>HystrixFeign.builder 中可以看到继承了 Feign 的 Builder，增加了 Hystrix的SetterFactory， build 方法里，对 invocationHandlerFactory 进行了重写， create 的时候<strong>返回HystrixInvocationHandler</strong>， 在 invoke 的时候<strong>会将请求包装成 HystrixCommand</strong> 去执行，这里就自然的集成了 Hystrix</p>
</li>
</ul>
<p><strong>Ribbon</strong></p>
<img src="http://s0.lgstatic.com/i/image2/M01/93/96/CgotOV2Nux-AO2PcAAEcl4M1Zi4629.png" alt="img" style="zoom: 50%;" />



<p><strong>使用方式</strong></p>
<ul>
<li><p><strong>原生 API</strong>，Ribbon 是 Netflix 开源的，没有使用 Spring Cloud，需要使用 Ribbon 的原生 API。</p>
</li>
<li><p><strong>Ribbon + RestTemplate</strong>，整合Spring Cloud 后，可以基于 RestTemplate 提供负载均衡的服务</p>
</li>
<li><p><strong>Ribbon + Feign</strong></p>
<img src="http://s0.lgstatic.com/i/image2/M01/93/76/CgoB5l2NuyCALoefAAAdV1DlSHY088.png" alt="img" style="zoom: 67%;" /></li>
</ul>
<p><strong>负载均衡算法</strong></p>
<ul>
<li><p>RoundRobinRule 是<strong>轮询的算法</strong>，A和B轮流选择。</p>
</li>
<li><p>RandomRule 是<strong>随机算法</strong>，这个就比较简单了，在服务列表中随机选取。</p>
</li>
<li><p>BestAvailableRule 选择一个最<strong>小的并发请求 server</strong></p>
</li>
</ul>
<p><strong>自定义负载均衡算法</strong></p>
<ul>
<li>实现 Irule 接口</li>
<li>继承 AbstractLoadBalancerRule 类</li>
</ul>
<p><strong>自定义负载均衡使用场景</strong>（核心）</p>
<ul>
<li><p><strong>灰度发布</strong></p>
<p>灰度发布是能够平滑过渡的一种发布方式，在发布过程中，先发布一部分应用，让指定的用户使用刚发布的应用，等到测试没有问题后，再将其他的全部应用发布。如果新发布的有问题，只需要将这部分恢复即可，不用恢复所有的应用。</p>
</li>
<li><p><strong>多版本隔离</strong></p>
<p>多版本隔离跟灰度发布类似，为了兼容或者过度，某些应用会有多个版本，这个时候如何保证 1.0 版本的客户端不会调用到 1.1 版本的服务，就是我们需要考虑的问题。</p>
</li>
<li><p><strong>故障隔离</strong></p>
<p>当线上某个实例发生故障后，为了不影响用户，我们一般都会先留存证据，比如：线程信息、JVM 信息等，然后将这个实例重启或直接停止。然后线下根据一些信息分析故障原因，如果我能做到故障隔离，就可以直接将出问题的实例隔离，不让正常的用户请求访问到这个出问题的实例，只让指定的用户访问，这样就可以单独用特定的用户来对这个出问题的实例进行测试、故障分析等。</p>
</li>
</ul>
<h4 id="Hystrix-x2F-Sentinel"><a href="#Hystrix-x2F-Sentinel" class="headerlink" title="Hystrix &#x2F; Sentinel"></a>Hystrix &#x2F; Sentinel</h4><p><strong>服务雪崩场景</strong></p>
<p>自己即是服务消费者，同时也是服务提供者，同步调用等待结果导致资源耗尽</p>
<p><strong>解决方案</strong></p>
<p>服务方：扩容、限流，排查代码问题，增加硬件监控</p>
<p>消费方：使用Hystrix资源隔离，熔断降级，快速失败</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmby7y9ykzj30wr0ehac5.jpg" alt="img" style="zoom:150%;" />

<p><strong>Hystrix断路保护器的作用</strong></p>
<ul>
<li><strong>封装请求</strong>会将用户的操作进行统一封装，统一封装的目的在于进行统一控制。</li>
<li><strong>资源隔离限流</strong>会将对应的资源按照指定的类型进行隔离，比如<strong>线程池</strong>和<strong>信号量</strong>。<ul>
<li>计数器限流，例如5秒内技术1000请求，超数后限流，未超数重新计数</li>
<li>滑动窗口限流，解决计数器不够精确的问题，把一个窗口拆分多滚动窗口</li>
<li>令牌桶限流，类似景区售票，售票的速度是固定的，拿到令牌才能去处理请求</li>
<li>漏桶限流，生产者消费者模型，实现了恒定速度处理请求，能够绝对防止突发流量</li>
</ul>
</li>
<li><strong>失败回退</strong>其实是一个备用的方案，就是说当请求失败后，有没有备用方案来满足这个请求的需求。</li>
<li><strong>断路器</strong>这个是<strong>最核心</strong>的，，如果断路器处于打开的状态，那么所有请求都将失败，执行回退逻辑。如果断路器处于关闭状态，那么请求将会被正常执行。有些场景我们需要手动<strong>打开断路器强制降级</strong>。</li>
<li><strong>指标监控</strong>会对请求的生<strong>命周期进行监控</strong>，请求成功、失败、超时、拒绝等状态，都会被监控起来。</li>
</ul>
<p><strong>Hystrix使用上遇到的坑</strong></p>
<ul>
<li><p>配置可以对接<strong>配置中心</strong>进行动态调整</p>
<p>Hystrix 的配置项非常多，如果不对接配置中心，所有的配置只能在代码里修改，在集群部署的难以应对紧急情况，我们项目只设置一个 CommandKey，其他的都在配置中心进行指定，紧急情况如需隔离部分请求时，只需在配置中心进行修改以后，强制更新即可。</p>
</li>
<li><p>回退逻辑中可以<strong>手动埋点</strong>或者通过<strong>输出日志</strong>进行告警</p>
<p>当请求失败或者超时，会执行回退逻辑，如果有大量的回退，则证明某些服务出问题了，这个时候我们可以在回退的逻辑中进行埋点操作，上报数据给监控系统，也可以输出回退的日志，统一由日志收集的程序去进行处理，这些方式都可以将问题暴露出去，然后通过实时数据分析进行告警操作</p>
</li>
<li><p>用 <strong>ThreadLocal</strong>配合<strong>线程池隔离</strong>模式需当心</p>
<p>当我们用了线程池隔离模式的时候，被隔离的方法会包装成一个 Command 丢入到独立的线程池中进行执行，这个时候就是从 A 线程切换到了 B 线程，ThreadLocal 的数据就会丢失</p>
</li>
<li><p><strong>Gateway中</strong>多用信号量隔离</p>
<p>网关是所有请求的入口，路由的服务数量会很多，几十个到上百个都有可能，如果用线程池隔离，那么需要创建上百个独立的线程池，开销太大，用信号量隔离开销就小很多，还能起到限流的作用。</p>
</li>
</ul>
<p>[^常见问题]: Hystrix的超时时间要⼤于Ribbon的超时时间，因为Hystrix将请求包装了起来，特别需要注意的是，如果Ribbon开启了重试机制，⽐如重试3 次，Ribbon 的超时为 1 秒，那么Hystrix 的超时时间应该⼤于 3 秒，否则就会出现 Ribbon 还在重试中，⽽ Hystrix 已经超时的现象。</p>
<p><strong>Sentinel</strong> </p>
<blockquote>
<p>Sentinel是⼀个⾯向云原⽣微服务的流量控制、熔断降级组件。</p>
<p>替代Hystrix，针对问题：服务雪崩、服务降级、服务熔断、服务限流</p>
</blockquote>
<p>Hystrix区别：</p>
<ul>
<li>独⽴可部署Dashboard（基于 Spring Boot 开发）控制台组件</li>
<li>不依赖任何框架&#x2F;库，减少代码开发，通过UI界⾯配置即可完成细粒度控制</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmbza4zixbj30kl09sq4p.jpg" alt="image-20210104212151598" style="zoom:80%;" />

<p><strong>丰富的应⽤场景</strong>：Sentinel 承接了阿⾥巴巴近 10 年的双⼗⼀⼤促流量的核⼼场景，例如秒杀、消息削峰填⾕、集群流量控制、实时熔断下游不可⽤应⽤等。</p>
<p><strong>完备的实时监控</strong>：可以看到500 台以下规模的集群的汇总也可以看到单机的秒级数据。</p>
<p><strong>⼴泛的开源⽣态：</strong>与 SpringCloud、Dubbo的整合。您只需要引⼊相应的依赖并进⾏简单的配置即可快速地接⼊ Sentinel。</p>
<p><strong>区别：</strong></p>
<ul>
<li>Sentinel不会像Hystrix那样放过⼀个请求尝试⾃我修复，就是明明确确按照时间窗⼝来，熔断触发后，时间窗⼝内拒绝请求，时间窗⼝后就恢复。</li>
<li>Sentinel Dashboard中添加的规则数据存储在内存，微服务停掉规则数据就消失，在⽣产环境下不合适。可以将Sentinel规则数据持久化到Nacos配置中⼼，让微服务从Nacos获取。</li>
</ul>
<table>
<thead>
<tr>
<th>#</th>
<th>Sentinel</th>
<th>Hystrix</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离</td>
<td>线程池隔离&#x2F;信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间或失败比率</td>
<td>基于失败比率</td>
</tr>
<tr>
<td>实时指标实现</td>
<td>滑动窗口</td>
<td>滑动窗口（基于 RxJava）</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
</tr>
<tr>
<td>限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>不支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持慢启动、匀速器模式</td>
<td>不支持</td>
</tr>
<tr>
<td>系统负载保护</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>
<td>不完善</td>
</tr>
<tr>
<td>常见框架的适配</td>
<td>Servlet、Spring Cloud、Dubbo、gRPC</td>
<td>Servlet、Spring Cloud Netflix</td>
</tr>
</tbody></table>
<h4 id="Config-x2F-Nacos"><a href="#Config-x2F-Nacos" class="headerlink" title="Config &#x2F; Nacos"></a>Config &#x2F; Nacos</h4><blockquote>
<p>Nacos是阿⾥巴巴开源的⼀个针对微服务架构中<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。</p>
<p>Nacos就是<strong>注册中⼼+配置中⼼</strong>的组合（Nacos&#x3D;Eureka+Confifig+Bus）</p>
</blockquote>
<p><strong>Nacos</strong>功能特性</p>
<ul>
<li>服务发现与健康检查</li>
<li>动态配置管理</li>
<li>动态DNS服务</li>
<li>服务和元数据管理</li>
</ul>
<p><strong>保护阈值：</strong></p>
<p>当服务A健康实例数&#x2F;总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态true），nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤。</p>
<p><strong>Nacos</strong> 数据模型（领域模型）</p>
<ul>
<li><strong>Namespace</strong> 代表不同的环境，如开发dev、测试test、⽣产环境prod</li>
<li><strong>Group</strong> 代表某项⽬，⽐如爪哇云项⽬</li>
<li><strong>Service</strong> 某个项⽬中具体xxx服务</li>
<li><strong>DataId</strong> 某个项⽬中具体的xxx配置⽂件</li>
</ul>
<p>可以通过 Spring Cloud 原⽣注解 <code>@RefreshScope</code> 实现配置⾃动更新</p>
<h4 id="Bus-x2F-Stream"><a href="#Bus-x2F-Stream" class="headerlink" title="Bus &#x2F; Stream"></a>Bus &#x2F; Stream</h4><blockquote>
<p>Spring Cloud Stream 消息驱动组件帮助我们更快速，更⽅便的去构建<strong>消息驱动</strong>微服务的</p>
<p>本质：屏蔽掉了底层不同<strong>MQ</strong>消息中间件之间的差异，统⼀了<strong>MQ</strong>的编程模型，降低了学习、开发、维护<strong>MQ</strong>的成本，⽬前⽀持Rabbit、Kafka两种消息</p>
</blockquote>
<h4 id="Sleuth-x2F-Zipkin"><a href="#Sleuth-x2F-Zipkin" class="headerlink" title="Sleuth &#x2F; Zipkin"></a><strong>Sleuth &#x2F; Zipkin</strong></h4><p><strong>全链路追踪</strong></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmc3avezqrj30xb0lw76z.jpg" alt="image-20210104234058218" style="zoom:67%;" />

<p><strong>Trace ID</strong>：当请求发送到分布式系统的⼊⼝端点时，Sleuth为该请求创建⼀个唯⼀的跟踪标识Trace ID，在分布式系统内部流转的时候，框架始终保持该唯⼀标识，直到返回给请求⽅</p>
<p><strong>Span ID</strong>：为了统计各处理单元的时间延迟，当请求到达各个服务组件时，也是通过⼀个唯⼀标识SpanID来标记它的开始，具体过程以及结束。</p>
<p>Spring Cloud Sleuth （追踪服务框架）可以追踪服务之间的调⽤，Sleuth可以记录⼀个服务请求经过哪些服务、服务处理时⻓等，根据这些，我们能够理清各微服务间的调⽤关系及进⾏问题追踪分析。</p>
<p><strong>耗时分析</strong>：通过 Sleuth 了解采样请求的耗时，分析服务性能问题（哪些服务调⽤⽐较耗时）</p>
<p><strong>链路优化</strong>：发现频繁调⽤的服务，针对性优化等</p>
<p><strong>聚合展示</strong>：数据信息发送给 Zipkin 进⾏聚合，利⽤ Zipkin 存储并展示数据。</p>
<h3 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a><strong>安全认证</strong></h3><ul>
<li><p>Session</p>
<p>认证中最常用的一种方式，也是最简单的。存在<strong>多节点session丢失</strong>的情况，可通过<strong>nginx粘性Cookie</strong>和Redis集中式Session存储解决</p>
</li>
<li><p>HTTP Basic Authentication </p>
<p>服务端针对请求头中base64加密的Authorization 和用户名和密码进行<strong>校验</strong>。</p>
</li>
<li><p>Token</p>
<p>Session 只是一个 key，<strong>会话信息存储在后端</strong>。而 Token 中会存储用户的信息，然后通过加密算法进行加密，只有服务端才能解密，<strong>服务端拿到 Token 后进行解密获取用户信息</strong>。</p>
</li>
<li><p>JWT认证</p>
</li>
</ul>
<blockquote>
<p>JWT（JSON Web Token）用户提供用户名和密码给认证服务器，服务器验证用户提交信息的合法性；如果验证成功，会产生并返回一个 Token，用户可以使用这个 Token 访问服务器上受保护的资源。</p>
</blockquote>
<img src="http://s0.lgstatic.com/i/image2/M01/AB/87/CgotOV3WUG2ARl98AAD_xcd-ElM857.png" alt="img" style="zoom:70%;" />

<ol>
<li>认证服务提供认证的 API，校验用户信息，返回认证结果</li>
<li>通过JWTUtils中的RSA算法，生成JWT token，token里封装用户id和有效期</li>
<li>服务间参数通过请求头进行传递，服务内部通过 ThreadLocal 进行上下文传递。</li>
<li>Hystrix导致ThreadLocal失效的问题可以通过，重写 Hystrix 的 Callable 方法，传递需要的数据。</li>
</ol>
<p><strong>Token最佳实践</strong></p>
<ul>
<li><p>设置<strong>较短（合理）的过期时间</strong>。</p>
</li>
<li><p>注销的 Token <strong>及时清除</strong>（放入 Redis 中做一层过滤）。</p>
<p>虽然不能修改 Token 的信息，但是能在验证层面做一层过滤来进行处理。</p>
</li>
<li><p>监控 Token 的<strong>使用频率</strong>。</p>
<p>为了防止数据被别人爬取，最常见的就是监控使用频率，程序写出来的爬虫程序访问频率是有迹可循的 </p>
</li>
<li><p>核心功能敏感操作可以使用<strong>动态验证</strong>（验证码）。</p>
<p>比如提现的功能，要求在提现时再次进行验证码的验证，防止不是本人操作。</p>
</li>
<li><p><strong>网络环境、浏览器</strong>信息等识别。</p>
<p>银行 APP 对环境有很高的要求，使用时如果断网，APP 会自动退出，重新登录，因为网络环境跟之前使用的不一样了，还有一些浏览器的信息之类的判断，这些都是可以用来保证后端 API 的安全。</p>
</li>
<li><p><strong>加密密钥</strong>支持动态修改。</p>
<p>如果 Token 的加密密钥泄露了，也就意味着别人可以伪造你的 Token，可以将密钥存储在配置中心，以支持动态修改刷新，需要注意的是建议在流量低峰的时候去做更换的操作，否则 Token 全部失效，所有在线的请求都会重新申请 Token，并发量会比较大。</p>
</li>
</ul>
<h3 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h3><p><strong>痛点：</strong></p>
<ul>
<li><p>服务数量多，业务变动频繁，一周一发布</p>
</li>
<li><p>灰度发布能降低发布失败风险，<strong>减少影响范围</strong></p>
<p>通过灰度发布，先让一部分用户体验新的服务，或者只让测试人员进行测试，等功能正常后再全部发布，这样能降低发布失败带来的影响范围。 </p>
</li>
<li><p>当发布出现故障时，可以<strong>快速回滚</strong>，不影响用户</p>
<p>灰度后如果发现这个节点有问题，那么只需回滚这个节点即可，当然不回滚也没关系，通过灰度策略隔离，也不会影响正常用户</p>
</li>
</ul>
<p>可以通过Ribbon的负载均衡策略进行灰度发布，可以使用更可靠的Discovery</p>
<p><strong>Discovery</strong></p>
<blockquote>
<p>基于Discovery 服务注册发现、Ribbon 负载均衡、Feign 和 RestTemplate 调用等组件的企业级微服务开源解决方案，包括灰度发布、灰度路由、服务隔离等功能</p>
</blockquote>
<img src="https://s0.lgstatic.com/i/image3/M01/54/41/CgpOIF3nXSaAB9bRAAE8rktrUyY037.png" alt="img" style="zoom:50%;" />

<ol>
<li><p>首先将需要发布的服务从转发过程中移除，等流量剔除之后再发布。</p>
</li>
<li><p>部分机器中的版本进行升级，用户默认还是请求老的服务，通过版本来支持测试请求。</p>
</li>
<li><p>测试完成之后，让新的版本接收正常流量，然后部署下一个节点，以此类推。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grayVersions = &#123;<span class="string">&quot;discovery-article-service&quot;</span>:[<span class="string">&quot;1.01&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多版本隔离"><a href="#多版本隔离" class="headerlink" title="多版本隔离"></a>多版本隔离</h3><img src="https://s0.lgstatic.com/i/image3/M01/54/41/Cgq2xl3nXSeAZMTOAAE2sCaIhPE668.png" alt="img" style="zoom:50%;" />



<p><strong>本地复用测试服务</strong>-Eureka Zone亮点</p>
<p>​    <strong>region</strong> 地理上的分区，比如北京、上海等</p>
<p>​    <strong>zone</strong> 可以简单理解为 region 内的具体机房</p>
<p>​    在调用的过程中会优先选择相同的 zone 发起调用，当找不到相同名称的 zone 时会选择其他的 zone 进行调用，我们可以利用这个特性来解决本地需要启动多个服务的问题。</p>
<p>[^]: 当你访问修改的服务 A 时，这个服务依赖了 B、C 两个服务，B 和 C 本地没有启动，B 和 C 找不到相同的 zone 就会选择其他的 zone 进行调用，也就是会调用到测试环境部署的 B 和 C 服务，这样一来就解决了本地部署多个服务的问题。</p>
<h4 id="各组件调优"><a href="#各组件调优" class="headerlink" title="各组件调优"></a><strong>各组件调优</strong></h4><p>当你对网关进行压测时，会发现并发量一直上不去，错误率也很高。因为你用的是默认配置，这个时候我们就需要去调整配置以达到最优的效果。</p>
<p>首先我们可以对容器进行调优，最常见的就是<strong>内置的 Tomcat</strong> 容器了，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.tomcat.accept-count <span class="comment">//请求队列排队数</span></span><br><span class="line">server.tomcat.max-threads <span class="comment">//最大线程数</span></span><br><span class="line">server.tomcat.max-connections <span class="comment">//最大连接数</span></span><br></pre></td></tr></table></figure>

<p><strong>Hystrix</strong> 的信号量（semaphore）隔离模式，并发量上不去很大的原因都在这里，信号量默认值是 100，也就是最大并发只有 100，超过 100 就得等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号量</span></span><br><span class="line">zuul.semaphore.max-semaphores <span class="comment">//信号量：最大并发数</span></span><br><span class="line"><span class="comment">//线程池</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.coreSize <span class="comment">//最大线程数</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.maximumSize <span class="comment">//队列的大</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.maxQueueSize <span class="comment">//等参数</span></span><br></pre></td></tr></table></figure>

<p>配置<strong>Gateway</strong>并发信息，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gateway.host.max-per-route-connections <span class="comment">//每个路由的连接数 </span></span><br><span class="line">gateway.host.max-total-connections <span class="comment">//总连接数</span></span><br></pre></td></tr></table></figure>

<p>调整<strong>Ribbon</strong> 的并发配置，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ribbon.MaxConnectionsPerHost <span class="comment">//单服务并发数</span></span><br><span class="line">ribbon.MaxTotalConnections   <span class="comment">//总并发数</span></span><br></pre></td></tr></table></figure>

<p>修改<strong>Feign</strong>默认的HttpURLConnection 替换成 httpclient 来提高性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign.httpclient.max-connections-per-route<span class="comment">//每个路由的连接数</span></span><br><span class="line">feign.httpclient.max-connections <span class="comment">//总连接数</span></span><br></pre></td></tr></table></figure>

<p>Gateway+配置中心实现动态路由</p>
<p>Feign+配置中心实现动态日志</p>
<h1 id="九、分布式篇"><a href="#九、分布式篇" class="headerlink" title="九、分布式篇"></a><strong>九、分布式篇</strong></h1><blockquote>
<p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>
</blockquote>
<h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a><strong>发展历程</strong></h3><ul>
<li><p>入口级负载均衡</p>
<ul>
<li>网关负载均衡</li>
<li>客户端负载均衡</li>
</ul>
</li>
<li><p>单应用架构</p>
<ul>
<li>应用服务和数据服务分离</li>
<li>应用服务集群</li>
<li>应用服务中心化SAAS</li>
</ul>
</li>
<li><p>数据库主备读写分离</p>
<ul>
<li>全文搜索引擎加快数据统计</li>
<li>缓存集群缓解数据库读压力</li>
<li>分布式消息中间件缓解数据库写压力</li>
<li>数据库水平拆分适应微服务</li>
<li>数据库垂直拆分解决慢查询</li>
</ul>
</li>
<li><p>划分上下文拆分微服务</p>
<ul>
<li>服务注册发现（Eureka、Nacos）</li>
<li>配置动态更新（Config、Apollo）</li>
<li>业务灰度发布（Gateway、Feign）</li>
<li>统一安全认证（Gateway、Auth）</li>
<li>服务降级限流（Hystrix、Sentinel）</li>
<li>接口检查监控（Actuator、Prometheus）</li>
<li>服务全链路追踪（Sleuth、Zipkin）</li>
</ul>
</li>
</ul>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><ul>
<li><strong>一致性</strong>（2PC、3PC、Paxos、Raft）<ul>
<li>强一致性：<strong>数据库一致性</strong>，牺牲了性能<ul>
<li><strong>ACID</strong>：原子性、一致性、隔离性、持久性</li>
</ul>
</li>
<li>弱一致性：<strong>数据库和缓存</strong>，<strong>延迟双删、重试</strong></li>
<li>单调读一致性：<strong>缓存一致性</strong>，ID或者IP哈希</li>
<li>最终一致性：<strong>边缘业务</strong>，消息队列</li>
</ul>
</li>
<li><strong>可用性</strong>（多级缓存、读写分离）<ul>
<li><strong>BASE</strong> 基本可用：限流导致响应速度慢、降级导致用户体验差<ul>
<li>Basically Availabe 基本可用  </li>
<li>Soft state 软状态</li>
<li>Eventual Consistency 最终一致性</li>
</ul>
</li>
</ul>
</li>
<li>分区容忍性（一致性Hash解决扩缩容问题）</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="一致性-1"><a href="#一致性-1" class="headerlink" title="一致性"></a>一致性</h3><h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><p><strong>2PC</strong>协议：两阶段提交协议，P是指<strong>准备</strong>阶段，C是指<strong>提交</strong>阶段</p>
<ul>
<li>准备阶段：询问是否可以开始，写Undo、Redo日志，收到响应</li>
<li>提交阶段：执行Redo日志进行<strong>Commit</strong>，执行Undo日志进行<strong>Rollback</strong></li>
</ul>
<p><strong>3PC</strong>协议：将提交阶段分为<strong>CanCommit</strong>、<strong>PreCommit</strong>、<strong>DoCommit</strong>三个阶段</p>
<p><strong>CanCommit</strong>：发送canCommit请求，并开始等待</p>
<p><strong>PreCommit</strong>：收到全部Yes，写Undo、Redo日志。超时或者No，则中断</p>
<p><strong>DoCommit</strong>：执行Redo日志进行<strong>Commit</strong>，执行Undo日志进行<strong>Rollback</strong> </p>
<p>区别是第二步，参与者<strong>自身增加了超时</strong>，如果<strong>失败可以及时释放资源</strong></p>
<h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a><strong>Paxos算法</strong></h4><blockquote>
<p>如何在一个发生异常的分布式系统中，快速且正确地在集群内部对某个数据的值达成一致</p>
</blockquote>
<p>​    参与者（例如Kafka）的一致性可以由协调者（例如Zookeeper）来保证，<strong>协调者的一致性就只能由Paxos保证了</strong></p>
<p>Paxos算法中的角色：</p>
<ul>
<li><strong>Client</strong>：客户端、例如，对分布式文件服务器中文件的写请求。</li>
<li><strong>Proposer</strong>：提案发起者，根据Accept返回选择最大N对应的V，发送[N+1,V]</li>
<li><strong>Acceptor</strong>：决策者，Accept以后会拒绝小于N的提案，并把自己的[N,V]返回给Proposer</li>
<li><strong>Learners</strong>：最终决策的学习者、学习者充当该协议的复制因素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//算法约束</span></span><br><span class="line">P1:一个Acceptor必须接受它收到的第一个提案。</span><br><span class="line"><span class="comment">//考虑到半数以上才作数，一个Accpter得接受多个相同v的提案</span></span><br><span class="line">P2a:如果某个v的提案被accept，那么被Acceptor接受编号更高的提案必须也是v</span><br><span class="line">P2b:如果某个v的提案被accept，那么从Proposal提出编号更高的提案必须也是v</span><br><span class="line"><span class="comment">//如何确保v的提案Accpter被选定后，Proposal都能提出编号更高的提案呢</span></span><br><span class="line">针对任意的[Mid,Vid]，有半数以上的Accepter集合S，满足以下二选一：</span><br><span class="line">  S中接受的提案都大于Mid</span><br><span class="line">  S中接受的提案若小于Mid，编号最大的那个值为Vid</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmlato63bnj319m0u0wmi.jpg" alt="image-20210112225118095"></p>
<p>面试题：如何保证Paxos算法活性</p>
<p>​    假设存在这样一种极端情况，有两个Proposer依次提出了一系列编号递增的提案，导致最终陷入死循环，没有value被选定</p>
<ul>
<li><strong>通过选取主Proposer</strong>，规定只有主Proposer才能提出议案。只要主Proposer和过半的Acceptor能够正常网络通信，主Proposer提出一个编号更高的提案，该提案终将会被批准。</li>
<li>每个Proposer发送提交提案的时间设置为<strong>一段时间内随机</strong>，保证不会一直死循环</li>
</ul>
<h4 id="ZAB算法"><a href="#ZAB算法" class="headerlink" title="ZAB算法"></a><strong>ZAB算法</strong></h4><h4 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h4><blockquote>
<p>Raft 是一种为了管理复制日志的一致性算法</p>
</blockquote>
<p>Raft使用<strong>心跳机制</strong>来触发选举。当server启动时，初始状态都是<strong>follower</strong>。每一个server都有一个定时器，超时时间为election timeout（<strong>一般为150-300ms</strong>），如果某server<strong>没有超时的情况下收到</strong>来自领导者或者候选者的任何消息，<strong>定时器重启</strong>，如果超时，它就<strong>开始一次选举</strong>。</p>
<p><strong>Leader异常</strong>：异常期间Follower会超时选举，完成后Leader比较彼此步长</p>
<p><strong>Follower异常：</strong>恢复后直接同步至Leader当前状态</p>
<p><strong>多个Candidate：</strong>选举时失败，失败后超时继续选举</p>
<h4 id="数据库和Redis的一致性"><a href="#数据库和Redis的一致性" class="headerlink" title="数据库和Redis的一致性"></a>数据库和Redis的一致性</h4><p><strong>全量缓存保证高效读取</strong></p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185425386.png" alt="image-20210418185425386" style="zoom:50%;" />

<p>所有数据都存储在缓存里，读服务在查询时不会再降级到数据库里，所有的请求都完全依赖缓存。此时，因降级到数据库导致的毛刺问题就解决了。但全量缓存并<strong>没有解决更新时的分布式事务</strong>问题，反而把问题放大了。因为全量缓存<strong>对数据更新要求更加严格</strong>，要求所有数据库<strong>已有数据和实时更新</strong>的数据必须完全同步至缓存，不能有遗漏。对于此问题，一种有效的方案是采用<strong>订阅数据库的 Binlog</strong> 实现数据同步</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185457610.png" alt="image-20210418185457610" style="zoom:50%;" />

<p>​    现在很多开源工具（如<strong>阿里的 Canal</strong>等）可以模拟主从复制的协议。通过模拟协议读取主数据库的 Binlog 文件，从而获取主库的所有变更。对于这些变更，它们开放了各种接口供业务服务获取数据。</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185516743.png" alt="image-20210418185516743" style="zoom:50%;" />

<p>​    将 Binlog 的中间件挂载至目标数据库上，就可以<strong>实时获取该数据库的所有变更数据</strong>。对这些变更数据解析后，便可<strong>直接写入缓存里</strong>。优点还有：</p>
<ul>
<li><p>大幅提升了读取的速度，降低了延迟</p>
</li>
<li><p>Binlog 的主从复制是基于 <strong>ACK</strong> 机制， 解决了分布式事务的问题</p>
<p>如果同步缓存失败了，被消费的 Binlog 不会被确认，下一次会重复消费，数据最终会写入缓存中</p>
</li>
</ul>
<p><strong>缺点</strong>不可避免：1、增加复杂度 2、消耗缓存资源 3、需要筛选和压缩数据 4、极端情况数据丢失</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185549520.png" alt="image-20210418185549520" style="zoom:50%;" />

<p>可以通过异步校准方案进行补齐，但是会损耗数据库性能。但是此方案会隐藏中间件使用错误的细节，线上环境前期更重要的是记录日志排查在做后续优化，不能本末倒置。</p>
<div style="page-break-after: always;"></div>

<h3 id="可用性-1"><a href="#可用性-1" class="headerlink" title="可用性"></a>可用性</h3><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a><strong>心跳检测</strong></h4><blockquote>
<p>以<strong>固定的频率</strong>向其他节点汇报当前节点状态的方式。收到心跳，说明网络和节点的状态是健康的。心跳汇报时，一般会携带一些附加的<strong>状态、元数据，以便管理</strong></p>
</blockquote>
<p><strong>周期检测心跳机制</strong>：超时未返回</p>
<p><strong>累计失效检测机制</strong>：重试超次数</p>
<h4 id="多机房实时热备"><a href="#多机房实时热备" class="headerlink" title="多机房实时热备"></a><strong>多机房实时热备</strong></h4><img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185610597.png" alt="6.png" style="zoom:50%;" />

<p>两套缓存集群可以分别部署到不同城市的机房。读服务也相应地部署到不同城市或不同分区。在承接请求时，不同机房或分区的读服务只依赖同样属性的缓存集群。此方案有两个好处。</p>
<ol>
<li><strong>提升了性能。</strong>读服务不要分层，读服务要尽可能地和缓存数据源靠近。</li>
<li><strong>增加了可用。</strong>当单机房出现故障时，可以秒级将所有流量都切换至存活的机房或分区</li>
</ol>
<p>此方案虽然带来了性能和可用性的提升，但代价是资源成本的上升。</p>
<div style="page-break-after: always;"></div>

<h3 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h3><blockquote>
<p>分布式系统对于错误包容的能力</p>
</blockquote>
<p>通过限流、降级、兜底、重试、负载均衡等方式增强系统的健壮性</p>
<h4 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p><img src="https://i.loli.net/2021/01/14/fmYEJy9N7Zjp2Xd.png" alt="image-20210114154435003"></p>
<ol>
<li><strong>Leader</strong>把指令添加到日志中，发起 RPC 给其他的服务器，让他们复制这条信息</li>
<li><strong>Leader</strong>会不断的重试，直到所有的 Follower响应了ACK并复制了所有的日志条目</li>
<li>通知所有的<strong>Follower</strong>提交，同时Leader该表这条日志的状态，并返回给客户端</li>
</ol>
<h4 id="主备（Master-Slave）"><a href="#主备（Master-Slave）" class="headerlink" title="主备（Master-Slave）"></a><strong>主备（Master-Slave）</strong></h4><p>​    主机宕机时，备机接管主机的一切工作，主机恢复正常后，以自动（<strong>热备</strong>）或手动（<strong>冷备</strong>）方式将服务切换到主机上运行，<strong>Mysql</strong>和<strong>Redis</strong>中常用。</p>
<p>​    MySQL之间数据复制的基础是<strong>二进制日志文件</strong>（binary log fifile）。它的数据库中所有操作都会以<strong>“事件”</strong>的方式记录在二进制日志中，其他数据库作为slave通过一个<strong>I&#x2F;O线程与主服务器保持通信</strong>，并<strong>监控</strong>master的二进制日志文件的变化，如果发现master二进制日志文件<strong>发生变化</strong>，则会把变化复制到自己的<strong>中继日志</strong>中，然后slave的一个SQL线程会把相关的“事件”<strong>执行</strong>到自己的数据库中，以此实现从数据库和主数据库的<strong>一致性</strong>，也就实现了<strong>主从复制</strong></p>
<h4 id="互备（Active-Active）"><a href="#互备（Active-Active）" class="headerlink" title="互备（Active-Active）"></a><strong>互备（Active-Active）</strong></h4><p>​    指两台主机<strong>同时运行</strong>各自的服务工作且<strong>相互监测</strong>情况。在数据库高可用部分，常见的互备是<strong>MM</strong>模式。MM模式即<strong>Multi-Master</strong>模式，指一个系统存在多个master，每个master都具有<strong>read-write</strong>能力，会根据<strong>时间戳</strong>或<strong>业务逻辑</strong>合并版本。</p>
<h4 id="集群（Cluster）模式"><a href="#集群（Cluster）模式" class="headerlink" title="集群（Cluster）模式"></a><strong>集群（Cluster）模式</strong></h4><p>​    是指有多个节点在运行，同时可以通过主控节点<strong>分担服务</strong>请求。如Zookeeper。集群模式需要解决主控节点<strong>本身的高可用</strong>问题，一般采用主备模式。</p>
<div style="page-break-after: always;"></div>

<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="XA方案-1"><a href="#XA方案-1" class="headerlink" title="XA方案"></a>XA方案</h4><p><strong>两阶段提交</strong> | <strong>三阶段提交</strong></p>
<ul>
<li>准备阶段的资源锁定，存在性能问题，严重时会造成死锁问题</li>
<li>提交事务请求后，出现网络异常，部分数据收到并执行，会造成一致性问</li>
</ul>
<h4 id="TCC方案"><a href="#TCC方案" class="headerlink" title="TCC方案"></a>TCC方案</h4><p><strong>Try Confirm Cancel &#x2F; 短事务</strong></p>
<ul>
<li><p><strong>Try</strong> 阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行<strong>锁定或者预留</strong></p>
</li>
<li><p><strong>Confirm</strong> 阶段：这个阶段说的是在各个服务中<strong>执行实际的操作</strong></p>
</li>
<li><p><strong>Cancel</strong> 阶段：如果任何一个服务的业务方法执行出错，那么就需要<strong>进行补偿</strong>&#x2F;回滚</p>
</li>
</ul>
<h4 id="Saga方案"><a href="#Saga方案" class="headerlink" title="Saga方案"></a><strong>Saga方案</strong></h4><p>事务性补偿 &#x2F; 长事务</p>
<ul>
<li>流程<strong>长</strong>、流程<strong>多</strong>、调用第三方业务</li>
</ul>
<h4 id="本地消息表（eBay）"><a href="#本地消息表（eBay）" class="headerlink" title="本地消息表（eBay）"></a><strong>本地消息表（eBay）</strong></h4><h4 id="MQ最终一致性"><a href="#MQ最终一致性" class="headerlink" title="MQ最终一致性"></a><strong>MQ最终一致性</strong></h4><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmr1k3dfbxj31h00pkjy8.jpg" alt="image-20210117220405706" style="zoom:50%;" />

<p>比如阿里的 RocketMQ 就支持消息事务（核心：<strong>双端确认，重试幂等</strong>）</p>
<ol>
<li>A**(订单)** 系统先发送一个 <strong>prepared</strong> 消息到 mq，prepared 消息发送失败则取消操作不执行了</li>
<li>发送成功后，那么执行本地事务，执行成功和和失败发送<strong>确认和回滚</strong>消息到mq</li>
<li>如果发送了确认消息，那么此时 B**(仓储)** 系统会接收到确认消息，然后执行本地的事务</li>
<li>mq 会自动<strong>定时轮询</strong>所有 prepared 消息回调的接口，确认事务执行状态</li>
<li>B 的事务失败后自动<strong>不断重试</strong>直到成功，达到一定次数后发送报警由人工来<strong>手工回滚</strong>和<strong>补偿</strong></li>
</ol>
<h4 id="最大努力通知方案（订单-gt-积分）"><a href="#最大努力通知方案（订单-gt-积分）" class="headerlink" title="最大努力通知方案（订单 -&gt; 积分）"></a>最大努力通知方案（订单 -&gt; 积分）</h4><ol>
<li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li>
<li>这里会有个专门消费 MQ 的<strong>最大努力通知服务</strong>，接着调用系统 B 的接口；</li>
<li>要是系统 B 执行失败了，就定时尝试重新调用系统 B，<strong>反复 N 次</strong>，最后还是不行就<strong>放弃</strong></li>
</ol>
<p>你找一个严格<strong>资金</strong>要求绝对不能错的场景，你可以说你是用的 <strong>TCC 方案</strong>；</p>
<p>如果是一般的分布式事务场景，例如<strong>积分</strong>数据，可以用可靠消息<strong>最终一致性方案</strong></p>
<p>如果分布式场景<strong>允许不一致</strong>，可以使用最大努力通知方案</p>
<div style="page-break-after: always;"></div>

<h3 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题"></a>面试题</h3><h4 id="分布式Session实现方案"><a href="#分布式Session实现方案" class="headerlink" title="分布式Session实现方案"></a>分布式Session实现方案</h4><ul>
<li>基于JWT的Token，数据从cache或者数据库中获取</li>
<li>基于Tomcat的Redis，简单配置conf文件</li>
<li>基于Spring的Redis，支持SpringCloud和Springb</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>9、【对线面试官】线程池</title>
    <url>/posts/ac3dc3bf/</url>
    <content><![CDATA[<h1 id="9、【对线面试官】线程池"><a href="#9、【对线面试官】线程池" class="headerlink" title="9、【对线面试官】线程池"></a>9、【对线面试官】线程池</h1><h2 id="今天来聊聊线程池呗，你对Java线程池了解多少？"><a href="#今天来聊聊线程池呗，你对Java线程池了解多少？" class="headerlink" title="今天来聊聊线程池呗，你对Java线程池了解多少？"></a>今天来聊聊线程池呗，你对Java线程池了解多少？</h2><h2 id="或者换个问法：为什么需要线程池？"><a href="#或者换个问法：为什么需要线程池？" class="headerlink" title="或者换个问法：为什么需要线程池？"></a>或者换个问法：为什么需要线程池？</h2><ol>
<li>JVM在HotSpot的线程模型下，Java线程会一对一映射为内核线程</li>
<li>这意味着，在Java中每次创建以及回收线程都会去内核创建以及回收</li>
<li>这就有可能导致：创建和销毁线程所花费的时间和资源可能比处理的任务花费的时间和资源要更多</li>
<li>线程池的出现是为了提高线程的复用性以及固定线程的数量！！！</li>
</ol>
<h2 id="你在项目中用到了线程池吗？"><a href="#你在项目中用到了线程池吗？" class="headerlink" title="你在项目中用到了线程池吗？"></a>你在项目中用到了线程池吗？</h2><ol>
<li>嗯，用到的。我先说下背景吧</li>
<li>我所负责的项目是消息管理平台，提供其中一个功能就是：运营会圈定人群，然后群发消息</li>
<li>主要流程大致就是：创建模板-》定时-》群发消息-》用户收到消息</li>
<li>运营圈定的人群实际上在模板上只是一个ID，我这边要通过ID去获取到HDFS文件</li>
<li>对HDFS文件进行遍历，然后继续往下发</li>
<li>「接收到定时任务，再对HDFS进行遍历」这里的处理，我用的就是线程池处理</li>
</ol>
<h2 id="为什么选择用线程池呢？"><a href="#为什么选择用线程池呢？" class="headerlink" title="为什么选择用线程池呢？"></a>为什么选择用线程池呢？</h2><ol>
<li>HDFS遍历其实就是IO的操作，我把这个过程给异步化，为了提高系统的吞吐量，于是我这里用的线程池。</li>
<li>即便遍历HDFS出现问题，我这边都有完备的监控和告警可以及时发现。</li>
</ol>
<h2 id="那你是怎么用线程池的呢？用Executors去创建的吗？"><a href="#那你是怎么用线程池的呢？用Executors去创建的吗？" class="headerlink" title="那你是怎么用线程池的呢？用Executors去创建的吗？"></a>那你是怎么用线程池的呢？用Executors去创建的吗？</h2><ol>
<li>不是的，我这边用的ThreadPoolExecutor去创建线程池</li>
<li>其实看阿里巴巴开发手册就有提到，不要使用Executors去创建线程。</li>
<li>最主要的目的就是：使用ThreadPoolExecutor创建的线程你是更能了解线程池运行的规则，避免资源耗尽的风险</li>
<li>ThreadPoolExecutor在构造的时候有几个重要的参数，分别是：<br>corePoolSize （核心线程数量） 、maxim umPoolSize（最大线程数量）、keepAli veTime（线程空余时间） 、workQueue（阻塞队列）、handler（任务拒绝策略）</li>
<li>这几个参数应该很好理解哈，我就说下任务提交的流程，分别对应着几个参数的作用吧。<ul>
<li>首先会判断运行线程数是否小于corePoolSize，如果小于，则直接创建新的线程执行任务</li>
<li>如果大于corePoolSize，判断workQueue阻塞队列是否已满，如果还没满，则将任务放到阻塞队列中</li>
<li>如果workQueue阻塞队列已经满了，则判断当前线程数是否大于maximumPoolSize，如果没大于则创建新的线程执行任务</li>
<li>如果大于maximumPoolSize，则执行任务拒绝策略（具体就是你自己实现的handler)</li>
</ul>
</li>
<li>这里有个点需要注意下，就是workQueu e阻塞队列满了，但当前线程数小于maximumPoolSize，这时候会创建新的线程执行任务</li>
<li>源码就是这样实现的</li>
<li>不过一般我们都是将corePoolSize和maximumPoolSize设置相同数量</li>
<li>keepAliveTime指的就是，当前运行的线程数大于核心线程数了，只要空闲时间达到了，就会对线程进行回收</li>
</ol>
<h2 id="那我再问一个问题，你创建线程池肯定会指定线程数的嘛，你这块是怎么考量的。"><a href="#那我再问一个问题，你创建线程池肯定会指定线程数的嘛，你这块是怎么考量的。" class="headerlink" title="那我再问一个问题，你创建线程池肯定会指定线程数的嘛，你这块是怎么考量的。"></a>那我再问一个问题，你创建线程池肯定会指定线程数的嘛，你这块是怎么考量的。</h2><ol>
<li>线程池指定线程数这块，首先要考量自己的业务是什么样的</li>
<li>是cpu密集型的还是io密集型的，假设运行应用的机器CPU核心数是N</li>
<li>那cpu密集型的可以先给到N+1，io密集型的可以给到2N去试试</li>
<li>上面这个只是一个常见的经验做法，具体究竟开多少线程，需要压测才能比较准确地定下来</li>
<li>线程不是说越大越好，在之前的面试我也提到过，多线程是为了充分利用CPU的资源</li>
<li>如果设置的线程过多，线程大量有上下文切换，这一部分也会带来系统的开销，这就得不偿失了</li>
</ol>
<h2 id="ThreadPoolExecutor你看过源码吗？"><a href="#ThreadPoolExecutor你看过源码吗？" class="headerlink" title="ThreadPoolExecutor你看过源码吗？"></a>ThreadPoolExecutor你看过源码吗？</h2><ol>
<li>看过的，其实上面说的ThreadPoolExecutor几个参数，在源码的顶部注释都有</li>
<li>在执行的时候，重点就在于它维护了一个ctl参数，这个ctl参数的用高3位表示线程池的状态，低29位来表示线程的数量</li>
<li>里边用到了大量的位运算符操作，具体细节我就忘了，但是流程还是上面所讲的</li>
</ol>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>面试官“谈谈Spring中都用到了那些设计模式”。</title>
    <url>/posts/eb551b6f/</url>
    <content><![CDATA[<h1 id="面试官-“谈谈Spring中都用到了那些设计模式-”。"><a href="#面试官-“谈谈Spring中都用到了那些设计模式-”。" class="headerlink" title="面试官:“谈谈Spring中都用到了那些设计模式?”。"></a>面试官:“谈谈Spring中都用到了那些设计模式?”。</h1><p>JDK 中用到了那些设计模式?Spring 中用到了那些设计模式?这两个问题，在面试中比较常见。我在网上搜索了一下关于 Spring 中设计模式的讲解几乎都是千篇一律，而且大部分都年代久远。所以，花了几天时间自己总结了一下，由于我的个人能力有限，文中如有任何错误各位都可以指出。另外，文章篇幅有限，对于设计模式以及一些源码的解读我只是一笔带过，这篇文章的主要目的是回顾一下 Spring 中的常见的设计模式。</p>
<p>Design Patterns(设计模式) 表示面向对象软件开发中最好的计算机编程实践。 Spring 框架中广泛使用了不同类型的设计模式，下面我们来看看到底有哪些设计模式?</p>
<h2 id="控制反转-IoC-和依赖注入-DI"><a href="#控制反转-IoC-和依赖注入-DI" class="headerlink" title="控制反转(IoC)和依赖注入(DI)"></a>控制反转(IoC)和依赖注入(DI)</h2><p><strong>IoC(Inversion of Control,控制翻转)</strong> 是Spring 中一个非常非常重要的概念，它不是什么技术，而是一种解耦的设计思想。它的主要目的是借助于“第三方”(Spring 中的 IOC 容器) 实现具有依赖关系的对象之间的解耦(IOC容易管理对象，你只管使用即可)，从而降低代码之间的耦合度。<strong>IOC 是一个原则，而不是一个模式，以下模式（但不限于）实现了IoC原则。</strong></p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/iaIdQfEric9TwBuibJ4N5OTyAvJibFj8b7zhiaTcnFwmnfLqQQWwlWv2uNMZyiabexkUSuW24WAWAuL6cvzguu8JyYzw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<center>ioc-patterns</center>

<p><strong>Spring IOC 容器就像是一个工厂一样，当我们需要创建一个对象的时候，只需要配置好配置文件&#x2F;注解即可，完全不用考虑对象是如何被创建出来的。</strong> IOC 容器负责创建对象，将对象连接在一起，配置这些对象，并从创建中处理这些对象的整个生命周期，直到它们被完全销毁。</p>
<p>在实际项目中一个 Service 类如果有几百甚至上千个类作为它的底层，我们需要实例化这个 Service，你可能要每次都要搞清这个 Service 所有底层类的构造函数，这可能会把人逼疯。如果利用 IOC 的话，你只需要配置好，然后在需要的地方引用就行了，这大大增加了项目的可维护性且降低了开发难度。关于Spring IOC 的理解，推荐看这一下知乎的一个回答：<a href="https://www.zhihu.com/question/23277575/answer/169698662">https://www.zhihu.com/question/23277575/answer/169698662</a> ，非常不错。</p>
<p><strong>控制翻转怎么理解呢?</strong> 举个例子：”对象a 依赖了对象 b，当对象 a 需要使用 对象 b的时候必须自己去创建。但是当系统引入了 IOC 容器后， 对象a 和对象 b 之前就失去了直接的联系。这个时候，当对象 a 需要使用 对象 b的时候， 我们可以指定 IOC 容器去创建一个对象b注入到对象 a 中”。 对象 a 获得依赖对象 b 的过程,由主动行为变为了被动行为，控制权翻转，这就是控制反转名字的由来。</p>
<p><strong>DI(Dependecy Inject,依赖注入)是实现控制反转的一种设计模式，依赖注入就是将实例变量传入到一个对象中去。</strong></p>
<h2 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h2><p>Spring使用工厂模式可以通过 <code>BeanFactory</code> 或 <code>ApplicationContext</code> 创建 bean 对象。</p>
<p><strong>两者对比：</strong></p>
<ul>
<li><code>BeanFactory</code> ：延迟注入(使用到某个 bean 的时候才会注入),相比于<code>BeanFactory</code>来说会占用更少的内存，程序启动速度更快。</li>
<li><code>ApplicationContext</code> ：容器启动的时候，不管你用没用到，一次性创建所有 bean 。<code>BeanFactory</code> 仅提供了最基本的依赖注入支持，<code>ApplicationContext</code> 扩展了 <code>BeanFactory</code> ,除了有<code>BeanFactory</code>的功能还有额外更多功能，所以一般开发人员使用<code>ApplicationContext</code>会更多。</li>
</ul>
<p>ApplicationContext的三个实现类：</p>
<ol>
<li><code>ClassPathXmlApplication</code>：把上下文文件当成类路径资源。</li>
<li><code>FileSystemXmlApplication</code>：从文件系统中的 XML 文件载入上下文定义信息。</li>
<li><code>XmlWebApplicationContext</code>：从Web系统中的XML文件载入上下文定义信息。</li>
</ol>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(</span><br><span class="line">                <span class="string">&quot;C:/work/IOC Containers/springframework.applicationcontext/src/main/resources/bean-factory-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloApplicationContext</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloApplicationContext) context.getBean(<span class="string">&quot;helloApplicationContext&quot;</span>);</span><br><span class="line">        obj.getMsg();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h2><p>在我们的系统中，有一些对象其实我们只需要一个，比如说：线程池、缓存、对话框、注册表、日志对象、充当打印机、显卡等设备驱动程序的对象。事实上，这一类对象只能有一个实例，如果制造出多个实例就可能会导致一些问题的产生，比如：程序的行为异常、资源使用过量、或者不一致性的结果。</p>
<p><strong>使用单例模式的好处:</strong></p>
<ul>
<li>对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；</li>
<li>由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。</li>
</ul>
<p><strong>Spring 中 bean 的默认作用域就是 singleton(单例)的。</strong> 除了 singleton 作用域，Spring 中 bean 还有下面几种作用域：</p>
<ul>
<li>prototype : 每次请求都会创建一个新的 bean 实例。</li>
<li>request : 每一次HTTP请求都会产生一个新的bean，该bean仅在当前HTTP request内有效。</li>
<li>session : 每一次HTTP请求都会产生一个新的 bean，该bean仅在当前 HTTP session 内有效。</li>
<li>global-session： 全局session作用域，仅仅在基于portlet的web应用中才有意义，Spring5已经没有了。Portlet是能够生成语义代码(例如：HTML)片段的小型Java Web插件。它们基于portlet容器，可以像servlet一样处理HTTP请求。但是，与 servlet 不同，每个 portlet 都有不同的会话</li>
</ul>
<p><strong>Spring 实现单例的方式：</strong></p>
<ul>
<li>xml:<bean id="userService" class="top.snailclimb.UserService" scope="singleton"/>&#96;&#96;</li>
<li>注解：<code>@Scope(value = &quot;singleton&quot;)</code></li>
</ul>
<p>Spring 通过 <code>ConcurrentHashMap</code> 实现单例注册表的特殊方式实现单例模式。Spring 实现单例的核心代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过 ConcurrentHashMap（线程安全） 实现单例注册表</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;String, Object&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">getSingleton</span><span class="params">(String beanName, ObjectFactory&lt;?&gt; singletonFactory)</span> &#123;</span><br><span class="line">        Assert.notNull(beanName, <span class="string">&quot;&#x27;beanName&#x27; must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">// 检查缓存中是否存在实例  </span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">singletonObject</span> <span class="operator">=</span> <span class="built_in">this</span>.singletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//...省略了很多代码</span></span><br><span class="line">                <span class="comment">// 如果实例对象在不存在，我们注册到单例注册表中。</span></span><br><span class="line">                addSingleton(beanName, singletonObject);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将对象添加到单例注册表</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addSingleton</span><span class="params">(String beanName, Object singletonObject)</span> &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>.singletonObjects) &#123;</span><br><span class="line">                <span class="built_in">this</span>.singletonObjects.put(beanName, (singletonObject != <span class="literal">null</span> ? singletonObject : NULL_OBJECT));</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理设计模式"><a href="#代理设计模式" class="headerlink" title="代理设计模式"></a>代理设计模式</h2><h3 id="代理模式在-AOP-中的应用"><a href="#代理模式在-AOP-中的应用" class="headerlink" title="代理模式在 AOP 中的应用"></a>代理模式在 AOP 中的应用</h3><p>AOP(Aspect-Oriented Programming:面向切面编程)能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<p><strong>Spring AOP 就是基于动态代理的</strong>，如果要代理的对象，实现了某个接口，那么Spring AOP会使用<strong>JDK Proxy</strong>，去创建代理对象，而对于没有实现接口的对象，就无法使用 JDK Proxy 去进行代理了，这时候Spring AOP会使用<strong>Cglib</strong> ，这时候Spring AOP会使用 <strong>Cglib</strong> 生成一个被代理对象的子类来作为代理，如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/16qDep_20210809142649.png" alt="图片"></p>
<center>SpringAOPProcess</center>

<p>当然你也可以使用 AspectJ ,Spring AOP 已经集成了AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。</p>
<p>使用 AOP 之后我们可以把一些通用功能抽象出来，在需要用到的地方直接使用即可，这样大大简化了代码量。我们需要增加新功能时也方便，这样也提高了系统扩展性。日志功能、事务管理等等场景都用到了 AOP 。</p>
<h3 id="Spring-AOP-和-AspectJ-AOP-有什么区别"><a href="#Spring-AOP-和-AspectJ-AOP-有什么区别" class="headerlink" title="Spring AOP 和 AspectJ AOP 有什么区别?"></a>Spring AOP 和 AspectJ AOP 有什么区别?</h3><p><strong>Spring AOP 属于运行时增强，而 AspectJ 是编译时增强。</strong> Spring AOP 基于代理(Proxying)，而 AspectJ 基于字节码操作(Bytecode Manipulation)。</p>
<p>Spring AOP 已经集成了 AspectJ ，AspectJ 应该算的上是 Java 生态系统中最完整的 AOP 框架了。AspectJ 相比于 Spring AOP 功能更加强大，但是 Spring AOP 相对来说更简单，</p>
<p>如果我们的切面比较少，那么两者性能差异不大。但是，当切面太多的话，最好选择 AspectJ ，它比Spring AOP 快很多。</p>
<h2 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h2><p>模板方法模式是一种行为设计模式，它定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。 模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤的实现方式。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/7MhBrj_20210809142855.png" alt="图片"></p>
<center>模板方法UML图</center>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Template</span> &#123;</span><br><span class="line">    <span class="comment">//这是我们的模板方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">TemplateMethod</span><span class="params">()</span>&#123;</span><br><span class="line">        PrimitiveOperation1();  </span><br><span class="line">        PrimitiveOperation2();</span><br><span class="line">        PrimitiveOperation3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span>  <span class="title function_">PrimitiveOperation1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//被子类实现的方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation3</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateImpl</span> <span class="keyword">extends</span> <span class="title class_">Template</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">PrimitiveOperation3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//当前类实现</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。一般情况下，我们都是使用继承的方式来实现模板模式，但是 Spring 并没有使用这种方式，而是使用Callback 模式与模板方法模式配合，既达到了代码复用的效果，同时增加了灵活性。</p>
<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h2><p>观察者模式是一种对象行为型模式。它表示的是一种对象与对象之间具有依赖关系，当一个对象发生改变的时候，这个对象所依赖的对象也会做出反应。Spring 事件驱动模型就是观察者模式很经典的一个应用。Spring 事件驱动模型非常有用，在很多场景都可以解耦我们的代码。比如我们每次添加商品的时候都需要重新更新商品索引，这个时候就可以利用观察者模式来解决这个问题。</p>
<h3 id="Spring-事件驱动模型中的三种角色"><a href="#Spring-事件驱动模型中的三种角色" class="headerlink" title="Spring 事件驱动模型中的三种角色"></a>Spring 事件驱动模型中的三种角色</h3><h4 id="事件角色"><a href="#事件角色" class="headerlink" title="事件角色"></a>事件角色</h4><p><code>ApplicationEvent</code> (<code>org.springframework.context</code>包下)充当事件的角色,这是一个抽象类，它继承了<code>java.util.EventObject</code>并实现了 <code>java.io.Serializable</code>接口。</p>
<p>Spring 中默认存在以下事件，他们都是对 <code>ApplicationContextEvent</code> 的实现(继承自<code>ApplicationContextEvent</code>)：</p>
<ul>
<li><code>ContextStartedEvent</code>：<code>ApplicationContext</code> 启动后触发的事件;</li>
<li><code>ContextStoppedEvent</code>：<code>ApplicationContext</code> 停止后触发的事件;</li>
<li><code>ContextRefreshedEvent</code>：<code>ApplicationContext</code> 初始化或刷新完成后触发的事件;</li>
<li><code>ContextClosedEvent</code>：<code>ApplicationContext</code> 关闭后触发的事件。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/tKwbDY_20210809143054.png" alt="图片"></p>
<center>ApplicationEvent-Subclass</center>

<h4 id="事件监听者角色"><a href="#事件监听者角色" class="headerlink" title="事件监听者角色"></a>事件监听者角色</h4><p><code>ApplicationListener</code> 充当了事件监听者角色，它是一个接口，里面只定义了一个 <code>onApplicationEvent（）</code>方法来处理<code>ApplicationEvent</code>。<code>ApplicationListener</code>接口类源码如下，可以看出接口定义看出接口中的事件只要实现了 <code>ApplicationEvent</code>就可以了。所以，在 Spring中我们只要实现 <code>ApplicationListener</code> 接口实现 <code>onApplicationEvent()</code> 方法即可完成监听事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.context;</span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationListener</span>&lt;E <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title class_">EventListener</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(E var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="事件发布者角色"><a href="#事件发布者角色" class="headerlink" title="事件发布者角色"></a>事件发布者角色</h4><p><code>ApplicationEventPublisher</code> 充当了事件的发布者，它也是一个接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationEventPublisher</span> &#123;</span><br><span class="line">    <span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(ApplicationEvent event)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.publishEvent((Object)event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">publishEvent</span><span class="params">(Object var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>ApplicationEventPublisher</code> 接口的<code>publishEvent（）</code>这个方法在<code>AbstractApplicationContext</code>类中被实现，阅读这个方法的实现，你会发现实际上事件真正是通过<code>ApplicationEventMulticaster</code>来广播出去的。具体内容过多，就不在这里分析了，后面可能会单独写一篇文章提到。</p>
<h3 id="Spring-的事件流程总结"><a href="#Spring-的事件流程总结" class="headerlink" title="Spring 的事件流程总结"></a>Spring 的事件流程总结</h3><ol>
<li>定义一个事件: 实现一个继承自 <code>ApplicationEvent</code>，并且写相应的构造函数；</li>
<li>定义一个事件监听者：实现 <code>ApplicationListener</code> 接口，重写 <code>onApplicationEvent()</code> 方法；</li>
<li>使用事件发布者发布消息: 可以通过 <code>ApplicationEventPublisher</code> 的 <code>publishEvent()</code> 方法发布消息。</li>
</ol>
<p>Example:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个事件,继承自ApplicationEvent并且写相应的构造函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DemoEvent</span><span class="params">(Object source,String message)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> message;</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个事件监听者,实现ApplicationListener接口，重写 onApplicationEvent() 方法；</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoListener</span> <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;DemoEvent&gt;&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用onApplicationEvent接收消息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(DemoEvent event)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> event.getMessage();</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到的信息是：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 发布事件，可以通过ApplicationEventPublisher  的 publishEvent() 方法发布消息。</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoPublisher</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="comment">//发布事件</span></span><br><span class="line">        applicationContext.publishEvent(<span class="keyword">new</span> <span class="title class_">DemoEvent</span>(<span class="built_in">this</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用 <code>DemoPublisher</code> 的 <code>publish()</code> 方法的时候，比如 <code>demoPublisher.publish(&quot;你好&quot;)</code> ，控制台就会打印出:<code>接收到的信息是：你好</code> 。</p>
<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式(Adapter Pattern) 将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。</p>
<h3 id="spring-AOP中的适配器模式"><a href="#spring-AOP中的适配器模式" class="headerlink" title="spring AOP中的适配器模式"></a>spring AOP中的适配器模式</h3><p>我们知道 Spring AOP 的实现是基于代理模式，但是 Spring AOP 的增强或通知(Advice)使用到了适配器模式，与之相关的接口是<code>AdvisorAdapter</code> 。Advice 常用的类型有：<code>BeforeAdvice</code>（目标方法调用前,前置通知）、<code>AfterAdvice</code>（目标方法调用后,后置通知）、<code>AfterReturningAdvice</code>(目标方法执行结束后，return之前)等等。每个类型Advice（通知）都有对应的拦截器:<code>MethodBeforeAdviceInterceptor</code>、<code>AfterReturningAdviceAdapter</code>、<code>AfterReturningAdviceInterceptor</code>。Spring预定义的通知要通过对应的适配器，适配成 <code>MethodInterceptor</code>接口(方法拦截器)类型的对象（如：<code>MethodBeforeAdviceInterceptor</code> 负责适配 <code>MethodBeforeAdvice</code>）。</p>
<h3 id="spring-MVC中的适配器模式"><a href="#spring-MVC中的适配器模式" class="headerlink" title="spring MVC中的适配器模式"></a>spring MVC中的适配器模式</h3><p>在Spring MVC中，<code>DispatcherServlet</code> 根据请求信息调用 <code>HandlerMapping</code>，解析请求对应的 <code>Handler</code>。解析到对应的 <code>Handler</code>（也就是我们平常说的 <code>Controller</code> 控制器）后，开始由<code>HandlerAdapter</code> 适配器处理。<code>HandlerAdapter</code> 作为期望接口，具体的适配器实现类用于对目标类进行适配，<code>Controller</code> 作为需要适配的类。</p>
<p><strong>为什么要在 Spring MVC 中使用适配器模式？</strong> Spring MVC 中的 <code>Controller</code> 种类众多，不同类型的 <code>Controller</code> 通过不同的方法来对请求进行处理。如果不利用适配器模式的话，<code>DispatcherServlet</code> 直接获取对应类型的 <code>Controller</code>，需要的自行来判断，像下面这段代码一样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(mappedHandler.getHandler() <span class="keyword">instanceof</span> MultiActionController)&#123;  </span><br><span class="line">   ((MultiActionController)mappedHandler.getHandler()).xxx  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(mappedHandler.getHandler() <span class="keyword">instanceof</span> XXX)&#123;  </span><br><span class="line">    ...  </span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(...)&#123;  </span><br><span class="line">   ...  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>假如我们再增加一个 <code>Controller</code>类型就要在上面代码中再加入一行 判断语句，这种形式就使得程序难以维护，也违反了设计模式中的开闭原则 – 对扩展开放，对修改关闭。</p>
<h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><p>装饰者模式可以动态地给对象添加一些额外的属性或行为。相比于使用继承，装饰者模式更加灵活。简单点儿说就是当我们需要修改原有的功能，但我们又不愿直接去修改原有的代码时，设计一个Decorator套在原有代码外面。其实在 JDK 中就有很多地方用到了装饰者模式，比如 <code>InputStream</code>家族，<code>InputStream</code> 类下有 <code>FileInputStream</code> (读取文件)、<code>BufferedInputStream</code> (增加缓存,使读取文件速度大大提升)等子类都在不修改<code>InputStream</code> 代码的情况下扩展了它的功能。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/TRTmlJ_20210809143212.png" alt="图片"></p>
<center>
  装饰者模式示意图
</center>

<p>Spring 中配置 DataSource 的时候，DataSource 可能是不同的数据库和数据源。我们能否根据客户的需求在少修改原有类的代码下动态切换不同的数据源？这个时候就要用到装饰者模式(这一点我自己还没太理解具体原理)。Spring 中用到的包装器模式在类名上含有 <code>Wrapper</code>或者 <code>Decorator</code>。这些类基本上都是动态地给一个对象添加一些额外的职责</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Spring 框架中用到了哪些设计模式：</p>
<ul>
<li><strong>工厂设计模式</strong> : Spring使用工厂模式通过 <code>BeanFactory</code>、<code>ApplicationContext</code> 创建 bean 对象。</li>
<li><strong>代理设计模式</strong> : Spring AOP 功能的实现。</li>
<li><strong>单例设计模式</strong> : Spring 中的 Bean 默认都是单例的。</li>
<li><strong>模板方法模式</strong> : Spring 中 <code>jdbcTemplate</code>、<code>hibernateTemplate</code> 等以 Template 结尾的对数据库操作的类，它们就使用到了模板模式。</li>
<li><strong>包装器设计模式</strong> : 我们的项目需要连接多个数据库，而且不同的客户在每次访问中根据需要会去访问不同的数据库。这种模式让我们可以根据客户的需求能够动态切换不同的数据源。</li>
<li><strong>观察者模式:</strong> Spring 事件驱动模型就是观察者模式很经典的一个应用。</li>
<li><strong>适配器模式</strong> :Spring AOP 的增强或通知(Advice)使用到了适配器模式、spring MVC 中也是用到了适配器模式适配<code>Controller</code>。</li>
<li>……</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li>《Spring技术内幕》</li>
<li><a href="https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/">https://blog.eduonix.com/java-programming-2/learn-design-patterns-used-spring-framework/</a></li>
<li><a href="http://blog.yeamin.top/2018/03/27/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F-Spring%E5%8D%95%E4%BE%8B%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90/">http://blog.yeamin.top/2018/03/27/单例模式-Spring单例实现原理分析/</a></li>
<li><a href="https://www.tutorialsteacher.com/ioc/inversion-of-control">https://www.tutorialsteacher.com/ioc/inversion-of-control</a></li>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html">https://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html</a></li>
<li><a href="https://juejin.im/post/5a8eb261f265da4e9e307230">https://juejin.im/post/5a8eb261f265da4e9e307230</a></li>
<li><a href="https://juejin.im/post/5ba28986f265da0abc2b6084">https://juejin.im/post/5ba28986f265da0abc2b6084</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>记录</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划答疑篇</title>
    <url>/posts/995671e7/</url>
    <content><![CDATA[<h1 id="动态规划答疑篇"><a href="#动态规划答疑篇" class="headerlink" title="动态规划答疑篇"></a>动态规划答疑篇</h1><h2 id="预计阅读时间：7-分钟"><a href="#预计阅读时间：7-分钟" class="headerlink" title="预计阅读时间：7 分钟"></a>预计阅读时间：7 分钟</h2><p>这篇文章就给你讲明白两个读者问得最多的问题：</p>
<p>1、到底什么才叫「最优子结构」，和动态规划什么关系。</p>
<p>2、为什么动态规划遍历<code>dp</code>数组的方式五花八门，有的正着遍历，有的倒着遍历，有的斜着遍历，有的无论咋遍历都是对的。</p>
<h2 id="一、最优子结构详解"><a href="#一、最优子结构详解" class="headerlink" title="一、最优子结构详解"></a>一、最优子结构详解</h2><p>「最优子结构」是某些问题的一种特定性质，并不是动态规划问题专有的。也就是说，很多问题其实都具有最优子结构，只是其中大部分不具有重叠子问题，所以我们不把它们归为动态规划系列问题而已。</p>
<p>我先举个很容易理解的例子：假设你们学校有 10 个班，你已经计算出了每个班的最高考试成绩。那么现在我要求你计算全校最高的成绩，你会不会算？当然会，而且你不用重新遍历全校学生的分数进行比较，而是只要在这 10 个最高成绩中取最大的就是全校的最高成绩。</p>
<p>我给你提出的这个问题就<strong>符合最优子结构</strong>：可以从子问题的最优结果推出更大规模问题的最优结果。让你算<strong>每个班</strong>的最优成绩就是子问题，你知道所有子问题的答案后，就可以借此推出<strong>全校</strong>学生的最优成绩这个规模更大的问题的答案。</p>
<p>你看，这么简单的问题都有最优子结构性质，只是因为显然没有重叠子问题，所以我们简单地求最值肯定用不出动态规划。</p>
<p>再举个例子：假设你们学校有 10 个班，你已知每个班的最大分数差（最高分和最低分的差值）。那么现在我让你计算全校学生中的最大分数差，你会不会算？可以想办法算，但是肯定不能通过已知的这 10 个班的最大分数差推到出来。因为这 10 个班的最大分数差不一定就包含全校学生的最大分数差，比如全校的最大分数差可能是 3 班的最高分和 6 班的最低分之差。</p>
<p>这次我给你提出的问题就<strong>不符合最优子结构</strong>，因为你没办通过每个班的最优值推出全校的最优值，没办法通过子问题的最优值推出规模更大的问题的最优值。前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484731&idx=1&sn=f1db6dee2c8e70c42240aead9fd224e6&chksm=9bd7fb33aca07225bee0b23a911c30295e0b90f393af75eca377caa4598ffb203549e1768336&scene=21#wechat_redirect">动态规划详解</a> 说过，想满足最优子结，子问题之间必须互相独立。全校的最大分数差可能出现在两个班之间，显然子问题不独立，所以这个问题本身不符合最优子结构。</p>
<p><strong>那么遇到这种最优子结构失效情况，怎么办？策略是：改造问题</strong>。对于最大分数差这个问题，我们不是没办法利用已知的每个班的分数差吗，那我只能这样写一段暴力代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (Student a : school) &#123;</span><br><span class="line">    <span class="keyword">for</span> (Student b : school) &#123;</span><br><span class="line">        <span class="keyword">if</span> (a is b) <span class="keyword">continue</span>;</span><br><span class="line">        result = max(result, |a.score - b.score|);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br></pre></td></tr></table></figure>

<p>改造问题，也就是把问题等价转化：最大分数差，不就等价于最高分数和最低分数的差么，那不就是要求最高和最低分数么，不就是我们讨论的第一个问题么，不就具有最优子结构了么？那现在改变思路，借助最优子结构解决最值问题，再回过头解决最大分数差问题，是不是就高效多了？</p>
<p>当然，上面这个例子太简单了，不过请读者回顾一下，我们做动态规划问题，是不是一直在求各种最值，本质跟我们举的例子没啥区别，无非需要处理一下重叠子问题。</p>
<p>前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484469&idx=1&sn=e8d321c8ad62483874a997e9dd72da8f&chksm=9bd7fa3daca0732b316aa0afa58e70357e1cb7ab1fe0855d06bc4a852abb1b434c01c7dd19d6&scene=21#wechat_redirect">动态规划：不同的定义产生不同的解法</a> 和 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484690&idx=1&sn=eea075701a5d96dd5c6e3dc6a993cac5&chksm=9bd7fb1aaca0720c58c9d9e02a8b9211a289bcea359633a95886d7808d2846898d489ce98078&scene=21#wechat_redirect">经典动态规划：高楼扔鸡蛋（进阶篇）</a> 就展示了如何改造问题，不同的最优子结构，可能导致不同的解法和效率。</p>
<p>再举个常见但也十分简单的例子，求一棵二叉树的最大值，不难吧（简单起见，假设节点中的值都是非负数）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxVal</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> maxVal(root.left);</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> maxVal(root.right);</span><br><span class="line">    <span class="keyword">return</span> max(root.val, left, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看这个问题也符合最优子结构，以<code>root</code>为根的树的最大值，可以通过两边子树（子问题）的最大值推导出来，结合刚才学校和班级的例子，很容易理解吧。</p>
<p>当然这也不是动态规划问题，旨在说明，最优子结构并不是动态规划独有的一种性质，能求最值的问题大部分都具有这个性质；<strong>但反过来，最优子结构性质作为动态规划问题的必要条件，一定是让你求最值的</strong>，以后碰到那种恶心人的最值题，思路往动态规划想就对了，这就是套路。</p>
<p>动态规划不就是从最简单的 base case 往后推导吗，可以想象成一个链式反应，不断以小博大。但只有符合最优子结构的问题，才有发生这种链式反应的性质。</p>
<p>找最优子结构的过程，其实就是证明状态转移方程正确性的过程，方程符合最优子结构就可以写暴力解了，写出暴力解就可以看出有没有重叠子问题了，有则优化，无则 OK。这也是套路，经常刷题的朋友应该能体会。</p>
<p>这里就不举那些正宗动态规划的例子了，读者可以翻翻历史文章，看看状态转移是如何遵循最优子结构的，这个话题就聊到这，下面再来看另外个动态规划迷惑行为。</p>
<h3 id="二、dp-数组的遍历方向"><a href="#二、dp-数组的遍历方向" class="headerlink" title="二、dp 数组的遍历方向"></a>二、dp 数组的遍历方向</h3><p>我相信读者做动态规划问题时，肯定会对<code>dp</code>数组的遍历顺序有些头疼。我们拿二维<code>dp</code>数组来举例，有时候我们是正向遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        <span class="comment">// 计算 dp[i][j]</span></span><br></pre></td></tr></table></figure>

<p>有时候我们反向遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line">        <span class="comment">// 计算 dp[i][j]</span></span><br></pre></td></tr></table></figure>

<p>有时候可能会斜向遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 斜着遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> <span class="number">2</span>; l &lt;= n; l++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n - l; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> l + i - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 计算 dp[i][j]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>甚至更让人迷惑的是，有时候发现正向反向遍历都可以得到正确答案，比如我们在 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484508&idx=1&sn=42cae6e7c5ccab1f156a83ea65b00b78&chksm=9bd7fa54aca07342d12ae149dac3dfa76dc42bcdd55df2c71e78f92dedbbcbdb36dec56ac13b&scene=21#wechat_redirect">团灭 LeetCode 股票买卖问题</a> 中有的地方就正反皆可。</p>
<p>那么，如果仔细观察的话可以发现其中的原因的。你只要把住两点就行了：</p>
<p><strong>1、遍历的过程中，所需的状态必须是已经计算出来的</strong>。</p>
<p><strong>2、遍历的终点必须是存储结果的那个位置</strong>。</p>
<p>下面来具体解释上面两个原则是什么意思。</p>
<p>比如编辑距离这个经典的问题，详解见前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484484&idx=1&sn=74594297022c84952162a68b7f739133&chksm=9bd7fa4caca0735a1364dd13901311ecd6ec4913c8db05a1ff6cae8f069627eebe8d651bbeb1&scene=21#wechat_redirect">经典动态规划：编辑距离</a>，我们通过对<code>dp</code>数组的定义，确定了 base case 是<code>dp[..][0]</code>和<code>dp[0][..]</code>，最终答案是<code>dp[m][n]</code>；而且我们通过状态转移方程知道<code>dp[i][j]</code>需要从<code>dp[i-1][j]</code>,<code>dp[i][j-1]</code>,<code>dp[i-1][j-1]</code>转移而来，如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/H23fMQ_20210507174659.png" alt="图片"></p>
<p>那么，参考刚才说的两条原则，你该怎么遍历<code>dp</code>数组？肯定是正向遍历：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++)</span><br><span class="line">        <span class="comment">// 通过 dp[i-1][j], dp[i][j - 1], dp[i-1][j-1]</span></span><br><span class="line">        <span class="comment">// 计算 dp[i][j]</span></span><br></pre></td></tr></table></figure>

<p><strong>因为，这样每一步迭代的左边、上边、左上边的位置都是 base case 或者之前计算过的，而且最终结束在我们想要的答案<code>dp[m][n]</code>。</strong></p>
<p>再举一例，回文子序列问题，详见前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484666&idx=1&sn=e3305be9513eaa16f7f1568c0892a468&chksm=9bd7faf2aca073e4f08332a706b7c10af877fee3993aac4dae86d05783d3d0df31844287104e&scene=21#wechat_redirect">子序列解题模板：最长回文子序列</a>，我们通过过对<code>dp</code>数组的定义，确定了 base case 处在中间的对角线，<code>dp[i][j]</code>需要从<code>dp[i+1][j]</code>,<code>dp[i][j-1]</code>,<code>dp[i+1][j-1]</code>转移而来，想要求的最终答案是<code>dp[0][n-1]</code>，如下图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/L4hOYZ_20210507174734.png" alt="图片"></p>
<p>这种情况根据刚才的两个原则，就可以有两种正确的遍历方式：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/UGCkQ2_20210507174820.png" alt="图片"></p>
<p><strong>要么从左至右斜着遍历，要么从下向上从左到右遍历，这样才能保证每次<code>dp[i][j]</code>的左边、下边、左下边已经计算完毕，最终得到正确结果。</strong></p>
<p>现在，你应该理解了这两个原则，主要就是看 base case 和最终结果的存储位置，保证遍历过程中使用的数据都是计算完毕的就行，有时候确实存在多种方法可以得到正确答案，可根据个人口味自行选择。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA</title>
    <url>/posts/498f0b66/</url>
    <content><![CDATA[<ul>
<li><a href="#%E4%B8%80%E5%9F%BA%E7%A1%80%E7%AF%87">一、基础篇</a><ul>
<li><a href="#%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80">网络基础</a><ul>
<li><a href="#tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"><strong>TCP三次握手</strong></a><ul>
<li><a href="#1osi%E4%B8%8Etcpip-%E6%A8%A1%E5%9E%8B"><strong>1、OSI与TCP&#x2F;IP 模型</strong></a></li>
<li><a href="#2%E5%B8%B8%E8%A7%81%E7%BD%91%E7%BB%9C%E6%9C%8D%E5%8A%A1%E5%88%86%E5%B1%82"><strong>2、常见网络服务分层</strong></a></li>
<li><a href="#3tcp%E4%B8%8Eudp%E5%8C%BA%E5%88%AB%E5%8F%8A%E5%9C%BA%E6%99%AF"><strong>3、TCP与UDP区别及场景</strong></a></li>
<li><a href="#4tcp%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6"><strong>4、TCP滑动窗口，拥塞控制</strong></a></li>
<li><a href="#5tcp%E7%B2%98%E5%8C%85%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95"><strong>5、TCP粘包原因和解决方法</strong></a></li>
<li><a href="#6tcpudp%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F"><strong>6、TCP、UDP报文格式</strong></a></li>
</ul>
</li>
<li><a href="#http%E5%8D%8F%E8%AE%AE"><strong>HTTP协议</strong></a><ul>
<li><a href="#1http%E5%8D%8F%E8%AE%AE10_11_20">1、HTTP协议<em>1.0_1.1_2.0</em></a></li>
<li><a href="#2http%E4%B8%8Ehttps%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8C%BA%E5%88%AB">2、HTTP与HTTPS之间的区别</a></li>
<li><a href="#3get%E5%92%8Cpost%E8%AF%B7%E6%B1%82%E5%8C%BA%E5%88%AB"><strong>3、Get和Post请求区别</strong></a></li>
<li><a href="#4http%E5%B8%B8%E8%A7%81%E5%93%8D%E5%BA%94%E7%8A%B6%E6%80%81%E7%A0%81"><strong>4、HTTP常见响应状态码</strong></a></li>
<li><a href="#5%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E8%BD%AC%E5%8F%91%E5%8C%BA%E5%88%AB"><strong>5、重定向和转发区别</strong></a></li>
<li><a href="#6cookie%E5%92%8Csession%E5%8C%BA%E5%88%AB"><strong>6、Cookie和Session区别。</strong></a></li>
</ul>
</li>
<li><a href="#%E6%B5%8F%E8%A7%88%E5%99%A8%E8%BE%93%E5%85%A5url%E8%BF%87%E7%A8%8B"><strong>浏览器输入URL过程</strong></a></li>
</ul>
</li>
<li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80"><strong>操作系统基础</strong></a><ul>
<li><a href="#%E8%BF%9B%E7%A8%8B%E5%92%8C%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB"><strong>进程和线程的区别</strong></a><ul>
<li><a href="#1%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8Fipc"><strong>1、进程间通信方式IPC</strong></a></li>
<li><a href="#2%E7%94%A8%E6%88%B7%E6%80%81%E5%92%8C%E6%A0%B8%E5%BF%83%E6%80%81"><strong>2、用户态和核心态</strong></a></li>
<li><a href="#3%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%BF%9B%E7%A8%8B%E7%A9%BA%E9%97%B4"><strong>3、操作系统的进程空间</strong></a></li>
</ul>
</li>
<li><a href="#%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86">操作系统内存管理</a><ul>
<li><a href="#1%E9%A1%B5%E9%9D%A2%E7%BD%AE%E6%8D%A2%E7%AE%97%E6%B3%95fifolru"><strong>1、页面置换算法FIFO、LRU</strong></a></li>
<li><a href="#2%E6%AD%BB%E9%94%81%E6%9D%A1%E4%BB%B6%E8%A7%A3%E5%86%B3%E6%96%B9%E5%BC%8F"><strong>2、死锁条件、解决方式。</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#java%E5%9F%BA%E7%A1%80"><strong>Java基础</strong></a><ul>
<li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E4%B8%89%E5%A4%A7%E7%89%B9%E6%80%A7">面向对象三大特性</a><ul>
<li><a href="#1java%E4%B8%8Ec%E5%8C%BA%E5%88%AB"><strong>1、Java与C++区别</strong></a></li>
<li><a href="#2%E5%A4%9A%E6%80%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86"><strong>2、多态实现原理</strong></a></li>
<li><a href="#3static%E5%92%8Cfinal%E5%85%B3%E9%94%AE%E5%AD%97">3、static和final关键字</a></li>
<li><a href="#4%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3">4、抽象类和接口</a></li>
<li><a href="#5%E6%B3%9B%E5%9E%8B%E4%BB%A5%E5%8F%8A%E6%B3%9B%E5%9E%8B%E6%93%A6%E9%99%A4">5、泛型以及泛型擦除</a></li>
<li><a href="#6%E5%8F%8D%E5%B0%84%E5%8E%9F%E7%90%86%E4%BB%A5%E5%8F%8A%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"><strong>6、反射原理以及使用场景</strong></a></li>
<li><a href="#7java%E5%BC%82%E5%B8%B8%E4%BD%93%E7%B3%BB"><strong>7、Java异常体系</strong></a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84">数据结构</a><ul>
<li><a href="#1arraylist%E5%92%8Clinkedlist"><strong>1、ArrayList和LinkedList</strong></a></li>
<li><a href="#2list%E9%81%8D%E5%8E%86%E5%BF%AB%E9%80%9F%E5%92%8C%E5%AE%89%E5%85%A8%E5%A4%B1%E8%B4%A5"><strong>2、List遍历快速和安全失败</strong></a></li>
<li><a href="#3%E8%AF%A6%E7%BB%86%E4%BB%8B%E7%BB%8Dhashmap"><strong>3、详细介绍HashMap</strong></a></li>
<li><a href="#4concurrenthashmap-">**4、ConcurrentHashMap **</a></li>
<li><a href="#5%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96"><strong>5、序列化和反序列化</strong></a></li>
<li><a href="#6string"><strong>6、String</strong></a></li>
</ul>
</li>
<li><a href="#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%8E%9F%E5%88%99">设计模式与原则</a><ul>
<li><a href="#1%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F">1、单例模式</a></li>
<li><a href="#2%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">2、工厂模式</a></li>
<li><a href="#3%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F">3、抽象工厂模式</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98">面试题</a><ul>
<li><a href="#%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95">构造方法</a></li>
<li><a href="#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%9D%97">初始化块</a></li>
<li><a href="#this">This</a></li>
<li><a href="#%E9%87%8D%E5%86%99%E5%92%8C%E9%87%8D%E8%BD%BD%E7%9A%84%E5%8C%BA%E5%88%AB"><strong>重写和重载的区别</strong></a></li>
<li><a href="#object%E7%B1%BB%E6%96%B9%E6%B3%95">Object类方法</a></li>
<li><a href="#%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%8C%85%E8%A3%85%E7%B1%BB">基本数据类型和包装类</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%8Cjvm%E7%AF%87">二、JVM篇</a><ul>
<li><a href="#jvm%E5%86%85%E5%AD%98%E5%88%92%E5%88%86"><strong>JVM内存划分</strong></a><ul>
<li><a href="#1jvm%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F"><strong>1、JVM运行时数据区域</strong></a></li>
<li><a href="#2%E5%A0%86%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5"><strong>2、堆内存分配策略</strong></a></li>
<li><a href="#3%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%AD%A5%E9%AA%A4"><strong>3、创建一个对象的步骤</strong></a></li>
<li><a href="#4%E5%AF%B9%E8%B1%A1%E5%BC%95%E7%94%A8">4、<strong>对象引用</strong></a></li>
</ul>
</li>
<li><a href="#jvm%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B"><strong>JVM类加载过程</strong></a><ul>
<li><a href="#1%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6"><strong>1、双亲委派机制</strong></a></li>
<li><a href="#2tomcat%E7%9A%84%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6"><strong>2、tomcat的类加载机制</strong></a></li>
</ul>
</li>
<li><a href="#jvm%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6">JVM垃圾回收</a><ul>
<li><a href="#1%E5%AD%98%E6%B4%BB%E7%AE%97%E6%B3%95%E5%92%8C%E4%B8%A4%E6%AC%A1%E6%A0%87%E8%AE%B0%E8%BF%87%E7%A8%8B"><strong>1、存活算法和两次标记过程</strong></a></li>
<li><a href="#2%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E7%AE%97%E6%B3%95"><strong>2、垃圾回收算法</strong></a><ul>
<li><a href="#minorgcmajorgcfullgc"><strong>MinorGC、MajorGC、FullGC</strong></a></li>
</ul>
</li>
<li><a href="#3%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"><strong>3、垃圾收集器</strong></a></li>
<li><a href="#4%E9%85%8D%E7%BD%AE%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8"><strong>4、配置垃圾收集器</strong></a></li>
<li><a href="#4jvm%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98"><strong>4、JVM性能调优</strong></a></li>
<li><a href="#5jdk%E6%96%B0%E7%89%B9%E6%80%A7">5、JDK新特性</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">线上故障排查</a><ul>
<li><a href="#1%E7%A1%AC%E4%BB%B6%E6%95%85%E9%9A%9C%E6%8E%92%E6%9F%A5">1、硬件故障排查</a></li>
<li><a href="#2%E6%8A%A5%E8%A1%A8%E5%BC%82%E5%B8%B8--jvm%E8%B0%83%E4%BC%98">2、报表异常 | JVM调优</a></li>
<li><a href="#3%E5%A4%A7%E5%B1%8F%E5%BC%82%E5%B8%B8--juc%E8%B0%83%E4%BC%98">3、大屏异常 | JUC调优</a></li>
<li><a href="#4%E6%8E%A5%E5%8F%A3%E5%BB%B6%E8%BF%9F--swap%E8%B0%83%E4%BC%98"><strong>4、接口延迟 | SWAP调优</strong></a></li>
<li><a href="#5%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA--cache%E8%B0%83%E4%BC%98">5、<strong>内存溢出 | Cache调优</strong></a></li>
<li><a href="#6cpu%E9%A3%99%E9%AB%98--%E6%AD%BB%E5%BE%AA%E7%8E%AF">6：CPU飙高 | 死循环</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%89%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%AF%87">三、多线程篇</a><ul>
<li><a href="#%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6">线程调度</a><ul>
<li><a href="#1%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81"><strong>1、线程状态</strong></a></li>
<li><a href="#2%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%88%87%E6%8D%A2"><strong>2、线程状态切换</strong></a></li>
<li><a href="#3%E9%98%BB%E5%A1%9E%E5%94%A4%E9%86%92%E8%BF%87%E7%A8%8B"><strong>3、阻塞唤醒过程</strong></a></li>
<li><a href="#4wait%E5%92%8Csleep%E5%8C%BA%E5%88%AB"><strong>4、wait和sleep区别</strong></a></li>
<li><a href="#5%E5%88%9B%E5%BB%BA%E7%BA%BF%E7%A8%8B%E6%96%B9%E5%BC%8F">5、创建线程方式</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E6%B1%A0">线程池</a><ul>
<li><a href="#1%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0"><strong>1、线程池构造函数</strong></a></li>
<li><a href="#2%E7%BA%BF%E7%A8%8B%E5%A4%84%E7%90%86%E4%BB%BB%E5%8A%A1%E8%BF%87%E7%A8%8B"><strong>2、线程处理任务过程：</strong></a></li>
<li><a href="#3%E7%BA%BF%E7%A8%8B%E6%8B%92%E7%BB%9D%E7%AD%96%E7%95%A5"><strong>3、线程拒绝策略</strong></a></li>
<li><a href="#4execuors%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%BA%BF%E7%A8%8B%E6%B1%A0"><strong>4、Execuors类实现线程池</strong></a></li>
<li><a href="#5%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%A4%A7%E5%B0%8F%E8%AE%BE%E7%BD%AE"><strong>5、线程池大小设置</strong></a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8">线程安全</a><ul>
<li><a href="#1%E4%B9%90%E8%A7%82%E9%94%81cas%E6%80%9D%E6%83%B3"><strong>1、乐观锁，CAS思想</strong></a></li>
<li><a href="#2synchronized%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>2、synchronized底层实现</strong></a></li>
<li><a href="#3reentrantlock%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>3、ReenTrantLock底层实现</strong></a></li>
<li><a href="#4%E5%85%AC%E5%B9%B3%E9%94%81%E5%92%8C%E9%9D%9E%E5%85%AC%E5%B9%B3%E9%94%81%E5%8C%BA%E5%88%AB"><strong>4、公平锁和非公平锁区别</strong></a></li>
<li><a href="#5%E4%BD%BF%E7%94%A8%E5%B1%82%E9%9D%A2%E9%94%81%E4%BC%98%E5%8C%96"><strong>5、使用层面锁优化</strong></a></li>
<li><a href="#6%E7%B3%BB%E7%BB%9F%E5%B1%82%E9%9D%A2%E9%94%81%E4%BC%98%E5%8C%96">6、系统层面锁优化</a></li>
<li><a href="#7threadlocal%E5%8E%9F%E7%90%86"><strong>7、ThreadLocal原理</strong></a></li>
<li><a href="#8hashmap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8"><strong>8、HashMap线程安全</strong></a></li>
<li><a href="#9string%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%8E%9F%E5%9B%A0">9、String不可变原因</a></li>
</ul>
</li>
<li><a href="#%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B">内存模型</a><ul>
<li><a href="#1volatile%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0"><strong>1、volatile底层实现</strong></a></li>
<li><a href="#2aqs%E6%80%9D%E6%83%B3"><strong>2、AQS思想</strong></a></li>
<li><a href="#3happens-before">3、happens-before</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%9B%9Bmysql%E7%AF%87">四、MySQL篇</a><ul>
<li><a href="#whymysql">WhyMysql？</a><ul>
<li><a href="#%E6%B5%B7%E9%87%8Faerospike">海量Aerospike</a></li>
<li><a href="#%E5%9B%BE%E8%B0%B1neo4j">图谱Neo4j</a></li>
<li><a href="#%E6%96%87%E6%A1%A3mongodb"><strong>文档MongoDB</strong></a></li>
<li><a href="#%E4%BA%91%E5%AD%98%E5%82%A8"><strong>云存储</strong></a></li>
<li><a href="#fastdfs"><strong>FastDFS</strong></a></li>
</ul>
</li>
<li><a href="#%E4%BA%8B%E5%8A%A1">事务</a><ul>
<li><a href="#1%E4%BA%8B%E5%8A%A14%E5%A4%A7%E7%89%B9%E6%80%A7"><strong>1、事务4大特性</strong></a></li>
<li><a href="#2%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB"><strong>2、事务隔离级别</strong></a></li>
<li><a href="#3%E9%BB%98%E8%AE%A4%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB-rr"><strong>3、默认隔离级别-RR</strong></a></li>
<li><a href="#4rr%E5%92%8Crc%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"><strong>4、RR和RC使用场景</strong></a></li>
<li><a href="#5%E8%A1%8C%E9%94%81%E8%A1%A8%E9%94%81%E6%84%8F%E5%90%91%E9%94%81"><strong>5、行锁，表锁，意向锁</strong></a></li>
<li><a href="#6mvcc%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6"><strong>6、MVCC多版本并发控制</strong></a></li>
</ul>
</li>
<li><a href="#%E7%B4%A2%E5%BC%95">索引</a><ul>
<li><a href="#1innodb%E5%92%8Cmyisam%E5%BC%95%E6%93%8E"><strong>1、Innodb和Myisam引擎</strong></a></li>
<li><a href="#2%E5%93%88%E5%B8%8C%E7%B4%A2%E5%BC%95"><strong>2、哈希索引</strong></a></li>
<li><a href="#3b%E6%A0%91%E7%B4%A2%E5%BC%95"><strong>3、B+树索引</strong></a></li>
<li><a href="#4%E5%88%9B%E5%BB%BA%E7%B4%A2%E5%BC%95">4、创建索引</a></li>
<li><a href="#5%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95%E5%92%8C%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95"><strong>5、聚簇索引和非聚簇索引</strong></a></li>
<li><a href="#6%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80%E9%97%AE%E9%A2%98">6、最左前缀问题</a></li>
</ul>
</li>
<li><a href="#sql%E6%9F%A5%E8%AF%A2">SQL查询</a><ul>
<li><a href="#1sql%E8%AF%AD%E5%8F%A5%E7%9A%84%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B"><strong>1、SQL语句的执行过程</strong></a></li>
<li><a href="#2%E5%9B%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%92%8C%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95"><strong>2、回表查询和覆盖索引</strong></a></li>
<li><a href="#3explain%E5%8F%8A%E4%BC%98%E5%8C%96">3、Explain及优化</a></li>
<li><a href="#4join%E6%9F%A5%E8%AF%A2">4、JOIN查询</a></li>
</ul>
</li>
<li><a href="#%E9%9B%86%E7%BE%A4"><strong>集群</strong></a><ul>
<li><a href="#1%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%BF%87%E7%A8%8B">1、主从复制过程</a></li>
<li><a href="#2%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7%E9%97%AE%E9%A2%98">2、数据一致性问题</a></li>
<li><a href="#3%E9%9B%86%E7%BE%A4%E6%9E%B6%E6%9E%84">3、集群架构</a></li>
<li><a href="#4%E6%95%85%E9%9A%9C%E8%BD%AC%E7%A7%BB%E5%92%8C%E6%81%A2%E5%A4%8D">4、故障转移和恢复</a></li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-1">面试题</a><ul>
<li><a href="#%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">分库分表</a><ul>
<li><a href="#%E5%A6%82%E4%BD%95%E8%BF%9B%E8%A1%8C%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">如何进行分库分表</a></li>
</ul>
</li>
<li><a href="#%E5%A6%82%E4%BD%95%E5%B0%86%E8%80%81%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E8%BF%81%E7%A7%BB">如何将老数据进行迁移</a></li>
<li><a href="#%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD%E7%9A%84%E8%AF%84%E4%BC%B0%E5%8F%8A%E6%89%A9%E5%AE%B9">系统性能的评估及扩容</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E7%94%9F%E6%88%90%E8%87%AA%E5%A2%9E%E7%9A%84id%E4%B8%BB%E9%94%AE">如何生成自增的id主键</a></li>
</ul>
</li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E6%95%85%E9%9A%9C%E5%8F%8A%E4%BC%98%E5%8C%96">线上故障及优化</a><ul>
<li><a href="#%E6%9B%B4%E6%96%B0%E5%A4%B1%E8%B4%A5--%E4%B8%BB%E4%BB%8E%E5%90%8C%E6%AD%A5%E5%BB%B6%E6%97%B6">更新失败 | 主从同步延时</a></li>
<li><a href="#%E5%BA%94%E7%94%A8%E5%B4%A9%E6%BA%83--%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E4%BC%98%E5%8C%96"><strong>应用崩溃 | 分库分表优化</strong></a></li>
<li><a href="#%E6%9F%A5%E8%AF%A2%E5%BC%82%E5%B8%B8--sql-%E8%B0%83%E4%BC%98">查询异常 | SQL 调优</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%BA%94redis%E7%AF%87"><strong>五、Redis篇</strong></a><ul>
<li><a href="#whyredis">WhyRedis</a><ul>
<li><a href="#1%E7%AE%80%E5%8D%95%E9%AB%98%E6%95%88">1、简单高效</a></li>
<li><a href="#2memcache">2、Memcache</a></li>
<li><a href="#3tair">3、Tair</a></li>
<li><a href="#4guava">4、Guava</a></li>
<li><a href="#5evcache">5、EVCache</a></li>
<li><a href="#6etcd">6、ETCD</a></li>
</ul>
</li>
<li><a href="#redis%E5%BA%95%E5%B1%82">Redis底层</a><ul>
<li><a href="#1redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1、redis数据类型</a></li>
<li><a href="#2%E7%9B%B8%E5%85%B3api"><strong>2、相关API</strong></a></li>
<li><a href="#3redis%E5%BA%95%E5%B1%82%E7%BB%93%E6%9E%84">3、redis底层结构</a></li>
<li><a href="#4zset%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0">4、Zset底层实现</a></li>
</ul>
</li>
<li><a href="#redis%E5%8F%AF%E7%94%A8%E6%80%A7"><strong>Redis可用性</strong></a><ul>
<li><a href="#1redis%E6%8C%81%E4%B9%85%E5%8C%96">1、redis持久化</a></li>
<li><a href="#2redis%E4%BA%8B%E5%8A%A1">2、redis事务</a></li>
<li><a href="#3redis%E5%A4%B1%E6%95%88%E7%AD%96%E7%95%A5">3、redis失效策略</a></li>
<li><a href="#4redis%E8%AF%BB%E5%86%99%E6%A8%A1%E5%BC%8F">4、redis读写模式</a></li>
<li><a href="#5%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98">5、多级缓存</a></li>
</ul>
</li>
<li><a href="#redis%E4%B8%83%E5%A4%A7%E7%BB%8F%E5%85%B8%E9%97%AE%E9%A2%98">Redis七大经典问题</a><ul>
<li><a href="#1%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9">1、缓存雪崩</a></li>
<li><a href="#2%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F"><strong>2、缓存穿透</strong></a></li>
<li><a href="#3%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF"><strong>3、缓存击穿</strong></a></li>
<li><a href="#4%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4">4、数据不一致</a></li>
<li><a href="#5%E6%95%B0%E6%8D%AE%E5%B9%B6%E5%8F%91%E7%AB%9E%E4%BA%89">5、数据并发竞争</a></li>
<li><a href="#6%E7%83%AD%E7%82%B9key%E9%97%AE%E9%A2%98">6、热点key问题</a></li>
<li><a href="#7bigkey%E9%97%AE%E9%A2%98">7、BigKey问题</a></li>
</ul>
</li>
<li><a href="#redis%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99">Redis分区容错</a><ul>
<li><a href="#1redis%E6%95%B0%E6%8D%AE%E5%88%86%E5%8C%BA"><strong>1、redis数据分区</strong></a></li>
<li><a href="#2%E4%B8%BB%E4%BB%8E%E6%A8%A1%E5%BC%8F%E7%AE%80%E5%8D%95"><strong>2、主从模式&#x3D;简单</strong></a></li>
<li><a href="#3%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F%E8%AF%BB%E5%A4%9A">3、<strong>哨兵模式</strong>&#x3D;读多</a></li>
<li><a href="#4%E9%9B%86%E7%BE%A4%E6%A8%A1%E5%BC%8F%E5%86%99%E5%A4%9A">4、集群模式&#x3D;写多</a></li>
<li><a href="#5%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81">5、分布式锁</a></li>
<li><a href="#6redis%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B">6、redis心跳检测</a></li>
</ul>
</li>
<li><a href="#redis%E5%AE%9E%E6%88%98">Redis实战</a><ul>
<li><a href="#1redis%E4%BC%98%E5%8C%96">1、Redis优化</a></li>
<li><a href="#2redis%E7%83%AD%E5%8D%87%E7%BA%A7">2、Redis热升级</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%85%ADkafka%E7%AF%87">六、Kafka篇</a><ul>
<li><a href="#why-kafka">Why kafka</a></li>
<li><a href="#what-kafka">What Kafka</a></li>
<li><a href="#how-kafka">How Kafka</a></li>
<li><a href="#%E7%94%9F%E4%BA%A7%E6%B6%88%E8%B4%B9%E5%9F%BA%E6%9C%AC%E6%B5%81%E7%A8%8B"><strong>生产消费基本流程</strong></a></li>
<li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7">一致性</a></li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7">可用性</a></li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-2">面试题</a><ul>
<li><a href="#%E7%BA%BF%E4%B8%8A%E9%97%AE%E9%A2%98rebalance"><strong>线上问题rebalance</strong></a></li>
<li><a href="#zookeeper-%E7%9A%84%E4%BD%9C%E7%94%A8">ZooKeeper 的作用</a></li>
<li><a href="#replica%E5%89%AF%E6%9C%AC%E7%9A%84%E4%BD%9C%E7%94%A8">Replica副本的作用</a></li>
<li><a href="#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E6%94%AF%E6%8C%81%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB">为什么不支持读写分离?</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E9%87%8D%E5%A4%8D%E6%B6%88%E8%B4%B9">如何防止重复消费</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%BC%9A%E4%B8%A2%E5%A4%B1"><strong>如何保证数据不会丢失</strong></a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E9%A1%BA%E5%BA%8F%E6%B6%88%E8%B4%B9"><strong>如何保证顺序消费</strong></a></li>
<li><a href="#%E7%BA%BF%E4%B8%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%A7%AF%E5%8E%8B%E6%B6%88%E8%B4%B9">【线上】如何解决积压消费</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B">如何避免消息积压</a></li>
<li><a href="#%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97">如何设计消息队列</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B8%83spring%E7%AF%87">七、Spring篇</a><ul>
<li><a href="#%E8%AE%BE%E8%AE%A1%E6%80%9D%E6%83%B3beans">设计思想&amp;Beans</a><ul>
<li><a href="#1ioc-%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC"><strong>1、IOC 控制反转</strong></a></li>
<li><a href="#2aop-%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86"><strong>2、AOP 动态代理</strong></a></li>
<li><a href="#3bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F"><strong>3、Bean生命周期</strong></a></li>
<li><a href="#4bean%E4%BD%9C%E7%94%A8%E5%9F%9F"><strong>4</strong>、Bean作用域</a></li>
<li><a href="#5%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96">5、循环依赖</a></li>
</ul>
</li>
<li><a href="#spring%E6%B3%A8%E8%A7%A3">Spring注解</a><ul>
<li><a href="#1springboot">1、@SpringBoot</a></li>
<li><a href="#2springmvc"><strong>2、@SpringMVC</strong></a></li>
<li><a href="#3springmybatis">3、@SpringMybatis</a></li>
<li><a href="#4transactional">4、@Transactional</a></li>
</ul>
</li>
<li><a href="#spring%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB">Spring源码阅读</a><ul>
<li><a href="#1spring%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F"><strong>1、Spring中的设计模式</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E5%85%ABspringcloud%E7%AF%87">八、SpringCloud篇</a><br>- <a href="#why-springcloud">Why SpringCloud</a><br>- <a href="#spring-boot">Spring Boot</a><br>- <a href="#gateway--zuul">GateWay &#x2F; Zuul</a><br>- <a href="#eureka--zookeeper">Eureka &#x2F; Zookeeper</a><br>- <a href="#feign--ribbon">Feign &#x2F; Ribbon</a><br>- <a href="#hystrix--sentinel">Hystrix &#x2F; Sentinel</a><br>- <a href="#config--nacos">Config &#x2F; Nacos</a><br>- <a href="#bus--stream">Bus &#x2F; Stream</a><br>- <a href="#sleuth--zipkin"><strong>Sleuth &#x2F; Zipkin</strong></a><ul>
<li><a href="#%E5%AE%89%E5%85%A8%E8%AE%A4%E8%AF%81"><strong>安全认证</strong></a></li>
<li><a href="#%E7%81%B0%E5%BA%A6%E5%8F%91%E5%B8%83">灰度发布</a></li>
<li><a href="#%E5%A4%9A%E7%89%88%E6%9C%AC%E9%9A%94%E7%A6%BB">多版本隔离</a><ul>
<li><a href="#%E5%90%84%E7%BB%84%E4%BB%B6%E8%B0%83%E4%BC%98"><strong>各组件调优</strong></a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E4%B9%9D%E5%88%86%E5%B8%83%E5%BC%8F%E7%AF%87"><strong>九、分布式篇</strong></a><ul>
<li><a href="#%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B"><strong>发展历程</strong></a></li>
<li><a href="#cap">CAP</a></li>
<li><a href="#%E4%B8%80%E8%87%B4%E6%80%A7-1">一致性</a><ul>
<li><a href="#xa%E6%96%B9%E6%A1%88">XA方案</a></li>
<li><a href="#paxos%E7%AE%97%E6%B3%95"><strong>Paxos算法</strong></a></li>
<li><a href="#zab%E7%AE%97%E6%B3%95"><strong>ZAB算法</strong></a></li>
<li><a href="#raft%E7%AE%97%E6%B3%95">Raft算法</a></li>
<li><a href="#%E6%95%B0%E6%8D%AE%E5%BA%93%E5%92%8Credis%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7">数据库和Redis的一致性</a></li>
</ul>
</li>
<li><a href="#%E5%8F%AF%E7%94%A8%E6%80%A7-1">可用性</a><ul>
<li><a href="#%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B"><strong>心跳检测</strong></a></li>
<li><a href="#%E5%A4%9A%E6%9C%BA%E6%88%BF%E5%AE%9E%E6%97%B6%E7%83%AD%E5%A4%87"><strong>多机房实时热备</strong></a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E5%8C%BA%E5%AE%B9%E9%94%99%E6%80%A7">分区容错性</a><ul>
<li><a href="#%E6%97%A5%E5%BF%97%E5%A4%8D%E5%88%B6">日志复制</a></li>
<li><a href="#%E4%B8%BB%E5%A4%87master-slave"><strong>主备（Master-Slave）</strong></a></li>
<li><a href="#%E4%BA%92%E5%A4%87active-active"><strong>互备（Active-Active）</strong></a></li>
<li><a href="#%E9%9B%86%E7%BE%A4cluster%E6%A8%A1%E5%BC%8F"><strong>集群（Cluster）模式</strong></a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1">分布式事务</a><ul>
<li><a href="#xa%E6%96%B9%E6%A1%88-1">XA方案</a></li>
<li><a href="#tcc%E6%96%B9%E6%A1%88">TCC方案</a></li>
<li><a href="#saga%E6%96%B9%E6%A1%88"><strong>Saga方案</strong></a></li>
<li><a href="#%E6%9C%AC%E5%9C%B0%E6%B6%88%E6%81%AF%E8%A1%A8ebay"><strong>本地消息表（eBay）</strong></a></li>
<li><a href="#mq%E6%9C%80%E7%BB%88%E4%B8%80%E8%87%B4%E6%80%A7"><strong>MQ最终一致性</strong></a></li>
<li><a href="#%E6%9C%80%E5%A4%A7%E5%8A%AA%E5%8A%9B%E9%80%9A%E7%9F%A5%E6%96%B9%E6%A1%88%E8%AE%A2%E5%8D%95---%E7%A7%AF%E5%88%86">最大努力通知方案（订单 -&gt; 积分）</a></li>
</ul>
</li>
<li><a href="#%E9%9D%A2%E8%AF%95%E9%A2%98-3">面试题</a><ul>
<li><a href="#%E5%88%86%E5%B8%83%E5%BC%8Fsession%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88">分布式Session实现方案</a></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="一、基础篇"><a href="#一、基础篇" class="headerlink" title="一、基础篇"></a>一、基础篇</h1><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a><strong>TCP三次握手</strong></h3><p>​    <strong>三次握手过程：</strong></p>
<p>​        客户端——发送带有SYN标志的数据包——服务端       <strong>一次握手</strong>  Client进入syn_sent状态</p>
<p>​        服务端——发送带有SYN&#x2F;ACK标志的数据包——客户端   <strong>二次握手</strong>  服务端进入syn_rcvd</p>
<p>​        客户端——发送带有ACK标志的数据包——服务端               <strong>三次握手</strong>   连接就进入Established状态</p>
<p>​    <strong>为什么三次：</strong></p>
<p>​        主要是为了建立可靠的通信信道，保证客户端与服务端同时具备发送、接收数据的能力</p>
<p>​    <strong>为什么两次不行？</strong></p>
<p>​        1、防止已失效的请求报文又传送到了服务端，建立了多余的链接，浪费资源</p>
<p>​        2、 两次握手只能保证单向连接是畅通的。（为了实现可靠数据传输， TCP 协议的通信双方， 都必须维    护一个序列号， 以标识发送出去的数据包中， 哪些是已经被对方收到的。 三次握手的过程即是通信双方    相互告知序列号起始值， 并确认对方已经收到了序列号起始值的必经步骤；如果只是两次握手， 至多只有连接发起方的起始序列号能被确认， 另一方选择的序列号则得不到确认）</p>
<p>**TCP四次挥手过程 **</p>
<p><strong>四次挥手过程：</strong></p>
<p>​    客户端——发送带有FIN标志的数据包——服务端，关闭与服务端的连接 ，客户端进入FIN-WAIT-1状态</p>
<p>​    服务端收到这个 FIN，它发回⼀ 个 ACK，确认序号为收到的序号加1，服务端就进入了CLOSE-WAIT状态</p>
<p>​    服务端——发送⼀个FIN数据包——客户端，关闭与客户端的连接，客户端就进入FIN-WAIT-2状态</p>
<p>​    客户端收到这个 FIN，发回 ACK 报⽂确认，并将确认序号设置为收到序号加1，TIME-WAIT状态</p>
<p><strong>为什么四次：</strong></p>
<p>​    因为需要确保客户端与服务端的数据能够完成传输。</p>
<p><strong>CLOSE-WAIT：</strong></p>
<p>​    这种状态的含义其实是表示在等待关闭</p>
<p><strong>TIME-WAIT：</strong></p>
<p>​    为了解决网络的丢包和网络不稳定所带来的其他问题，确保连接方能在时间范围内，关闭自己的连接</p>
<p><strong>如何查看TIME-WAIT状态的链接数量？</strong>        </p>
<p>​    netstat -an |grep TIME_WAIT|wc -l  查看连接数等待time_wait状态连接数</p>
<p><strong>为什么会TIME-WAIT过多？解决方法是怎样的？</strong></p>
<p>​    <strong>可能原因：</strong> 高并发短连接的TCP服务器上，当服务器处理完请求后立刻按照主动正常关闭连接</p>
<p>​    <strong>解决：</strong>负载均衡服务器；Web服务器首先关闭来自负载均衡服务器的连接</p>
<h4 id="1、OSI与TCP-x2F-IP-模型"><a href="#1、OSI与TCP-x2F-IP-模型" class="headerlink" title="1、OSI与TCP&#x2F;IP 模型"></a><strong>1、OSI与TCP&#x2F;IP 模型</strong></h4><p>​        OSI七层：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层</p>
<p>​        TCP&#x2F;IP五层：物理层、数据链路层、网络层、传输层、应用层</p>
<h4 id="2、常见网络服务分层"><a href="#2、常见网络服务分层" class="headerlink" title="2、常见网络服务分层"></a><strong>2、常见网络服务分层</strong></h4><p>​        应用层：HTTP、SMTP、DNS、FTP</p>
<p>​        传输层：TCP 、UDP</p>
<p>​        网络层：ICMP 、IP、路由器、防火墙</p>
<p>​        数据链路层：网卡、网桥、交换机</p>
<p>​        物理层：中继器、集线器</p>
<h4 id="3、TCP与UDP区别及场景"><a href="#3、TCP与UDP区别及场景" class="headerlink" title="3、TCP与UDP区别及场景"></a><strong>3、TCP与UDP区别及场景</strong></h4><table>
<thead>
<tr>
<th>类型</th>
<th align="center">特点</th>
<th align="center">性能</th>
<th align="center">应用过场景</th>
<th align="center">首部字节</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>TCP</td>
<td align="center">面向连接、可靠、字节流</td>
<td align="center">传输效率慢、所需资源多</td>
<td align="center">文件、邮件传输</td>
<td align="center">20-60</td>
<td></td>
</tr>
<tr>
<td>UDP</td>
<td align="center">无连接、不可靠、数据报文段</td>
<td align="center">传输效率快、所需资源少</td>
<td align="center">语音、视频、直播</td>
<td align="center">8个字节</td>
<td></td>
</tr>
</tbody></table>
<p>​    <strong>基于TCP的协议：</strong>HTTP、FTP、SMTP</p>
<p>​    <strong>基于UDP的协议：</strong>RIP、DNS、SNMP</p>
<h4 id="4、TCP滑动窗口，拥塞控制"><a href="#4、TCP滑动窗口，拥塞控制" class="headerlink" title="4、TCP滑动窗口，拥塞控制"></a><strong>4、TCP滑动窗口，拥塞控制</strong></h4><p>​        <strong>TCP通过：</strong>应用数据分割、对数据包进行编号、校验和、流量控制、拥塞控制、超时重传等措施保证数据的可靠传输；</p>
<p>​        <strong>拥塞控制目的：</strong>为了防止过多的数据注入到网络中，避免网络中的路由器、链路过载</p>
<p>​        <strong>拥塞控制过程：</strong>TCP维护一个拥塞窗口，该窗口随着网络拥塞程度动态变化，通过慢开始、拥塞避免等算法减少网络拥塞的发生。</p>
<h4 id="5、TCP粘包原因和解决方法"><a href="#5、TCP粘包原因和解决方法" class="headerlink" title="5、TCP粘包原因和解决方法"></a><strong>5、TCP粘包原因和解决方法</strong></h4><p>​    <strong>TCP粘包是指</strong>：发送方发送的若干包数据到接收方接收时粘成一包</p>
<p>​    <strong>发送方原因：</strong></p>
<p>​        TCP默认使用Nagle算法（主要作用：减少网络中报文段的数量）：</p>
<p>​            收集多个小分组，在一个确认到来时一起发送、导致发送方可能会出现粘包问题</p>
<p>​    <strong>接收方原因：</strong></p>
<p>​            TCP将接收到的数据包保存在接收缓存里，如果TCP接收数据包到缓存的速度大于应用程序从缓存中读取数据包的速度，多个包就会被缓存，应用程序就有可能读取到多个首尾相接粘到一起的包。</p>
<p>​    <strong>解决粘包问题：</strong></p>
<p>​        最本质原因在与接收对等方无法分辨消息与消息之间的边界在哪，通过使用某种方案给出边界，例如：</p>
<ul>
<li><p>发送定长包。每个消息的大小都是一样的，接收方只要累计接收数据，直到数据等于一个定长的数值就将它作为一个消息。</p>
</li>
<li><p>包尾加上\r\n标记。FTP协议正是这么做的。但问题在于如果数据正文中也含有\r\n，则会误判为消息的边界。</p>
</li>
<li><p>包头加上包体长度。包头是定长的4个字节，说明了包体的长度。接收对等方先接收包体长度，依据包体长度来接收包体。</p>
</li>
</ul>
<h4 id="6、TCP、UDP报文格式"><a href="#6、TCP、UDP报文格式" class="headerlink" title="6、TCP、UDP报文格式"></a><strong>6、TCP、UDP报文格式</strong></h4><p>​    <strong>TCP报文格式：</strong></p>
<p>​        <img src="https://farm1.staticflickr.com/792/27194088468_4cb0141fc8_b.jpg" style="zoom: 67%;" /></p>
<p>​    <strong>源端口号和目的端口号</strong>：</p>
<p>​        用于寻找发端和收端应用进程。这两个值加上ip首部源端ip地址和目的端ip地址唯一确定一个tcp连接。</p>
<p>​    <strong>序号字段：</strong></p>
<p>​        序号用来标识从T C P发端向T C P收端发送的数据字节流，它表示在这个报文段中的的第一个数据字节。如果将字节流看作在两个应用程序间的单向流动，则 T C P用序号对每个字节进行计数。序号是32 bit的无符号数，序号到达 2^32-1后又从0开始。</p>
<p>　　当建立一个新的连接时，SYN标志变1。序号字段包含由这个主机选择的该连接的初始序号ISN（Initial Sequence Number）。该主机要发送数据的第一个字节序号为这个ISN加1，因为SYN标志消耗了一个序号</p>
<p>​    <strong>确认序号</strong>：</p>
<p>​        既然每个传输的字节都被计数，确认序号包含发送确认的一端所期望收到的下一个序号。因此，确认序号应当是上次已成功收到数据字节序号加 1。只有ACK标志为 1时确认序号字段才有效。发送ACK无需任何代价，因为 32 bit的确认序号字段和A C K标志一样，总是T C P首部的一部分。因此，我们看到一旦一个连接建立起来，这个字段总是被设置， ACK标志也总是被设置为1。TCP为应用层提供全双工服务。这意味数据能在两个方向上独立地进行传输。因此，连接的每一端必须保持每个方向上的传输数据序号。</p>
<p>​    <strong>首都长度</strong>：</p>
<p>​        首部长度给出首部中 32 bit字的数目。需要这个值是因为任选字段的长度是可变的。这个字段占4 bit，因此T C P最多有6 0字节的首部。然而，没有任选字段，正常的长度是 2 0字节。</p>
<p>​    <strong>标志字段</strong>：在T C P首部中有 6个标志比特。它们中的多个可同时被设置为1.<br>　　URG紧急指针（u rgent pointer）有效<br>　　ACK确认序号有效。<br>　　PSH接收方应该尽快将这个报文段交给应用层。<br>　　RST重建连接。<br>　　SYN同步序号用来发起一个连接。这个标志和下一个标志将在第 1 8章介绍。<br>　　FIN发端完成发送任务。</p>
<p>​    <strong>窗口大小</strong>：</p>
<p>​        T C P的流量控制由连接的每一端通过声明的窗口大小来提供。窗口大小为字节数，起始于确认序号字段指明的值，这个值是接收端期望接收的字节。窗口大小是一个 16 bit字段，因而窗口大小最大为 65535字节。</p>
<p>​    <strong>检验和：</strong></p>
<p>​        检验和覆盖了整个的 T C P报文段：T C P首部和T C P数据。这是一个强制性的字段，一定是由发端计算和存储，并由收端进行验证。</p>
<p>​    <strong>紧急指针</strong>：</p>
<p>​        只有当URG标志置1时紧急指针才有效。紧急指针是一个正的偏移量，和序号字段中的值相加表示紧急数据最后一个字节的序号。 T C P的紧急方式是发送端向另一端发送紧急数据的一种方式。</p>
<p>​    <strong>选项</strong>：</p>
<p>​        最常见的可选字段是最长报文大小，又称为 MSS (Maximum Segment Size)。每个连接方通常都在通信的第一个报文段（为建立连接而设置 S Y N标志的那个段）中指明这个选项。它指明本端所能接收的最大长度的报文段。</p>
<p>​    <strong>UDP报文格式：</strong></p>
<p>​    <img src="https://appwk.baidu.com/naapi/doc/view?ih=482&o=png_6_0_0_176_917_504_247_892.979_1262.879&iw=986&ix=0&iy=0&aimw=986&rn=1&doc_id=182d935c3186bceb18e8bb77&pn=1&sign=b88bda03b9954e506622f97b8b2ae438&type=1&app_ver=2.9.8.2&ua=bd_800_800_IncredibleS_2.9.8.2_2.3.7&bid=1&app_ua=IncredibleS&uid=&cuid=&fr=3&Bdi_bear=WIFI&from=3_10000&bduss=&pid=1&screen=800_800&sys_ver=2.3.7" style="zoom:50%;" /></p>
<p>​    <strong>端口号</strong>：</p>
<p>​        用来表示发送和接受进程。由于 I P层已经把I P数据报分配给T C P或U D P（根据I P首部中协议字段值），因此T C P端口号由T C P来查看，而 U D P端口号由UDP来查看。T C P端口号与UDP端口号是相互独立的。</p>
<p>​    <strong>长度</strong>：</p>
<p>​        UDP长度字段指的是UDP首部和UDP数据的字节长度。该字段的最小值为 8字节（发送一份0字节的UDP数据报是 O K）。</p>
<p>​    <strong>检验和</strong>：</p>
<p>​        UDP检验和是一个端到端的检验和。它由发送端计算，然后由接收端验证。其目的是为了发现UDP首部和数据在发送端到接收端之间发生的任何改动。</p>
<p>​    <strong>IP报文格式：</strong>普通的IP首部长为20个字节，除非含有可选项字段。</p>
<p>​                <img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1614312792,1954581760&fm=26&gp=0.jpg" style="zoom:67%;" /></p>
<p>​    <strong>4位版本</strong>：</p>
<p>​        目前协议版本号是4，因此IP有时也称作IPV4.</p>
<p>​    <strong>4位首部长度</strong>：</p>
<p>​        首部长度指的是首部占32bit字的数目，包括任何选项。由于它是一个4比特字段，因此首部长度最长为60个字节。</p>
<p>​    <strong>服务类型（TOS）</strong>：</p>
<p>​        服务类型字段包括一个3bit的优先权字段（现在已经被忽略），4bit的TOS子字段和1bit未用位必须置0。4bit的TOS分别代表：最小时延，最大吞吐量，最高可靠性和最小费用。4bit中只能置其中1比特。如果所有4bit均为0，那么就意味着是一般服务。</p>
<p>​    <strong>总长度</strong>：</p>
<p>​        总长度字段是指整个IP数据报的长度，以字节为单位。利用首部长度和总长度字段，就可以知道IP数据报中数据内容的起始位置和长度。由于该字段长16bit，所以IP数据报最长可达65535字节。当数据报被分片时，该字段的值也随着变化。</p>
<p>​    <strong>标识字段</strong>：</p>
<p>​        标识字段唯一地标识主机发送的每一份数据报。通常每发送一份报文它的值就会加1。</p>
<p>​    <strong>生存时间</strong>：</p>
<p>​        TTL（time-to-live）生存时间字段设置了数据报可以经过的最多路由器数。它指定了数据报的生存时间。TTL的初始值由源主机设置（通常为 3 2或6 4），一旦经过一个处理它的路由器，它的值就减去 1。当该字段的值为 0时，数据报就被丢弃，并发送 ICMP 报文通知源主机。</p>
<p>​    <strong>首部检验和</strong>：</p>
<p>​        首部检验和字段是根据 I P首部计算的检验和码。它不对首部后面的数据进行计算。 ICMP、IGMP、UDP和TCP在它们各自的首部中均含有同时覆盖首部和数据检验和码。</p>
<p>​    <strong>以太网报文格式：</strong></p>
<p><img src="https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=2733576797,55677727&fm=26&gp=0.jpg"></p>
<p>​    <strong>目的地址和源地址：</strong></p>
<p>​        是指网卡的硬件地址（也叫MAC 地址），长度是48 位，是在网卡出厂时固化的。</p>
<p>​    <strong>数据：</strong></p>
<p>​        以太网帧中的数据长度规定最小46 字节，最大1500 字节，ARP 和RARP 数据包的长度不够46 字节，要在后面补填充位。最大值1500 称为以太网的最大传输单元（MTU），不同的网络类型有不同的MTU，如果一个数据包从以太网路由到拨号链路上，数据包度大于拨号链路的MTU了，则需要对数据包进行分片fragmentation）。ifconfig 命令的输出中也有“MTU:1500”。注意，MTU 个概念指数据帧中有效载荷的最大长度，不包括帧首部的长度。</p>
<h3 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><strong>HTTP协议</strong></h3><h4 id="1、HTTP协议1-0-1-1-2-0"><a href="#1、HTTP协议1-0-1-1-2-0" class="headerlink" title="1、HTTP协议1.0_1.1_2.0"></a>1、HTTP协议1.0_1.1_2.0</h4><p>​    <strong>HTTP1.0：</strong>服务器处理完成后立即断开TCP连接（<strong>无连接</strong>），服务器不跟踪每个客户端也不记录过去的请求（<strong>无状态</strong>）</p>
<p>​    <strong>HTTP1.1：</strong>KeepAlived<strong>长连接</strong>避免了连接建立和释放的开销；通过Content-Length来判断当前请求数据是否已经全部接受（<strong>有状态</strong>）</p>
<p>​    <strong>HTTP2.0：</strong>引入二进制数据帧和流的概念，其中帧对数据进行顺序标识；因为有了序列，服务器可以<strong>并行</strong>的传输数据。</p>
<p>​    <strong>http1.0和http1.1的主要区别如下：</strong><br>​        1、缓存处理：1.1添加更多的缓存控制策略（如：Entity tag，If-Match）<br>​        2、网络连接的优化：1.1支持断点续传<br>​        3、错误状态码的增多：1.1新增了24个错误状态响应码，丰富的错误码更加明确各个状态<br>​        4、Host头处理：支持Host头域，不在以IP为请求方标志<br>​        5、长连接：减少了建立和关闭连接的消耗和延迟。</p>
<p>​    <strong>http1.1和http2.0的主要区别：</strong><br>​        1、新的传输格式：2.0使用二进制格式，1.0依然使用基于文本格式<br>​        2、多路复用：连接共享，不同的request可以使用同一个连接传输（最后根据每个request上的id号组合成正常的请求）<br>​        3、header压缩：由于1.X中header带有大量的信息，并且得重复传输，2.0使用encoder来减少需要传输的hearder大小<br>​        4、服务端推送：同google的SPDUY（1.0的一种升级）一样</p>
<h4 id="2、HTTP与HTTPS之间的区别"><a href="#2、HTTP与HTTPS之间的区别" class="headerlink" title="2、HTTP与HTTPS之间的区别"></a>2、HTTP与HTTPS之间的区别</h4><p>​        <strong>HTTP与HTTPS之间的区别：</strong></p>
<table>
<thead>
<tr>
<th align="center">HTTP</th>
<th align="center">HTTPS</th>
</tr>
</thead>
<tbody><tr>
<td align="center">默认端口80</td>
<td align="center">HTTPS默认使用端口443</td>
</tr>
<tr>
<td align="center">明文传输、数据未加密、安全性差</td>
<td align="center">传输过程ssl加密、安全性较好</td>
</tr>
<tr>
<td align="center">响应速度快、消耗资源少</td>
<td align="center">响应速度较慢、消耗资源多、需要用到CA证书</td>
</tr>
</tbody></table>
<p>​        <strong>HTTPS链接建立的过程：</strong></p>
<p>​            1.首先客户端先给服务器发送一个请求</p>
<p>​            2.服务器发送一个SSL证书给客户端，内容包括：证书的发布机构、有效期、所有者、签名以及公钥</p>
<p>​            3.客户端对发来的公钥进行真伪校验，校验为真则使用公钥对对称加密算法以及对称密钥进行加密</p>
<p>​            4.服务器端使用私钥进行解密并使用对称密钥加密确认信息发送给客户端</p>
<p>​            5.随后客户端和服务端就使用对称密钥进行信息传输</p>
<p>​        <strong>对称加密算法：</strong></p>
<p>​            双方持有相同的密钥，且加密速度快，典型对称加密算法：DES、AES</p>
<p>​        <strong>非对称加密算法：</strong></p>
<p>​            密钥成对出现（私钥、公钥），私钥只有自己知道，不在网络中传输；而公钥可以公开。相比对称加密速度较慢，典型的非对称加密算法有：RSA、DSA</p>
<h4 id="3、Get和Post请求区别"><a href="#3、Get和Post请求区别" class="headerlink" title="3、Get和Post请求区别"></a><strong>3、Get和Post请求区别</strong></h4><p><strong>HTTP请求：</strong></p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">GET</td>
<td>向特定资源发送请求，查询数据，并返回实体</td>
</tr>
<tr>
<td align="left">POST</td>
<td>向指定资源提交数据进行处理请求，可能会导致新的资源建立、已有资源修改</td>
</tr>
<tr>
<td align="left">PUT</td>
<td>向服务器上传新的内容</td>
</tr>
<tr>
<td align="left">HEAD</td>
<td>类似GET请求，返回的响应中没有具体的内容，用于获取报头</td>
</tr>
<tr>
<td align="left">DELETE</td>
<td>请求服务器删除指定标识的资源</td>
</tr>
<tr>
<td align="left">OPTIONS</td>
<td>可以用来向服务器发送请求来测试服务器的功能性</td>
</tr>
<tr>
<td align="left">TRACE</td>
<td>回显服务器收到的请求，用于测试或诊断</td>
</tr>
<tr>
<td align="left">CONNECT</td>
<td>HTTP&#x2F;1.1协议中预留给能够将连接改为管道方式的代理服务器</td>
</tr>
</tbody></table>
<p><strong>get和Post区别：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>GET</th>
<th>POST</th>
</tr>
</thead>
<tbody><tr>
<td>可见性</td>
<td>数据在URL中对所有人可见</td>
<td>数据不会显示在URL中</td>
</tr>
<tr>
<td>安全性</td>
<td>与post相比，get的安全性较差，因为所<br/>发送的数据是URL的一部分</td>
<td>安全，因为参数不会被保存在浏览器<br/>历史或web服务器日志中</td>
</tr>
<tr>
<td>数据长度</td>
<td>受限制，最长2kb</td>
<td>无限制</td>
</tr>
<tr>
<td>编码类型</td>
<td>application&#x2F;x-www-form-urlencoded</td>
<td>multipart&#x2F;form-data</td>
</tr>
<tr>
<td>缓存</td>
<td>能被缓存</td>
<td>不能被缓存</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="4、HTTP常见响应状态码"><a href="#4、HTTP常见响应状态码" class="headerlink" title="4、HTTP常见响应状态码"></a><strong>4、HTTP常见响应状态码</strong></h4><p>​        100：Continue — 继续。客户端应继续其请求。</p>
<p>​        200：OK — 请求成功。一般用于GET与POST请求。</p>
<p>​        301：Moved Permanently — 永久重定向。</p>
<p>​        302：Found — 暂时重定向。</p>
<p>​        400：Bad Request — 客户端请求的语法错误，服务器无法理解。</p>
<p>​        403：Forbideen — 服务器理解请求客户端的请求，但是拒绝执行此请求。</p>
<p>​        404：Not Found — 服务器无法根据客户端的请求找到资源（网页）。</p>
<p>​        500：Internal Server Error — 服务器内部错误，无法完成请求。</p>
<p>​        502：Bad Gateway — 作为网关或者代理服务器尝试执行请求时，从远程服务器接收到了无效的响应。</p>
<h4 id="5、重定向和转发区别"><a href="#5、重定向和转发区别" class="headerlink" title="5、重定向和转发区别"></a><strong>5、重定向和转发区别</strong></h4><p>​    <strong>重定向：redirect：</strong></p>
<p>​            地址栏发生变化    </p>
<p>​            重定向可以访问其他站点（服务器）的资源</p>
<p>​            重定向是两次请求。不能使用request对象来共享数据</p>
<p>​    <strong>转发：forward：</strong></p>
<p>​            转发地址栏路径不变</p>
<p>​            转发只能访问当前服务器下的资源</p>
<p>​            转发是一次请求，可以使用request对象共享数据</p>
<h4 id="6、Cookie和Session区别。"><a href="#6、Cookie和Session区别。" class="headerlink" title="6、Cookie和Session区别。"></a><strong>6、Cookie和Session区别。</strong></h4><p>​    Cookie 和 Session都是用来跟踪浏览器用户身份的会话方式，但两者有所区别：</p>
<p>​            Cookie 数据保存在客户端(浏览器端)，Session 数据保存在服务器端。</p>
<p>​            cookie不是很安全，别人可以分析存放在本地的COOKIE并进行欺骗,考虑到安全应当使用session。</p>
<p>​            Cookie ⼀般⽤来保存⽤户信息，Session 的主要作⽤就是通过服务端记录⽤户的状态</p>
<h3 id="浏览器输入URL过程"><a href="#浏览器输入URL过程" class="headerlink" title="浏览器输入URL过程"></a><strong>浏览器输入URL过程</strong></h3><p>​    <strong>过程：</strong>DNS解析、TCP连接、发送HTTP请求、服务器处理请求并返回HTTP报文、浏览器渲染、结束</p>
<table>
<thead>
<tr>
<th>过程</th>
<th>使用的协议</th>
</tr>
</thead>
<tbody><tr>
<td>1、浏览器查找域名DNS的IP地址<br />DNS查找过程（浏览器缓存、路由器缓存、DNS缓存）</td>
<td>DNS：获取域名对应的ip</td>
</tr>
<tr>
<td>2、根据ip建立TCP连接</td>
<td>TCP：与服务器建立连接</td>
</tr>
<tr>
<td>3、浏览器向服务器发送HTTP请求</td>
<td>HTTP：发送请求</td>
</tr>
<tr>
<td>4、服务器响应HTTP响应</td>
<td>HTTP</td>
</tr>
<tr>
<td>5、浏览器进行渲染</td>
<td></td>
</tr>
</tbody></table>
<div style="page-break-after: always;"></div>

<h2 id="操作系统基础"><a href="#操作系统基础" class="headerlink" title="操作系统基础"></a><strong>操作系统基础</strong></h2><h3 id="进程和线程的区别"><a href="#进程和线程的区别" class="headerlink" title="进程和线程的区别"></a><strong>进程和线程的区别</strong></h3><p>​        <strong>进程：</strong>是资源分配的最小单位，一个进程可以有多个线程，多个线程共享进程的堆和方法区资源，不共享栈、程序计数器</p>
<p>​        <strong>线程：</strong>是任务调度和执行的最小单位，线程并行执行存在资源竞争和上下文切换的问题</p>
<p>​        <strong>协程：</strong>是一种比线程更加轻量级的存在，正如一个进程可以拥有多个线程一样，一个线程可以拥有多个协程。</p>
<h4 id="1、进程间通信方式IPC"><a href="#1、进程间通信方式IPC" class="headerlink" title="1、进程间通信方式IPC"></a><strong>1、进程间通信方式IPC</strong></h4><p><strong>管道pipe：</strong></p>
<p>​        亲缘关系使用匿名管道，非亲缘关系使用命名管道，管道遵循FIFO，半双工，数据只能单向通信；</p>
<p><strong>信号：</strong></p>
<p>​        信号是一种比较复杂的通信方式，用户调用kill命令将信号发送给其他进程。</p>
<p><strong>消息队列：</strong></p>
<p>​        消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等特点。</p>
<p><strong>共享内存(share memory)：</strong></p>
<ul>
<li>使得多个进程可以可以直接读写同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。</li>
<li>由于多个进程共享一段内存，因此需要依靠某种同步机制（如信号量）来达到进程间的同步及互斥。</li>
</ul>
<p><strong>信号量(Semaphores) ：</strong></p>
<p>​        信号量是⼀个计数器，⽤于多进程对共享数据的访问，这种通信⽅式主要⽤于解决与同步相关的问题并避免竞争条件。</p>
<p><strong>套接字(Sockets) :</strong> </p>
<p>​        简单的说就是通信的两⽅的⼀种约定，⽤套接字中的相关函数来完成通信过程。</p>
<h4 id="2、用户态和核心态"><a href="#2、用户态和核心态" class="headerlink" title="2、用户态和核心态"></a><strong>2、用户态和核心态</strong></h4><p><strong>用户态：</strong>只能受限的访问内存，运行所有的应用程序</p>
<p><strong>核心态：</strong>运行操作系统程序，cpu可以访问内存的所有数据，包括外围设备</p>
<p><strong>为什么要有用户态和内核态：</strong></p>
<p>​        由于需要限制不同的程序之间的访问能力, 防止他们获取别的程序的内存数据, 或者获取外围设备的数据, 并发送到网络</p>
<p><strong>用户态切换到内核态的3种方式：</strong></p>
<p>​    <strong>a. 系统调用</strong></p>
<p>​        主动调用，系统调用的机制其核心还是使用了操作系统为用户特别开放的一个中断来实现，例如Linux的int 80h中断。</p>
<p>​    <strong>b. 异常</strong></p>
<p>​        当CPU在执行运行在用户态下的程序时，发生了某些事先不可知的异常，比如缺页异常，这时会触发切换内核态处理异常。</p>
<p>​    <strong>c. 外围设备的中断</strong></p>
<p>​        当外围设备完成用户请求的操作后，会向CPU发出相应的中断信号，这时CPU会由用户态到内核态的切换。</p>
<h4 id="3、操作系统的进程空间"><a href="#3、操作系统的进程空间" class="headerlink" title="3、操作系统的进程空间"></a><strong>3、操作系统的进程空间</strong></h4><p>​    栈区（stack）— 由编译器自动分配释放 ，存放函数的参数值，局部变量的值等。</p>
<p>​    堆区（heap）— 一般由程序员分配释放， 若程序员不释放，程序结束时可能由OS回收 。</p>
<p>​    静态区（static）—存放全局变量和静态变量的存储</p>
<p>​    代码区(text)—存放函数体的二进制代码。</p>
<p>​    <strong>线程共享堆区、静态区</strong></p>
<h3 id="操作系统内存管理"><a href="#操作系统内存管理" class="headerlink" title="操作系统内存管理"></a>操作系统内存管理</h3><p><strong>存管理方式：</strong>页式管理、段式管理、段页式管理</p>
<p><strong>分段管理：</strong></p>
<p>​        将程序的地址空间划分为若干段（segment），如代码段，数据段，堆栈段；这样每个进程有一个二维地址空间，相互独立，互不干扰。段式管理的优点是：没有内碎片（因为段大小可变，改变段大小来消除内碎片）。但段换入换出时，会产生外碎片（比如4k的段换5k的段，会产生1k的外碎片）</p>
<p><strong>分页管理：</strong></p>
<p>​        在页式存储管理中，将程序的逻辑地址划分为固定大小的页（page），而物理内存划分为同样大小的页框，程序加载时，可以将任意一页放入内存中任意一个页框，这些页框不必连续，从而实现了离散分离。页式存储管理的优点是：没有外碎片（因为页的大小固定），但会产生内碎片（一个页可能填充不满）</p>
<p><strong>段页式管理：</strong></p>
<p>​        段⻚式管理机制结合了段式管理和⻚式管理的优点。简单来说段⻚式管理机制就是把主存先分成若⼲段，每个段⼜分成若⼲⻚，也就是说 段⻚式管理机制 中段与段之间以及段的内部的都是离散的</p>
<h4 id="1、页面置换算法FIFO、LRU"><a href="#1、页面置换算法FIFO、LRU" class="headerlink" title="1、页面置换算法FIFO、LRU"></a><strong>1、页面置换算法FIFO、LRU</strong></h4><p><strong>置换算法：</strong>先进先出FIFO、最近最久未使用LRU、最佳置换算法OPT</p>
<p><strong>先进先出FIFO:</strong></p>
<p>​        缺点：没有考虑到实际的页面使用频率，性能差、与通常页面使用的规则不符合，实际应用较少</p>
<p><strong>最近最久未使用LRU:</strong></p>
<p>​        原理：选择最近且最久未使用的页面进行淘汰</p>
<p>​        优点：考虑到了程序访问的时间局部性，有较好的性能，实际应用也比较多</p>
<p>​        缺点：没有合适的算法，只有适合的算法，lFU、random都可以</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: LRU最近最久未使用置换算法，通过LinkedHashMap实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-07-17 10:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;Integer,Integer&gt; cache;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;   <span class="comment">//容量大小</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *初始化构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        cache = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;(capacity);</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//缓存中不存在此key，直接返回</span></span><br><span class="line">        <span class="keyword">if</span>(!cache.containsKey(key)) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> cache.get(key);</span><br><span class="line">        cache.remove(key);   <span class="comment">//先从链表中删除</span></span><br><span class="line">        cache.put(key,res);  <span class="comment">//再把该节点放到链表末尾处</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key,<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(cache.containsKey(key)) &#123;</span><br><span class="line">            cache.remove(key); <span class="comment">//已经存在，在当前链表移除</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(capacity == cache.size()) &#123;</span><br><span class="line">            <span class="comment">//cache已满，删除链表头位置</span></span><br><span class="line">            Set&lt;Integer&gt; keySet = cache.keySet();</span><br><span class="line">            Iterator&lt;Integer&gt; iterator = keySet.iterator();</span><br><span class="line">            cache.remove(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        cache.put(key,value);  <span class="comment">//插入到链表末尾</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: Java</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: LRU最近最久未使用置换算法，通过LinkedHashMap内部removeEldestEntry方法实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: Mr.Li</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2020-07-17 10:59</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LRUCache</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Integer, Integer&gt; map;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line">	</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *初始化构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> capacity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LRUCache</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;Integer, Integer&gt;(capacity, <span class="number">0.75f</span>, <span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> size() &gt; capacity;  <span class="comment">// 容量大于capacity 时就删除</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">//返回key对应的value值，若不存在，返回-1</span></span><br><span class="line">        <span class="keyword">return</span> map.getOrDefault(key, -<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">put</span><span class="params">(<span class="type">int</span> key, <span class="type">int</span> value)</span> &#123;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>最佳置换算法OPT:</strong></p>
<p>​        原理：每次选择当前物理块中的页面在未来长时间不被访问的或未来不再使用的页面进行淘汰</p>
<p>​        优点：具有较好的性能，可以保证获得最低的缺页率</p>
<p>​        缺点：过于理想化，但是实际上无法实现（没办法预知未来的页面）</p>
<h4 id="2、死锁条件、解决方式。"><a href="#2、死锁条件、解决方式。" class="headerlink" title="2、死锁条件、解决方式。"></a><strong>2、死锁条件、解决方式。</strong></h4><p>​    死锁是指两个或两个以上进程在执行过程中，因争夺资源而造成的相互等待的现象；</p>
<p>​    <strong>死锁的条件：</strong></p>
<p>​        互斥条件：进程对所分配到的资源不允许其他进程访问，若其他进程访问该资源，只能等待至占有该资源的进程释放该资源；</p>
<p>​        请求与保持条件：进程获得一定的资源后，又对其他资源发出请求，阻塞过程中不会释放自己已经占有的资源</p>
<p>​        非剥夺条件：进程已获得的资源，在未完成使用之前，不可被剥夺，只能在使用后自己释放</p>
<p>​        循环等待条件：系统中若干进程组成环路，环路中每个进程都在等待相邻进程占用的资源</p>
<p>​    <strong>解决方法：</strong>破坏死锁的任意一条件</p>
<p>​        乐观锁，破坏资源互斥条件，<strong>CAS</strong></p>
<p>​        资源一次性分配，从而剥夺请求和保持条件、<strong>tryLock</strong></p>
<p>​        可剥夺资源：即当进程新的资源未得到满足时，释放已占有的资源，从而破坏不可剥夺的条件，<strong>数据库deadlock超时</strong></p>
<p>​        资源有序分配法：系统给每类资源赋予一个序号，每个进程按编号递增的请求资源，从而破坏环路等待的条件，<strong>转账场景</strong></p>
<div style="page-break-after: always;"></div>

<h2 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a><strong>Java基础</strong></h2><h3 id="面向对象三大特性"><a href="#面向对象三大特性" class="headerlink" title="面向对象三大特性"></a>面向对象三大特性</h3><p><strong>特性：</strong>封装、继承、多态</p>
<p>​    <strong>封装：</strong>对抽象的事物抽象化成一个对象，并对其对象的属性私有化，同时提供一些能被外界访问属性的方法；</p>
<p>​    <strong>继承</strong>：子类扩展新的数据域或功能，并复用父类的属性与功能，单继承，多实现；</p>
<p>​    <strong>多态：</strong>通过继承（多个⼦类对同⼀⽅法的重写）、也可以通过接⼝（实现接⼝并覆盖接⼝）</p>
<h4 id="1、Java与C-区别"><a href="#1、Java与C-区别" class="headerlink" title="1、Java与C++区别"></a><strong>1、Java与C++区别</strong></h4><p>​    不同点：c++支持多继承，并且有指针的概念，由程序员自己管理内存；Java是单继承，可以用接口实现多继承，Java 不提供指针来直接访问内存，程序内存更加安全，并且Java有JVM⾃动内存管理机制，不需要程序员⼿动释放⽆⽤内存</p>
<h4 id="2、多态实现原理"><a href="#2、多态实现原理" class="headerlink" title="2、多态实现原理"></a><strong>2、多态实现原理</strong></h4><p>多态的底层实现是动态绑定，即在运行时才把方法调用与方法实现关联起来。</p>
<p><strong>静态绑定与动态绑定：</strong></p>
<p>​    一种是在编译期确定，被称为静态分派，比如方法的重载；</p>
<p>​    一种是在运行时确定，被称为动态分派，比如方法的覆盖（重写）和接口的实现。</p>
<p><strong>多态的实现</strong></p>
<p>​        虚拟机栈中会存放当前方法调用的栈帧（局部变量表、操作栈、动态连接 、返回地址）。多态的实现过程，就是方法调用动态分派的过程，如果子类覆盖了父类的方法，则在多态调用中，动态绑定过程会首先确定实际类型是子类，从而先搜索到子类中的方法。这个过程便是方法覆盖的本质。</p>
<h4 id="3、static和final关键字"><a href="#3、static和final关键字" class="headerlink" title="3、static和final关键字"></a>3、static和final关键字</h4><p><strong>static：</strong>可以修饰属性、方法</p>
<p>​    <strong>static修饰属性：</strong></p>
<p>​        类级别属性，所有对象共享一份，随着类的加载而加载（只加载一次），先于对象的创建；可以使用类名直接调用。</p>
<p>​    <strong>static修饰方法：</strong></p>
<p>​        随着类的加载而加载；可以使用类名直接调用；静态方法中，只能调用静态的成员，不可用this；</p>
<p><strong>final：</strong>关键字主要⽤在三个地⽅：变量、⽅法、类。</p>
<p>​    <strong>final修饰变量：</strong></p>
<p>​        如果是基本数据类型的变量，则其数值⼀旦在初始化之后便不能更改；</p>
<p>​        如果是引⽤类型的变量，则在对其初始化之后便不能再让其指向另⼀个对象。</p>
<p>​    <strong>final修饰方法：</strong></p>
<p>​        把⽅法锁定，以防任何继承类修改它的含义（重写）；类中所有的 private ⽅法都隐式地指定为 final。</p>
<p>​    <strong>final修饰类：</strong></p>
<p>​         final 修饰类时，表明这个类不能被继承。final 类中的所有成员⽅法都会被隐式地指定为 final ⽅法。</p>
<p>一个类不能被继承，除了final关键字之外，还有可以私有化构造器。（内部类无效）</p>
<h4 id="4、抽象类和接口"><a href="#4、抽象类和接口" class="headerlink" title="4、抽象类和接口"></a>4、抽象类和接口</h4><p><strong>抽象类：</strong>包含抽象方法的类，即使用abstract修饰的类；抽象类只能被继承，所以不能使用final修饰，抽象类不能被实例化，</p>
<p><strong>接口：</strong>接口是一个抽象类型，是抽象方法的集合，接口支持多继承，接口中定义的方法，默认是public abstract修饰的抽象方法</p>
<p><strong>相同点：</strong></p>
<p>​    ① 抽象类和接口都不能被实例化</p>
<p>​    ② 抽象类和接口都可以定义抽象方法，子类&#x2F;实现类必须覆写这些抽象方法</p>
<p><strong>不同点：</strong></p>
<p>​    ① 抽象类有构造方法，接口没有构造方法</p>
<p>​    ③抽象类可以包含普通方法，接口中只能是public abstract修饰抽象方法（Java8之后可以）</p>
<p>​    ③ 抽象类只能单继承，接口可以多继承</p>
<p>​    ④ 抽象类可以定义各种类型的成员变量，接口中只能是public static final修饰的静态常量</p>
<p><strong>抽象类的使用场景：</strong></p>
<p>​    既想约束子类具有共同的行为（但不再乎其如何实现），又想拥有缺省的方法，又能拥有实例变量</p>
<p><strong>接口的应用场景：</strong></p>
<p>​    约束多个实现类具有统一的行为，但是不在乎每个实现类如何具体实现；实现类中各个功能之间可能没有任何联系</p>
<h4 id="5、泛型以及泛型擦除"><a href="#5、泛型以及泛型擦除" class="headerlink" title="5、泛型以及泛型擦除"></a>5、泛型以及泛型擦除</h4><p>参考：<a href="https://blog.csdn.net/baoyinwang/article/details/107341997">https://blog.csdn.net/baoyinwang/article/details/107341997</a></p>
<p><strong>泛型：</strong></p>
<p>​        泛型的本质是参数化类型。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口和泛型方法。</p>
<p><strong>泛型擦除：</strong></p>
<p>​        Java的泛型是伪泛型，使用泛型的时候加上类型参数，在编译器编译生成的字节码的时候会去掉，这个过程成为类型擦除。</p>
<p>​        如List<String>等类型，在编译之后都会变成 List。JVM 看到的只是 List，而由泛型附加的类型信息对 JVM 来说是不可见的。</p>
<p>可以通过反射添加其它类型元素</p>
<h4 id="6、反射原理以及使用场景"><a href="#6、反射原理以及使用场景" class="headerlink" title="6、反射原理以及使用场景"></a><strong>6、反射原理以及使用场景</strong></h4><p><strong>Java反射：</strong></p>
<p>​        是指在运行状态中，对于任意一个类都能够知道这个类所有的属性和方法；并且都能够调用它的任意一个方法；</p>
<p><strong>反射原理：</strong></p>
<p>​        反射首先是能够获取到Java中的反射类的字节码，然后将字节码中的方法，变量，构造函数等映射成 相应的 Method、Filed、Constructor 等类</p>
<p>​    <strong>如何得到Class的实例:</strong></p>
<pre><code>     1.类名.class(就是一份字节码)
     2.Class.forName(String className);根据一个类的全限定名来构建Class对象
     3.每一个对象多有getClass()方法:obj.getClass();返回对象的真实类型
</code></pre>
<p><strong>使用场景：</strong></p>
<ul>
<li><p><strong>开发通用框架 -</strong> 反射最重要的用途就是开发各种通用框架。很多框架（比如 Spring）都是配置化的（比如通过 XML 文件配置 JavaBean、Filter 等），为了保证框架的通用性，需要根据配置文件运行时动态加载不同的对象或类，调用不同的方法。</p>
</li>
<li><p><strong>动态代理</strong> - 在切面编程（AOP）中，需要拦截特定的方法，通常，会选择动态代理方式。这时，就需要反射技术来实现了。</p>
<p>JDK：spring默认动态代理，需要实现接口</p>
<p>CGLIB：通过asm框架序列化字节流，可配置，性能差</p>
</li>
<li><p><strong>自定义注解</strong> - 注解本身仅仅是起到标记作用，它需要利用反射机制，根据注解标记去调用注解解释器，执行行为。</p>
</li>
</ul>
<h4 id="7、Java异常体系"><a href="#7、Java异常体系" class="headerlink" title="7、Java异常体系"></a><strong>7、Java异常体系</strong></h4><p>​                <img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3137389296,1222888772&fm=26&gp=0.jpg" style="zoom:67%;" /></p>
<p>Throwable 是 Java 语言中所有错误或异常的超类。下一层分为 Error 和 Exception</p>
<p><strong>Error ：</strong></p>
<p>​        是指 java 运行时系统的内部错误和资源耗尽错误。应用程序不会抛出该类对象。如果出现了这样的错误，除了告知用户，剩下的就是尽力使程序安全的终止。</p>
<p><strong>Exception 包含：RuntimeException 、CheckedException</strong></p>
<p>编程错误可以分成三类：语法错误、逻辑错误和运行错误。</p>
<p><strong>语法错误</strong>（也称编译错误）是在编译过程中出现的错误，由编译器检查发现语法错误</p>
<p><strong>逻辑错误</strong>指程序的执行结果与预期不符，可以通过调试定位并发现错误的原因</p>
<p><strong>运行错误</strong>是引起程序非正常终端的错误，需要通过异常处理的方式处理运行错误</p>
<p><strong>RuntimeException：</strong> 运行时异常，程序应该从逻辑角度尽可能避免这类异常的发生。</p>
<p>​     如 NullPointerException 、 ClassCastException ； </p>
<p><strong>CheckedException：</strong>受检异常，程序使用trycatch进行捕捉处理</p>
<p>​        如IOException、SQLException、NotFoundException；</p>
<h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goe17hajvzj316d0lhju3.jpg" alt="JavaCollection"></p>
<h4 id="1、ArrayList和LinkedList"><a href="#1、ArrayList和LinkedList" class="headerlink" title="1、ArrayList和LinkedList"></a><strong>1、ArrayList和LinkedList</strong></h4><p><strong>ArrayList：</strong></p>
<p>​        底层基于数组实现，支持对元素进行快速随机访问，适合随机查找和遍历，不适合插入和删除。（提一句实际上）<br>​        默认初始大小为10，当数组容量不够时，会触发扩容机制（扩大到当前的1.5倍），需要将原来数组的数据复制到新的数组中；当从 ArrayList 的中间位置插入或者删除元素时，需要对数组进行复制、移动、代价比较高。</p>
<p><strong>LinkedList：</strong></p>
<p>​        底层基于双向链表实现，适合数据的动态插入和删除；<br>​        内部提供了 List 接口中没有定义的方法，用于操作表头和表尾元素，可以当作堆栈、队列和双向队列使用。（比如jdk官方推荐使用基于linkedList的Deque进行堆栈操作）</p>
<p><strong>ArrayList与LinkedList区别：</strong></p>
<p>​        都是线程不安全的，ArrayList 适用于查找的场景，LinkedList 适用于增加、删除多的场景</p>
<p><strong>实现线程安全：</strong></p>
<p>​        可以使用原生的Vector，或者是Collections.synchronizedList(List list)函数返回一个线程安全的ArrayList集合。<br>​        建议使用concurrent并发包下的<strong>CopyOnWriteArrayList</strong>的。</p>
<p>​            ①<strong>Vector:</strong> 底层通过synchronize修饰保证线程安全，效率较差</p>
<p>​            ②<strong>CopyOnWriteArrayList：</strong>写时加锁，使用了一种叫<strong>写时复制</strong>的方法；读操作是可以不用加锁的</p>
<p>​            </p>
<h4 id="2、List遍历快速和安全失败"><a href="#2、List遍历快速和安全失败" class="headerlink" title="2、List遍历快速和安全失败"></a><strong>2、List遍历快速和安全失败</strong></h4><p><strong>①普通for循环遍历List删除指定元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">   <span class="keyword">if</span>(list.get(i) == <span class="number">5</span>) </span><br><span class="line">       list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>② 迭代遍历,用list.remove(i)方法删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; it = list.iterator();</span><br><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> it.next();</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">5</span>)&#123;</span><br><span class="line">        list.remove(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>③foreach遍历List删除元素</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Integer i:list)&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==<span class="number">3</span>) list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>fail—fast：</strong>快速失败</p>
<p>​        当异常产生时，直接抛出异常，程序终止;</p>
<p>​        fail-fast主要是体现在当我们在遍历集合元素的时候，经常会使用迭代器，但在迭代器遍历元素的过程中，如果集合的结构（modCount）被改变的话，就会抛出异常ConcurrentModificationException，防止继续遍历。这就是所谓的快速失败机制。</p>
<p><strong>fail—safe：</strong>安全失败</p>
<p>    采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。由于在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发ConcurrentModificationException。</p>
<p>    缺点：基于拷贝内容的优点是避免了ConcurrentModificationException，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。</p>
<p>    场景：java.util.concurrent包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p>
<h4 id="3、详细介绍HashMap"><a href="#3、详细介绍HashMap" class="headerlink" title="3、详细介绍HashMap"></a><strong>3、详细介绍HashMap</strong></h4><p>角度：数据结构+扩容情况+put查找的详细过程+哈希函数+容量为什么始终都是2^N，JDK1.7与1.8的区别。</p>
<p>参考：<a href="https://www.jianshu.com/p/9fe4cb316c05">https://www.jianshu.com/p/9fe4cb316c05</a></p>
<p><strong>数据结构：</strong></p>
<p>​        HashMap在底层数据结构上采用了数组＋链表＋红黑树，通过散列映射来存储键值对数据</p>
<p><strong>扩容情况：</strong></p>
<p>​        默认的负载因子是0.75，如果数组中已经存储的元素个数大于数组长度的75%，将会引发扩容操作。</p>
<p>​        【1】创建一个长度为原来数组长度<strong>两倍的新数组</strong>。</p>
<p>​        【2】1.7采用Entry的重新hash运算，1.8采用高于与运算。</p>
<p><strong>put操作步骤：</strong></p>
<p>​                <img src="https://s0.lgstatic.com/i/image3/M01/73/D9/CgpOIF5rDYmATP43AAB3coc0R64799.png" alt="img" style="zoom:67%;" /></p>
<p>​    1、判断数组是否为空，为空进行初始化;</p>
<p>​    2、不为空，则计算 key 的 hash 值，通过(n - 1) &amp; hash计算应当存放在数组中的下标 index;</p>
<p>​    3、查看 table[index] 是否存在数据，没有数据就构造一个Node节点存放在 table[index] 中；</p>
<p>​    4、存在数据，说明发生了hash冲突(存在二个节点key的hash值一样), 继续判断key是否相等，相等，用新的value替换原数据；</p>
<p>​    5、若不相等，判断当前节点类型是不是树型节点，如果是树型节点，创造树型节点插入红黑树中；</p>
<p>​    6、若不是红黑树，创建普通Node加入链表中；判断链表长度是否大于 8，大于则将链表转换为红黑树；</p>
<p>​    7、插入完成之后判断当前节点数是否大于阈值，若大于，则扩容为原数组的二倍</p>
<p><strong>哈希函数：</strong></p>
<p>​     通过hash函数（优质因子31循环累加）先拿到 key 的hashcode，是一个32位的值，然后让hashcode的高16位和低16位进行<strong>异或</strong>操作。该函数也称为扰动函数，做到尽可能降低hash碰撞，通过尾插法进行插入。</p>
<p><strong>容量为什么始终都是2^N：</strong></p>
<p>​        先做对数组的⻓度取模运算，得到的余数才能⽤来要存放的位置也就是对应的数组下标。这个数组下标的计算⽅法是“  (n - 1) &amp; hash ”。（n代表数组⻓度）。方便数组的扩容和增删改时的取模。</p>
<p><strong>JDK1.7与1.8的区别：</strong></p>
<p><strong>JDK1.7 HashMap：</strong></p>
<p>​        底层是 <strong>数组和链表</strong> 结合在⼀起使⽤也就是链表散列。如果相同的话，直接覆盖，不相同就通过拉链法解决冲突。扩容翻转时顺序不一致使用头插法会产生死循环，导致cpu100%</p>
<p><strong>JDK1.8 HashMap：</strong>    </p>
<p>​        底层数据结构上采用了<strong>数组＋链表＋红黑树</strong>；当链表⻓度⼤于阈值（默认为 8-泊松分布），数组的⻓度大于 64时，链表将转化为红⿊树，以减少搜索时间。（解决了tomcat臭名昭著的url参数dos攻击问题）</p>
<h4 id="4、ConcurrentHashMap"><a href="#4、ConcurrentHashMap" class="headerlink" title="**4、ConcurrentHashMap **"></a>**4、ConcurrentHashMap **</h4><p>​        可以通过<strong>ConcurrentHashMap</strong> 和 <strong>Hashtable</strong>来实现线程安全；Hashtable 是原始API类，通过synchronize同步修饰，效率低下；ConcurrentHashMap 通过分段锁实现，效率较比Hashtable要好；</p>
<p><strong>ConcurrentHashMap的底层实现：</strong></p>
<p>​        <strong>JDK1.7的 ConcurrentHashMap</strong> 底层采⽤ 分段的数组+链表 实现；采用 <strong>分段锁</strong>（Sagment） 对整个桶数组进⾏了分割分段(Segment默认16个)，每⼀把锁只锁容器其中⼀部分数据，多线程访问容器⾥不同数据段的数据，就不会存在锁竞争，提⾼并发访问率。</p>
<p><img src="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1035283471,1167301443&fm=26&gp=0.jpg"></p>
<p>​        <strong>JDK1.8的 ConcurrentHashMap</strong> 采⽤的数据结构跟HashMap1.8的结构⼀样，数组+链表&#x2F;红⿊树；摒弃了Segment的概念，⽽是直接⽤ Node 数组+链表+红⿊树的数据结构来实现，通过并发控制 <strong>synchronized 和CAS</strong>来操作保证线程的安全。</p>
<h4 id="5、序列化和反序列化"><a href="#5、序列化和反序列化" class="headerlink" title="5、序列化和反序列化"></a><strong>5、序列化和反序列化</strong></h4><p>​        序列化的意思就是将对象的状态转化成字节流，以后可以通过这些值再生成相同状态的对象。对象序列化是对象持久化的一种实现方法，它是将对象的属性和方法转化为一种序列化的形式用于存储和传输。反序列化就是根据这些保存的信息重建对象的过程。</p>
<p><strong>序列化：</strong>将java对象转化为字节序列的过程。</p>
<p><strong>反序列化：</strong>将字节序列转化为java对象的过程。 </p>
<p><strong>优点：</strong></p>
<p>​    a、实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（通常存放在文件里）Redis的RDB</p>
<p>​    b、利用序列化实现远程通信，即在网络上传送对象的字节序列。 Google的protoBuf</p>
<p><strong>反序列化失败的场景：</strong></p>
<p>​        序列化ID：serialVersionUID不一致的时候，导致反序列化失败</p>
<h4 id="6、String"><a href="#6、String" class="headerlink" title="6、String"></a><strong>6、String</strong></h4><p>String 使用<strong>数组</strong>存储内容，数组使用 <strong>final</strong> 修饰，因此 String 定义的字符串的值也是<strong>不可变的</strong></p>
<p>StringBuffer 对方法加了同步锁，线程安全，效率略低于 StringBuilder</p>
<h3 id="设计模式与原则"><a href="#设计模式与原则" class="headerlink" title="设计模式与原则"></a>设计模式与原则</h3><h4 id="1、单例模式"><a href="#1、单例模式" class="headerlink" title="1、单例模式"></a>1、单例模式</h4><p>​    某个类只能生成一个实例，该实例全局访问，例如Spring容器里一级缓存里的单例池。</p>
<p><strong>优点</strong>：</p>
<p>​    <strong>唯一访问</strong>：如生成唯一序列化的场景、或者spring默认的bean类型。</p>
<p>​    <strong>提高性能</strong>：频繁实例化创建销毁或者耗时耗资源的场景，如连接池、线程池。</p>
<p><strong>缺点</strong>：</p>
<p>​    不适合有状态且需变更的</p>
<p><strong>实现方式</strong>：</p>
<p>​    <strong>饿汉式</strong>：线程安全速度快</p>
<p>​    <strong>懒汉式</strong>：双重检测锁，第一次减少锁的开销、第二次防止重复、volatile防止重排序导致实例化未完成</p>
<p><strong>为什么要 double-check？</strong></p>
<p>我们先来看第二次的 check，这时你需要考虑这样一种情况，有两个线程同时调用 getInstance 方法，由于 singleton 是空的 ，因此两个线程都可以通过第一重的 if 判断；然后由于锁机制的存在，会有一个线程先进入同步语句，并进入第二重 if 判断 ，而另外的一个线程就会在外面等待。</p>
<p>不过，当第一个线程执行完 new Singleton() 语句后，就会退出 synchronized 保护的区域，这时如果没有第二重 if (singleton &#x3D;&#x3D; null) 判断的话，那么第二个线程也会创建一个实例，此时就破坏了单例，这肯定是不行的。</p>
<p>而对于第一个 check 而言，如果去掉它，那么所有线程都会串行执行，效率低下，所以两个 check 都是需要保留的。</p>
<p><strong>在双重检查锁模式中为什么需要使用 volatile 关键字?</strong></p>
<p>在java内存模型中，volatile 关键字作用可以是保证可见性或者禁止指令重排。这里是因为 singleton &#x3D; new Singleton() ，它并非是一个原子操作，事实上，在 JVM 中上述语句至少做了以下这 3 件事：</p>
<ul>
<li>第一步是给 singleton 分配内存空间；</li>
<li>第二步开始调用 Singleton 的构造函数等，来初始化 singleton；</li>
<li>第三步，将 singleton 对象指向分配的内存空间（执行完这步 singleton 就不是 null 了）。</li>
</ul>
<p>这里需要留意一下 1-2-3 的顺序，因为存在指令重排序的优化，也就是说第 2 步和第 3 步的顺序是不能保证的，最终的执行顺序，可能是 1-2-3，也有可能是 1-3-2。</p>
<p>如果是 1-3-2，那么在第 3 步执行完以后，singleton 就不是 null 了，可是这时第 2 步并没有执行，singleton 对象未完成初始化，它的属性的值可能不是我们所预期的值。假设此时线程 2 进入 getInstance 方法，由于 singleton 已经不是 null 了，所以会通过第一重检查并直接返回，但其实这时的 singleton 并没有完成初始化，所以使用这个实例的时候会报错，详细流程如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/EKNSfp_20210917165416.png"></p>
<p>线程 1 首先执行新建实例的第一步，也就是分配单例对象的内存空间，由于线程 1 被重排序，所以执行了新建实例的第三步，也就是把 singleton 指向之前分配出来的内存地址，在这第三步执行之后，singleton 对象便不再是 null。</p>
<p>这时线程 2 进入 getInstance 方法，判断 singleton 对象不是 null，紧接着线程 2 就返回 singleton 对象并使用，由于没有初始化，所以报错了。最后，线程 1 “姗姗来迟”，才开始执行新建实例的第二步——初始化对象，可是这时的初始化已经晚了，因为前面已经报错了。</p>
<p>使用了 volatile 之后，相当于是表明了该字段的更新可能是在其他线程中发生的，因此应确保在读取另一个线程写入的值时，可以顺利执行接下来所需的操作。在 JDK 5 以及后续版本所使用的 JMM 中，在使用了 volatile 后，会一定程度禁止相关语句的重排序，从而避免了上述由于重排序所导致的读取到不完整对象的问题的发生。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton singleton;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">synchronized</span>(Singleton.class)&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">          singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> singleton;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    <strong>静态内部类</strong>：线程安全利用率高</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>​    <strong>枚举</strong>：effictiveJAVA推荐，反射也无法破坏</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">        SINGLETON;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">SingletonEnum</span><span class="params">()</span>&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h4><p>​    定义一个用于创建产品的接口，由子类决定生产何种产品。</p>
<p><strong>优点：</strong>解耦：提供参数即可获取产品，通过配置文件可以不修改代码增加具体产品。</p>
<p><strong>缺点：</strong>每增加一个产品就得新增一个产品类</p>
<h4 id="3、抽象工厂模式"><a href="#3、抽象工厂模式" class="headerlink" title="3、抽象工厂模式"></a>3、抽象工厂模式</h4><p>​    提供一个接口，用于创建相关或者依赖对象的家族，并由此进行约束。</p>
<p><strong>优点：</strong>可以在类的内部对产品族进行约束</p>
<p><strong>缺点</strong>：假如产品族中需要增加一个新的产品，则几乎所有的工厂类都需要进行修改。</p>
<h4 id="4、设计模式中工厂方法与抽象工厂之间的区别联系"><a href="#4、设计模式中工厂方法与抽象工厂之间的区别联系" class="headerlink" title="4、设计模式中工厂方法与抽象工厂之间的区别联系"></a>4、设计模式中工厂方法与抽象工厂之间的区别联系</h4><p>首先来看看两者的定义区别：</p>
<ul>
<li>工厂模式 定义一个用于创建对象的接口，让子类决定实例化哪一个类</li>
<li>抽象工厂模式 为创建一组相关或相互依赖的对象提供一个接口，而且无需指定他们的具体类</li>
</ul>
<p>个人觉得这个区别在于产品，如果产品单一，最合适用工厂模式，但是如果有多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式。 再通俗深化理解下：工厂模式针对的是一个产品等级结构 ，抽象工厂模式针对的是面向多个产品等级结构的。</p>
<p>再来看看工厂方法模式与抽象工厂模式对比：</p>
<table>
<thead>
<tr>
<th>工厂方法模式</th>
<th>抽象工厂模式</th>
</tr>
</thead>
<tbody><tr>
<td>针对的是单个产品等级结构</td>
<td>针对的是面向多个产品等级结构</td>
</tr>
<tr>
<td>一个抽象产品类</td>
<td>多个抽象产品类</td>
</tr>
<tr>
<td>可以派生出多个具体产品类</td>
<td>每个抽象产品类可以派生出多个具体产品类</td>
</tr>
<tr>
<td>一个抽象工厂类，可以派生出多个具体工厂类</td>
<td>一个抽象工厂类，可以派生出多个具体工厂类</td>
</tr>
<tr>
<td>每个具体工厂类只能创建一个具体产品类的实例</td>
<td>每个具体工厂类可以创建多个具体产品类的实例</td>
</tr>
</tbody></table>
<h2 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h2><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>构造方法可以被重载，只有当类中没有显性声明任何构造方法时，才会有默认构造方法。</p>
<p>构造方法没有返回值，构造方法的作用是创建新对象。</p>
<h3 id="初始化块"><a href="#初始化块" class="headerlink" title="初始化块"></a>初始化块</h3><p>静态初始化块的优先级最高，会最先执行，在非静态初始化块之前执行。</p>
<p>静态初始化块会在类第一次被加载时最先执行，因此在 main 方法之前。</p>
<h3 id="This"><a href="#This" class="headerlink" title="This"></a>This</h3><p>关键字 <code>this</code> 代表当前对象的引用。当前对象指的是调用类中的属性或方法的对象</p>
<p>关键字 <code>this</code> 不可以在静态方法中使用。静态方法不依赖于类的具体对象的引用</p>
<h3 id="重写和重载的区别"><a href="#重写和重载的区别" class="headerlink" title="重写和重载的区别"></a><strong>重写和重载的区别</strong></h3><p>重载指在同一个类中定义多个方法，这些方法名称相同，签名不同。</p>
<p>重写指在子类中的方法的名称和签名都和父类相同，使用override注解</p>
<h3 id="Object类方法"><a href="#Object类方法" class="headerlink" title="Object类方法"></a>Object类方法</h3><p><strong>toString</strong>     默认是个指针，一般需要重写</p>
<p><strong>equals</strong>        比较对象是否相同，默认和&#x3D;&#x3D;功能一致</p>
<p><strong>hashCode</strong>  散列码，equals则hashCode相同，所以重写equals必须重写hashCode</p>
<p>**finalize   **    用于垃圾回收之前做的遗嘱，默认空，子类需重写</p>
<p><strong>clone</strong>           深拷贝，类需实现cloneable的接口</p>
<p><strong>getClass</strong>     反射获取对象元数据，包括类名、方法、</p>
<p><strong>notify、wait</strong>   用于线程通知和唤醒</p>
<h3 id="基本数据类型和包装类"><a href="#基本数据类型和包装类" class="headerlink" title="基本数据类型和包装类"></a>基本数据类型和包装类</h3><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1goe1gq2yipj318s0ruwj4.jpg" alt="image-20210309224910999"></p>
<table>
<thead>
<tr>
<th>类型</th>
<th>缓存范围</th>
</tr>
</thead>
<tbody><tr>
<td>Byte,Short,Integer,Long</td>
<td>[-128, 127]</td>
</tr>
<tr>
<td>Character</td>
<td>[0, 127]</td>
</tr>
<tr>
<td>Boolean</td>
<td>[false, true]</td>
</tr>
</tbody></table>
<h1 id="二、JVM篇"><a href="#二、JVM篇" class="headerlink" title="二、JVM篇"></a>二、JVM篇</h1><h3 id="JVM内存划分"><a href="#JVM内存划分" class="headerlink" title="JVM内存划分"></a><strong>JVM内存划分</strong></h3><h4 id="1、JVM运行时数据区域"><a href="#1、JVM运行时数据区域" class="headerlink" title="1、JVM运行时数据区域"></a><strong>1、JVM运行时数据区域</strong></h4><p>​        堆、方法区（元空间）、虚拟机栈、本地方法栈、程序计数器</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobgnw8m8uj30l10bejs4.jpg" alt="xxx"></p>
<p><strong>Heap(堆)：</strong></p>
<p>​        对象的实例以及数组的内存都是要在堆上进行分配的，堆是线程共享的一块区域，用来存放对象实例，也是垃圾回收（GC）的主要区域；开启逃逸分析后，某些未逃逸的对象可以通过标量替换的方式在栈中分配</p>
<p>​        堆细分：新生代、老年代，对于新生代又分为：<strong>Eden区</strong>和<strong>Surviver1</strong>和<strong>Surviver2</strong>区；</p>
<p><strong>方法区：</strong></p>
<p>​        对于JVM的方法区也可以称之为永久区，它储存的是已经被java虚拟机加载的类信息、常量、静态变量；Jdk1.8以后取消了方法区这个概念，称之为元空间（MetaSpace）；</p>
<p>​        当应用中的 Java 类过多时，比如 <strong>Spring 等一些使用动态代理的框架生成了很多类</strong>，如果占用空间超出了我们的设定值，就会发生<strong>元空间溢出</strong></p>
<p><strong>虚拟机栈：</strong></p>
<p>​        虚拟机栈<strong>是线程私有的</strong>，他的生命周期和线程的生命周期是一致的。里面装的是一个一个的<strong>栈帧</strong>，每一个方法在执行的时候都会创建一个栈帧，栈帧中用来存放（<strong>局部变量表</strong>、<strong>操作数栈</strong> 、<strong>动态链接</strong> 、<strong>返回地址</strong>）；在Java虚拟机规范中，对此区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将会抛出<strong>StackOverflowError</strong>异常；如果虚拟机栈动态扩展时无法申请到足够的内存，就会抛出<strong>OutOfMemoryError</strong>异常。</p>
<ul>
<li><p><strong>局部变量表：</strong>局部变量表是一组变量值存储空间，用来存放<strong>方法参数</strong>、方法内部定义的<strong>局部变量</strong>。底层是变量槽（variable slot）<strong>（注意：java分成员变量、局部变量）</strong></p>
</li>
<li><p><strong>操作数栈：</strong>是用来记录一个方法在执行的过程中，<strong>字节码指令向操作数栈中进行入栈和出栈的过程</strong>。大小在编译的时候已经确定了，当一个方法刚开始执行的时候，操作数栈中是空发的，在方法执行的过程中会有各种<strong>字节码指令</strong>往操作数栈中<strong>入栈和出栈</strong>。</p>
</li>
<li><p><strong>动态链接：</strong>因为字节码文件中有很多符号的引用，这些符号引用一部分会在<strong>类加载的解析阶段</strong>或<strong>第一次使用</strong>的时候转化成<strong>直接引用</strong>，这种称为<strong>静态解析</strong>；另一部分会<strong>在运行期间</strong>转化为直接引用，称为<strong>动态链接</strong>。</p>
</li>
<li><p><strong>返回地址（returnAddress）：</strong>类型（指向了一条字节码指令的地址）</p>
<p><strong>JIT即时编译器（Just In Time Compiler），简称 JIT 编译器</strong>: </p>
<p>为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成与本地平台相关的机器码，并进行各种层次的优化，比如锁粗化等</p>
</li>
</ul>
<p><strong>本地方法栈：</strong></p>
<p>​        本地方法栈和虚拟机栈类似，不同的是虚拟机栈服务的是Java方法，而<strong>本地方法栈服务的是Native方法</strong>。在HotSpot虚拟机实现中是把本地方法栈和虚拟机栈合二为一的，同理它也会抛出<strong>StackOverflowError</strong>和<strong>OOM</strong>异常。</p>
<p><strong>PC程序计数器：</strong></p>
<p>​        PC，指的是存放下一条指令的位置的一个指针。它是一块较小的内存空间，且是<strong>线程私有</strong>的。由于线程的切换，CPU在执行的过程中，需要记住原线程的下一条指令的位置，所以每一个线程都需要有自己的PC。</p>
<h4 id="2、堆内存分配策略"><a href="#2、堆内存分配策略" class="headerlink" title="2、堆内存分配策略"></a><strong>2、堆内存分配策略</strong></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnjl5glvj30l10h9jrt.jpg" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Hm2wXK_20210918154730.png"></p>
<ul>
<li><p>对象优先分配在Eden区，如果Eden区没有足够的空间进行分配时，虚拟机执行一次MinorGC。而那些无需回收的存活对象，将会进到 Survivor 的 From 区（From 区内存不足时，直接进入 Old 区）。</p>
</li>
<li><p>大对象直接进入老年代（<strong>需要大量连续内存空间的对象</strong>）。这样做的目的是避免在Eden区和两个Survivor区之间发生大量的内存拷贝（新生代采用复制算法收集内存）。</p>
</li>
<li><p>长期存活的对象进入老年代。虚拟机为每个对象定义了一个年龄（Age Count）计数器，如果对象经过了1次Minor GC那么对象会进入Survivor区，之后每经过一次Minor GC那么对象的年龄加1，直到达到阀值（默认15次），对象进入老年区。</p>
<p>（<strong>动态对象年龄判定</strong>：程序从年龄最小的对象开始累加，如果累加的对象大小，大于幸存区的一半，则将当前的对象 age 作为新的阈值，年龄大于此阈值的对象则直接进入老年代）</p>
</li>
<li><p>每次进行Minor GC或者大对象直接进入老年区时，JVM会计算所需空间大小如小于老年区的剩余值大小，则进行一次<strong>Full GC</strong>。</p>
</li>
</ul>
<h4 id="3、创建一个对象的步骤"><a href="#3、创建一个对象的步骤" class="headerlink" title="3、创建一个对象的步骤"></a><strong>3、创建一个对象的步骤</strong></h4><p><strong>步骤：类加载检查、分配内存、初始化对象（包括：初始化零值、设置对象头、执行init方法）、将创建的对象指向分配的内存</strong></p>
<p><strong>①类加载检查：</strong> </p>
<p>​        虚拟机遇到 new 指令时，⾸先去检查是否能在常量池中定位到这个类的符号引⽤，并且检查这个符号引⽤代表的类是否已被加载过、解析和初始化过。如果没有，那必须先执⾏相应的类加载过程。</p>
<p><strong>②分配内存：</strong></p>
<p>​         在类加载检查通过后，接下来虚拟机将为新⽣对象分配内存，分配⽅式有 <strong>“指针碰撞”</strong> 和 <strong>“空闲列表”</strong> 两种，选择那种分配⽅式由 Java 堆是否规整决定，⽽Java堆是否规整⼜由所采⽤的垃圾收集器是否带有压缩整理功能决定。</p>
<p><strong>③初始化对象</strong></p>
<ul>
<li><strong>初始化零值：</strong></li>
</ul>
<p>​         内存分配完成后，虚拟机需要将分配到的内存空间都初始化为零值，这⼀步操作保证了对象的实例字段在 Java 代码中可以不赋初始值就直接使⽤，程序能访问到这些字段的数据类型所对应的零值。</p>
<ul>
<li><strong>设置对象头：</strong></li>
</ul>
<p>​        初始化零值完成之后，虚拟机要对对象进⾏必要的设置，例如这个对象是那个类的实例、如何才能找到类的元数据信息、对象的哈希吗、对象的 GC 分代年龄等信息。 这些信息存放在对象头中。 另外，根据虚拟机当前运⾏状态的不同，如是否启⽤偏向锁等，对象头会有不同的设置⽅式。</p>
<ul>
<li><strong>执⾏ init ⽅法：</strong></li>
</ul>
<p>​        从虚拟机的视⻆来看，⼀个新的对象已经产⽣了，但从Java 程序的视⻆来看， <init> ⽅法还没有执⾏，所有的字段都还为零。所以⼀般来说（除循环依赖），执⾏ new 指令之后会接着执⾏  <init> ⽅法，这样⼀个真正可⽤的对象才算产⽣出来。</p>
<p><strong>④将创建的对象指向分配的内存</strong></p>
<h4 id="4、对象引用"><a href="#4、对象引用" class="headerlink" title="4、对象引用"></a>4、<strong>对象引用</strong></h4><p>普通的对象引用关系就是<strong>强引用</strong>。</p>
<p><strong>软引用</strong>用于维护一些可有可无的对象。只有在<strong>内存不足时，系统则会回收软引用对象</strong>，如果回收了软引用对象之后仍然没有足够的内存，才会抛出内存溢出异常。</p>
<p><strong>弱引用</strong>对象相比软引用来说，要更加无用一些，它拥有更短的生命周期，当 JVM 进行垃圾回收时，<strong>无论内存是否充足</strong>，都会回收被弱引用关联的对象。</p>
<p><strong>虚引用</strong>是一种形同虚设的引用，在现实场景中用的不是很多，它主要用来<strong>跟踪对象被垃圾回收</strong>的活动。</p>
<div style="page-break-after: always;"></div>

<h3 id="JVM类加载过程"><a href="#JVM类加载过程" class="headerlink" title="JVM类加载过程"></a><strong>JVM类加载过程</strong></h3><p><strong>过程：加载、验证、准备、解析、初始化</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnnbem87j30eq0cogmj.jpg" alt="img" style="zoom:50%;" />

<p><strong>加载阶段：</strong></p>
<p>​        1.通过一个类的全限定名来获取定义此类的二进制字节流。</p>
<p>​        2.将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<p>​        3.在Java堆中生成一个代表这个类的java.lang.class对象，作为访问方法区这些数据的入口。</p>
<p><strong>验证阶段：</strong></p>
<p>​        1.文件格式验证（是否符合Class文件格式的规范，并且能被当前版本的虚拟机处理）</p>
<p>​        2.元数据验证（对字节码描述的信息进行语意分析，以保证其描述的信息符合Java语言规范要求）</p>
<p>​        3.字节码验证（保证被校验类的方法在运行时不会做出危害虚拟机安全的行为）</p>
<p>​        4.符号引用验证（虚拟机将符号引用转化为直接引用时，解析阶段中发生）</p>
<p><strong>准备阶段：</strong></p>
<p>​        准备阶段是正式为类变量（成员变量）分配内存并设置类变量初始值的阶段。将对象初始化为“零”值。</p>
<p>这一步只会给那些静态变量设置一个初始的值，而那些实例变量是在实例化对象时进行分配的。</p>
<p><strong>解析阶段：</strong></p>
<p>​        解析阶段时虚拟机将常量池内的符号引用替换为直接引用的过程。</p>
<p>​        <strong>字符串常量池</strong>：堆上，默认class文件的静态常量池</p>
<p>​        <strong>运行时常量池</strong>：在方法区，属于元空间</p>
<p><strong>初始化阶段：</strong></p>
<p>​        初始化阶段时加载过程的最后一步，而这一阶段也是真正意义上开始执行类中定义的Java程序代码。</p>
<h4 id="1、双亲委派机制"><a href="#1、双亲委派机制" class="headerlink" title="1、双亲委派机制"></a><strong>1、双亲委派机制</strong></h4><p>​        每⼀个类都有⼀个对应它的类加载器。系统中的 ClassLoder 在协同⼯作的时候会默认使⽤ 双亲委派模型 。即在类加载的时候，系统会⾸先判断当前类是否被加载过。已经被加载的类会直接返回，否则才会尝试加载。加载的时候，⾸先会把该请求委派该⽗类加载器的  loadClass() 处理，因此所有的请求最终都应该传送到顶层的启动类加载器  BootstrapClassLoader 中。当⽗类加载器⽆法处理时，才由⾃⼰来处理。当⽗类加载器为null时，会使⽤启动类加载器  BootstrapClassLoader 作为⽗类加载器。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobn5lh4f6j30hk08rjso.jpg" alt="img"></p>
<p><strong>使用好处：</strong></p>
<p>​        此机制保证JDK核心类的优先加载；使得Java程序的稳定运⾏，可以避免类的重复加载，也保证了 Java 的核⼼ API 不被篡改。如果不⽤使⽤双亲委派模型，⽽是每个类加载器加载⾃⼰的话就会出现⼀些问题，⽐如我们编写⼀个称为  java.lang.Object 类的话，那么程序运⾏的时候，系统就会出现多个不同的Object 类。</p>
<p><strong>破坏双亲委派机制：</strong></p>
<ul>
<li><p>可以⾃⼰定义⼀个类加载器，重写loadClass方法；</p>
</li>
<li><p>Tomcat 可以加载自己目录下的 class 文件，并不会传递给父类的加载器；</p>
</li>
<li><p>Java 的 SPI，发起者 BootstrapClassLoader 已经是最上层了，它直接获取了 AppClassLoader 进行驱动加载，和双亲委派是相反的。</p>
</li>
</ul>
<h4 id="2、tomcat的类加载机制"><a href="#2、tomcat的类加载机制" class="headerlink" title="2、tomcat的类加载机制"></a><strong>2、tomcat的类加载机制</strong></h4><p><strong>步骤：</strong></p>
<ol>
<li>先在本地cache查找该类是否已经加载过，看看 Tomcat 有没有加载过这个类。</li>
<li>如果Tomcat 没有加载过这个类，则从系统类加载器的cache中查找是否加载过。</li>
<li>如果没有加载过这个类，尝试用ExtClassLoader类加载器类加载，重点来了，这里并没有首先使用 AppClassLoader 来加载类。这个Tomcat 的 WebAPPClassLoader 违背了双亲委派机制，直接使用了 ExtClassLoader来加载类。这里注意 ExtClassLoader 双亲委派依然有效，ExtClassLoader 就会使用 Bootstrap ClassLoader 来对类进行加载，保证了 Jre 里面的核心类不会被重复加载。 比如在 Web 中加载一个 Object 类。WebAppClassLoader → ExtClassLoader → Bootstrap ClassLoader，这个加载链，就保证了 Object 不会被重复加载。</li>
<li>如果 BoostrapClassLoader，没有加载成功，就会调用自己的 findClass 方法由自己来对类进行加载，findClass 加载类的地址是自己本 web 应用下的 class。</li>
<li>加载依然失败，才使用 AppClassLoader 继续加载。</li>
<li>都没有加载成功的话，抛出异常。</li>
</ol>
<p>总结一下以上步骤，WebAppClassLoader 加载类的时候，故意打破了JVM 双亲委派机制，绕开了 AppClassLoader，直接先使用 ExtClassLoader 来加载类。</p>
<div style="page-break-after: always;"></div>

<h3 id="JVM垃圾回收"><a href="#JVM垃圾回收" class="headerlink" title="JVM垃圾回收"></a>JVM垃圾回收</h3><h4 id="1、存活算法和两次标记过程"><a href="#1、存活算法和两次标记过程" class="headerlink" title="1、存活算法和两次标记过程"></a><strong>1、存活算法和两次标记过程</strong></h4><p><strong>引用计数法：</strong></p>
<p>​        给对象添加一个引用计数器，每当由一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器为0的对象就是不可能再被使用的。</p>
<p>​    优点：实现简单，判定效率也很高</p>
<p>​    缺点：他很难解决对象之间相互循环引用的问题，基本上被抛弃</p>
<p><strong>可达性分析法：</strong></p>
<p>​        通过一系列的成为“GC Roots”(活动线程相关的各种引用，虚拟机<strong>栈帧引用</strong>，<strong>静态变量引用</strong>，<strong>JNI引用</strong>)的对象作为起始点，从这些节点ReferenceChains开始向下搜索，搜索所走过的路径成为引用链，当一个对象到GC ROOTS没有任何引用链相连时，则证明此对象时不可用的；</p>
<p><strong>两次标记过程：</strong></p>
<p>​        对象被回收之前，该对象的finalize()方法会被调用；两次标记，即第一次标记不在“关系网”中的对象。第二次的话就要先判断该对象有没有实现finalize()方法了，如果没有实现就直接判断该对象可回收；如果实现了就会先放在一个队列中，并由虚拟机建立的一个低优先级的线程去执行它，随后就会进行第二次的小规模标记，在这次被标记的对象就会真正的被回收了。</p>
<h4 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a><strong>2、垃圾回收算法</strong></h4><p><strong>垃圾回收算法</strong>：复制算法、标记清除、标记整理、分代收集</p>
<p><strong>复制算法：(young)</strong></p>
<p>​        将内存分为⼤⼩相同的两块，每次使⽤其中的⼀块。当这⼀块的内存使⽤完后，就将还存活的对象复制到另⼀块去，然后再把使⽤的空间⼀次清理掉。这样就使每次的内存回收都是对内存区间的⼀半进⾏回收；</p>
<p>​        优点：实现简单，内存效率高，不易产生碎片</p>
<p>​        缺点：内存压缩了一半，倘若存活对象多，Copying 算法的效率会大大降低</p>
<p><strong>标记清除：(cms)</strong></p>
<p>​        标记出所有需要回收的对象，在标记完成后统⼀回收所有被标记的对象</p>
<p>​        缺点：效率低，标记清除后会产⽣⼤量不连续的碎⽚，需要预留空间给分配阶段的浮动垃圾</p>
<p><strong>标记整理：(old)</strong></p>
<p>​        标记过程仍然与“标记-清除”算法⼀样，再让所有存活的对象向⼀端移动，然后直接清理掉端边界以外的内存；解决了产生大量不连续碎片问题</p>
<p><strong>分代收集：</strong></p>
<p>​        根据各个年代的特点选择合适的垃圾收集算法。</p>
<p>​        新生代采用复制算法，新生代每次垃圾回收都要回收大部分对象，存活对象较少，即要复制的操作比较少，一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。</p>
<p>​        老年代的对象存活⼏率是⽐较⾼的，⽽且没有额外的空间对它进⾏分配担保，所以我们必须选择“标记-清除”或“标记-整理”算法进⾏垃圾收集。</p>
<p><strong>Safepoint</strong> 当发生 GC 时，用户线程必须全部停下来，才可以进行垃圾回收，这个状态我们可以认为 JVM 是安全的（safe），整个堆的状态是稳定的。如果在 GC 前，有线程迟迟进入不了 safepoint，那么整个 JVM 都在等待这个阻塞的线程，造成了整体 GC 的时间变长</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnmip32vj30l109q0t3.jpg" alt="img"></p>
<h5 id="MinorGC、MajorGC、FullGC"><a href="#MinorGC、MajorGC、FullGC" class="headerlink" title="MinorGC、MajorGC、FullGC"></a><strong>MinorGC、MajorGC、FullGC</strong></h5><p><strong>MinorGC</strong> 在年轻代空间不足的时候发生，</p>
<p><strong>MajorGC</strong> 指的是老年代的 GC，出现 MajorGC 一般经常伴有 MinorGC。</p>
<p><strong>FullGC</strong> 1、当老年代无法再分配内存的时候；2、元空间不足的时候；3、显示调用 System.gc 的时候。另外，像 CMS 一类的垃圾回收器，在 MinorGC 出现 promotion failure 的时候也会发生 FullGC。</p>
<p><strong>对象优先在 Eden 区分配</strong><br>    大多数情况下，对象在新生代 Eden 区分配，当 Eden 区空间不够时，发起 Minor GC。</p>
<p><strong>大对象直接进入老年代</strong><br>    大对象是指需要连续内存空间的对象，比如很长的字符串以及数组。老年代直接分配的<strong>目的是</strong>避免在 Eden 区和 Survivor 区之间出现大量内存复制。</p>
<p><strong>长期存活的对象进入老年代</strong><br>    虚拟机给每个对象定义了年龄计数器，对象在 Eden 区出生之后，如果经过一次 Minor GC 之后，将进入 Survivor 区，同时对象年龄变为 1，增加到一定阈值时则进入老年代（阈值默认为 15）</p>
<p><strong>动态对象年龄判定</strong><br>    为了能更好地适应不同程序的内存状况，虚拟机并不总是要求对象的年龄必须达到阈值才能进入老年代。如果在 Survivor 区中相同年龄的所有对象的空间总和大于 Survivor 区空间的一半，则年龄大于或等于该年龄的对象直接进入老年代。</p>
<p><strong>空间分配担保</strong><br>    在发生 Minor GC 之前，虚拟机会先检查老年代最大可用的连续空间是否大于新生代所有对象的空间总和，如果这个条件成立，那么 Minor GC 可以确保是安全的。如果不成立则进行 Full GC。</p>
<h4 id="3、垃圾收集器"><a href="#3、垃圾收集器" class="headerlink" title="3、垃圾收集器"></a><strong>3、垃圾收集器</strong></h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnjx3zcej30l10ctaat.jpg" alt="img"></p>
<p>​    <strong>JDK3：Serial Parnew 关注效率</strong></p>
<p><strong>Serial：</strong></p>
<p>​        Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。适合用于客户端垃圾收集器。</p>
<p><strong>Parnew：</strong></p>
<p>​        ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。</p>
<p>​    <strong>JDK5：parallel Scavenge+（Serial old&#x2F;parallel old）关注吞吐量</strong></p>
<p><strong>parallel Scavenge：</strong>(关注吞吐量)</p>
<p>​        Parallel Scavenge收集器关注点是吞吐量（⾼效率的利⽤CPU）。CMS等垃圾收集器的关注点更多的是⽤户线程的停顿时间（提⾼⽤户体验）；高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。</p>
<p><strong>Serial old：</strong></p>
<p>Serial收集器的⽼年代版本，它同样是⼀个单线程收集器，使用标记-整理算法。主要有两个用途：</p>
<ul>
<li><p>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。</p>
</li>
<li><p>作为年老代中使用 CMS 收集器的后备垃圾收集方案。</p>
</li>
</ul>
<p><strong>parallel old：</strong></p>
<p>​        Parallel Scavenge收集器的⽼年代版本。使⽤多线程和“标记-整理”算法。</p>
<p><strong>JDK8-CMS：（关注最短垃圾回收停顿时间）</strong></p>
<p>​        CMS收集器是一种年老代垃圾收集器，其最主要目标是获取<strong>最短垃圾回收停顿时间</strong>，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：</p>
<p>​        <strong>初始标记：</strong>只是标记一下 GC Roots 能直接关联的对象，速度很快，STW。</p>
<p>​        <strong>并发标记：</strong>进行 ReferenceChains跟踪的过程，和用户线程一起工作，不需要暂停工作线程。</p>
<p>​        <strong>重新标记：</strong>为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，STW。</p>
<p>​        <strong>并发清除：</strong>清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。</p>
<p>​        由于耗时最长的并发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看CMS 收集器的内存回收和用户线程是一起并发地执行。</p>
<p>​        <strong>优点：</strong>并发收集、低停顿</p>
<p>​        <strong>缺点：</strong>对CPU资源敏感；⽆法处理浮动垃圾；使⽤“标记清除”算法，会导致⼤量空间碎⽚产⽣。</p>
<p><strong>JDK9-G1：（精准控制停顿时间，避免垃圾碎片）</strong></p>
<p>​        是⼀款⾯向服务器的垃圾收集器,主要针对配备多颗处理器及⼤容量内存的机器.以极⾼概率满⾜GC停顿时间要求的同时,还具备⾼吞吐量性能特征；相比与 CMS 收集器，G1 收集器两个最突出的改进是：</p>
<p>​        【1】基于标记-整理算法，不产生内存碎片。</p>
<p>​        【2】可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。</p>
<p>​        G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，优先回收垃圾最多的区域。<strong>区域划分</strong>和<strong>优先级区域</strong>回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</p>
<ul>
<li><p><strong>初始标记</strong>：<strong>Stop The World，</strong>仅使用一条初始标记线程对GC Roots关联的对象进行标记</p>
</li>
<li><p><strong>并发标记</strong>：使用一条标记线程与用户线程并发执行。此过程进行<strong>可达性分析，速度很慢</strong></p>
</li>
<li><p><strong>最终标记</strong>：<strong>Stop The World</strong>，使用多条标记线程并发执行</p>
</li>
<li><p><strong>筛选回收</strong>：回收废弃对象，此时也要 <strong>Stop The World</strong>，并使用多条筛选回收线程并发执行</p>
</li>
</ul>
<p>**JDK11-ZGC:**（在不关注容量的情况获取最小停顿时间5TB&#x2F;10ms）</p>
<p>​    着色笔技术：加快标记过程</p>
<p>​    读屏障：解决GC和应用之间并发导致的STW问题</p>
<ul>
<li><p>支持 TB 级堆内存（最大 4T， JDK13 最大16TB）</p>
</li>
<li><p>最大 GC 停顿 10ms</p>
</li>
<li><p>对吞吐量影响最大，不超过 15%</p>
</li>
</ul>
<h4 id="4、配置垃圾收集器"><a href="#4、配置垃圾收集器" class="headerlink" title="4、配置垃圾收集器"></a><strong>4、配置垃圾收集器</strong></h4><ul>
<li>首先是内存大小问题，基本上每一个内存区域我都会设置一个上限，来避免溢出问题，比如元空间。</li>
<li>通常，堆空间我会设置成操作系统的 2&#x2F;3，超过 8GB 的堆，优先选用 G1</li>
<li>然后我会对 JVM 进行初步优化，比如根据老年代的对象提升速度，来调整年轻代和老年代之间的比例</li>
<li>依据系统容量、访问延迟、吞吐量等进行专项优化，我们的服务是高并发的，对 STW 的时间敏感</li>
<li>我会通过记录详细的 GC 日志，来找到这个瓶颈点，借用 GCeasy 这样的日志分析工具，定位问题</li>
</ul>
<h4 id="4、JVM性能调优"><a href="#4、JVM性能调优" class="headerlink" title="4、JVM性能调优"></a><strong>4、JVM性能调优</strong></h4><p>对应进程的JVM状态以定位问题和解决问题并作出相应的优化</p>
<p><strong>常用命令：</strong>jps、jinfo、jstat、jstack、jmap</p>
<p><strong>jps：查看java进程及相关信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jps -l 输出jar包路径，类全名</span><br><span class="line">jps -m 输出main参数</span><br><span class="line">jps -v 输出JVM参数</span><br></pre></td></tr></table></figure>

<p><strong>jinfo：查看JVM参数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jinfo <span class="number">11666</span></span><br><span class="line">jinfo -flags <span class="number">11666</span></span><br><span class="line">Xmx、Xms、Xmn、MetaspaceSize</span><br></pre></td></tr></table></figure>

<p><strong>jstat：查看JVM运行时的状态信息，包括内存状态、垃圾回收</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstat [option] LVMID [interval] [count]</span><br><span class="line">其中LVMID是进程id，interval是打印间隔时间（毫秒），count是打印次数（默认一直打印）</span><br><span class="line">  </span><br><span class="line">option参数解释：</span><br><span class="line">-gc 垃圾回收堆的行为统计</span><br><span class="line">-gccapacity 各个垃圾回收代容量(young,old,perm)和他们相应的空间统计</span><br><span class="line">-gcutil 垃圾回收统计概述</span><br><span class="line">-gcnew 新生代行为统计</span><br><span class="line">-gcold 年老代和永生代行为统计</span><br></pre></td></tr></table></figure>

<p><strong>jstack：查看JVM线程快照，jstack命令可以定位线程出现长时间卡顿的原因，例如死锁，死循环</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack [-l] &lt;pid&gt; (连接运行中的进程)</span><br><span class="line">  </span><br><span class="line">option参数解释：</span><br><span class="line">-F 当使用jstack &lt;pid&gt;无响应时，强制输出线程堆栈。</span><br><span class="line">-m 同时输出java和本地堆栈(混合模式)</span><br><span class="line">-l 额外显示锁信息</span><br></pre></td></tr></table></figure>

<p><strong>jmap：可以用来查看内存信息</strong>(配合jhat使用)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jmap [option] &lt;pid&gt; (连接正在执行的进程)</span><br><span class="line"></span><br><span class="line">option参数解释：</span><br><span class="line">-heap 打印java heap摘要</span><br><span class="line">-dump:&lt;dump-options&gt; 生成java堆的dump文件</span><br></pre></td></tr></table></figure>



<h4 id="5、JDK新特性"><a href="#5、JDK新特性" class="headerlink" title="5、JDK新特性"></a>5、JDK新特性</h4><p>JDK8</p>
<p>支持 Lamda 表达式、集合的 stream 操作、提升HashMap性能</p>
<p><strong>JDK9</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Stream API中iterate方法的新重载方法，可以指定什么时候结束迭代</span></span><br><span class="line">IntStream.iterate(<span class="number">1</span>, i -&gt; i &lt; <span class="number">100</span>, i -&gt; i + <span class="number">1</span>).forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p>默认G1垃圾回收器</p>
<p><strong>JDK10</strong> </p>
<p>其重点在于通过完全GC并行来改善G1最坏情况的等待时间。</p>
<p><strong>JDK11</strong></p>
<p>ZGC (并发回收的策略) 4TB</p>
<p>用于 Lambda 参数的局部变量语法</p>
<p><strong>JDK12</strong></p>
<p>Shenandoah GC (GC 算法)停顿时间和堆的大小没有任何关系，并行关注停顿响应时间。</p>
<p><strong>JDK13</strong></p>
<p>增加ZGC以将未使用的堆内存返回给操作系统，16TB</p>
<p><strong>JDK14</strong></p>
<p>删除cms垃圾回收器、弃用ParallelScavenge+SerialOldGC垃圾回收算法组合</p>
<p>将ZGC垃圾回收器应用到macOS和windows平台</p>
<div style="page-break-after: always;"></div>

<h3 id="线上故障排查"><a href="#线上故障排查" class="headerlink" title="线上故障排查"></a>线上故障排查</h3><h4 id="1、硬件故障排查"><a href="#1、硬件故障排查" class="headerlink" title="1、硬件故障排查"></a>1、硬件故障排查</h4><p>如果一个实例发生了问题，根据情况选择，要不要着急去重启。如果出现的CPU、内存飙高或者日志里出现了OOM异常</p>
<p><strong>第一步是隔离</strong>，第二步是<strong>保留现场</strong>，第三步才是<strong>问题排查</strong>。</p>
<p><strong>隔离</strong></p>
<p>就是把你的这台机器从请求列表里摘除，比如把 nginx 相关的权重设成零。</p>
<p><strong>现场保留</strong></p>
<p><strong>瞬时态和历史态</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobnwy22d2j30l10cpt9d.jpg" alt="img"></p>
<p>查看比如 CPU、系统内存等，通过历史状态可以体现一个趋势性问题，而这些信息的获取一般依靠监控系统的协作。           </p>
<p><strong>保留信息</strong></p>
<p>（1）<strong>系统当前网络连接</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ss</span> -antp &gt; $DUMP_DIR/ss.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>使用 ss 命令而不是 netstat 的原因，是因为 netstat 在网络连接非常多的情况下，执行非常缓慢。</p>
<p>后续的处理，可通过查看各种网络连接状态的梳理，来排查 TIME_WAIT 或者 CLOSE_WAIT，或者其他连接过高的问题，非常有用。</p>
<p>（2）<strong>网络状态统计</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">netstat -s &gt; $DUMP_DIR/netstat-s.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>它能够按照各个协议进行统计输出，对把握当时整个网络状态，有非常大的作用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sar -n DEV <span class="number">1</span> <span class="number">2</span> &gt; $DUMP_DIR/sar-traffic.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>在一些速度非常高的模块上，比如 Redis、Kafka，就经常发生跑满网卡的情况。表现形式就是网络通信非常缓慢。</p>
<p>（3）<strong>进程资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lsof -p $PID &gt; $DUMP_DIR/lsof-$PID.dump</span><br></pre></td></tr></table></figure>


<p>通过查看进程，能看到打开了哪些文件，可以以进程的维度来查看整个资源的使用情况，包括每条网络连接、每个打开的文件句柄。同时，也可以很容易的看到连接到了哪些服务器、使用了哪些资源。这个命令在资源非常多的情况下，输出稍慢，请耐心等待。</p>
<p>（4）<strong>CPU 资源</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">mpstat</span> &gt; $DUMP_DIR/mpstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">vmstat</span> <span class="number">1</span> <span class="number">3</span> &gt; $DUMP_DIR/vmstat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">sar</span> -p <span class="literal">ALL</span>  &gt; $DUMP_DIR/sar-cpu.dump  <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line"><span class="attribute">uptime</span> &gt; $DUMP_DIR/uptime.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>主要用于输出当前系统的 CPU 和负载，便于事后排查。</p>
<p>（5）<strong>I&#x2F;O 资源</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">iostat -x &gt; $DUMP_DIR/iostat.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>一般，以计算为主的服务节点，I&#x2F;O 资源会比较正常，但有时也会发生问题，比如<strong>日志输出过多，或者磁盘问题</strong>等。此命令可以输出每块磁盘的基本性能信息，用来排查 I&#x2F;O 问题。在第 8 课时介绍的 GC 日志分磁盘问题，就可以使用这个命令去发现。</p>
<p>（6）<strong>内存问题</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">free -h &gt; $DUMP_DIR/free.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>free 命令能够大体展现操作系统的内存概况，这是故障排查中一个非常重要的点，比如 SWAP 影响了 GC，SLAB 区挤占了 JVM 的内存。</p>
<p>（7）<strong>其他全局</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ps -ef &gt; $DUMP_DIR/ps.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">dmesg &gt; $DUMP_DIR/dmesg.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">sysctl -a &gt; $DUMP_DIR/sysctl.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>dmesg 是许多静悄悄死掉的服务留下的最后一点线索。当然，ps 作为执行频率最高的一个命令，由于内核的配置参数，会对系统和 JVM 产生影响，所以我们也输出了一份。</p>
<p>（8）<strong>进程快照</strong>，最后的遗言（jinfo）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jinfo $PID &gt; $DUMP_DIR/jinfo.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>此命令将输出 Java 的基本进程信息，包括<strong>环境变量和参数配置</strong>，可以查看是否因为一些错误的配置造成了 JVM 问题。</p>
<p><strong>（9）dump 堆信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jstat -gcutil $PID &gt; $DUMP_DIR/jstat-gcutil.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jstat -gccapacity $PID &gt; $DUMP_DIR/jstat-gccapacity.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jstat 将输出当前的 gc 信息。一般，基本能大体看出一个端倪，如果不能，可将借助 jmap 来进行分析。</p>
<p><strong>（10）堆信息</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jmap $PID &gt; $DUMP_DIR/jmap.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -heap $PID &gt; $DUMP_DIR/jmap-heap.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -histo $PID &gt; $DUMP_DIR/jmap-histo.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br><span class="line">$&#123;JDK_BIN&#125;jmap -dump:format=b,file=$DUMP_DIR/heap.bin $PID &gt; /dev/<span class="literal">null</span>  <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jmap 将会得到当前 Java 进程的 dump 信息。如上所示，其实最有用的就是第 4 个命令，但是前面三个能够让你初步对系统概况进行大体判断。因为，第 4 个命令产生的文件，一般都非常的大。而且，需要下载下来，导入 MAT 这样的工具进行深入分析，才能获取结果。这是分析内存泄漏一个必经的过程。</p>
<p><strong>（11）JVM 执行栈</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jstack $PID &gt; $DUMP_DIR/jstack.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>jstack 将会获取当时的执行栈。一般会多次取值，我们这里取一次即可。这些信息非常有用，能够还原 Java 进程中的线程情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top -Hp $PID -b -n <span class="number">1</span> -c &gt;  $DUMP_DIR/top-$PID.dump <span class="number">2</span>&gt;&amp;<span class="number">1</span></span><br></pre></td></tr></table></figure>


<p>为了能够得到更加精细的信息，我们使用 top 命令，来获取进程中所有线程的 CPU 信息，这样，就可以看到资源到底耗费在什么地方了。</p>
<p><strong>（12）高级替补</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">kill -<span class="number">3</span> $PID</span><br></pre></td></tr></table></figure>


<p>有时候，jstack 并不能够运行，有很多原因，比如 Java 进程几乎不响应了等之类的情况。我们会尝试向进程发送 kill -3 信号，这个信号将会打印 jstack 的 trace 信息到日志文件中，是 jstack 的一个替补方案。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gcore -o $DUMP_DIR/core $PID</span><br></pre></td></tr></table></figure>


<p>对于 jmap 无法执行的问题，也有替补，那就是 GDB 组件中的 gcore，将会生成一个 core 文件。我们可以使用如下的命令去生成 dump：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">$&#123;JDK_BIN&#125;jhsdb jmap --exe $&#123;JDK&#125;java  --core $DUMP_DIR/core --binaryheap</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><strong>内存泄漏的现象</strong></li>
</ol>
<p>稍微提一下 jmap 命令，它在 9 版本里被干掉了，取而代之的是 jhsdb，你可以像下面的命令一样使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jhsdb jmap  --heap --pid  <span class="number">37340</span></span><br><span class="line">jhsdb jmap  --pid  <span class="number">37288</span></span><br><span class="line">jhsdb jmap  --histo --pid  <span class="number">37340</span></span><br><span class="line">jhsdb jmap  --binaryheap --pid  <span class="number">37340</span></span><br></pre></td></tr></table></figure>

<p>一般内存溢出，表现形式就是 Old 区的占用持续上升，即使经过了多轮 GC 也没有明显改善。比如ThreadLocal里面的GC Roots，内存泄漏的根本就是，这些对象并没有切断和 GC Roots 的关系，可通过一些工具，能够看到它们的联系。</p>
<h4 id="2、报表异常-JVM调优"><a href="#2、报表异常-JVM调优" class="headerlink" title="2、报表异常 | JVM调优"></a>2、报表异常 | JVM调优</h4><p>有一个报表系统，频繁发生内存溢出，在高峰期间使用时，还会频繁的发生拒绝服务，由于大多数使用者是管理员角色，所以很快就反馈到研发这里。</p>
<p>业务场景是由于有些结果集的字段不是太全，因此需要对结果集合进行循环，并通过 HttpClient 调用其他服务的接口进行数据填充。使用 Guava 做了 JVM 内缓存，但是响应时间依然很长。</p>
<p>初步排查，JVM 的资源太少。接口 A 每次进行报表计算时，都要涉及几百兆的内存，而且在内存里驻留很长时间，有些计算又非常耗 CPU，特别的“吃”资源。而我们分配给 JVM 的内存只有 3 GB，在多人访问这些接口的时候，内存就不够用了，进而发生了 OOM。在这种情况下，没办法，只有升级机器。把机器配置升级到 4C8G，给 JVM 分配 6GB 的内存，这样 OOM 问题就消失了。但随之而来的是频繁的 GC 问题和超长的 GC 时间，平均 GC 时间竟然有 5 秒多。</p>
<p>进一步，由于报表系统和高并发系统不太一样，它的对象，存活时长大得多，并不能仅仅通过增加年轻代来解决；而且，如果增加了年轻代，那么必然减少了老年代的大小，由于 CMS 的碎片和浮动垃圾问题，我们可用的空间就更少了。虽然服务能够满足目前的需求，但还有一些不太确定的风险。</p>
<p>第一，了解到程序中有很多缓存数据和静态统计数据，为了减少 MinorGC 的次数，通过分析 GC 日志打印的对象年龄分布，把 MaxTenuringThreshold 参数调整到了 3（特殊场景特殊的配置）。这个参数是让年轻代的这些对象，赶紧回到老年代去，不要老呆在年轻代里。</p>
<p>第二，我们的 GC 时间比较长，就一块开了参数 CMSScavengeBeforeRemark，使得在 CMS remark 前，先执行一次 Minor GC 将新生代清掉。同时配合上个参数，其效果还是比较好的，一方面，对象很快晋升到了老年代，另一方面，年轻代的对象在这种情况下是有限的，在整个 MajorGC 中占的时间也有限。</p>
<p>第三，由于缓存的使用，有大量的弱引用，拿一次长达 10 秒的 GC 来说。我们发现在 GC 日志里，处理 weak refs 的时间较长，达到了 4.5 秒。这里可以加入参数 ParallelRefProcEnabled 来并行处理Reference，以加快处理速度，缩短耗时。</p>
<p>优化之后，效果不错，但并不是特别明显。经过评估，针对高峰时期的情况进行调研，我们决定再次提升机器性能，改用 8core16g 的机器。但是，这带来另外一个问题。</p>
<p><strong>高性能的机器带来了非常大的服务吞吐量</strong>，通过 jstat 进行监控，能够看到年轻代的分配速率明显提高，但随之而来的 MinorGC 时长却变的不可控，有时候会超过 1 秒。累积的请求造成了更加严重的后果。</p>
<p>这是由于堆空间明显加大造成的回收时间加长。为了获取较小的停顿时间，我们在堆上<strong>改用了 G1 垃圾回收器</strong>，把它的目标设定在 200ms。G1 是一款非常优秀的垃圾收集器，不仅适合堆内存大的应用，同时也简化了调优的工作。通过主要的参数初始和最大堆空间、以及最大容忍的 GC 暂停目标，就能得到不错的性能。修改之后，虽然 GC 更加频繁了一些，但是停顿时间都比较小，应用的运行较为平滑。</p>
<p>到目前为止，也只是勉强顶住了已有的业务，但是，这时候领导层面又发力，<strong>要求报表系统可以支持未来两年业务10到100倍的增长</strong>，并保持其可用性，但是这个“千疮百孔”的报表系统，稍微一压测，就宕机，那如何应对十倍百倍的压力呢 ? 硬件即使可以做到动态扩容，但是毕竟也有极限。</p>
<p>使用 MAT 分析堆快照，发现很多地方可以通过代码优化，那些占用内存特别多的对象：</p>
<p>1、select * 全量排查，只允许获取必须的数据</p>
<p>2、报表系统中cache实际的命中率并不高，将Guava 的 Cache 引用级别改成弱引用（WeakKeys）</p>
<p>3、限制报表导入文件大小，同时拆分用户超大范围查询导出请求。</p>
<p>每一步操作都使得JVM使用变得更加可用，一系列优化以后，机器相同压测数据性能提升了数倍。</p>
<h4 id="3、大屏异常-JUC调优"><a href="#3、大屏异常-JUC调优" class="headerlink" title="3、大屏异常 | JUC调优"></a>3、大屏异常 | JUC调优</h4><p>有些数据需要使用 HttpClient 来获取进行补全。提供数据的服务提供商有的响应时间可能会很长，也有可能会造成服务整体的阻塞。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobr4whjzwj30l1058dfx.jpg" alt="img"></p>
<p>接口 A 通过 HttpClient 访问服务 2，响应 100ms 后返回；接口 B 访问服务 3，耗时 2 秒。HttpClient 本身是有一个最大连接数限制的，如果服务 3 迟迟不返回，就会造成 HttpClient 的连接数达到上限，<strong>概括来讲，就是同一服务，由于一个耗时非常长的接口，进而引起了整体的服务不可用</strong></p>
<p>这个时候，通过 jstack 打印栈信息，会发现大多数竟然阻塞在了接口 A 上，而不是耗时更长的接口 B，这个现象起初十分具有迷惑性，不过经过分析后，我们猜想其实是因为接口 A 的速度比较快，在问题发生点进入了更多的请求，它们全部都阻塞住的同时被打印出来了。</p>
<p>为了验证这个问题，我搭建了一个demo 工程，模拟了两个使用同一个 HttpClient 的接口。fast 接口用来访问百度，很快就能返回；slow 接口访问谷歌，由于众所周知的原因，会阻塞直到超时，大约 10 s。 利用ab对两个接口进行压测，同时使用 jstack 工具 dump 堆栈。首先使用 jps 命令找到进程号，然后把结果重定向到文件（可以参考 10271.jstack 文件）。</p>
<p>过滤一下 nio 关键字，可以查看 tomcat 相关的线程，足足有 200 个，这和 Spring Boot 默认的 maxThreads 个数不谋而合。更要命的是，有大多数线程，都处于 BLOCKED 状态，说明线程等待资源超时。通过grep fast | wc -l 分析，确实200个中有150个都是blocked的fast的进程。</p>
<p>问题找到了，解决方式就顺利成章了。</p>
<p>1、fast和slow争抢连接资源，通过线程池限流或者熔断处理</p>
<p>2、有时候slow的线程也不是一直slow，所以就得加入监控</p>
<p>3、使用带countdownLaunch对线程的执行顺序逻辑进行控制</p>
<h4 id="4、接口延迟-SWAP调优"><a href="#4、接口延迟-SWAP调优" class="headerlink" title="4、接口延迟 | SWAP调优"></a><strong>4、接口延迟 | SWAP调优</strong></h4><p>有一个关于服务的某个实例，经常发生服务卡顿。由于服务的并发量是比较高的，每多停顿 1 秒钟，几万用户的请求就会感到延迟。</p>
<p>我们统计、类比了此服务其他实例的 CPU、内存、网络、I&#x2F;O 资源，区别并不是很大，所以一度怀疑是机器硬件的问题。</p>
<p>接下来我们对比了节点的 GC 日志，发现无论是 Minor GC，还是 Major GC，这个节点所花费的时间，都比其他实例长得多。</p>
<p>通过仔细观察，我们发现在 GC 发生的时候，vmstat 的 si、so 飙升的非常严重，这和其他实例有着明显的不同。</p>
<p>使用 free 命令再次确认，发现 SWAP 分区，使用的比例非常高，引起的具体原因是什么呢？</p>
<p>更详细的操作系统内存分布，从 &#x2F;proc&#x2F;meminfo 文件中可以看到具体的逻辑内存块大小，有多达 40 项的内存信息，这些信息都可以通过遍历 &#x2F;proc 目录的一些文件获取。我们注意到 slabtop 命令显示的有一些异常，dentry（目录高速缓冲）占用非常高。</p>
<p>问题最终定位到是由于某个运维工程师删除日志时，定时执行了一句命令：</p>
<p>find &#x2F; | grep “xxx.log”</p>
<p>他是想找一个叫做 要被删除 的日志文件，看看在哪台服务器上，结果，这些老服务器由于文件太多，扫描后这些文件信息都缓存到了 slab 区上。而服务器开了 swap，操作系统发现物理内存占满后，并没有立即释放 cache，导致每次 GC 都要和硬盘打一次交道。</p>
<p><strong>解决方式就是关闭 SWAP 分区。</strong></p>
<p>swap 是很多性能场景的万恶之源，建议禁用。在高并发 SWAP 绝对能让你体验到它魔鬼性的一面：进程倒是死不了了，但 GC 时间长的却让人无法忍受。</p>
<h4 id="5、内存溢出-Cache调优"><a href="#5、内存溢出-Cache调优" class="headerlink" title="5、内存溢出 | Cache调优"></a>5、<strong>内存溢出 | Cache调优</strong></h4><blockquote>
<p>有一次线上遇到故障，重新启动后，使用 jstat 命令，发现 Old 区一直在增长。我使用 jmap 命令，导出了一份线上堆栈，然后使用 MAT 进行分析，通过对 GC Roots 的分析，发现了一个非常大的 HashMap 对象，这个原本是其他同事做缓存用的，但是做了一个无界缓存，没有设置超时时间或者 LRU 策略，在使用上又没有重写key类对象的hashcode和equals方法，对象无法取出也直接造成了堆内存占用一直上升，后来，将这个缓存改成 guava 的 Cache，并设置了弱引用，故障就消失了。</p>
<p>关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，<strong>close 方法又没有放在 finally</strong> 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。</p>
</blockquote>
<p>内存溢出是一个结果，而<strong>内存泄漏</strong>是一个原因。内存溢出的原因有<strong>内存空间不足、配置错误</strong>等因素。一些错误的编程方式，不再被使用的对象、没有被回收、没有及时切断与 GC Roots 的联系，这就是内存泄漏。</p>
<p>举个例子，有团队使用了 HashMap 做缓存，但是并没有设置超时时间或者 LRU 策略，造成了放入 Map 对象的数据越来越多，而产生了内存泄漏。</p>
<p>再来看一个经常发生的内存泄漏的例子，也是由于 HashMap 产生的。代码如下，由于没有重写 Key 类的 hashCode 和 equals 方法，造成了放入 HashMap 的所有对象都无法被取出来，它们和外界失联了。所以下面的代码结果是 null。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//leak example</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMapLeakDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Key</span> &#123;</span><br><span class="line">        String title;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Key</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    Map&lt;Key, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;1&quot;</span>), <span class="number">1</span>);</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;2&quot;</span>), <span class="number">2</span>);</span><br><span class="line">    map.put(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;3&quot;</span>), <span class="number">2</span>);</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">integer</span> <span class="operator">=</span> map.get(<span class="keyword">new</span> <span class="title class_">Key</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">    System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>即使提供了 equals 方法和 hashCode 方法，也要非常小心，尽量避免使用自定义的对象作为 Key。</p>
<p>再看一个例子，关于文件处理器的应用，在读取或者写入一些文件之后，由于发生了一些异常，<strong>close 方法又没有放在 finally</strong> 块里面，造成了文件句柄的泄漏。由于文件处理十分频繁，产生了严重的内存泄漏问题。</p>
<h4 id="6：CPU飙高-死循环"><a href="#6：CPU飙高-死循环" class="headerlink" title="6：CPU飙高 | 死循环"></a>6：CPU飙高 | 死循环</h4><p>我们有个线上应用，单节点在运行一段时间后，CPU 的使用会飙升，一旦飙升，一般怀疑某个业务逻辑的计算量太大，或者是触发了死循环（比如著名的 HashMap 高并发引起的死循环），但排查到最后其实是 GC 的问题。        </p>
<p>（1）使用 top 命令，查找到使用 CPU 最多的某个进程，记录它的 pid。使用 Shift + P 快捷键可以按 CPU 的使用率进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>


<p>（2）再次使用 top 命令，加 -H 参数，查看某个进程中使用 CPU 最多的某个线程，记录线程的 ID。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">top -Hp $pid</span><br></pre></td></tr></table></figure>


<p>（3）使用 printf 函数，将十进制的 tid 转化成十六进制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">printf %x $tid</span><br></pre></td></tr></table></figure>


<p>（4）使用 jstack 命令，查看 Java 进程的线程栈。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jstack $pid &gt;$pid.log</span><br></pre></td></tr></table></figure>


<p>（5）使用 less 命令查看生成的文件，并查找刚才转化的十六进制 tid，找到发生问题的线程上下文。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">less $pid.log</span><br></pre></td></tr></table></figure>


<p>我们在 jstack 日志搜关键字DEAD，以及中找到了 CPU 使用最多的几个线程id。</p>
<p>可以看到问题发生的根源，是我们的堆已经满了，但是又没有发生 OOM，于是 GC 进程就一直在那里回收，回收的效果又非常一般，造成 CPU 升高应用假死。接下来的具体问题排查，就需要把内存 dump 一份下来，使用 MAT 等工具分析具体原因了。</p>
<h1 id="三、多线程篇"><a href="#三、多线程篇" class="headerlink" title="三、多线程篇"></a>三、多线程篇</h1><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><h4 id="1、线程状态"><a href="#1、线程状态" class="headerlink" title="1、线程状态"></a><strong>1、线程状态</strong></h4><p>​        线程是cpu任务调度的最小执行单位，每个线程拥有自己独立的程序计数器、虚拟机栈、本地方法栈</p>
<p><strong>线程状态：创建、就绪、运行、阻塞、死亡</strong></p>
<img src="https://s0.lgstatic.com/i/image3/M01/77/29/Cgq2xl5xxGKAKBpeAAEw9Ifr07Y662.png" alt="img" style="zoom: 40%;" />



<h4 id="2、线程状态切换"><a href="#2、线程状态切换" class="headerlink" title="2、线程状态切换"></a><strong>2、线程状态切换</strong></h4><table>
<thead>
<tr>
<th>方法</th>
<th>作用</th>
<th>区别</th>
</tr>
</thead>
<tbody><tr>
<td>start</td>
<td>启动线程，由虚拟机自动调度执行run()方法</td>
<td>线程处于就绪状态</td>
</tr>
<tr>
<td>run</td>
<td>线程逻辑代码块处理，JVM调度执行</td>
<td>线程处于运行状态</td>
</tr>
<tr>
<td>sleep</td>
<td>让当前正在执行的线程休眠（暂停执行）</td>
<td>不释放锁</td>
</tr>
<tr>
<td>wait</td>
<td>使得当前线程等待</td>
<td>释放同步锁</td>
</tr>
<tr>
<td>notify</td>
<td>唤醒在此对象监视器上等待的单个线程</td>
<td>唤醒单个线程</td>
</tr>
<tr>
<td>notifyAll</td>
<td>唤醒在此对象监视器上等待的所有线程</td>
<td>唤醒多个线程</td>
</tr>
<tr>
<td>yiled</td>
<td>停止当前线程，让同等优先权的线程运行</td>
<td>用Thread类调用</td>
</tr>
<tr>
<td>join</td>
<td>使当前线程停下来等待，直至另一个调用join方法的线程终止</td>
<td>用线程对象调用</td>
</tr>
</tbody></table>
<img src="https://s0.lgstatic.com/i/image/M00/80/24/Ciqc1F_Qfy2ACkrLAAD2DLkc2qw212.png" alt="img" style="zoom:67%;" />

<h4 id="3、阻塞唤醒过程"><a href="#3、阻塞唤醒过程" class="headerlink" title="3、阻塞唤醒过程"></a><strong>3、阻塞唤醒过程</strong></h4><p><strong>阻塞：</strong></p>
<p>​        这三个方法的调用都会使当前线程阻塞。该线程将会被放置到对该Object的请求等待队列中，然后让出当前对Object所拥有的所有的同步请求。线程会一直暂停所有线程调度，直到下面其中一种情况发生：</p>
<p>　　　　① 其他线程调用了该Object的notify方法，而该线程刚好是那个被唤醒的线程；</p>
<p>　　　　② 其他线程调用了该Object的notifyAll方法；</p>
<p><strong>唤醒：</strong></p>
<p>​        线程将会从等待队列中移除，重新成为可调度线程。它会与其他线程以常规的方式竞争对象同步请求。<strong>一旦它重新获得对象的同步请求，所有之前的请求状态都会恢复，也就是线程调用wait的地方的状态。线程将会在之前调用wait的地方继续运行下去。</strong></p>
<p><strong>为什么要出现在同步代码块中：</strong></p>
<p>​        由于<code>wait()属于Object方法，调用之后会强制释放当前对象锁，所以在wait()</code> 调用时必须拿到当前对象的监视器monitor对象。因此，wait()方法在同步方法&#x2F;代码块中调用。</p>
<h4 id="4、wait和sleep区别"><a href="#4、wait和sleep区别" class="headerlink" title="4、wait和sleep区别"></a><strong>4、wait和sleep区别</strong></h4><ul>
<li><p>wait 方法必须在 synchronized 保护的代码中使用，而 sleep 方法并没有这个要求。</p>
</li>
<li><p>wait 方法会主动释放 monitor 锁，在同步代码中执行 sleep 方法时，并不会释放 monitor 锁。</p>
</li>
<li><p>wait 方法意味着永久等待，直到被中断或被唤醒才能恢复，不会主动恢复，sleep 方法中会定义一个时间，时间到期后会主动恢复。</p>
</li>
<li><p>wait&#x2F;notify 是 Object 类的方法，而 sleep 是 Thread 类的方法。</p>
</li>
</ul>
<h4 id="5、创建线程方式"><a href="#5、创建线程方式" class="headerlink" title="5、创建线程方式"></a>5、创建线程方式</h4><p><strong>实现 Runnable 接口</strong>（优先使用）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunnableThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;System.out.println(<span class="string">&#x27;用实现Runnable接口实现线程&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>实现Callable接口</strong>（有返回值可抛出异常）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">CallableTask</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123; <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt();&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承Thread类</strong>（java不支持多继承）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExtendsThread</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;System.out.println(<span class="string">&#x27;用Thread类实现线程&#x27;</span>);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用线程池</strong>（底层都是实现run方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">DefaultThreadFactory</span> <span class="keyword">implements</span> <span class="title class_">ThreadFactory</span> &#123;</span><br><span class="line">    DefaultThreadFactory() &#123;</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">s</span> <span class="operator">=</span> System.getSecurityManager();</span><br><span class="line">        group = (s != <span class="literal">null</span>) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();</span><br><span class="line">        namePrefix = <span class="string">&quot;pool-&quot;</span> + poolNumber.getAndIncrement() +<span class="string">&quot;-thread-&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Thread <span class="title function_">newThread</span><span class="params">(Runnable r)</span> &#123;</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(group, r,namePrefix + threadNumber.getAndIncrement(),<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (t.isDaemon()) t.setDaemon(<span class="literal">false</span>);  <span class="comment">//是否守护线程</span></span><br><span class="line">        <span class="keyword">if</span> (t.getPriority() != Thread.NORM_PRIORITY) t.setPriority(Thread.NORM_PRIORITY); <span class="comment">//线程优先级</span></span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<div style="page-break-after: always;"></div>

<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>优点：通过复用已创建的线程，<strong>降低资源损耗</strong>、线程可以直接处理队列中的任务<strong>加快响应速度</strong>、同时便于<strong>统一监控和管理</strong>。</p>
<h4 id="1、线程池构造函数"><a href="#1、线程池构造函数" class="headerlink" title="1、线程池构造函数"></a><strong>1、线程池构造函数</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 线程池构造函数7大参数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,<span class="type">int</span> maximumPoolSize,<span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">    TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue,ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">    RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><strong>参数介绍：</strong></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>corePoolSize</td>
<td>核心线程池大小</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>最大线程池大小</td>
</tr>
<tr>
<td>keepAliveTime</td>
<td>线程池中超过 corePoolSize 数目的空闲线程最大存活时间；</td>
</tr>
<tr>
<td>TimeUnit</td>
<td>keepAliveTime 时间单位</td>
</tr>
<tr>
<td>workQueue</td>
<td>阻塞任务队列</td>
</tr>
<tr>
<td>threadFactory</td>
<td>新建线程工厂</td>
</tr>
<tr>
<td>RejectedExecutionHandler</td>
<td>拒绝策略。当提交任务数超过 maxmumPoolSize+workQueue 之和时，任务会交给RejectedExecutionHandler 来处理</td>
</tr>
</tbody></table>
<h4 id="2、线程处理任务过程："><a href="#2、线程处理任务过程：" class="headerlink" title="2、线程处理任务过程："></a><strong>2、线程处理任务过程：</strong></h4><img src="https://s0.lgstatic.com/i/image3/M01/78/50/Cgq2xl5zjxGAXOA-AABF0Dv8GMI518.png" alt="img" style="zoom: 67%;" />

<ol>
<li>当线程池小于corePoolSize，新提交任务将创建一个新线程执行任务，即使此时线程池中存在空闲线程。</li>
<li>当线程池达到corePoolSize时，新提交任务将被放入 workQueue 中，等待线程池中任务调度执行。</li>
<li>当workQueue已满，且 maximumPoolSize 大于 corePoolSize 时，新提交任务会创建新线程执行任务。</li>
<li>当提交任务数超过 maximumPoolSize 时，新提交任务由 RejectedExecutionHandler 处理。</li>
<li>当线程池中超过corePoolSize 线程，空闲时间达到 keepAliveTime 时，关闭空闲线程 。</li>
</ol>
<h4 id="3、线程拒绝策略"><a href="#3、线程拒绝策略" class="headerlink" title="3、线程拒绝策略"></a><strong>3、线程拒绝策略</strong></h4><p>​        线程池中的线程已经用完了，无法继续为新任务服务，同时，等待队列也已经排满了，再也塞不下新任务了。这时候我们就需要拒绝策略机制合理的处理这个问题。</p>
<p>JDK 内置的拒绝策略如下：</p>
<p>​        <strong>AbortPolicy：</strong>直接抛出异常，阻止系统正常运行。可以根据业务逻辑选择重试或者放弃提交等策略。</p>
<p>​        <strong>CallerRunsPolicy ：</strong>只要线程池未关闭，该策略直接在调用者线程中，运行当前被丢弃的任务。</p>
<p>​                不会造成任务丢失，同时减缓提交任务的速度，给执行任务缓冲时间。</p>
<p>​        <strong>DiscardOldestPolicy ：</strong>丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。</p>
<p>​        <strong>DiscardPolicy ：</strong>该策略默默地丢弃无法处理的任务，不予任何处理。如果允许任务丢失，这是最好的一种方案。</p>
<h4 id="4、Execuors类实现线程池"><a href="#4、Execuors类实现线程池" class="headerlink" title="4、Execuors类实现线程池"></a><strong>4、Execuors类实现线程池</strong></h4><img src="https://s0.lgstatic.com/i/image3/M01/63/5A/CgpOIF4z1EiAFjNQAAAtVe5xjgQ999.png" alt="img" style="zoom: 50%;" />

<ul>
<li><strong>newSingleThreadExecutor()：</strong>只有一个线程的线程池，任务是顺序执行，适用于一个一个任务执行的场景</li>
<li><strong>newCachedThreadPool()：</strong>线程池里有很多线程需要同时执行，60s内复用，适用执行很多短期异步的小程序或者负载较轻的服务</li>
<li><strong>newFixedThreadPool()：</strong>拥有固定线程数的线程池，如果没有任务执行，那么线程会一直等待，适用执行长期的任务。</li>
<li><strong>newScheduledThreadPool()：</strong>用来调度即将执行的任务的线程池</li>
<li>**newWorkStealingPool()**：底层采用forkjoin的Deque，采用独立的任务队列可以减少竞争同时加快任务处理</li>
<li></li>
<li><img src="https://s0.lgstatic.com/i/image2/M01/AF/80/CgoB5l3kzomAckv5AAAxf6FCPco696.png" alt="img" style="zoom:50%;" /></li>
</ul>
<p><strong>因为以上方式都存在弊端：</strong></p>
<p>​        FixedThreadPool 和 SingleThreadExecutor ： 允许请求的<strong>队列⻓度</strong>为 Integer.MAX_VALUE，会导致OOM。<br>​        CachedThreadPool 和 ScheduledThreadPool ： 允许创建的<strong>线程数量</strong>为 Integer.MAX_VALUE，会导致OOM。</p>
<p>手动创建的线程池底层使用的是ArrayBlockingQueue可以防止OOM。</p>
<h4 id="5、线程池大小设置"><a href="#5、线程池大小设置" class="headerlink" title="5、线程池大小设置"></a><strong>5、线程池大小设置</strong></h4><ul>
<li>CPU 密集型（n+1）</li>
</ul>
<p>​    CPU 密集的意思是该任务需要大量的运算，而没有阻塞，CPU 一直全速运行。</p>
<p>​    CPU 密集型任务尽可能的少的线程数量，一般为 CPU 核数 + 1 个线程的线程池。</p>
<ul>
<li>IO 密集型（2*n）</li>
</ul>
<p>​    由于 IO 密集型任务线程并不是一直在执行任务，可以多分配一点线程数，如 CPU * 2 </p>
<p>​    也可以使用公式：CPU 核心数 *（1+平均等待时间&#x2F;平均工作时间）。</p>
<div style="page-break-after: always;"></div>

<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="1、乐观锁，CAS思想"><a href="#1、乐观锁，CAS思想" class="headerlink" title="1、乐观锁，CAS思想"></a><strong>1、乐观锁，CAS思想</strong></h4><p><strong>java乐观锁机制：</strong></p>
<p>​        乐观锁体现的是悲观锁的反面。它是一种积极的思想，它总是认为数据是不会被修改的，所以是不会对数据上锁的。但是乐观锁在更新的时候会去判断数据是否被更新过。乐观锁的实现方案一般有两种（版本号机制和CAS）。乐观锁适用于<strong>读多写少的场景，这样可以提高系统的并发量</strong>。在Java中 <strong>java.util.concurrent.atomic</strong>下的原子变量类就是使用了乐观锁的一种实现方式CAS实现的。</p>
<p>　　乐观锁，大多是基于数据版本  (Version)记录机制实现。即为数据增加一个版本标识，在基于数据库表的版本解决方案中，一般是通过为数据库表增加一个 “version” 字段来 实现。 读取出数据时，将此版本号一同读出，之后更新时，对此版本号加一。此时，将提 交数据的版本数据与数据库表对应记录的当前版本信息进行比对，如果提交的数据 版本号大于数据库表当前版本号，则予以更新，否则认为是过期数据。</p>
<p><strong>CAS思想：</strong></p>
<p>​        CAS就是compare and swap（<strong>比较交换</strong>），是一种很出名的无锁的算法，就是可以不使用锁机制实现线程间的同步。使用CAS线程是不会被阻塞的，所以又称为非阻塞同步。CAS算法涉及到三个操作：</p>
<p>​        需要读写内存值V；进行比较的值A；准备写入的值B</p>
<p>​        当且仅当V的值等于A的值等于V的值的时候，才用B的值去更新V的值，否则不会执行任何操作（比较和替换是一个原子操作-A和V比较，V和B替换），一般情况下是一个<strong>自旋操作</strong>，即<strong>不断重试</strong></p>
<p><strong>缺点：</strong></p>
<p>​        <a href="https://www.zhihu.com/question/23281499/answer/854522984">ABA问题-知乎</a></p>
<p>​        高并发的情况下，很容易发生并发冲突，如果CAS一直失败，那么就会一直重试，浪费CPU资源</p>
<p><strong>原子性：</strong></p>
<p>​        功能限制CAS是能保证单个变量的操作是原子性的，在Java中要配合使用volatile关键字来保证线程的安全；当涉及到多个变量的时候CAS无能为力；除此之外CAS实现需要硬件层面的支持，在Java的普通用户中无法直接使用，只能<strong>借助atomic包下的原子类</strong>实现，灵活性受到了限制</p>
<h4 id="2、synchronized底层实现"><a href="#2、synchronized底层实现" class="headerlink" title="2、synchronized底层实现"></a><strong>2、synchronized底层实现</strong></h4><p><strong>使用方法：</strong>主要的三种使⽤⽅式</p>
<p>​        <strong>修饰实例⽅法:</strong> 作⽤于当前对象实例加锁，进⼊同步代码前要获得当前对象实例的锁</p>
<p>​        <strong>修饰静态⽅法:</strong> 也就是给当前类加锁，会作⽤于类的所有对象实例，因为静态成员不属于任何⼀个实例对象，是类成员。</p>
<p>​        <strong>修饰代码块:</strong> 指定加锁对象，对给定对象加锁，进⼊同步代码库前要获得给定对象的锁。</p>
<p>​        <strong>总结：</strong>synchronized锁住的资源只有两类：一个是<strong>对象</strong>，一个是<strong>类</strong>。</p>
<p><strong>底层实现：</strong></p>
<p>​        对象头是我们需要关注的重点，它是synchronized实现锁的基础，因为synchronized申请锁、上锁、释放锁都与对象头有关。对象头主要结构是由<code>Mark Word</code> 组成，<strong>其中<code>Mark Word</code>存储对象的hashCode、锁信息或分代年龄或GC标志等信息</strong>。</p>
<p>​        锁也分不同状态，JDK6之前只有两个状态：无锁、有锁（重量级锁），而在JDK6之后对synchronized进行了优化，新增了两种状态，总共就是四个状态：<strong>无锁状态、偏向锁、轻量级锁、重量级锁</strong>，其中无锁就是一种状态了。锁的类型和状态在对象头<code>Mark Word</code>中都有记录，在申请锁、锁升级等过程中JVM都需要读取对象的<code>Mark Word</code>数据。</p>
<p>​        同步代码块是利用 monitorenter 和 monitorexit 指令实现的，而同步方法则是利用 flags 实现的。</p>
<h4 id="3、ReenTrantLock底层实现"><a href="#3、ReenTrantLock底层实现" class="headerlink" title="3、ReenTrantLock底层实现"></a><strong>3、ReenTrantLock底层实现</strong></h4><p>​        由于ReentrantLock是java.util.concurrent包下提供的一套互斥锁，相比Synchronized，ReentrantLock类提供了一些高级功能</p>
<p><strong>使用方法：</strong></p>
<p>​        基于API层面的互斥锁，需要lock()和unlock()方法配合try&#x2F;finally语句块来完成</p>
<p><strong>底层实现：</strong></p>
<p>​        ReenTrantLock的实现是一种自旋锁，通过循环调用CAS操作来实现加锁。它的性能比较好也是因为避免了使线程进入内核态的阻塞状态。想尽办法避免线程进入内核的阻塞状态是我们去分析和理解锁设计的关键钥匙。</p>
<p><strong>和synchronized区别：</strong></p>
<p>​        1、<strong>底层实现</strong>：synchronized 是<strong>JVM</strong>层面的锁，是<strong>Java关键字</strong>，通过monitor对象来完成（monitorenter与monitorexit），ReentrantLock 是从jdk1.5以来（java.util.concurrent.locks.Lock）提供的<strong>API层面</strong>的锁。</p>
<p>​        2、<strong>实现原理****：synchronized 的实现涉及到</strong>锁的升级<strong>，具体为无锁、偏向锁、自旋锁、向OS申请重量级锁；ReentrantLock实现则是通过利用</strong>CAS**（CompareAndSwap）自旋机制保证线程操作的原子性和volatile保证数据可见性以实现锁的功能。</p>
<p>​        3、<strong>是否可手动释放：</strong>synchronized 不需要用户去手动释放锁，synchronized 代码执行完后系统会自动让线程释放对锁的占用； ReentrantLock则需要用户去手动释放锁，如果没有手动释放锁，就可能导致<strong>死锁现象</strong>。</p>
<p>​        4、<strong>是否可中断</strong>synchronized是不可中断类型的锁，除非加锁的代码中出现异常或正常执行完成； ReentrantLock则可以中断，可通过trylock(long timeout,TimeUnit unit)设置超时方法或者将lockInterruptibly()放到代码块中，调用interrupt方法进行中断。</p>
<p>​        5、<strong>是否公平锁</strong>synchronized为非公平锁 ReentrantLock则即可以选公平锁也可以选非公平锁，通过构造方法new ReentrantLock时传入boolean值进行选择，为空默认false非公平锁，true为公平锁,公平锁性能非常低。</p>
<h4 id="4、公平锁和非公平锁区别"><a href="#4、公平锁和非公平锁区别" class="headerlink" title="4、公平锁和非公平锁区别"></a><strong>4、公平锁和非公平锁区别</strong></h4><p><strong>公平锁：</strong></p>
<p>​        公平锁自然是遵循<strong>FIFO</strong>（先进先出）原则的，先到的线程会优先获取资源，后到的会进行排队等待</p>
<p>​        <strong>优点：</strong>所有的线程都能得到资源，不会饿死在队列中。适合大任务</p>
<p>​        <strong>缺点：</strong>吞吐量会下降，队列里面除了第一个线程，其他的线程都会阻塞，cpu唤醒阻塞线程的开销大</p>
<p><strong>非公平锁：</strong></p>
<p>​        多个线程去获取锁的时候，会直接去尝试获取，获取不到，再去进入等待队列，如果能获取到，就直接获取到锁。</p>
<p>​        <strong>优点：</strong>可以减少CPU唤醒线程的开销，整体的吞吐效率会高点，CPU也不必取唤醒所有线程，会减少唤起线程的数量。</p>
<p>​        <strong>缺点：</strong>你们可能也发现了，这样可能导致队列中间的线程一直获取不到锁或者长时间获取不到锁</p>
<img src="https://s0.lgstatic.com/i/image3/M01/02/7D/Ciqah157DAiAK_DJAAC0JawhGp4730.png" alt="img" style="zoom:67%;" />

<p><strong>公平锁效率低原因：</strong></p>
<p>​        公平锁要维护一个队列，后来的线程要加锁，即使锁空闲，也要先检查有没有其他线程在 wait，如果有自己要挂起，加到队列后面，然后唤醒队列最前面线程。这种情况下相比较非公平锁多了一次<strong>挂起和唤醒</strong>。</p>
<p>​        <strong>线程切换的开销</strong>，其实就是非公平锁效率高于公平锁的原因，因为<strong>非公平锁减少了线程挂起的几率</strong>，后来的线程有一定几率逃离被挂起的开销。</p>
<h4 id="5、使用层面锁优化"><a href="#5、使用层面锁优化" class="headerlink" title="5、使用层面锁优化"></a><strong>5、使用层面锁优化</strong></h4><p>​    【1】<strong>减少锁的时间：</strong><br>​        不需要同步执行的代码，能不放在同步快里面执行就不要放在同步快内，可以让锁尽快释放；</p>
<p>​    【2】<strong>减少锁的粒度：</strong><br>​        它的思想是将物理上的一个锁，拆成逻辑上的多个锁，增加并行度，从而降低锁竞争。它的思想也是用空间来换时间；java中很多数据结构都是采用这种方法提高并发操作的效率，比如：</p>
<p>​        <strong>ConcurrentHashMap：</strong></p>
<p>​        java中的ConcurrentHashMap在jdk1.8之前的版本，使用一个Segment 数组：Segment&lt; K,V &gt;[] segments</p>
<p>​        Segment继承自ReenTrantLock，所以每个Segment是个可重入锁，每个Segment 有一个HashEntry&lt; K,V &gt;数组用来存放数据，put操作时，先确定往哪个Segment放数据，只需要锁定这个Segment，执行put，其它的Segment不会被锁定；所以数组中有多少个Segment就允许同一时刻多少个线程存放数据，这样增加了并发能力。</p>
<p>​    【3】<strong>锁粗化：</strong><br>​        大部分情况下我们是要让锁的粒度最小化，锁的粗化则是要增大锁的粒度; </p>
<p>​        假如有一个循环，循环内的操作需要加锁，我们应该把锁放到循环外面，否则每次进出循环，都进出一次临界区，效率是非常差的；</p>
<p>​    【4】<strong>使用读写锁：</strong></p>
<p>​        ReentrantReadWriteLock 是一个读写锁，读操作加读锁，可并发读，写操作使用写锁，只能单线程写；</p>
<p>​    【5】<strong>使用CAS：</strong></p>
<p>​        如果需要同步的操作执行速度非常快，并且线程竞争并不激烈，这时候使用cas效率会更高，因为加锁会导致线程的上下文切换，如果上下文切换的耗时比同步操作本身更耗时，且线程对资源的竞争不激烈，使用volatiled+cas操作会是非常高效的选择；</p>
<h4 id="6、系统层面锁优化"><a href="#6、系统层面锁优化" class="headerlink" title="6、系统层面锁优化"></a>6、系统层面锁优化</h4><p><strong>自适应自旋锁：</strong></p>
<p>​        自旋锁可以避免等待竞争锁进入阻塞挂起状态被唤醒造成的<strong>内核态和用户态之间的切换</strong>的损耗，它们只需要等一等（自旋），但是如果锁被其他线程长时间占用，一直不释放CPU，死等会带来更多的性能开销；自旋次数默认值是10</p>
<p>​        对上面自旋锁优化方式的进一步优化，它的自旋的次数不再固定，其自旋的次数由前一次在同一个锁上的<strong>自旋时间及锁的拥有者的状态</strong>来决定，这就解决了自旋锁带来的缺点</p>
<p><strong>锁消除：</strong></p>
<p>​        锁削除是指虚拟机即时编译器在运行时，对一些代码上要求同步，但是被检测到不可能存在共享数据竞争的锁进行削除。Netty中无锁化设计pipeline中channelhandler会进行锁消除的优化。</p>
<p><strong>锁升级：</strong></p>
<p>​    <strong>偏向锁：</strong></p>
<p>​        如果线程已经占有这个锁，当他在次试图去获取这个锁的时候，他会已最快的方式去拿到这个锁，而不需要在进行一些monitor操作，因为在大部分情况下是没有竞争的，所以使用偏向锁是可以提高性能的；</p>
<p>​    <strong>轻量级锁：</strong></p>
<p>​        在竞争不激烈的情况下，通过CAS避免线程上下文切换，可以显著的提高性能。</p>
<p>​    <strong>重量级锁：</strong></p>
<p>​        重量级锁的加锁、解锁过程造成的损耗是固定的，重量级锁适合于竞争激烈、高并发、同步块执行时间长的情况。</p>
<h4 id="7、ThreadLocal原理"><a href="#7、ThreadLocal原理" class="headerlink" title="7、ThreadLocal原理"></a><strong>7、ThreadLocal原理</strong></h4><p><strong>ThreadLocal简介：</strong></p>
<p>​        通常情况下，我们创建的变量是可以被任何⼀个线程访问并修改的。如果想实现每⼀个线程都有⾃⼰的<br>专属本地变量该如何解决呢？ JDK中提供的 ThreadLocal 类正是为了解决这样的问题。类似操作系统中的TLAB</p>
<p><strong>原理：</strong></p>
<p>​        首先 ThreadLocal 是一个泛型类，保证可以接受任何类型的对象。因为一个线程内可以存在多个 ThreadLocal 对象，所以其实是 ThreadLocal 内部维护了一个 Map ，是 ThreadLocal 实现的一个叫做 ThreadLocalMap 的静态内部类。</p>
<p>​        最终的变量是放在了当前线程的 <code>ThreadLocalMap</code> 中，并不是存在 ThreadLocal 上，ThreadLocal 可以理解为只是ThreadLocalMap的封装，传递了变量值。</p>
<p>​        我们使用的 get()、set() 方法其实都是调用了这个ThreadLocalMap类对应的 get()、set() 方法。例如下面的 </p>
<p><strong>如何使用：</strong></p>
<p>​        1）存储用户Session</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ThreadLocal</span> <span class="variable">threadSession</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>();</span><br></pre></td></tr></table></figure>

<p>​        2）解决线程安全的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ThreadLocal&lt;SimpleDateFormat&gt; format1 = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;SimpleDateFormat&gt;()</span><br></pre></td></tr></table></figure>



<p><strong>ThreadLocal内存泄漏的场景</strong> </p>
<p>​        实际上 ThreadLocalMap 中使用的 key 为 ThreadLocal 的弱引用，⽽ value 是强引⽤。弱引用的特点是，如果这个对象持有弱引用，那么在下一次垃圾回收的时候必然会被清理掉。</p>
<p>​        所以如果 ThreadLocal 没有被外部强引用的情况下，在垃圾回收的时候会被清理掉的，这样一来 ThreadLocalMap中使用这个 ThreadLocal 的 key 也会被清理掉。但是，value 是强引用，不会被清理，这样一来就会出现 key 为 null 的 value。 假如我们不做任何措施的话，value 永远⽆法被GC 回收，如果线程长时间不被销毁，可能会产⽣内存泄露。</p>
<img src="https://s0.lgstatic.com/i/image3/M01/68/C4/Cgq2xl5Pld-AHFhJAADLtGXmSxc833.png" alt="img" style="zoom:67%;" />

<p>​        ThreadLocalMap实现中已经考虑了这种情况，在调用 set()、get()、remove() 方法的时候，会清理掉 key 为 null 的记录。如果说会出现内存泄漏，那只有在出现了 key 为 null 的记录后，没有手动调用 remove() 方法，并且之后也不再调用 get()、set()、remove() 方法的情况下。因此使⽤完ThreadLocal ⽅法后，<strong>最好⼿动调⽤ remove() ⽅法</strong>。</p>
<h4 id="8、HashMap线程安全"><a href="#8、HashMap线程安全" class="headerlink" title="8、HashMap线程安全"></a><strong>8、HashMap线程安全</strong></h4><p>​    <strong>死循环造成 CPU 100%</strong></p>
<p>​        HashMap 有可能会发生死循环并且造成  CPU 100% ，这种情况发生最主要的原因就是在<strong>扩容</strong>的时候，也就是内部<strong>新建新的 HashMap</strong> 的时候，扩容的逻辑会<strong>反转散列桶中的节点顺序</strong>，当有多个线程同时进行扩容的时候，由于 HashMap 并非线程安全的，所以如果<strong>两个线程同时反转的话，便可能形成一个循环</strong>，并且这种循环是链表的循环，相当于 A 节点指向 B 节点，B 节点又指回到 A 节点，这样一来，在下一次想要获取该 key 所对应的 value 的时候，便会在遍历链表的时候发生永远无法遍历结束的情况，也就发生 CPU 100% 的情况。</p>
<p>​        所以综上所述，HashMap 是线程不安全的，在多线程使用场景中推荐使用线程安全同时性能比较好的 ConcurrentHashMap。</p>
<h4 id="9、String不可变原因"><a href="#9、String不可变原因" class="headerlink" title="9、String不可变原因"></a>9、String不可变原因</h4><ol>
<li><p>可以使用<strong>字符串常量池</strong>，多次创建同样的字符串会指向同一个内存地址</p>
</li>
<li><p>可以很方便地用作 <strong>HashMap 的 key</strong>。通常建议把不可变对象作为 HashMap的 key</p>
</li>
<li><p>hashCode生成后就不会改变，使用时无需重新计算</p>
</li>
<li><p>线程安全，因为具备不变性的对象一定是线程安全的</p>
</li>
</ol>
<div style="page-break-after: always;"></div>

<h3 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h3><p>​        Java 内存模型（Java Memory Model，JMM）就是一种符合内存模型规范的，屏蔽了各种硬件和操作系统的访问差异的，保证了 Java 程序在各种平台下对内存的访问都能保证效果一致的机制及规范。</p>
<p><img src="https://s0.lgstatic.com/i/image3/M01/7A/05/Cgq2xl54fTKALhevAAB_l3axT_o532.png" alt="img"></p>
<p>​        JMM 是一种规范，是解决由于多线程通过共享内存进行通信时，存在的本地内存数据不一致、编译器会对代码指令重排序、处理器会对代码乱序执行等带来的问题。目的是保证并发编程场景中的原子性、可见性和有序性。</p>
<p><strong>原子性：</strong></p>
<p>​        在 Java 中，为了保证原子性，提供了两个高级的字节码指令 Monitorenter 和 Monitorexit。这两个字节码，在 Java 中对应的关键字就是 Synchronized。因此，在 Java 中可以使用 Synchronized 来保证方法和代码块内的操作是原子性的。</p>
<p><strong>可见性：</strong></p>
<p>​        Java 中的 Volatile 关键字修饰的变量在被修改后可以立即同步到主内存。被其修饰的变量在每次使用之前都从主内存刷新。因此，可以使用 Volatile 来保证多线程操作时变量的可见性。除了 Volatile，Java 中的 Synchronized 和 Final 两个关键字也可以实现可见性。只不过实现方式不同</p>
<p><strong>有序性</strong></p>
<p>​        在 Java 中，可以使用 Synchronized 和 Volatile 来保证多线程之间操作的有序性。区别：Volatile 禁止指令重排。Synchronized 保证同一时刻只允许一条线程操作。</p>
<h4 id="1、volatile底层实现"><a href="#1、volatile底层实现" class="headerlink" title="1、volatile底层实现"></a><strong>1、volatile底层实现</strong></h4><p><strong>作用：</strong></p>
<p>​        保证数据的“可见性”：被volatile修饰的变量能够保证每个线程能够获取该变量的最新值，从而避免出现数据脏读的现象。</p>
<p>​        禁止指令重排：在多线程操作情况下，指令重排会导致计算结果不一致</p>
<p><strong>底层实现：</strong></p>
<p>​        “观察加入volatile关键字和没有加入volatile关键字时所生成的汇编代码发现，加入volatile关键字时，会多出一个lock前缀指令”</p>
<p>　　lock前缀指令实际上相当于一个<strong>内存屏障</strong>（也成内存栅栏），内存屏障会提供3个功能：</p>
<p>　　1）它确保指令重排序时不会把其后面的指令排到内存屏障之前的位置，也不会把前面的指令排到内存屏障的后面；</p>
<p>　　2）它会强制将对缓存的修改操作立即写入主存；</p>
<p>　　3）如果是写操作，它会导致其他CPU中对应的缓存行无效。</p>
<p><strong>单例模式中volatile的作用：</strong></p>
<p>防止代码读取到instance不为null时，instance引用的对象有可能还没有完成初始化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;   <span class="comment">//禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123; <span class="comment">//减少加锁的损耗</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>) <span class="comment">//确认是否初始化完成</span></span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="2、AQS思想"><a href="#2、AQS思想" class="headerlink" title="2、AQS思想"></a><strong>2、AQS思想</strong></h4><p>​        AQS的全称为（AbstractQueuedSynchronizer）抽象的队列式的同步器，是⼀个⽤来构建锁和同步器的框架，使⽤AQS能简单且⾼效地构造出应⽤⼴泛的⼤量的同步器，如：基于AQS实现的lock, CountDownLatch、CyclicBarrier、Semaphore需解决的问题：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">状态的原子性管理</span><br><span class="line">线程的阻塞与解除阻塞</span><br><span class="line">队列的管理</span><br></pre></td></tr></table></figure>

<p>​        AQS核⼼思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的⼯作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占⽤，那么就需要⼀套线程阻塞等待以及被唤醒时锁分配的机制，这个机制AQS是⽤<strong>CLH（虚拟的双向队列）</strong>队列锁实现的，即将暂时获取不到锁的线程加⼊到队列中。</p>
<p><strong>lock：</strong></p>
<p>​        是一种可重入锁，除了能完成 synchronized 所能完成的所有工作外，还提供了诸如可响应中断锁、可轮询锁请求、定时锁等避免多线程死锁的方法。默认为非公平锁，但可以初始化为公平锁； 通过方法 lock()与 unlock()来进行加锁与解锁操作；</p>
<p><strong>CountDownLatch：</strong></p>
<p>​        通过计数法（倒计时器），让一些线程堵塞直到另一个线程完成一系列操作后才被唤醒；该⼯具通常⽤来控制线程等待，它可以让某⼀个线程等待直到倒计时结束，再开始执⾏。具体可以使用countDownLatch.await()来等待结果。多用于多线程信息汇总。</p>
<p><strong>CompletableFuture：</strong></p>
<p>​        通过设置参数，可以完成CountDownLatch同样的多平台响应问题，但是可以针对其中部分返回结果做更加灵活的展示。</p>
<p><strong>CyclicBarrier：</strong></p>
<p>​        字面意思是可循环(Cyclic)使用的屏障（Barrier）。他要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过CyclicBarrier的await()方法。可以用于批量发送消息队列信息、异步限流。</p>
<p><strong>Semaphore：</strong></p>
<p>​        信号量主要用于两个目的，一个是用于多个共享资源的互斥作用，另一个用于并发线程数的控制。SpringHystrix限流的思想</p>
<h4 id="3、happens-before"><a href="#3、happens-before" class="headerlink" title="3、happens-before"></a>3、happens-before</h4><p>​        用来描述和可见性相关问题：如果第一个操作 happens-before 第二个操作，那么我们就说第一个操作对于第二个操作是可见的</p>
<p>​        常见的happens-before：volatile 、锁、线程生命周期。</p>
<h1 id="四、MySQL篇"><a href="#四、MySQL篇" class="headerlink" title="四、MySQL篇"></a>四、MySQL篇</h1><h3 id="WhyMysql？"><a href="#WhyMysql？" class="headerlink" title="WhyMysql？"></a>WhyMysql？</h3><p>NoSQL数据库四大家族 </p>
<ul>
<li>列存储 Hbase</li>
<li>K-V存储 Redis</li>
<li>图像存储 Neo4j</li>
<li>文档存储 MongoDB</li>
</ul>
<p>云存储OSS</p>
<h4 id="海量Aerospike"><a href="#海量Aerospike" class="headerlink" title="海量Aerospike"></a>海量Aerospike</h4><p>​    Aerospike（简称AS）是一个分布式，可扩展的键值存储的NoSQL<strong>数据库</strong>。T级别大数据高并发的结构化<strong>数据存储，</strong>采用混合架构，索引存储在内存中，而数据可存储在机械硬盘(HDD)或固态硬盘(SSD) 上，读写操作达微妙级，99%的响应可在1毫秒内实现。</p>
<table>
<thead>
<tr>
<th></th>
<th>Aerospike</th>
<th>Redis</th>
</tr>
</thead>
<tbody><tr>
<td>类型</td>
<td>Nosql数据库</td>
<td>缓存</td>
</tr>
<tr>
<td>线程数</td>
<td>多线程</td>
<td>单线程</td>
</tr>
<tr>
<td>数据分片</td>
<td>自动处理相当于分片</td>
<td>提供分片算法、平衡各分片数据</td>
</tr>
<tr>
<td>数据扩容</td>
<td>动态增加数据卷平衡流量</td>
<td>需停机</td>
</tr>
<tr>
<td>数据同步</td>
<td>设置复制因子后可以透明的完成故障转移</td>
<td>手动故障转移和数据同步</td>
</tr>
<tr>
<td>载体</td>
<td>内存存储索引+SSD存储数据</td>
<td>内存</td>
</tr>
</tbody></table>
<p>​    Aerospike作为一个大容量的NoSql解决方案，适合对<strong>容量要求比较大，QPS相对低</strong>一些的场景，主要用在广告行业，<strong>个性化推荐厂告</strong>是建立在了和掌握消费者独特的偏好和习性的基础之上，对消费者的购买需求做出准确的预测或引导，在合适的位置、合适的时间，以合适的形式向消费者呈现与其需求高度吻合的广告，以此来促进用户的消费行为。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmam43b44bj30d90d4aa7.jpg" alt="image-20210103170039711" style="zoom:50%;" />

<p>​    （ETL数据仓库技术）抽取（extract）、转换（transform）、加载（load）</p>
<ul>
<li><p>用户行为日志收集系统收集日志之后推送到ETL做数据的清洗和转换</p>
</li>
<li><p>把ETL过后的数据发送到推荐引擎计算每个消费者的推荐结果，其中推荐逻辑包括规则和算法两部分</p>
</li>
<li><p>收集用户最近浏览、最长停留等特征，分析商品相似性、用户相似性、相似性等算法。</p>
</li>
<li><p>把推荐引擎的结果存入Aerospike集群中，并提供给广告投放引擎实时获取</p>
<p>分别通过HDFS和HBASE对日志进行离线和实时的分析，然后把用户画像的标签(tag : 程序猿、宅男…)结果存入高性能的Nosql数据库Aerospike中，同时把数据备份到异地数据中心。前端广告投放请求通过决策引擎（投放引擎）向用户画像数据库中读取相应的用户画像数据，然后根据竞价算法出价进行竞价。竞价成功之后就可以展现广告了。而在竞价成功之后，具体给用户展现什么样的广告，就是有上面说的个性化推荐广告来完成的。</p>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>Aerospike</th>
<th>Mysql</th>
</tr>
</thead>
<tbody><tr>
<td>库名</td>
<td>Namespace</td>
<td>Database</td>
</tr>
<tr>
<td>表名</td>
<td>Set</td>
<td>Table</td>
</tr>
<tr>
<td>记录</td>
<td>Bin</td>
<td>Column</td>
</tr>
<tr>
<td>字段</td>
<td>Record</td>
<td>Row</td>
</tr>
<tr>
<td>索引</td>
<td>key 、 pk 、kv</td>
<td>pk</td>
</tr>
</tbody></table>
<h4 id="图谱Neo4j"><a href="#图谱Neo4j" class="headerlink" title="图谱Neo4j"></a>图谱Neo4j</h4><blockquote>
<p>Neo4j是一个开源基于java开发的图形noSql数据库，它将结构化数据存储在图中而不是表中。它是一个嵌入式的、基于磁盘的、具备完全的事务特性的Java持久化引擎。程序数据是在一个面向对象的、灵活的网络结构下，而不是严格的表中，但具备完全的事务特性、企业级的数据库的所有好处。</p>
</blockquote>
<p>一种基于图的数据结构，由节点(Node)和边(Edge)组成。其中节点即实体，由一个全局唯一的ID标示，边就是关系用于连接两个节点。通俗地讲，知识图谱就是把所有不同种类的信息，连接在一起而得到的一个关系网络。知识图谱提供了从“关系”的角度去分析问题的能力。</p>
<p>互联网、大数据的背景下，谷歌、百度、搜狗等搜索引擎纷纷基于该背景，创建自己的知识图<strong>Knowledge Graph（谷歌</strong>）、<strong>知心（百度）</strong>和<strong>知立方（搜狗）</strong>，主要用于改进搜索质量。</p>
<p>自己项目主要用作好友推荐，图数据库(Graph database)指的是以图数据结构的形式来存储和查询数据的数据库。关系图谱中，关系的组织形式采用的就是图结构，所以非常适合用图库进行存储。</p>
<ul>
<li><p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaq0j9otdj30pz0en0vm.jpg" alt="image-20210103191540372"></p>
<p>优势总结:</p>
</li>
<li><p>性能上，使用cql查询，对长程关系的查询速度快</p>
</li>
<li><p>擅于发现隐藏的关系，例如通过判断图上两点之间有没有走的通的路径，就可以发现事物间的关联</p>
</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaqc75y6bj30wc0d60u4.jpg" alt="image-20210103192653004"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询三层级关系节点如下：with可以将前面查询结果作为后面查询条件</span></span><br><span class="line">match (na:Person)-[re]-(nb:Person) where na.name=<span class="string">&quot;林婉儿&quot;</span> WITH na,re,nb <span class="title function_">match</span> <span class="params">(nb:Person)</span>- [re2:Friends]-&gt;(nc:Person) <span class="keyword">return</span> na,re,nb,re2,nc</span><br><span class="line"><span class="comment">// 直接拼接关系节点查询</span></span><br><span class="line">match data=(na:Person&#123;name:<span class="string">&quot;范闲&quot;</span>&#125;)-[re]-&gt;(nb:Person)-[re2]-&gt;(nc:Person) <span class="keyword">return</span> data</span><br><span class="line"><span class="comment">// 使用深度运算符</span></span><br><span class="line">显然使用以上方式比较繁琐,可变数量的关系-&gt;节点可以使用-[:TYPE*minHops..maxHops]-。</span><br><span class="line">match data=(na:Person&#123;name:<span class="string">&quot;范闲&quot;</span>&#125;)-[*<span class="number">1.</span><span class="number">.2</span>]-(nb:Person) <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>



<h4 id="文档MongoDB"><a href="#文档MongoDB" class="headerlink" title="文档MongoDB"></a><strong>文档MongoDB</strong></h4><blockquote>
<p>MongoDB 是一个基于分布式文件存储的数据库，是非关系数据库中功能最丰富、最像关系数据库的。在高负载的情况下，通过添加更多的节点，可以保证服务器性能。由 C++ 编写，可以为 WEB 应用提供可扩展、高性能、易部署的数据存储解决方案。</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaqyp75qsj312q0i8q5f.jpg" alt="image-20210103194830654" style="zoom:80%;" />

<p><strong>什么是BSON</strong></p>
<blockquote>
<p>{key:value,key2:value2}和Json类似，是一种二进制形式的存储格式，支持内嵌的文档对象和数组对象，但是BSON有JSON没有的一些数据类型，比如 value包括字符串,double,Array,DateBSON可以做为网络数据交换的一种存储形式,它的优点是灵活性高，但它的缺点是空间利用率不是很理想。</p>
</blockquote>
<p>BSON有三个特点：轻量性、可遍历性、高效性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* 查询 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开*/</span><br><span class="line">db.collection.find(&#123;key1:value1, key2:value2&#125;).pretty()</span><br><span class="line">/* 更新 $set ：设置字段值 $unset :删除指定字段 $inc：对修改的值进行自增*/</span><br><span class="line">db.collection.update(&#123;where&#125;,&#123;$set:&#123;字段名:值&#125;&#125;,&#123;multi:true&#125;)</span><br><span class="line">/* 删除 justOne :如果设为true，只删除一个文档，默认false，删除所有匹配条件的文档*/</span><br><span class="line">db.collection.remove(&#123;where&#125;, &#123;justOne: &lt;boolean&gt;, writeConcern: &lt;回执&gt; &#125; )</span><br></pre></td></tr></table></figure>

<p><strong>优点：</strong></p>
<ul>
<li><p><strong>文档结构的存储方式，能够更便捷的获取数据。</strong></p>
<p>对于一个层级式的数据结构来说，使用扁平式的，表状的结构来查询保存数据非常的困难。</p>
</li>
<li><p><strong>内置GridFS，支持大容量的存储。</strong></p>
<p>GridFS是一个出色的分布式文件系统，支持海量的数据存储，满足对大数据集的快速范围查询。</p>
</li>
<li><p><strong>性能优越</strong></p>
<p>千万级别的文档对象，近10G的数据，对有索引的ID的查询 不会比mysql慢，而对非索引字段的查询，则是全面胜出。 mysql实际无法胜任大数据量下任意字段的查询，而mongodb的查询性能实在牛逼。写入性能同样很令人满意，同样写入百万级别的数据，mongodb基本10分钟以下可以解决。</p>
</li>
</ul>
<p>缺点：</p>
<ul>
<li>不支持事务</li>
<li>磁盘占用空间大</li>
</ul>
<p>MySQL 8.0 版本</p>
<p><strong>1. 性能</strong>：MySQL 8.0 的速度要比 MySQL 5.7 快 2 倍。</p>
<p><strong>2. NoSQL</strong>：MySQL 从 5.7 版本开始提供 NoSQL 存储功能，在 8.0 版本中nosql得到了更大的改进。</p>
<p><strong>3. 窗口函数</strong>：实现若干新的查询方式。窗口函数与 SUM()、COUNT() 这种集合函数类似，但它不会将多行查询结果合并为一行，而是将结果放回多行当中，即窗口函数不需要 GROUP BY。</p>
<p><strong>4. 隐藏索引</strong>：在 MySQL 8.0 中，索引可以被“隐藏”和“显示”。当对索引进行隐藏时，它不会被查询优化器所使用。我们可以使用这个特性用于性能调试，例如我们先隐藏一个索引，然后观察其对数据库的影响。如果数据库性能有所下降，说明这个索引是有用的，然后将其“恢复显示”即可；如果数据库性能看不出变化，说明这个索引是多余的，可以考虑删掉。</p>
<h4 id="云存储"><a href="#云存储" class="headerlink" title="云存储"></a><strong>云存储</strong></h4><table>
<thead>
<tr>
<th></th>
<th>OSS</th>
<th>自建</th>
</tr>
</thead>
<tbody><tr>
<td>可靠性</td>
<td>可用性不低于99.995%<br />数据设计持久性不低于99.9999999999%（12个9）</td>
<td>受限于硬件可靠性，易出问题，一旦出现磁盘坏道，容易出现不可逆转的数据丢失。人工数据恢复困难、耗时、耗力。</td>
</tr>
<tr>
<td>安全</td>
<td>服务端加密、客户端加密、防盗链、IP黑白名单等。多用户资源隔离机制，支持异地容灾机制。</td>
<td>需要另外购买清洗和黑洞设备。需要单独实现安全机制。</td>
</tr>
<tr>
<td>成本</td>
<td>多线BGP骨干网络，无带宽限制，上行流量免费。无需运维人员与托管费用，0成本运维。</td>
<td>单线或双线接入速度慢，有带宽限制，峰值时期需人工扩容。需专人运维，成本高。</td>
</tr>
</tbody></table>
<p><strong>使用步骤</strong></p>
<p>​    1、开通服务</p>
<p>​    2、创建存储空间</p>
<p>​    3、上传文件、下载文件、删除文件</p>
<p>​    4、域名绑定、日志记录</p>
<p>​    5、根据开放接口进行鉴权访问</p>
<p><strong>功能</strong></p>
<p>​    图片编辑（裁剪、模糊、水印）</p>
<p>​    视频截图</p>
<p>​    音频转码、视频修复</p>
<p><strong>CDN加速</strong></p>
<p>​    对象存储OSS与阿里云CDN服务结合，可优化静态热点文件下载加速的场景（即同一地区大量用户同时下载同一个静态文件的场景）。可以将OSS的存储空间（Bucket）作为源站，利用阿里云CDN将源内容发布到边缘节点。当大量终端用户重复访问同一文件时，可以直接从边缘节点获取已缓存的数据，提高访问的响应速度</p>
<h4 id="FastDFS"><a href="#FastDFS" class="headerlink" title="FastDFS"></a><strong>FastDFS</strong></h4><blockquote>
<p><strong>开源的轻量级分布式文件系统</strong>。它对文件进行管理，功能包括：<strong>文件存储、文件同步、文件访问</strong>（文件上传、文件下载）等，解决了<strong>大容量存储和负载均衡</strong>的问题。使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。如<strong>相册网站、视频网站</strong>等</p>
</blockquote>
<p><strong>扩展能力:</strong> 支持水平扩展，可以动态扩容；</p>
<p><strong>高可用性:</strong> 一是整个文件系统的可用性，二是数据的完整和一致性；</p>
<p><strong>弹性存储:</strong> 可以根据业务需要灵活地增删存储池中的资源，而不需要中断系统运行。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhjkvo59j30zu0b4dib.jpg" alt="image-20210107221022658"></p>
<p>特性</p>
<ul>
<li>和流行的web server无缝衔接，FastDFS已提供apache和nginx扩展模块</li>
<li>文件ID由FastDFS生成，作为文件访问凭证，FastDFS不需要传统的name server</li>
<li>分组存储，灵活简洁、对等结构，不存在单点</li>
<li>文件不分块存储，上传的文件和OS文件系统中的文件一一对应</li>
<li>中、小文件均可以很好支持，支持海量小文件存储</li>
<li>支持相同内容的文件只保存一份，节约磁盘空间</li>
<li>支持多块磁盘，支持单盘数据恢复</li>
<li>支持在线扩容 支持主从文件</li>
<li>下载文件支持多线程方式，支持断点续传</li>
</ul>
<p><strong>组成</strong></p>
<ul>
<li><p><strong>客户端（client）</strong></p>
<p>通过专有接口，使用TCP&#x2F;IP协议与跟踪器服务器或存储节点进行数据交互。</p>
</li>
<li><p><strong>跟踪器（tracker）</strong> </p>
<p>Trackerserver作用是负载均衡和调度，通过Tracker server在文件上传时可以根据策略找到文件上传的地址。Tracker在访问上起负载均衡的作用。</p>
</li>
<li><p><strong>存储节点（storage）</strong></p>
<p>Storageserver作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server<strong>没有实现自己的文件系统而是利用操作系统的文件系统来管理文件</strong>。存储节点中的服务器均可以<strong>随时增加或下线而不会影响线上服务</strong>。</p>
</li>
</ul>
<p><strong>上传</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhvk0wwzj30ue0h4dlw.jpg" alt="image-20210107222155291" style="zoom:50%;" />

<p><strong>下载</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfhww8zmfj30uw0g6n37.jpg" alt="image-20210107222312338" style="zoom:50%;" />

<p><strong>断点续传</strong></p>
<p>​    续传涉及到的文件大小MD5不会改变。续传流程与文件上传类似，先<strong>定位到源storage</strong>，完成完整或部分上传，再<strong>通过binlog进行同group内server文件同步</strong>。</p>
<p><strong>配置优化</strong></p>
<p>配置文件：tracker.conf 和 storage.conf </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// FastDFS采用内存池的做法。 </span></span><br><span class="line"><span class="comment">// v5.04对预分配采用增量方式，tracker一次预分配 1024个，storage一次预分配256个。 </span></span><br><span class="line">max_connections = <span class="number">10240</span></span><br><span class="line"><span class="comment">// 根据实际需要将 max_connections 设置为一个较大的数值，比如 10240 甚至更大。</span></span><br><span class="line"><span class="comment">// 同时需要将一个进程允许打开的最大文件数调大</span></span><br><span class="line">vi /etc/security/limits.conf 重启系统生效 </span><br><span class="line">* soft nofile <span class="number">65535</span> </span><br><span class="line">* hard nofile <span class="number">65535</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">work_threads = <span class="number">4</span> </span><br><span class="line"><span class="comment">// 说明：为了避免CPU上下文切换的开销，以及不必要的资源消耗，不建议将本参数设置得过大。</span></span><br><span class="line"><span class="comment">// 公式为： work_threads + (reader_threads + writer_threads) = CPU数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 对于单盘挂载方式，磁盘读写线程分 别设置为 1即可 </span></span><br><span class="line"><span class="comment">// 如果磁盘做了RAID，那么需要酌情加大读写线程数，这样才能最大程度地发挥磁盘性能</span></span><br><span class="line">disk_rw_separated：磁盘读写是否分离 </span><br><span class="line">disk_reader_threads：单个磁盘读线程数 </span><br><span class="line">disk_writer_threads：单个磁盘写线程数 </span><br></pre></td></tr></table></figure>

<p><strong>避免重复</strong></p>
<p>​    如何避免文件重复上传 解决方案 上传成功后计算文件对应的MD5然后<strong>存入MySQL</strong>,添加文件时把<strong>文件MD5和之前存入MYSQL中的存储的信息对比</strong> 。DigestUtils.md5DigestAsHex(bytes)。</p>
<div style="page-break-after: always;"></div>

<h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="1、事务4大特性"><a href="#1、事务4大特性" class="headerlink" title="1、事务4大特性"></a><strong>1、事务4大特性</strong></h4><p><strong>事务4大特性：</strong>原子性、一致性、隔离性、持久性</p>
<p>​    <strong>原⼦性：</strong> 事务是最⼩的执⾏单位，不允许分割。事务的原⼦性确保动作要么全部完成，要么全不执行</p>
<p>​    <strong>一致性：</strong> 执⾏事务前后，数据保持⼀致，多个事务对同⼀个数据读取的结果是相同的；</p>
<p>​    <strong>隔离性：</strong> 并发访问数据库时，⼀个⽤户的事务不被其他事务所⼲扰，各并发事务之间数据库是独⽴的；</p>
<p>​    <strong>持久性：</strong> ⼀个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发⽣故障也不应该对其有任何影响。</p>
<p><strong>实现保证：</strong></p>
<p>​        MySQL的存储引擎InnoDB使用重做日志保证一致性与持久性，回滚日志保证原子性，使用各种锁来保证隔离性。</p>
<h4 id="2、事务隔离级别"><a href="#2、事务隔离级别" class="headerlink" title="2、事务隔离级别"></a><strong>2、事务隔离级别</strong></h4><p><strong>读未提交：</strong>最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读。</p>
<p><strong>读已提交：</strong>允许读取并发事务已经提交的数据，可以阻⽌脏读，但是幻读或不可重复读仍有可能发⽣。</p>
<p><strong>可重复读：</strong>同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改，可以阻⽌脏读和不可重复读，会有幻读。</p>
<p><strong>串行化：</strong>最⾼的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执⾏，这样事务之间就完全不可能产⽣⼲扰。</p>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>并发问题</th>
</tr>
</thead>
<tbody><tr>
<td>读未提交</td>
<td>可能会导致脏读、幻读或不可重复读</td>
</tr>
<tr>
<td>读已提交</td>
<td>可能会导致幻读或不可重复读</td>
</tr>
<tr>
<td>可重复读</td>
<td>可能会导致幻读</td>
</tr>
<tr>
<td>可串行化</td>
<td>不会产⽣⼲扰</td>
</tr>
</tbody></table>
<h4 id="3、默认隔离级别-RR"><a href="#3、默认隔离级别-RR" class="headerlink" title="3、默认隔离级别-RR"></a><strong>3、默认隔离级别-RR</strong></h4><p><strong>默认隔离级别：</strong>可重复读；</p>
<p>​        同⼀字段的多次读取结果都是⼀致的，除⾮数据是被本身事务⾃⼰所修改；</p>
<p>​        可重复读是有可能出现幻读的，如果要保证绝对的安全只能把隔离级别设置成SERIALIZABLE；这样所有事务都只能顺序执行，自然不会因为并发有什么影响了，但是性能会下降许多。</p>
<p>​        第二种方式，使用MVCC解决<strong>快照读幻读问题</strong>（如简单select），读取的不是最新的数据。维护一个字段作为version，这样可以控制到每次只能有一个人更新一个版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from table_xx where id = ? and version = V</span><br><span class="line">update id from table_xx where id = ? and version = V+1</span><br></pre></td></tr></table></figure>

<p>​        第三种方式，如果需要读最新的数据，可以通过GapLock+Next-KeyLock可以解决<strong>当前读幻读问题</strong>，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select id from table_xx where id &gt; 100 for update;</span><br><span class="line">select id from table_xx where id &gt; 100 lock in share mode;</span><br></pre></td></tr></table></figure>



<h4 id="4、RR和RC使用场景"><a href="#4、RR和RC使用场景" class="headerlink" title="4、RR和RC使用场景"></a><strong>4、RR和RC使用场景</strong></h4><p>​        事务隔离级别RC(read commit)和RR（repeatable read）两种事务隔离级别基于多版本并发控制MVCC(multi-version concurrency control）来实现。</p>
<table>
<thead>
<tr>
<th></th>
<th>RC</th>
<th>RR</th>
</tr>
</thead>
<tbody><tr>
<td>实现</td>
<td>多条查询语句会创建多个不同的ReadView</td>
<td>仅需要一个版本的ReadView</td>
</tr>
<tr>
<td>粒度</td>
<td>语句级读一致性</td>
<td>事务级读一致性</td>
</tr>
<tr>
<td>准确性</td>
<td>每次语句执行时间点的数据</td>
<td>第一条语句执行时间点的数据</td>
</tr>
</tbody></table>
<h4 id="5、行锁，表锁，意向锁"><a href="#5、行锁，表锁，意向锁" class="headerlink" title="5、行锁，表锁，意向锁"></a><strong>5、行锁，表锁，意向锁</strong></h4><p><strong>InnoDB⽀持⾏级锁(row-level locking)和表级锁,默认为⾏级锁</strong>    </p>
<p>​    InnoDB按照不同的分类的锁：</p>
<p>​    共享&#x2F;排它锁(Shared and Exclusive Locks)：行级别锁，</p>
<p>​    意向锁(Intention Locks)，表级别锁</p>
<p>​    间隙锁(Gap Locks)，锁定一个区间</p>
<p>​    记录锁(Record Locks)，锁定一个行记录</p>
<p><strong>表级锁：（串行化）</strong></p>
<p>​        Mysql中锁定 粒度最大的一种锁，对当前操作的整张表加锁，实现简单 ，资源消耗也比较少，加锁快，不会出现死锁 。其锁定粒度最大，触发锁冲突的概率最高，并发度最低，MyISAM和 InnoDB引擎都支持表级锁。</p>
<p><strong>行级锁：（RR、RC）</strong></p>
<p>​        Mysql中锁定 粒度最小 的一种锁，只针对当前操作的行进行加锁。 行级锁能大大减少数据库操作的冲突。其加锁粒度最小，并发度高，但加锁的开销也最大，加锁慢，会出现死锁。 InnoDB支持的行级锁，包括如下几种：</p>
<p>​        <strong>记录锁（Record Lock）:</strong> 对索引项加锁，锁定<strong>符合条件的行</strong>。其他事务不能修改和删除加锁项；</p>
<p>​        <strong>间隙锁（Gap Lock）:</strong> 对索引项之间的“间隙”加锁，锁定<strong>记录的范围</strong>，不包含索引项本身，其他事务不能在锁范围内插入数据。</p>
<p>​        <strong>Next-key Lock：</strong> 锁定索引项本身和索引范围。即Record Lock和Gap Lock的结合。可解决幻读问题。</p>
<p>InnoDB 支持多粒度锁（multiple granularity locking），它允许行级锁与表级锁共存，而意向锁就是其中的一种表锁。</p>
<p><strong>共享锁</strong>（ shared lock, S ）锁允许持有锁读取行的事务。加锁时将自己和子节点全加S锁，父节点直到表头全加IS锁</p>
<p><strong>排他锁</strong>（ exclusive lock， X ）锁允许持有锁修改行的事务。 加锁时将自己和子节点全加X锁，父节点直到表头全加IX锁  </p>
<p><strong>意向共享锁</strong>（intention shared lock, IS）：事务有意向对表中的某些行加<strong>共享锁</strong>（S锁）</p>
<p><strong>意向排他锁</strong>（intention exclusive lock, IX）：事务有意向对表中的某些行加<strong>排他锁</strong>（X锁）</p>
<table>
<thead>
<tr>
<th>互斥性</th>
<th>共享锁（S）</th>
<th>排它锁（X）</th>
<th>意向共享锁IS</th>
<th>意向排他锁IX</th>
</tr>
</thead>
<tbody><tr>
<td>共享锁（S）</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>❌</td>
</tr>
<tr>
<td>排它锁（X）</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
<td>❌</td>
</tr>
<tr>
<td>意向共享锁IS</td>
<td>✅</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
<tr>
<td>意向排他锁IX</td>
<td>❌</td>
<td>❌</td>
<td>✅</td>
<td>✅</td>
</tr>
</tbody></table>
<h4 id="6、MVCC多版本并发控制"><a href="#6、MVCC多版本并发控制" class="headerlink" title="6、MVCC多版本并发控制"></a><strong>6、MVCC多版本并发控制</strong></h4><p>​        MVCC是一种多版本并发控制机制，通过事务的可见性看到自己预期的数据，能降低其系统开销.（RC和RR级别工作）</p>
<p>​        InnoDB的MVCC,是通过在每行记录后面保存系统版本号(可以理解为事务的ID)，每开始一个新的事务，系统版本号就会自动递增，事务开始时刻的系统版本号会作为事务的ID。这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的，防止幻读的产生。</p>
<p>​        1.MVCC手段只适用于Msyql隔离级别中的读已提交（Read committed）和可重复读（Repeatable Read）.</p>
<p>​        2.Read uncimmitted由于存在脏读，即能读到未提交事务的数据行，所以不适用MVCC.</p>
<p>​        3.简单的select快照度不会加锁，删改及select for update等需要当前读的场景会加锁</p>
<p>​        原因是MVCC的创建版本和删除版本只要在事务提交后才会产生。客观上，mysql使用的是乐观锁的一整实现方式，就是每行都有版本号，保存时根据版本号决定是否成功。Innodb的MVCC使用到的快照存储在Undo日志中，该日志通过回滚指针把一个数据行所有快照连接起来。</p>
<p><strong>版本链</strong></p>
<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>
<p><strong>trx_id</strong></p>
<p>这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id。</p>
<p><strong>roll_pointer</strong></p>
<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>
<p>每次修改都会在版本链中记录。<strong>SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，</strong>提升了系统的性能。</p>
<div style="page-break-after: always;"></div>

<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><h4 id="1、Innodb和Myisam引擎"><a href="#1、Innodb和Myisam引擎" class="headerlink" title="1、Innodb和Myisam引擎"></a><strong>1、Innodb和Myisam引擎</strong></h4><p><strong>Myisam：</strong>支持表锁，适合读密集的场景，不支持外键，不支持事务，索引与数据在不同的文件</p>
<p><strong>Innodb：</strong>支持行、表锁，默认为行锁，适合并发场景，支持外键，支持事务，索引与数据同一文件</p>
<h4 id="2、哈希索引"><a href="#2、哈希索引" class="headerlink" title="2、哈希索引"></a><strong>2、哈希索引</strong></h4><p>​        哈希索引用索引列的值计算该值的hashCode，然后在hashCode相应的位置存执该值所在行数据的物理位置，因为使用散列算法，因此访问速度非常快，但是一个值只能对应一个hashCode，而且是散列的分布方式，因此哈希索引不支持范围查找和排序的功能</p>
<h4 id="3、B-树索引"><a href="#3、B-树索引" class="headerlink" title="3、B+树索引"></a><strong>3、B+树索引</strong></h4><p><strong>优点：</strong></p>
<p>​        B+树的磁盘读写代价低，更少的查询次数，查询效率更加稳定，有利于对数据库的扫描</p>
<p>​        B+树是B树的升级版，B+树只有叶节点存放数据，其余节点用来索引。索引节点可以全部加入内存，增加查询效率，叶子节点可以做双向链表，从而<strong>提高范围查找的效率，增加的索引的范围</strong></p>
<p>​        在大规模数据存储的时候，红黑树往往出现由于<strong>树的深度过大</strong>而造成磁盘IO读写过于频繁，进而导致效率低下的情况。所以，只要我们通过某种较好的树结构减少树的结构尽量减少树的高度，B树与B+树可以有多个子女，从几十到上千，可以降低树的高度。</p>
<p>​        <strong>磁盘预读原理</strong>：将一个节点的大小设为等于一个页，这样每个节点只需要一次I&#x2F;O就可以完全载入。为了达到这个目的，在实际实现B-Tree还需要使用如下技巧：每次新建节点时，直接申请一个页的空间，这样就保证<strong>一个节点物理上也存储在一个页里</strong>，加之计算机存储分配都是按页对齐的，就实现了一个node只需一次I&#x2F;O。</p>
<h4 id="4、创建索引"><a href="#4、创建索引" class="headerlink" title="4、创建索引"></a>4、创建索引</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span>  [<span class="keyword">UNIQUE</span> <span class="operator">|</span> FULLTEXT]  INDEX  索引名 <span class="keyword">ON</span>  表名(字段名) [<span class="keyword">USING</span> 索引方法]；</span><br><span class="line"></span><br><span class="line">说明：</span><br><span class="line"><span class="keyword">UNIQUE</span>:可选。表示索引为唯一性索引。</span><br><span class="line">FULLTEXT:可选。表示索引为全文索引。</span><br><span class="line">INDEX和KEY:用于指定字段为索引，两者选择其中之一就可以了，作用是一样的。</span><br><span class="line">索引名:可选。给创建的索引取一个新名称。</span><br><span class="line">字段名<span class="number">1</span>:指定索引对应的字段的名称，该字段必须是前面定义好的字段。</span><br><span class="line">注：索引方法默认使用B<span class="operator">+</span>TREE。</span><br></pre></td></tr></table></figure>



<h4 id="5、聚簇索引和非聚簇索引"><a href="#5、聚簇索引和非聚簇索引" class="headerlink" title="5、聚簇索引和非聚簇索引"></a><strong>5、聚簇索引和非聚簇索引</strong></h4><p>​    <strong>聚簇索引：</strong>将数据存储与索引放到了一块，索引结构的叶子节点保存了行数据（<strong>主键索引</strong>）</p>
<p>​    <strong>非聚簇索引：</strong>将数据与索引分开存储，索引结构的叶子节点指向了数据对应的位置（<strong>辅助索引</strong>）</p>
<p>​    聚簇索引的叶子节点就是数据节点，而非聚簇索引的叶子节点仍然是索引节点，只不过有指向对应数据块的指针。</p>
<h4 id="6、最左前缀问题"><a href="#6、最左前缀问题" class="headerlink" title="6、最左前缀问题"></a>6、最左前缀问题</h4><p>​        最左前缀原则主要使用在联合索引中，联合索引的B+Tree是按照第一个关键字进行索引排列的。</p>
<p>​        联合索引的底层是一颗B+树，只不过联合索引的B+树节点中存储的是键值。由于构建一棵B+树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建。</p>
<p>​        采用&gt;、&lt;等进行匹配都会导致后面的列无法走索引，因为通过以上方式匹配到的数据是不可知的。</p>
<div style="page-break-after: always;"></div>

<h3 id="SQL查询"><a href="#SQL查询" class="headerlink" title="SQL查询"></a>SQL查询</h3><h4 id="1、SQL语句的执行过程"><a href="#1、SQL语句的执行过程" class="headerlink" title="1、SQL语句的执行过程"></a><strong>1、SQL语句的执行过程</strong></h4><p><strong>查询语句：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from student  A where A.age=&#x27;18&#x27; and A.name=&#x27;张三&#x27;;</span><br></pre></td></tr></table></figure>

<img src="http://s0.lgstatic.com/i/image2/M01/8B/0F/CgotOV14ySKAMxohAAH2VHcAzkE612.png" alt="img" style="zoom: 67%;" />

<p>结合上面的说明，我们分析下这个语句的执行流程：</p>
<p>①通过客户端&#x2F;服务器通信协议与 MySQL 建立连接。并查询是否有权限</p>
<p>②Mysql8.0之前开看是否开启缓存，开启了 Query Cache 且命中完全相同的 SQL 语句，则将查询结果直接返回给客户端；</p>
<p>③由解析器进行语法语义解析，并生成解析树。如查询是select、表名tb_student、条件是id&#x3D;’1’</p>
<p>④查询优化器生成执行计划。根据索引看看是否可以优化</p>
<p>⑤查询执行引擎执行 SQL 语句，根据存储引擎类型，得到查询结果。若开启了 Query Cache，则缓存，否则直接返回。</p>
<h4 id="2、回表查询和覆盖索引"><a href="#2、回表查询和覆盖索引" class="headerlink" title="2、回表查询和覆盖索引"></a><strong>2、回表查询和覆盖索引</strong></h4><p><strong>普通索引</strong>（唯一索引+联合索引+全文索引）需要扫描两遍索引树</p>
<p>（1）先通过普通索引定位到主键值id&#x3D;5；</p>
<p>（2）在通过聚集索引定位到行记录；</p>
<p>这就是所谓的<strong>回表查询</strong>，先定位主键值，再定位行记录，它的性能较扫一遍索引树更低。</p>
<p><strong>覆盖索引</strong>：主键索引&#x3D;&#x3D;聚簇索引&#x3D;&#x3D;覆盖索引</p>
<p>​    覆盖索引（covering index ，或称为索引覆盖）就是把单列的非主键 索引 修改为多字段的联合索引,  在一棵索引数上 就找到了想要的数据, 不需要去主键索引树上,再检索一遍  这个现象,称之为 索引覆盖.</p>
<p>​    如果where条件的列和返回的数据在一个索引中，那么不需要回查表，那么就叫覆盖索引。</p>
<p><strong>实现覆盖索引</strong>：常见的方法是，将被查询的字段，建立到联合索引里去。</p>
<h4 id="3、Explain及优化"><a href="#3、Explain及优化" class="headerlink" title="3、Explain及优化"></a>3、Explain及优化</h4><p>参考：<a href="https://www.jianshu.com/p/8fab76bbf448">https://www.jianshu.com/p/8fab76bbf448</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; explain select * from staff;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">|  1 | SIMPLE      | staff | ALL  | NULL          | 索引  | NULL    | NULL |    2 | NULL  |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------+</span><br><span class="line">1 row in set</span><br></pre></td></tr></table></figure>

<p><strong>索引优化：</strong></p>
<p>​    ①最左前缀索引：like只用于’string%’，语句中的&#x3D;和in会动态调整顺序</p>
<p>​    ②唯一索引：唯一键区分度在0.1以上</p>
<p>​        区分度的公式是count(distinct col)&#x2F;count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在<a href="http://lib.csdn.net/base/hadoop">大数据</a>面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p>
<p>​    ③无法使用索引：!&#x3D;  、is null 、 or、&gt;&lt; 、（<strong>5.7以后根据数量自动判定）in 、not in</strong></p>
<p>​    ④联合索引：避免select * ，查询列使用覆盖索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT uid From user Where gid = 2 order by ctime asc limit 10</span><br><span class="line">ALTER TABLE user add index idx_gid_ctime_uid(gid,ctime,uid) #创建联合覆盖索引，避免回表查询</span><br></pre></td></tr></table></figure>



<p><strong>语句优化：</strong></p>
<p>​    ①char固定长度查询效率高，varchar第一个字节记录数据长度</p>
<p>​    ②应该针对Explain中Rows增加索引</p>
<p>​    ③group&#x2F;order by字段均会涉及索引</p>
<p>​    ④Limit中分页查询会随着start值增大而变缓慢，通过子查询+表连接解决</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">10</span>  改进后的<span class="keyword">SQL</span>语句如下：</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">where</span> id <span class="operator">&gt;=</span> ( <span class="keyword">select</span> id <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">1</span> ) limit <span class="number">10</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mytbl <span class="keyword">inner</span> ori <span class="keyword">join</span> (<span class="keyword">select</span> id <span class="keyword">from</span> mytbl <span class="keyword">order</span> <span class="keyword">by</span> id limit <span class="number">100000</span>,<span class="number">10</span>) <span class="keyword">as</span> tmp <span class="keyword">on</span> tmp.id<span class="operator">=</span>ori.id;</span><br></pre></td></tr></table></figure>

<p>​    ⑤count会进行全表扫描，如果估算可以使用explain</p>
<p>​    ⑥delete删除表时会增加大量undo和redo日志， 确定删除可使用trancate</p>
<p><strong>表结构优化：</strong></p>
<p>​    ①单库不超过200张表</p>
<p>​    ②单表不超过500w数据</p>
<p>​    ③单表不超过40列</p>
<p>​    ④单表索引不超过5个</p>
<p><strong>数据库范式</strong> ：</p>
<p>​    ①第一范式（1NF）列不可分割</p>
<p>​    ②第二范式（2NF）属性完全依赖于主键 [ 消除部分子函数依赖 ]</p>
<p>​    ③第三范式（3NF）属性不依赖于其它非主属性 [ 消除传递依赖 ]</p>
<p><strong>配置优化：</strong></p>
<p>​    配置连接数、禁用Swap、增加内存、升级SSD硬盘</p>
<h4 id="4、JOIN查询"><a href="#4、JOIN查询" class="headerlink" title="4、JOIN查询"></a>4、JOIN查询</h4><img src="https://image-static.segmentfault.com/276/780/2767807589-5c122586a23c4_articlex" style="align:left;zoom: 60%;" />

<p><strong>left join(左联接)</strong> 返回包括左表中的所有记录和右表中关联字段相等的记录 </p>
<p><strong>right join(右联接)</strong> 返回包括右表中的所有记录和左表中关联字段相等的记录</p>
<p><strong>inner join(等值连接)</strong> 只返回两个表中关联字段相等的行</p>
<div style="page-break-after: always;"></div>

<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a><strong>集群</strong></h3><h4 id="1、主从复制过程"><a href="#1、主从复制过程" class="headerlink" title="1、主从复制过程"></a>1、主从复制过程</h4><p><strong>MySQl主从复制：</strong></p>
<ul>
<li><strong>原理</strong>：将主服务器的binlog日志复制到从服务器上执行一遍，达到主从数据的一致状态。</li>
<li><strong>过程</strong>：从库开启一个I&#x2F;O线程，向主库请求Binlog日志。主节点开启一个binlog dump线程，检查自己的二进制日志，并发送给从节点；从库将接收到的数据保存到中继日志（Relay log）中，另外开启一个SQL线程，把Relay中的操作在自身机器上执行一遍</li>
<li><strong>优点</strong>：<ul>
<li>作为备用数据库，并且不影响业务</li>
<li>可做读写分离，一个写库，一个或多个读库，在不同的服务器上，充分发挥服务器和数据库的性能，但要保证数据的一致性</li>
</ul>
</li>
</ul>
<p><strong>binlog记录格式：</strong>statement、row、mixed</p>
<p>​        基于语句statement的复制、基于行row的复制、基于语句和行（mix）的复制。其中基于row的复制方式更能保证主从库数据的一致性，但日志量较大，在设置时考虑磁盘的空间问题</p>
<h4 id="2、数据一致性问题"><a href="#2、数据一致性问题" class="headerlink" title="2、数据一致性问题"></a>2、数据一致性问题</h4><p>“主从复制有延时”，这个延时期间读取从库，可能读到不一致的数据。</p>
<p><strong>缓存记录写key法：</strong></p>
<p>​        在cache里记录哪些记录发生过的写请求，来路由读主库还是读从库</p>
<p><strong>异步复制：</strong></p>
<p>​        在异步复制中，主库执行完操作后，写入binlog日志后，就返回客户端，这一动作就结束了，并不会验证从库有没有收到，完不完整，所以这样可能<strong>会造成数据的不一致</strong>。</p>
<p><strong>半同步复制：</strong></p>
<p>​        当主库每提交一个事务后，不会立即返回，而是等待其中一个从库接收到Binlog并成功写入Relay-log中才返回客户端，通过一份在主库的Binlog，另一份在其中一个从库的Relay-log，可以保证了数据的安全性和一致性。</p>
<p><strong>全同步复制：</strong></p>
<p>​        指当主库执行完一个事务，所有的从库都执行了该事务才返回给客户端。因为需要等待所有从库执行完该事务才能返回，所以全同步复制的<strong>性能必然会收到严重的影响</strong>。</p>
<h4 id="3、集群架构"><a href="#3、集群架构" class="headerlink" title="3、集群架构"></a>3、集群架构</h4><p> <strong>Keepalived + VIP + MySQL 主从&#x2F;双主</strong></p>
<p>​        当写节点 Master db1 出现故障时，由 MMM Monitor 或 Keepalived 触发切换脚本，将 VIP 漂移到可用的 Master db2 上。当出现网络抖动或网络分区时，MMM Monitor 会误判，严重时来回切换写 VIP 导致集群双写，当数据复制延迟时，应用程序会出现数据错乱或数据冲突的故障。有效避免单点失效的架构就是采用共享存储，单点故障切换可以通过分布式哨兵系统监控。</p>
<img src="http://s0.lgstatic.com/i/image2/M01/89/48/CgoB5l12KuGALf-cAAGuHVmMkHs743.png" alt="img" style="zoom: 67%;" />

<p> <strong>架构选型：</strong>MMM 集群  -&gt; MHA集群 -&gt; MHA+Arksentinel。</p>
<img src="http://s0.lgstatic.com/i/image2/M01/89/68/CgotOV12KuKAe_HOAABl-wRATa0772.png" alt="img"  />



<h4 id="4、故障转移和恢复"><a href="#4、故障转移和恢复" class="headerlink" title="4、故障转移和恢复"></a>4、故障转移和恢复</h4><p><strong>转移方式及恢复方法</strong></p>
<pre><code>1. 虚拟IP或DNS服务 （Keepalived +VIP/DNS  和 MMM 架构）
</code></pre>
<p>​    问题：在虚拟 IP 运维过程中，刷新ARP过程中有时会出现一个 VIP 绑定在多台服务器同时提供连接的问题。这也是为什么要避免使用 Keepalived+VIP 和 MMM 架构的原因之一，因为它处理不了这类问题而导致集群多点写入。</p>
<pre><code>2. 提升备库为主库（MHA、QMHA）
</code></pre>
<p>​    尝试将原 Master 设置 read_only 为 on，避免集群多点写入。借助 binlog server 保留 Master 的 Binlog；当出现数据延迟时，再提升 Slave 为新 Master 之前需要进行数据补齐，否则会丢失数据。</p>
<div style="page-break-after: always;"></div>

<h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><h4 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h4><h5 id="如何进行分库分表"><a href="#如何进行分库分表" class="headerlink" title="如何进行分库分表"></a>如何进行分库分表</h5><blockquote>
<p><strong>分表</strong>用户id进行分表，每个表控制在300万数据。</p>
<p><strong>分库</strong>根据业务场景和地域分库，每个库并发不超过2000</p>
</blockquote>
<p><strong>Sharding-jdbc</strong> 这种 client 层方案的<strong>优点在于不用部署，运维成本低，不需要代理层的二次转发请求，性能很高</strong>，但是各个系统都需要<strong>耦合</strong> Sharding-jdbc 的依赖，升级比较麻烦</p>
<p><strong>Mycat</strong> 这种 proxy 层方案的<strong>缺点在于需要部署</strong>，自己运维一套中间件，运维成本高，但是<strong>好处在于对于各个项目是透明的</strong>，如果遇到升级之类的都是自己中间件那里搞就行了</p>
<p><strong>水平拆分</strong>：一个表放到多个库，分担高并发，加快查询速度</p>
<ul>
<li><strong>id</strong>保证业务在关联多张表时可以在同一库上操作</li>
<li><strong>range</strong>方便扩容和数据统计</li>
<li><strong>hash</strong>可以使得数据更加平均</li>
</ul>
<p><strong>垂直拆分</strong>：一个表拆成多个表，可以将一些冷数据拆分到冗余库中</p>
<blockquote>
<p>不是写瓶颈优先进行分表</p>
</blockquote>
<ul>
<li><p>分库数据间的数据无法再通过数据库直接查询了。会产生深分页的问题</p>
</li>
<li><p>分库越多，出现问题的可能性越大，维护成本也变得更高。</p>
</li>
<li><p>分库后无法保障跨库间事务，只能借助其他中间件实现最终一致性。</p>
</li>
</ul>
<p>分库首先需考虑满足业务最核心的场景：</p>
<p>1、订单数据按<strong>用户</strong>分库，可以<strong>提升用户的全流程体验</strong></p>
<p>2、超级客户导致<strong>数据倾斜</strong>可以使用最细粒度唯一标识进行hash拆分</p>
<p>3、按照最细粒度如订单号拆分以后，数据库就无法进行单库排重了</p>
<p>三个问题：</p>
<ul>
<li><p>富查询：采用分库分表之后，如何满足跨越分库的查询？<strong>使用ES</strong>的宽表</p>
<p>借助<strong>分库网关+分库业务</strong>虽然能够实现<strong>多维度查询的能力</strong>，但整体上性能不佳且对正常的写入请求有一定的影响。业界应对<strong>多维度实时查询</strong>的最常见方式便是借助 <strong>ElasticSearch</strong></p>
</li>
<li><p>数据倾斜：数据分库基础上再进行分表</p>
</li>
<li><p>分布式事务：跨多库的修改及多个微服务间的写操作导致的分布式事务问题？</p>
</li>
<li><p>深分页问题：按游标查询，或者叫每次查询都带上上一次查询经过排序后的最大 ID</p>
</li>
</ul>
<h4 id="如何将老数据进行迁移"><a href="#如何将老数据进行迁移" class="headerlink" title="如何将老数据进行迁移"></a>如何将老数据进行迁移</h4><p><strong>双写不中断迁移</strong></p>
<ul>
<li>线上系统里所有写库的地方，增删改操作，<strong>除了对老库增删改，都加上对新库的增删改</strong></li>
<li>系统部署以后，还需要跑程序读老库数据写新库，写的时候需要判断updateTime</li>
<li>循环执行，直至两个库的数据完全一致，最后重新部署分库分表的代码就行了</li>
</ul>
<h4 id="系统性能的评估及扩容"><a href="#系统性能的评估及扩容" class="headerlink" title="系统性能的评估及扩容"></a>系统性能的评估及扩容</h4><p>和家亲目前有1亿用户：场景 10万写并发，100万读并发，60亿数据量</p>
<p>设计时考虑极限情况，32库*32表~64个表，一共1000 ~ 2000张表</p>
<ul>
<li><p>支持<strong>3万</strong>的写并发，配合MQ实现每秒10万的写入速度</p>
</li>
<li><p>读写分离<strong>6万</strong>读并发，配合分布式缓存每秒100读并发</p>
</li>
<li><p>2000张表每张300万，可以最多写入60亿的数据</p>
</li>
<li><p>32张用户表，支撑亿级用户，后续最多也就扩容一次</p>
</li>
</ul>
<p><strong>动态扩容的步骤</strong></p>
<ol>
<li>推荐是 32 库 * 32 表，对于我们公司来说，可能几年都够了。</li>
<li>配置路由的规则，uid % 32 &#x3D; 库，uid &#x2F; 32 % 32 &#x3D; 表</li>
<li>扩容的时候，申请增加更多的数据库服务器，呈倍数扩容</li>
<li>由 DBA 负责将原先数据库服务器的库，迁移到新的数据库服务器上去</li>
<li>修改一下配置，重新发布系统，上线，原先的路由规则变都不用变</li>
<li>直接可以基于 n 倍的数据库服务器的资源，继续进行线上系统的提供服务。</li>
</ol>
<h4 id="如何生成自增的id主键"><a href="#如何生成自增的id主键" class="headerlink" title="如何生成自增的id主键"></a>如何生成自增的id主键</h4><ul>
<li>使用redis可以</li>
<li>并发不高可以单独起一个<strong>服务</strong>，生成自增id</li>
<li>设置数据库<strong>step</strong>自增步长可以支撑水平伸缩</li>
<li>UUID适合文件名、编号，但是<strong>不适合做主键</strong></li>
<li><strong>snowflake雪花算法</strong>，综合了<strong>41时间</strong>（ms）、<strong>10机器</strong>、<strong>12序列号</strong>（ms内自增）</li>
</ul>
<p>其中机器预留的10bit可以根据自己的业务场景配置</p>
<div style="page-break-after: always;"></div>

<h3 id="线上故障及优化"><a href="#线上故障及优化" class="headerlink" title="线上故障及优化"></a>线上故障及优化</h3><h4 id="更新失败-主从同步延时"><a href="#更新失败-主从同步延时" class="headerlink" title="更新失败 | 主从同步延时"></a>更新失败 | 主从同步延时</h4><p>以前线上确实处理过因为主从同步延时问题而导致的线上的 bug，属于小型的生产事故。</p>
<p>是这个么场景。有个同学是这样写代码逻辑的。先插入一条数据，再把它查出来，然后更新这条数据。在生产环境高峰期，写并发达到了 2000&#x2F;s，这个时候，主从复制延时大概是在小几十毫秒。线上会发现，每天总有那么一些数据，我们期望更新一些重要的数据状态，但在高峰期时候却没更新。用户跟客服反馈，而客服就会反馈给我们。</p>
<p>我们通过 MySQL 命令：</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line"><span class="built_in">show</span> slave <span class="built_in">status</span></span><br></pre></td></tr></table></figure>

<p>查看 <code>Seconds_Behind_Master</code> ，可以看到从库复制主库的数据落后了几 ms。</p>
<p>一般来说，如果主从延迟较为严重，有以下解决方案：</p>
<ul>
<li>分库，拆分为多个主库，每个主库的写并发就减少了几倍，主从延迟可以忽略不计。</li>
<li>重写代码，写代码的同学，要慎重，插入数据时立马查询可能查不到。</li>
<li>如果确实是存在必须先插入，立马要求就查询到，然后立马就要反过来执行一些操作，对这个查询<strong>设置直连主库</strong>或者<strong>延迟查询</strong>。主从复制延迟一般不会超过50ms</li>
</ul>
<h4 id="应用崩溃-分库分表优化"><a href="#应用崩溃-分库分表优化" class="headerlink" title="应用崩溃 | 分库分表优化"></a><strong>应用崩溃 | 分库分表优化</strong></h4><p>​    我们有一个线上通行记录的表，由于数据量过大，进行了分库分表，当时分库分表初期经常产生一些问题。典型的就是通行记录查询中使用了深分页，通过一些工具如MAT、Jstack追踪到是由于sharding-jdbc内部引用造成的。</p>
<p>​    通行记录数据被存放在两个库中。如果没有提供<strong>切分键</strong>，查询语句就会被分发到所有的数据库中，比如查询语句是 limit 10、offset 1000，最终结果只需要返回 10 条记录，但是数据库中间件要完成这种计算，则需要 (1000+10)*2&#x3D;2020 条记录来完成这个计算过程。如果 offset 的值过大，使用的内存就会暴涨。虽然 sharding-jdbc 使用归并算法进行了一些优化，但在实际场景中，深分页仍然引起了<strong>内存和性能</strong>问题。</p>
<p>​    这种在中间节点进行<strong>归并聚合</strong>的操作，在分布式框架中非常常见。比如在 ElasticSearch 中，就存在相似的数据获取逻辑，<strong>不加限制的深分页</strong>，同样会造成 ES 的内存问题。</p>
<p><strong>业界解决方案：</strong></p>
<p><strong>方法一：全局视野法</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset 0 limit X+Y</p>
<p>（2）服务层对得到的N*(X+Y)条数据进行内存排序，内存排序后再取偏移量X后的Y条记录</p>
<p>这种方法随着翻页的进行，性能越来越低。</p>
<p><strong>方法二：业务折衷法-禁止跳页查询</strong></p>
<p>（1）用正常的方法取得第一页数据，并得到第一页记录的time_max</p>
<p>（2）每次翻页，将order by time offset X limit Y，改写成order by time where time&gt;$time_max limit Y</p>
<p>以保证每次只返回一页数据，性能为常量。</p>
<p><strong>方法三：业务折衷法-允许模糊数据</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset X&#x2F;N limit Y&#x2F;N</p>
<p><strong>方法四：二次查询法</strong></p>
<p>（1）将order by time offset X limit Y，改写成order by time offset X&#x2F;N limit Y</p>
<p>（2）找到最小值time_min</p>
<p>（3）between二次查询，order by time between $time_min and $time_i_max</p>
<p>（4）设置虚拟time_min，找到time_min在各个分库的offset，从而得到time_min在全局的offset</p>
<p>（5）得到了time_min在全局的offset，自然得到了全局的offset X limit Y</p>
<h4 id="查询异常-SQL-调优"><a href="#查询异常-SQL-调优" class="headerlink" title="查询异常 | SQL 调优"></a>查询异常 | SQL 调优</h4><p>分库分表前，有一段用用户名来查询某个用户的 SQL 语句：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">select * <span class="keyword">from</span> user where name = <span class="string">&quot;xxx&quot;</span> <span class="keyword">and</span> community=<span class="string">&quot;other&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>为了达到动态拼接的效果，这句 SQL 语句被一位同事进行了如下修改。他的本意是，当 name 或者 community 传入为空的时候，动态去掉这些查询条件。这种写法，在 MyBaits 的配置文件中，也非常常见。大多数情况下，这种写法是没有问题的，因为结果集合是可以控制的。但随着系统的运行，用户表的记录越来越多，当传入的 name 和 community 全部为空时，悲剧的事情发生了:</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>数据库中的所有记录，都会被查询出来，载入到 JVM 的内存中。由于数据库记录实在太多，直接把内存给撑爆了。由于这种原因引起的内存溢出，发生的频率非常高，比如导入Excel文件时。</p>
<p>通常的解决方式是<strong>强行加入分页功能</strong>，或者对一些<strong>必填的参数进行校验</strong></p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gobovqjvijj30zd0lctbp.jpg" alt="img"></p>
<p><strong>Controller 层</strong></p>
<p>现在很多项目都采用前后端分离架构，所以 Controller 层的方法，一般使用 @ResponseBody 注解，把查询的结果，解析成 JSON 数据返回。这在数据集非常大的情况下，会占用很多内存资源。假如结果集在解析成 JSON 之前，占用的内存是 10MB，那么在解析过程中，有可能会使用 20M 或者更多的内存</p>
<p>因此，保持结果集的精简，是非常有必要的，这也是 DTO（Data Transfer Object）存在的必要。互联网环境不怕小结果集的高并发请求，却非常恐惧大结果集的耗时请求，这是其中一方面的原因。</p>
<p><strong>Service 层</strong></p>
<p>Service 层用于处理具体的业务，更加贴合业务的功能需求。一个 Service，可能会被多个 Controller 层所使用，也可能会使用多个 dao 结构的查询结果进行计算、拼装。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getUserSize</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = dao.getAllUser();</span><br><span class="line">        <span class="type">return</span> <span class="variable">null</span> <span class="operator">=</span>= users ? <span class="number">0</span> : users.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码review中发现了定时炸弹，这种在数据量达到一定程度后，才会暴露问题。</p>
<p><strong>ORM 层</strong></p>
<p>比如使用Mybatis时，有一个批量导入服务，在 MyBatis 执行批量插入的时候，竟然产生了内存溢出，按道理这种插入操作是不会引起额外内存占用的，最后通过源码追踪到了问题。</p>
<p>这是因为 MyBatis 循环处理 batch 的时候，操作对象是数组，而我们在接口定义的时候，使用的是 List；当传入一个非常大的 List 时，它需要调用 List 的 toArray 方法将列表转换成数组（浅拷贝）；在最后的拼装阶段，又使用了 StringBuilder 来拼接最终的 SQL，所以实际使用的内存要比 List 多很多。</p>
<p>事实证明，不论是插入操作还是查询动作，只要涉及的数据集非常大，就容易出现问题。由于项目中众多框架的引入，想要分析这些具体的内存占用，就变得非常困难。所以保持小批量操作和结果集的干净，是一个非常好的习惯。</p>
<h1 id="五、Redis篇"><a href="#五、Redis篇" class="headerlink" title="五、Redis篇"></a><strong>五、Redis篇</strong></h1><h3 id="WhyRedis"><a href="#WhyRedis" class="headerlink" title="WhyRedis"></a>WhyRedis</h3><p>​        速度快，完全基于内存，使用C语言实现，网络层使用epoll解决高并发问题，单线程模型避免了不必要的上下文切换及竞争条件；</p>
<table>
<thead>
<tr>
<th></th>
<th>GuavaCache</th>
<th>Tair</th>
<th>EVCache</th>
<th>Aerospike</th>
</tr>
</thead>
<tbody><tr>
<td>类别</td>
<td>本地JVM缓存</td>
<td>分布式缓存</td>
<td>分布式缓存</td>
<td>分布式nosql数据库</td>
</tr>
<tr>
<td>应用</td>
<td>本地缓存</td>
<td>淘宝</td>
<td>Netflix、AWS</td>
<td>广告</td>
</tr>
<tr>
<td>性能</td>
<td>非常高</td>
<td>较高</td>
<td>很高</td>
<td>较高</td>
</tr>
<tr>
<td>持久化</td>
<td>无</td>
<td>有</td>
<td>有</td>
<td>有</td>
</tr>
<tr>
<td>集群</td>
<td>无</td>
<td>灵活配置</td>
<td>有</td>
<td>自动扩容</td>
</tr>
</tbody></table>
<p>​        与传统数据库不同的是 Redis 的数据是存在内存中的，所以读写速度非常快，因此 redis 被广泛应用于缓存方向，每秒可以处理超过 10万次读写操作，是已知性能最快的Key-Value DB。另外，Redis 也经常用来做分布式锁。除此之外，Redis 支持事务 、持久化、LUA脚本、LRU驱动事件、多种集群方案。</p>
<h4 id="1、简单高效"><a href="#1、简单高效" class="headerlink" title="1、简单高效"></a>1、简单高效</h4><p>​        1）完全基于内存，绝大部分请求是纯粹的内存操作。数据存在内存中，类似于 HashMap，查找和操作的时间复杂度都是O(1)；</p>
<p>​        2）数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p>
<p>​        3）采用单线程，避免了多线程不必要的上下文切换和竞争条件，不存在加锁释放锁操作，减少了因为锁竞争导致的性能消耗；（6.0以后多线程）</p>
<p>​        4）使用EPOLL多路 I&#x2F;O 复用模型，非阻塞 IO；</p>
<p>​        5）使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p>
<h4 id="2、Memcache"><a href="#2、Memcache" class="headerlink" title="2、Memcache"></a>2、Memcache</h4><table>
<thead>
<tr>
<th>redis</th>
<th>Memcached</th>
</tr>
</thead>
<tbody><tr>
<td>内存高速数据库</td>
<td>高性能分布式内存缓存数据库</td>
</tr>
<tr>
<td>支持hash、list、set、zset、string结构</td>
<td>只支持key-value结构</td>
</tr>
<tr>
<td>将大部分数据放到内存</td>
<td>全部数据放到内存中</td>
</tr>
<tr>
<td>支持持久化、主从复制备份</td>
<td>不支持数据持久化及数据备份</td>
</tr>
<tr>
<td>数据丢失可通过AOF恢复</td>
<td>挂掉后，数据不可恢复</td>
</tr>
<tr>
<td>单线程（2~4万TPS）</td>
<td>多线程（20-40万TPS）</td>
</tr>
</tbody></table>
<p><strong>使用场景：</strong></p>
<p>​    1、如果有持久方面的需求或对数据类型和处理有要求的应该选择redis。<br>​    2、如果简单的key&#x2F;value 存储应该选择memcached。    </p>
<h4 id="3、Tair"><a href="#3、Tair" class="headerlink" title="3、Tair"></a>3、Tair</h4><p>​    Tair(Taobao Pair)是淘宝开发的分布式Key-Value存储引擎，既可以做缓存也可以做数据源（三种引擎切换）</p>
<ul>
<li>MDB（Memcache）属于内存型产品,支持kv和类hashMap结构,性能最优</li>
<li>RDB（Redis）支持List.Set.Zset等复杂的数据结构,性能次之,可提供缓存和持久化存储两种模式</li>
<li>LDB（levelDB）属于持久化产品,支持kv和类hashmap结构,性能较前两者稍低,但持久化可靠性最高</li>
</ul>
<p><strong>分布式缓存</strong></p>
<p>大访问少量临时数据的存储（kb左右）</p>
<p>用于缓存，降低对后端数据库的访问压力</p>
<p>session场景</p>
<p>高速访问某些数据结构的应用和计算（rdb）</p>
<p><strong>数据源存储</strong></p>
<p>快速读取数据（fdb）</p>
<p>持续大数据量的存入读取（ldb），交易快照</p>
<p>高频度的更新读取（ldb），库存</p>
<p><strong>痛点</strong>：redis集群中，想借用缓存资源必须得指明redis服务器地址去要。这就增加了程序的维护复杂度。因为redis服务器很可能是需要频繁变动的。所以人家淘宝就想啊，为什么不能像操作分布式数据库或者hadoop那样。增加一个中央节点，让他去代理所有事情。在tair中程序只要跟tair中心节点交互就OK了。同时tair里还有配置服务器概念。又免去了像操作hadoop那样，还得每台hadoop一套一模一样配置文件。改配置文件得整个集群都跟着改。</p>
<h4 id="4、Guava"><a href="#4、Guava" class="headerlink" title="4、Guava"></a>4、Guava</h4><p>​        分布式缓存一致性更好一点，用于集群环境下多节点使用同一份缓存的情况；有网络IO，吞吐率与缓存的数据大小有较大关系；</p>
<p>​        本地缓存非常高效，本地缓存会占用堆内存，影响垃圾回收、影响系统性能。</p>
<p><strong>本地缓存设计：</strong></p>
<p>​        以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p>
<p><strong>解决缓存过期：</strong></p>
<p>​    1、将缓存过期时间调为永久</p>
<p>​    2、将缓存失效时间分散开，不要将缓存时间长度都设置成一样；比如我们可以在原有的失效时间基础上增加一个随机值，这样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p>
<p><strong>解决内存溢出：</strong></p>
<p>​    <strong>第一步</strong>，修改JVM启动参数，直接增加内存。(-Xms，-Xmx参数一定不要忘记加。)</p>
<p>　<strong>第二步</strong>，检查错误日志，查看“OutOfMemory”错误前是否有其它异常或错误。</p>
<p>　<strong>第三步</strong>，对代码进行走查和分析，找出可能发生内存溢出的位置。</p>
<p><strong>Google Guava Cache</strong> </p>
<p><strong>自己设计本地缓存痛点：</strong></p>
<ul>
<li>不能按照一定的规则淘汰数据，如 LRU，LFU，FIFO 等。</li>
<li>清除数据时的回调通知</li>
<li>并发处理能力差，针对并发可以使用CurrentHashMap，但缓存的其他功能需要自行实现</li>
<li>缓存过期处理，缓存数据加载刷新等都需要手工实现</li>
</ul>
<p><strong>Guava Cache 的场景：</strong></p>
<ul>
<li>对性能有非常高的要求</li>
<li>不经常变化，占用内存不大</li>
<li>有访问整个集合的需求</li>
<li>数据允许不实时一致</li>
</ul>
<p><strong>Guava Cache 的优势</strong>：</p>
<ul>
<li>缓存过期和淘汰机制</li>
</ul>
<p>在GuavaCache中可以设置Key的过期时间，包括访问过期和创建过期。GuavaCache在缓存容量达到指定大小时，采用LRU的方式，将不常使用的键值从Cache中删除</p>
<ul>
<li>并发处理能力</li>
</ul>
<p>GuavaCache类似CurrentHashMap，是线程安全的。提供了设置并发级别的api，使得缓存支持并发的写入和读取，采用分离锁机制，分离锁能够减小锁力度，提升并发能力，分离锁是分拆锁定，把一个集合看分成若干partition, 每个partiton一把锁。更新锁定</p>
<ul>
<li>防止缓存击穿</li>
</ul>
<p>一般情况下，在缓存中查询某个key，如果不存在，则查源数据，并回填缓存。（Cache Aside Pattern）在高并发下会出现，多次查源并重复回填缓存，可能会造成源的宕机（DB），性能下降 GuavaCache可以在CacheLoader的load方法中加以控制，对同一个key，只让一个请求去读源并回填缓存，其他请求阻塞等待。（相当于集成数据源，方便用户使用）</p>
<ul>
<li>监控缓存加载&#x2F;命中情况</li>
</ul>
<p>统计</p>
<p><strong>问题：</strong></p>
<p>​    OOM-&gt;设置过期时间、使用弱引用、配置过期策略</p>
<h4 id="5、EVCache"><a href="#5、EVCache" class="headerlink" title="5、EVCache"></a>5、EVCache</h4><p>EVCache是一个Netflflix（网飞）公司开源、快速的分布式缓存，是基于Memcached的内存存储实现的，用以构建超大容量、高性能、低延时、跨区域的全球可用的缓存数据层。</p>
<p>E：Ephemeral：数据存储是短暂的，有自身的存活时间</p>
<p>V：Volatile：数据可以在任何时候消失</p>
<p>EVCache典型地适合对强一致性没有必须要求的场合</p>
<p>典型用例：Netflflix向用户推荐用户感兴趣的电影</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmapdnh0yaj30ku0aigmc.jpg" alt="image-20210103185340548" style="zoom:50%;" />

<p><strong>EVCache集群</strong>在峰值每秒可以处理<strong>200kb</strong>的请求，</p>
<p>Netflflix生产系统中部署的EVCache经常要处理超过<strong>每秒3000万个</strong>请求，存储数十亿个对象，</p>
<p>跨数千台memcached服务器。整个EVCache集群<strong>每天处理近2万亿个</strong>请求。</p>
<p>EVCache集群响应平均延时大约是1-5毫秒，最多不会超过20毫秒。</p>
<p>EVCache集群的缓存命中率在99%左右。</p>
<p><strong>典型部署</strong></p>
<p>EVCache 是线性扩展的，可以在一分钟之内完成扩容，在几分钟之内完成负载均衡和缓存预热。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmapg99q8lj30ix0f3jrw.jpg" alt="image-20210103185611516" style="zoom:50%;" />

<p>1、集群启动时，EVCache向服务注册中心（Zookeeper、Eureka）注册各个实例</p>
<p>2、在web应用启动时，查询命名服务中的EVCache服务器列表，并建立连接。</p>
<p>3、客户端通过key使用一致性hash算法，将数据分片到集群上。</p>
<h4 id="6、ETCD"><a href="#6、ETCD" class="headerlink" title="6、ETCD"></a>6、ETCD</h4><p>​    <strong>和Zookeeper一样，CP模型追求数据一致性，</strong>越来越多的系统开始用它保存关键数据。比如，秒杀系统经常用它<strong>保存各节点信</strong>息，以便控制消费 MQ 的服务数量。还有些业务系统的<strong>配置数据</strong>，也会通过 etcd 实时同步给业务系统的各节点，比如，秒杀管理后台会使用 etcd 将秒杀活动的<strong>配置数据实时同步给秒杀 API 服务各节点</strong>。</p>
<p>![image-20210418174251742](&#x2F;Users&#x2F;suhongliu&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20210418174251742.png)</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis底层"><a href="#Redis底层" class="headerlink" title="Redis底层"></a>Redis底层</h3><h4 id="1、redis数据类型"><a href="#1、redis数据类型" class="headerlink" title="1、redis数据类型"></a>1、redis数据类型</h4><table>
<thead>
<tr>
<th>类型</th>
<th>底层</th>
<th>应用场景</th>
<th>编码类型</th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>SDS数组</td>
<td>帖子、评论、热点数据、输入缓冲</td>
<td>RAW &lt;&lt; EMBSTR &lt;&lt; INT</td>
</tr>
<tr>
<td>List</td>
<td>QuickList</td>
<td>评论列表、商品列表、发布与订阅、慢查询、监视器</td>
<td>LINKEDLIST &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Set</td>
<td>intSet</td>
<td>适合交集、并集、查集操作，例如朋友关系</td>
<td>HT &lt;&lt; INSET</td>
</tr>
<tr>
<td>Zset</td>
<td>跳跃表</td>
<td>去重后排序，适合排名场景</td>
<td>SKIPLIST &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Hash</td>
<td>哈希</td>
<td>结构化数据，比如存储对象</td>
<td>HT &lt;&lt; ZIPLIST</td>
</tr>
<tr>
<td>Stream</td>
<td>紧凑列表</td>
<td>消息队列</td>
<td></td>
</tr>
</tbody></table>
<h4 id="2、相关API"><a href="#2、相关API" class="headerlink" title="2、相关API"></a><strong>2、相关API</strong></h4><blockquote>
<p><a href="http://redisdoc.com/">http://redisdoc.com</a></p>
</blockquote>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>String</td>
<td>SET</td>
<td>SETNX</td>
<td>SETEX</td>
<td>GET</td>
<td>GETSET</td>
<td>INCR</td>
<td>DECR</td>
<td>MSET</td>
<td>MGET</td>
</tr>
<tr>
<td>Hash</td>
<td>HSET</td>
<td>HSETNX</td>
<td>HGET</td>
<td>HDEL</td>
<td>HLEN</td>
<td>HMSET</td>
<td>HMGET</td>
<td>HKEYS</td>
<td>HGETALL</td>
</tr>
<tr>
<td>LIST</td>
<td>LPUSH</td>
<td>LPOP</td>
<td>RPUSH</td>
<td>RPOP</td>
<td>LINDEX</td>
<td>LREM</td>
<td>LRANGE</td>
<td>LLEN</td>
<td>RPOPLPUSH</td>
</tr>
<tr>
<td>ZSET</td>
<td>ZADD</td>
<td>ZREM</td>
<td>ZSCORE</td>
<td>ZCARD</td>
<td>ZRANGE</td>
<td>ZRANK</td>
<td>ZREVRANK</td>
<td></td>
<td>ZREVRANGE</td>
</tr>
<tr>
<td>SET</td>
<td>SADD</td>
<td>SREM</td>
<td>SISMEMBER</td>
<td>SCARD</td>
<td>SINTER</td>
<td>SUNION</td>
<td>SDIFF</td>
<td>SPOP</td>
<td>SMEMBERS</td>
</tr>
<tr>
<td>事务</td>
<td>MULTI</td>
<td>EXEC</td>
<td>DISCARD</td>
<td>WATCH</td>
<td>UNWATCH</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<h4 id="3、redis底层结构"><a href="#3、redis底层结构" class="headerlink" title="3、redis底层结构"></a>3、redis底层结构</h4><p><strong>SDS数组结构</strong>，用于存储字符串和整型数据及输入缓冲。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">struct sdshdr&#123; </span><br><span class="line">  <span class="type">int</span> len;<span class="comment">//记录buf数组中已使用字节的数量 </span></span><br><span class="line">  <span class="type">int</span> free; <span class="comment">//记录 buf 数组中未使用字节的数量 </span></span><br><span class="line">  <span class="type">char</span> buf[];<span class="comment">//字符数组，用于保存字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>跳跃表</strong>：将有序链表中的部分节点分层，每一层都是一个有序链表。</p>
<p>​    1、可以快速查找到需要的节点 O(logn) ，额外存储了一倍的空间</p>
<p>​    2、可以在O(1)的时间复杂度下，快速获得跳跃表的头节点、尾结点、长度和高度。            </p>
<p><strong>字典dict:</strong> 又称散列表(hash)，是用来存储键值对的一种数据结构。 </p>
<p>​    Redis整个数据库是用字典来存储的(K-V结构) —Hash+数组+链表</p>
<p>​    Redis字典实现包括:**字典(dict)、Hash表(dictht)、Hash表节点(dictEntry)**。</p>
<p>​    字典达到存储上限(阈值 0.75)，需要rehash(扩容)</p>
<p>​    1、初次申请默认容量为4个dictEntry，非初次申请为当前hash表容量的一倍。</p>
<p>​    2、rehashidx&#x3D;0表示要进行rehash操作。</p>
<p>​    3、新增加的数据在新的hash表h[1] 、修改、删除、查询在老hash表h[0]</p>
<p>​    4、将老的hash表h[0]的数据重新计算索引值后全部迁移到新的hash表h[1]中，这个过程称为 rehash。</p>
<p>​    <strong>渐进式rehash</strong></p>
<pre><code> 由于当数据量巨大时rehash的过程是非常缓慢的，所以需要进行优化。 可根据服务器空闲程度批量rehash部分节点
</code></pre>
<p><strong>压缩列表zipList</strong></p>
<p>​    压缩列表(ziplist)是由一系列特殊编码的连续内存块组成的顺序型数据结构，节省内容</p>
<p>​    <strong>sorted-set和hash元素个数少</strong>且是小整数或短字符串(直接使用) </p>
<p>​    list用快速链表(quicklist)数据结构存储，而<strong>快速链表是双向列表与压缩列表</strong>的组合。(间接使用)</p>
<p><strong>整数集合intSet</strong></p>
<p>​    整数集合(intset)是一个有序的(整数升序)、存储整数的连续存储结构。 </p>
<p>​    当Redis集合类型的元素都是整数并且都处在64位有符号整数范围内(2^64)，使用该结构体存储。</p>
<p><strong>快速列表quickList</strong></p>
<p>​    快速列表(quicklist)是Redis底层重要的数据结构。是Redis3.2列表的底层实现。</p>
<p>​    (在Redis3.2之前，Redis采 用双向链表(adlist)和压缩列表(ziplist)实现。)</p>
<p><strong>Redis Stream</strong>的底层主要使用了listpack(紧凑列表)和Rax树(基数树)。</p>
<p>​    <strong>listpack</strong>表示一个字符串列表的序列化，listpack可用于存储字符串或整数。用于存储stream的消息内 容。</p>
<p>​    <strong>Rax树</strong>是一个有序字典树 (基数树 Radix Tree)，按照 key 的字典序排列，支持快速地定位、插入和删除操 作。</p>
<h4 id="4、Zset底层实现"><a href="#4、Zset底层实现" class="headerlink" title="4、Zset底层实现"></a>4、Zset底层实现</h4><p>​        跳表(skip List)是一种随机化的数据结构，基于并联的链表，实现简单，插入、删除、查找的复杂度均为O(logN)。简单说来跳表也是链表的一种，只不过它在链表的基础上增加了跳跃功能，正是这个跳跃的功能，使得在查找元素时，跳表能够提供O(logN)的时间复杂度</p>
<p>​        Zset<strong>数据量少的时候使用压缩链表ziplist</strong>实现，有序集合使用紧挨在一起的压缩列表节点来保存，第一个节点保存member，第二个保存score。ziplist内的集合元素按score从小到大排序，score较小的排在表头位置。 <strong>数据量大的时候使用跳跃列表skiplist和哈希表hash_map</strong>结合实现，查找删除插入的时间复杂度都是O(longN)</p>
<p>​        Redis使用跳表而不使用红黑树，是因为跳表的索引结构序列化和反序列化更加快速，方便持久化。</p>
<p><strong>搜索</strong></p>
<p>​        跳跃表按 score 从小到大保存所有集合元素，查找时间复杂度为平均 <em>O(logN)，最坏 O(N) 。</em></p>
<p><strong>插入</strong></p>
<p>  选用链表作为底层结构支持，为了高效地动态增删。因为跳表底层的单链表是有序的，为了维护这种有序性，在插入前需要遍历链表，找到该插入的位置，单链表遍历查找的时间复杂度是O(n)，同理可得，跳表的遍历也是需要遍历索引数，所以是O(logn)。</p>
<p><strong>删除</strong></p>
<p>  如果该节点还在索引中，删除时不仅要删除单链表中的节点，还要删除索引中的节点；单链表在知道删除的节点是谁时，时间复杂度为O(1)，但针对单链表来说，删除时都需要拿到前驱节点O(logN)才可改变引用关系从而删除目标节点。</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis可用性"><a href="#Redis可用性" class="headerlink" title="Redis可用性"></a><strong>Redis可用性</strong></h3><h4 id="1、redis持久化"><a href="#1、redis持久化" class="headerlink" title="1、redis持久化"></a>1、redis持久化</h4><p>持久化就是把内存中的数据持久化到本地磁盘，防止服务器宕机了内存数据丢失</p>
<p>Redis 提供两种持久化机制 <strong>RDB（默认）</strong> 和 <strong>AOF 机制</strong>，Redis4.0以后采用混合持久化，用 AOF 来<strong>保证数据不丢失</strong>，作为数据恢复的第一选择; 用 RDB 来做不同程度的<strong>冷备</strong></p>
<p><strong>RDB：</strong>是Redis DataBase缩写快照</p>
<p>​        RDB是Redis默认的持久化方式。按照一定的时间将内存的数据以快照的形式保存到硬盘中，对应产生的数据文件为dump.rdb。通过配置文件中的save参数来定义快照的周期。</p>
<p>​    <strong>优点：</strong></p>
<p>​    1）只有一个文件 dump.rdb，方便持久化；</p>
<p>​    2）容灾性好，一个文件可以保存到安全的磁盘。</p>
<p>​    3）性能最大化，fork 子进程来进行持久化写操作，让主进程继续处理命令，只存在毫秒级不响应请求。</p>
<p>​    4）相对于数据集大时，比 AOF 的启动效率更高。</p>
<p>​    <strong>缺点：</strong></p>
<p>​    数据安全性低，RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。</p>
<p><strong>AOF：持久化</strong></p>
<p>​        AOF持久化(即Append Only File持久化)，则是将Redis执行的每次写命令记录到单独的日志文件中，当重启Redis会重新将持久化的日志中文件恢复数据。</p>
<p>​    <strong>优点：</strong></p>
<p>​    1）数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</p>
<p>​    2）通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</p>
<p><strong>缺点：</strong></p>
<p>​    1）AOF 文件比 RDB 文件大，且恢复速度慢。</p>
<p>​    2）数据集大的时候，比 rdb 启动效率低。</p>
<h4 id="2、redis事务"><a href="#2、redis事务" class="headerlink" title="2、redis事务"></a>2、redis事务</h4><p>​        事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</p>
<p><strong>Redis事务的概念</strong></p>
<p>​        Redis 事务的本质是通过MULTI、EXEC、WATCH等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。总结说：redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p>
<p>Redis的事务总是具有ACID中的<strong>一致性和隔离性</strong>，其他特性是不支持的。当服务器运行在AOF持久化模式下，并且appendfsync选项的值为always时，事务也具有耐久性。</p>
<p>Redis事务功能是通过MULTI、EXEC、DISCARD和WATCH 四个原语实现的</p>
<p><strong>事务命令：</strong></p>
<p><strong>MULTI：</strong>用于开启一个事务，它总是返回OK。MULTI执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当EXEC命令被调用时，所有队列中的命令才会被执行。</p>
<p><strong>EXEC：</strong>执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值 nil 。</p>
<p><strong>WATCH ：</strong>是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到EXEC命令。（<strong>秒杀场景</strong>）</p>
<p><strong>DISCARD：</strong>调用该命令，客户端可以清空事务队列，并放弃执行事务，且客户端会从事务状态中退出。</p>
<p><strong>UNWATCH</strong>：命令可以取消watch对所有key的监控。</p>
<h4 id="3、redis失效策略"><a href="#3、redis失效策略" class="headerlink" title="3、redis失效策略"></a>3、redis失效策略</h4><p><strong>内存淘汰策略</strong></p>
<p>1）全局的键空间选择性移除</p>
<p>​    <strong>noeviction</strong>：当内存不足以容纳新写入数据时，新写入操作会报错。（字典库常用）</p>
<p>​    <strong>allkeys-lru</strong>：在键空间中，移除最近最少使用的key。（缓存常用）</p>
<p>​    <strong>allkeys-random</strong>：在键空间中，随机移除某个key。</p>
<p>2）设置过期时间的键空间选择性移除</p>
<p>​    <strong>volatile-lru</strong>：在设置了过期时间的键空间中，移除最近最少使用的key。</p>
<p>​    <strong>volatile-random</strong>：在设置了过期时间的键空间中，随机移除某个key。</p>
<p>​    <strong>volatile-ttl</strong>：在设置了过期时间的键空间中，有更早过期时间的key优先移除。</p>
<p><strong>缓存失效策略</strong></p>
<p>​    <strong>定时清除：</strong>针对每个设置过期时间的key都创建指定定时器</p>
<p>​    <strong>惰性清除：</strong>访问时判断，对内存不友好</p>
<p>​    <strong>定时扫描清除：</strong>定时100ms随机20个检查过期的字典，若存在25%以上则继续循环删除。</p>
<h4 id="4、redis读写模式"><a href="#4、redis读写模式" class="headerlink" title="4、redis读写模式"></a>4、redis读写模式</h4><p>​    <strong>CacheAside旁路缓存</strong></p>
<p>写请求更新数据库后删除缓存数据。读请求不命中查询数据库，查询完成写入缓存</p>
<img src="https://img-blog.csdnimg.cn/20200806194316539.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 15%;" />

<img src="https://img-blog.csdnimg.cn/20200806194300826.png" style="zoom: 15%;" />

<p>​    业务端处理所有数据访问细节，同时利用 <strong>Lazy 计算</strong>的思想，更新 DB 后，直接删除 cache 并通过 DB 更新，确保数据以 DB 结果为准，则可以大幅降低 cache 和 DB 中数据不一致的概率</p>
<p>​    如果没有专门的存储服务，同时是对<strong>数据一致性要求比较高的业务，或者是缓存数据更新比较复杂的业务</strong>，适合使用 Cache Aside 模式。如微博发展初期，不少业务采用这种模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 延迟双删，用以保证最终一致性,防止小概率旧数据读请求在第一次删除后更新数据库</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(String key,Object data)</span>&#123;</span><br><span class="line">	redis.delKey(key);</span><br><span class="line">	db.updateData(data);</span><br><span class="line">	Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">	redis.delKey(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>高并发下保证绝对的一致，先删缓存再更新数据，需要用到<strong>内存队列做异步串行化</strong>。非高并发场景，先更新数据再删除缓存，<strong>延迟双删</strong>策略基本满足了</p>
<ul>
<li>先更新db后删除redis：删除redis失败则出现问题</li>
<li>先删redis后更新db：删除redis瞬间，旧数据被回填redis</li>
<li>先删redis后更新db休眠后删redis：同第二点，休眠后删除redis 可能宕机</li>
<li>java内部jvm队列：不适用分布式场景且降低并发</li>
</ul>
<p>​    <strong>Read&#x2F;Write Though</strong>（读写穿透）</p>
<p>​        <strong>先查询</strong>缓存中数据是否存在,如果存在则直接返回,如果<strong>不存在</strong>,则由<strong>缓存组件负责从数据库中同步加载数据.</strong></p>
<p>​    <img src="https://img-blog.csdnimg.cn/20200806194334623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%;" /></p>
<p>​    先查询要<strong>写入的数据在缓存中</strong>是否已经存在,如果已经存在,则<strong>更新缓存中的数据</strong>，并且由<strong>缓存组件同步更新</strong>到数据库中。</p>
<p>​    <img src="https://img-blog.csdnimg.cn/20200806194346642.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2x6eF92aWN0b3J5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" style="zoom: 50%" /></p>
<p>​    用户<strong>读操作</strong>较多.相较于Cache aside而言更适合缓存一致的场景。使用简单屏蔽了<strong>底层数据库的操作</strong>,只是操作缓存.</p>
<p><strong>场景：</strong></p>
<p>微博 Feed 的 Outbox Vector（即用户最新微博列表）就采用这种模式。一些粉丝较少且不活跃的用户发表微博后，Vector 服务会首先查询 Vector Cache，如果 cache 中没有该用户的 Outbox 记录，则不写该用户的 cache 数据，直接更新 DB 后就返回，只有 cache 中存在才会通过 CAS 指令进行更新。</p>
<p>​    </p>
<p><strong>Write Behind Caching（异步缓存写入）</strong></p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gorlsg74i6j31950e3dhs.jpg" alt="img" style="zoom:35%;" />

<p>比如对一些计数业务，一条 <strong>Feed 被点赞</strong> 1万 次，如果更新 1万 次 DB 代价很大，而合并成一次请求直接加 1万，则是一个非常轻量的操作。但这种模型有个显著的缺点，即数据的一致性变差，甚至在一些极端场景下可能会丢失数据。</p>
<h4 id="5、多级缓存"><a href="#5、多级缓存" class="headerlink" title="5、多级缓存"></a>5、多级缓存</h4><p><strong>浏览器本地内存缓存：</strong>专题活动，一旦上线，在活动期间是不会随意变更的。</p>
<p><strong>浏览器本地磁盘缓存：</strong>Logo缓存，大图片懒加载</p>
<p><strong>服务端本地内存缓存：</strong>由于没有持久化，重启时必定会被穿透</p>
<p><strong>服务端网络内存缓存</strong>：Redis等，针对穿透的情况下可以继续分层，必须保证数据库不被压垮</p>
<p><strong>为什么不是使用服务器本地磁盘做缓存？</strong></p>
<p>​    当系统处理大量磁盘 IO 操作的时候，由于 CPU 和内存的速度远高于磁盘，可能导致 CPU 耗费太多时间等待磁盘返回处理的结果。对于这部分 CPU 在 IO 上的开销，我们称为 <strong>iowait</strong></p>
<div style="page-break-after: always;"></div>

<h3 id="Redis七大经典问题"><a href="#Redis七大经典问题" class="headerlink" title="Redis七大经典问题"></a>Redis七大经典问题</h3><h4 id="1、缓存雪崩"><a href="#1、缓存雪崩" class="headerlink" title="1、缓存雪崩"></a>1、缓存雪崩</h4><p>​        指缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>​    <strong>解决方案：</strong></p>
<ul>
<li><p><strong>Redis 高可用</strong>，主从+哨兵，Redis cluster，避免全盘崩溃</p>
</li>
<li><p>本地 ehcache 缓存 + hystrix <strong>限流&amp;降级</strong>，避免 MySQL 被打死</p>
</li>
<li><p>缓存数据的<strong>过期时间设置随机</strong>，防止同一时间大量数据过期现象发生。</p>
</li>
<li><p><strong>逻辑上永不过期</strong>给每一个缓存数据增加相应的<strong>缓存标记</strong>，缓存标记失效则更新数据缓存</p>
</li>
<li><p><strong>多级缓存</strong>，失效时通过二级更新一级，由第三方插件更新二级缓存。</p>
</li>
</ul>
<h4 id="2、缓存穿透"><a href="#2、缓存穿透" class="headerlink" title="2、缓存穿透"></a><strong>2、缓存穿透</strong></h4><p>​        <a href="https://blog.csdn.net/lin777lin/article/details/105666839">https://blog.csdn.net/lin777lin/article/details/105666839</a></p>
<p>​        缓存穿透是指缓存和数据库中都没有的数据，导致所有的请求都落到数据库上，造成数据库短时间内承受大量请求而崩掉。</p>
<p>​    <strong>解决方案：</strong></p>
<p>​    1）<strong>接口层增加校验</strong>，如用户鉴权校验，id做基础校验，id&lt;&#x3D;0的直接拦截；</p>
<p>​    2）从缓存取不到的数据，在数据库中也没有取到，这时也可以将<strong>key-value对写为key-null</strong>，缓存有效时间可以设置短点，如30秒。这样可以防止攻击用户反复用同一个id暴力攻击；</p>
<p>​    3）采用<strong>布隆过滤器</strong>，将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。（宁可错杀一千不可放过一人）</p>
<h4 id="3、缓存击穿"><a href="#3、缓存击穿" class="headerlink" title="3、缓存击穿"></a><strong>3、缓存击穿</strong></h4><p>​        这时由于并发用户特别多，同时读缓存没读到数据，又同时去数据库去取数据，引起数据库压力瞬间增大，造成过大压力。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库</p>
<p>​    <strong>解决方案：</strong></p>
<p>​    1）设置<strong>热点数据永远不过期</strong>，异步线程处理。</p>
<p>​    2）加<strong>写回操作加互斥锁</strong>，查询失败默认值快速返回。</p>
<p>​    3）缓存预热</p>
<p>​        系统上线后，将相关<strong>可预期（例如排行榜）</strong>热点数据直接加载到缓存。</p>
<p>​        写一个缓存刷新页面，手动操作热点数据<strong>（例如广告推广）</strong>上下线。</p>
<h4 id="4、数据不一致"><a href="#4、数据不一致" class="headerlink" title="4、数据不一致"></a>4、数据不一致</h4><p>​    在缓存机器的带宽被打满，或者机房网络出现波动时，缓存更新失败，新数据没有写入缓存，就会导致缓存和 DB 的数据不一致。缓存 rehash 时，某个缓存机器反复异常，多次上下线，更新请求多次 rehash。这样，一份数据存在多个节点，且每次 rehash 只更新某个节点，导致一些缓存节点产生脏数据。</p>
<ul>
<li><p>Cache 更新失败后，可以进行重试，则将重试失败的 key 写入mq，待缓存访问恢复后，将这些 key 从缓存删除。这些 key 在再次被查询时，重新从 DB 加载，从而保证数据的一致性</p>
</li>
<li><p>缓存时间适当调短，让缓存数据及早过期后，然后从 DB 重新加载，确保数据的最终一致性。</p>
</li>
<li><p>不采用 rehash 漂移策略，而采用缓存分层策略，尽量避免脏数据产生。</p>
</li>
</ul>
<h4 id="5、数据并发竞争"><a href="#5、数据并发竞争" class="headerlink" title="5、数据并发竞争"></a>5、数据并发竞争</h4><p>​    数据并发竞争在大流量系统也比较常见，比如车票系统，如果某个火车车次缓存信息过期，但仍然有大量用户在查询该车次信息。又比如微博系统中，如果某条微博正好被缓存淘汰，但这条微博仍然有大量的转发、评论、赞。上述情况都会造成并发竞争读取的问题。</p>
<ul>
<li>​    加<strong>写回操作加互斥锁</strong>，查询失败默认值快速返回。</li>
<li>​    对缓存数据保持多个备份，减少并发竞争的概率</li>
</ul>
<p>​    </p>
<h4 id="6、热点key问题"><a href="#6、热点key问题" class="headerlink" title="6、热点key问题"></a>6、热点key问题</h4><p>​    明星结婚、离婚、出轨这种特殊突发事件，比如奥运、春节这些重大活动或节日，还比如秒杀、双12、618 等线上促销活动，都很容易出现 Hot key 的情况。</p>
<p>如何提前发现HotKey？</p>
<ul>
<li>对于重要节假日、线上促销活动这些提前已知的事情，可以提前评估出可能的热 key 来。</li>
<li>而对于突发事件，无法提前评估，可以<strong>通过 Spark，对应流任务进行实时分析</strong>，及时发现新发布的热点 key。而对于之前已发出的事情，逐步发酵成为热 key 的，则可以通过 Hadoop 对批处理任务离线计算，找出最近历史数据中的高频热 key。</li>
</ul>
<p><strong>解决方案：</strong></p>
<ul>
<li><p>这 n 个 key 分散存在多个缓存节点，然后 client 端请求时，随机访问其中某个后缀的 hotkey，这样就可以把热 key 的请求打散，避免一个缓存节点过载</p>
</li>
<li><p>缓存集群可以单节点进行主从复制和垂直扩容</p>
</li>
<li><p>利用应用内的前置缓存，但是需注意需要设置上限</p>
</li>
<li><p>延迟不敏感，定时刷新，实时感知用主动刷新</p>
</li>
<li><p>和缓存穿透一样，限制逃逸流量，单请求进行数据回源并刷新前置</p>
</li>
<li><p>无论如何设计，最后都要写一个兜底逻辑，千万级流量说来就来</p>
</li>
</ul>
<h4 id="7、BigKey问题"><a href="#7、BigKey问题" class="headerlink" title="7、BigKey问题"></a>7、BigKey问题</h4><p>​    比如互联网系统中需要保存用户最新 1万 个粉丝的业务，比如一个用户个人信息缓存，包括基本资料、关系图谱计数、发 feed 统计等。微博的 feed 内容缓存也很容易出现，一般用户微博在 140 字以内，但很多用户也会发表 1千 字甚至更长的微博内容，这些长微博也就成了大 key</p>
<ul>
<li>首先Redis底层数据结构里，根据Value的不同，会进行数据结构的重新选择</li>
<li>可以扩展新的数据结构，进行序列化构建，然后通过 restore 一次性写入</li>
<li>将大 key 分拆为多个 key，设置较长的过期时间</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="Redis分区容错"><a href="#Redis分区容错" class="headerlink" title="Redis分区容错"></a>Redis分区容错</h3><h4 id="1、redis数据分区"><a href="#1、redis数据分区" class="headerlink" title="1、redis数据分区"></a><strong>1、redis数据分区</strong></h4><p><strong>Hash：（不稳定）</strong></p>
<p>​        客户端分片：哈希+取余</p>
<p>​        节点伸缩：数据节点关系变化，导致数据迁移</p>
<p>​        迁移数量和添加节点数量有关：建议翻倍扩容</p>
<p>​        一个简单直观的想法是直接用Hash来计算，以Key做哈希后对节点数取模。可以看出，在key足够分散的情况下，均匀性可以获得，但一旦有节点加入或退出，所有的原有节点都会受到影响，稳定性无从谈起。</p>
<p><strong>一致性Hash：（不均衡）</strong></p>
<p>​        客户端分片：哈希+顺时针（优化取余）</p>
<p>​        节点伸缩：只影响邻近节点，但是还是有数据迁移</p>
<p>​        翻倍伸缩：保证最小迁移数据和负载均衡</p>
<p>​        一致性Hash可以很好的解决稳定问题，可以将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会顺时针找到先遇到的一组存储节点存放。而当有节点加入或退出时，仅影响该节点在Hash环上顺时针相邻的后续节点，将数据从该节点接收或者给予。但这又带来均匀性的问题，即使可以将存储节点等距排列，也会在<strong>存储节点个数变化时带来数据的不均匀</strong>。</p>
<p><strong>Codis的Hash槽</strong></p>
<p>​        Codis 将所有的 key 默认划分为 1024 个槽位(slot)，它首先对客户端传过来的 key 进行 crc32 运算计算 哈希值，再将 hash 后的整数值对 1024 这个整数进行取模得到一个余数，这个余数就是对应 key 的槽位。</p>
<p><strong>RedisCluster</strong></p>
<p>​        Redis-cluster把所有的物理节点映射到[0-16383]个<strong>slot</strong>上,对key采用crc16算法得到hash值后对16384取模，基本上采用平均分配和连续分配的方式。</p>
<h4 id="2、主从模式-x3D-简单"><a href="#2、主从模式-x3D-简单" class="headerlink" title="2、主从模式&#x3D;简单"></a><strong>2、主从模式&#x3D;简单</strong></h4><p>​    主从模式最大的优点是<strong>部署简单</strong>，最少<strong>两个节点便可以构成主从模式</strong>，并且可以通过<strong>读写分离避免读和写同时不可用</strong>。不过，一旦 Master 节点出现故障，主从节点就<strong>无法自动切换</strong>，直接导致 SLA 下降。所以，主从模式一般<strong>适合业务发展初期，并发量低，运维成本低</strong>的情况</p>
<img src="https://s0.lgstatic.com/i/image/M00/80/25/Ciqc1F_QgPOAaL8TAAC5EiNlvo4795.png" alt="Drawing 1.png" style="zoom:50%;" />



<p><strong>主从复制原理：</strong></p>
<p>​    ①通过从服务器发送到PSYNC命令给主服务器</p>
<p>​    ②如果是首次连接，触发一次<strong>全量复制</strong>。此时主节点会启动一个后台线程，生成 RDB 快照文件</p>
<p>​    ③主节点会将这个 RDB 发送给从节点，slave 会先写入本地磁盘，再从本地磁盘加载到内存中</p>
<p>​    ④master会将此过程中的写命令写入缓存，从节点<strong>实时同步</strong>这些数据</p>
<p>​    ⑤如果网络断开了连接，自动重连后主节点通过命令传播<strong>增量复制</strong>给从节点部分缺少的数据</p>
<p><strong>缺点</strong></p>
<p>​    所有的slave节点数据的复制和同步都由master节点来处理，会照成master节点压力太大，使用主从从结构来解决，redis4.0中引入psync2 解决了slave重启后仍然可以增量同步。</p>
<h4 id="3、哨兵模式-x3D-读多"><a href="#3、哨兵模式-x3D-读多" class="headerlink" title="3、哨兵模式&#x3D;读多"></a>3、<strong>哨兵模式</strong>&#x3D;读多</h4><p>​    由一个或多个sentinel实例组成sentinel集群可以监视一个或多个主服务器和多个从服务器。<strong>哨兵模式适合读请求远多于写请求的业务场景，比如在秒杀系统</strong>中用来缓存活动信息。 如果写请求较多，当集群 Slave 节点数量多了后，Master 节点同步数据的压力会非常大。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gluq6vlvglj30nw0e076f.jpg" alt="image-20201220231241725" style="zoom:50%;" />

<p>当主服务器进入下线状态时，sentinel可以将该主服务器下的某一从服务器升级为主服务器继续提供服务，从而保证redis的高可用性。</p>
<p><strong>检测主观下线状态</strong></p>
<p>​    Sentinel每秒一次向所有与它建立了命令连接的实例(主服务器、从服务器和其他Sentinel)发送PING命 令</p>
<p>​    实例在down-after-milliseconds毫秒内返回无效回复Sentinel就会认为该实例主观下线(<strong>SDown</strong>)</p>
<p><strong>检查客观下线状态</strong></p>
<p>​    当一个Sentinel将一个主服务器判断为主观下线后 ，Sentinel会向监控这个主服务器的所有其他Sentinel发送查询主机状态的命令</p>
<p>​    如果达到Sentinel配置中的quorum数量的Sentinel实例都判断主服务器为主观下线，则该主服务器就会被判定为客观下线(<strong>ODown</strong>)。</p>
<p><strong>选举Leader Sentinel</strong> </p>
<p>​    当一个主服务器被判定为客观下线后，监视这个主服务器的所有Sentinel会通过选举算法(raft)，选出一个Leader Sentinel去执行**failover(故障转移)**操作。</p>
<p>​    <strong>Raft算法</strong></p>
<p>​    Raft协议是用来解决分布式系统一致性问题的协议。 Raft协议描述的节点共有三种状态:Leader, Follower, Candidate。 Raft协议将时间切分为一个个的Term(任期)，可以认为是一种“逻辑时间”。 选举流程:<br>     ①Raft采用心跳机制触发Leader选举系统启动后，全部节点初始化为Follower，term为0</p>
<p>​     ②节点如果收到了RequestVote或者AppendEntries，就会保持自己的Follower身份 </p>
<p>​     ③节点如果一段时间内没收到AppendEntries消息，在该节点的超时时间内还没发现Leader，Follower就会转换成Candidate，自己开始竞选Leader。 一旦转化为Candidate，该节点立即开始下面几件事情:<br>​        –增加自己的term，启动一个新的定时器<br>​        –给自己投一票，向所有其他节点发送RequestVote，并等待其他节点的回复。</p>
<p>​     ④如果在计时器超时前，节点收到多数节点的同意投票，就转换成Leader。同时通过 AppendEntries，向其他节点发送通知。</p>
<p>​     ⑤每个节点在一个term内只能投一票，采取先到先得的策略，Candidate投自己， Follower会投给第一个收到RequestVote的节点。</p>
<p>​     ⑥Raft协议的定时器采取随机超时时间（选举的关键），先转为Candidate的节点会先发起投票，从而获得多数票。</p>
<p><strong>主服务器的选择</strong></p>
<p>​    当选举出Leader Sentinel后，Leader Sentinel会根据以下规则去从服务器中选择出新的主服务器。</p>
<ol>
<li>过滤掉主观、客观下线的节点</li>
<li>选择配置slave-priority最高的节点，如果有则返回没有就继续选择</li>
<li>选择出复制偏移量最大的系节点，因为复制偏移量越大则数据复制的越完整</li>
<li>选择run_id最小的节点，因为run_id越小说明重启次数越少</li>
</ol>
<p><strong>故障转移</strong></p>
<p>​    当Leader Sentinel完成新的主服务器选择后，Leader Sentinel会对下线的主服务器执行故障转移操作，主要有三个步骤:</p>
<p>​    1、它会将失效 Master 的其中一个 Slave 升级为新的 Master , 并让失效 Master 的其他 Slave 改为复制新的 Master ;</p>
<p>​    2、当客户端试图连接失效的 Master 时，集群会向客户端返回新 Master 的地址，使得集群当前状态只有一个Master。</p>
<p>​    3、Master 和 Slave 服务器切换后， Master 的 redis.conf 、 Slave 的 redis.conf 和 sentinel.conf 的配置文件的内容都会发生相应的改变，即 Master 主服务器的 redis.conf配置文件中会多一行 replicaof 的配置， sentinel.conf 的监控目标会随之调换。</p>
<h4 id="4、集群模式-x3D-写多"><a href="#4、集群模式-x3D-写多" class="headerlink" title="4、集群模式&#x3D;写多"></a>4、集群模式&#x3D;写多</h4><p>​    为了避免单一节点负载过高导致不稳定，集群模式采用<strong>一致性哈希算法或者哈希槽的方法</strong>将 Key 分布到各个节点上。其中，每个 Master 节点后跟若干个 Slave 节点，用于<strong>出现故障时做主备切换</strong>，客户端可以<strong>连接任意 Master 节点</strong>，集群内部会按照<strong>不同 key 将请求转发到不同的 Master</strong> 节点</p>
<p>​    集群模式是如何实现高可用的呢？集群内部节点之间会<strong>互相定时探测</strong>对方是否存活，如果多数节点判断某个节点挂了，则会将其踢出集群，然后从 <strong>Slave</strong> 节点中选举出一个节点<strong>替补</strong>挂掉的 Master 节点。<strong>整个原理基本和哨兵模式一致</strong></p>
<p>​    虽然集群模式避免了 Master 单节点的问题，但<strong>集群内同步数据时会占用一定的带宽</strong>。所以，只有在<strong>写操作比较多的情况下人们才使用集群模式</strong>，其他大多数情况，使用<strong>哨兵模式</strong>都能满足需求</p>
<h4 id="5、分布式锁"><a href="#5、分布式锁" class="headerlink" title="5、分布式锁"></a>5、分布式锁</h4><p><strong>利用Watch实现Redis乐观锁</strong></p>
<p>​    乐观锁基于CAS(Compare And Swap)比较并替换思想，不会产生锁等待而消耗资源，但是需要反复的重试，但也是因为重试的机制，能比较快的响应。因此我们可以利用redis来实现乐观锁<strong>（秒杀）</strong>。具体思路如下:</p>
<p>1、利用redis的watch功能，监控这个redisKey的状态值<br>2、获取redisKey的值，创建redis事务，给这个key的值+1<br>3、执行这个事务，如果key的值被修改过则回滚，key不加1</p>
<p><strong>利用setnx防止库存超卖</strong><br>    分布式锁是控制分布式系统之间同步访问共享资源的一种方式。 利用Redis的单线程特性对共享资源进行串行化处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取锁推荐使用set的方式</span></span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;EX&quot;</span>, expireTime);</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> jedis.setnx(lockKey, requestId); <span class="comment">//如线程死掉，其他线程无法获取到锁</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 释放锁，非原子操作，可能会释放其他线程刚加上的锁</span></span><br><span class="line"><span class="keyword">if</span> (requestId.equals(jedis.get(lockKey))) &#123; </span><br><span class="line">  jedis.del(lockKey);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 推荐使用redis+lua脚本</span></span><br><span class="line"><span class="type">String</span> <span class="variable">lua</span> <span class="operator">=</span> <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line"><span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> jedis.eval(lua, Collections.singletonList(lockKey),</span><br></pre></td></tr></table></figure>



<p><strong>分布式锁存在的问题</strong>：</p>
<ul>
<li><strong>客户端长时间阻塞导致锁失效问题</strong></li>
</ul>
<p>​    计算时间内异步启动另外一个线程去检查的问题，这个key是否超时，当锁超时时间快到期且逻辑未执行完，延长锁超时时间。</p>
<ul>
<li><p>**Redis服务器时钟漂移问题导致同时加锁<br>redis的过期时间是依赖系统时钟的，如果时钟漂移过大时 理论上是可能出现的 **会影响到过期时间的计算。</p>
</li>
<li><p><strong>单点实例故障，锁未及时同步导致丢失</strong></p>
<p><strong>RedLock算法</strong></p>
</li>
</ul>
<ol>
<li><p>获取当前时间戳T0，配置时钟漂移误差T1</p>
</li>
<li><p>短时间内逐个获取全部N&#x2F;2+1个锁，结束时间点T2</p>
</li>
<li><p>实际锁能使用的处理时长变为：TTL - （T2 - T0）- T1</p>
<p>该方案通过多节点来<strong>防止Redis的单点故障</strong>，效果一般，也无法防止：</p>
</li>
</ol>
<ul>
<li><p><strong>主从切换导致的两个客户端同时持有锁</strong></p>
<p>大部分情况下<strong>持续时间极短</strong>，而且使用<strong>Redlock在切换的瞬间</strong>获取到节点的锁，也存在问题。已经是极低概率的时间，无法避免。<strong>Redis分布式锁适合幂等性事务</strong>，如果一定要<strong>保证安全</strong>，应该<strong>使用Zookeeper或者DB</strong>，但是，<strong>性能会急剧下降</strong>。</p>
</li>
</ul>
<p><strong>与zookeeper分布式锁对比</strong></p>
<ul>
<li>redis 分布式锁，其实<strong>需要自己不断去尝试获取锁</strong>，比较消耗性能。</li>
<li>zk 分布式锁，注册个监听器即可，不需要不断主动尝试获取锁，ZK获取锁会按照加锁的顺序，所以是公平锁，性能和mysql差不多，和redis差别大</li>
</ul>
<p><strong>Redission生产环境的分布式锁</strong></p>
<p>​    Redisson是基于NIO的Netty框架上的一个Java驻内存数据网格(In-Memory Data Grid)分布式锁开源组件。 </p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1glurlfrrp4j30qk0g876c.jpg" alt="image-20201221000119586" style="zoom:67%;" />

<p>但当业务必须要数据的强一致性，即不允许重复获得锁，比如金融场景(重复下单，重复转账)，<strong>请不要使用redis分布式锁</strong>。可以使用CP模型实现，比如:<strong>zookeeper和etcd。</strong></p>
<table>
<thead>
<tr>
<th></th>
<th>Redis</th>
<th>zookeeper</th>
<th>etcd</th>
</tr>
</thead>
<tbody><tr>
<td>一致性算法</td>
<td>无</td>
<td>paxos(ZAB)</td>
<td>raft</td>
</tr>
<tr>
<td>CAP</td>
<td>AP</td>
<td>CP</td>
<td>CP</td>
</tr>
<tr>
<td>高可用</td>
<td>主从集群</td>
<td>n+1</td>
<td>n+1</td>
</tr>
<tr>
<td>实现</td>
<td>setNX</td>
<td>createNode</td>
<td>restfulAPI</td>
</tr>
</tbody></table>
<h4 id="6、redis心跳检测"><a href="#6、redis心跳检测" class="headerlink" title="6、redis心跳检测"></a>6、redis心跳检测</h4><p>在命令传播阶段，从服务器默认会以每秒一次的频率向主服务器发送ACK命令:</p>
<p>​    1、检测主从的连接状态 检测主从服务器的网络连接状态</p>
<p>​            lag的值应该在0或1之间跳动，如果超过1则说明主从之间的连接有 故障。</p>
<p>​    2、辅助实现min-slaves,Redis可以通过配置防止主服务器在不安全的情况下执行写命令</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">min-slaves-to-write</span> <span class="number">3</span> <span class="string">(min-replicas-to-write</span> <span class="number">3</span> <span class="string">)</span></span><br><span class="line"></span><br><span class="line"><span class="string">min-slaves-max-lag</span> <span class="number">10</span> <span class="string">(min-replicas-max-lag</span> <span class="number">10</span><span class="string">)</span></span><br></pre></td></tr></table></figure>

<p>​        上面的配置表示:从服务器的数量少于3个，或者三个从服务器的延迟(lag)值都大于或等于10 秒时，主服务器将拒绝执行写命令。</p>
<p>​    3、检测命令丢失，增加重传机制</p>
<p>​        如果因为网络故障，主服务器传播给从服务器的写命令在半路丢失，那么当从服务器向主服务器发 送REPLCONF ACK命令时，主服务器将发觉从服务器当前的复制偏移量少于自己的复制偏移量， 然后主服务器就会根据从服务器提交的复制偏移量，在复制积压缓冲区里面找到从服务器缺少的数据，并将这些数据重新发送给从服务器。</p>
<div style="page-break-after: always;"></div>

<h3 id="Redis实战"><a href="#Redis实战" class="headerlink" title="Redis实战"></a>Redis实战</h3><h4 id="1、Redis优化"><a href="#1、Redis优化" class="headerlink" title="1、Redis优化"></a>1、Redis优化</h4><p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gorm5m7b4gj30uy0hjwfp.jpg" alt="img"></p>
<p><strong>读写方式</strong><br>    简单来说就是不用<strong>keys</strong>等，用<strong>range、contains</strong>之类。比如，用户粉丝数，大 V 的粉丝更是高达几千万甚至过亿，因此，获取粉丝列表只能部分获取。另外在判断某用户是否关注了另外一个用户时，也只需要关注列表上进行检查判断，然后返回 True&#x2F;False 或 0&#x2F;1 的方式更为高效。</p>
<p><strong>KV size</strong><br>    如果单个业务的 KV size 过大，需要分拆成多个 KV 来缓存。拆分时应<strong>考虑访问频率</strong></p>
<p><strong>key 的数量</strong><br>    如果数据量巨大，则在缓存中尽可能只保留频繁访问的热数据，对于冷数据直接访问 DB。</p>
<p><strong>读写峰值</strong><br>    如果小于 10万 级别，简单分拆到独立 Cache 池即可<br>    如果达到 100万 级的QPS，则需要对 Cache 进行分层处理，可以同时使用 Local-Cache 配合远程 cache，甚至远程缓存内部继续分层叠加分池进行处理。<strong>（多级缓存）</strong></p>
<p><strong>命中率</strong><br>    缓存的命中率对整个服务体系的性能影响甚大。对于核心高并发访问的业务，需要预留足够的容量，确保核心业务缓存维持较高的命中率。比如微博中的 Feed Vector Cache（<strong>热点资讯</strong>），常年的命中率高达 99.5% 以上。为了持续保持缓存的命中率，缓存体系需要持续监控，及时进行故障处理或故障转移。同时在部分缓存节点异常、命中率下降时，故障转移方案，需要考虑是采用一致性 Hash 分布的访问漂移策略，还是采用数据多层备份策略。</p>
<p><strong>过期策略</strong></p>
<p>​    可以设置较短的过期时间，让冷 key 自动过期；也可以让 key 带上时间戳，同时设置较长的过期时间，比如很多业务系统内部有这样一些 key：key_20190801。</p>
<p><strong>缓存穿透时间</strong><br>    平均缓存穿透加载时间在某些业务场景下也很重要，对于一些缓存穿透后，加载时间特别长或者需要复杂计算的数据，而且访问量还比较大的业务数据，要配置更多容量，维持更高的命中率，从而减少穿透到 DB 的概率，来确保整个系统的访问性能。</p>
<p><strong>缓存可运维性</strong><br>    对于缓存的可运维性考虑，则需要考虑缓存体系的集群管理，如何进行一键扩缩容，如何进行缓存组件的升级和变更，如何快速发现并定位问题，如何持续监控报警，最好有一个完善的运维平台，将各种运维工具进行集成。</p>
<p><strong>缓存安全性</strong><br>    对于缓存的安全性考虑，一方面可以限制来源 IP，只允许内网访问，同时加密鉴权访问。</p>
<h4 id="2、Redis热升级"><a href="#2、Redis热升级" class="headerlink" title="2、Redis热升级"></a>2、Redis热升级</h4><blockquote>
<p>在 Redis 需要升级版本或修复 bug 时，如果直接重启变更，由于需要数据恢复，这个过程需要近 10 分钟的时间，时间过长，会严重影响系统的可用性。面对这种问题，可以对 Redis 扩展热升级功能，从而在毫秒级完成升级操作，完全不影响业务访问。</p>
</blockquote>
<p>热升级方案如下，首先构建一个 Redis 壳程序，将 redisServer 的所有属性（包括redisDb、client等）保存为全局变量。然后将 Redis 的处理逻辑代码全部封装到动态连接库 so 文件中。Redis 第一次启动，从磁盘加载恢复数据，在后续升级时，通过指令，壳程序重新加载 Redis 新的 redis-4.so 到 redis-5.so 文件，即可完成功能升级，毫秒级完成 Redis 的版本升级。而且整个过程中，所有 Client 连接仍然保留，在升级成功后，原有 Client 可以继续进行读写操作，整个过程对业务完全透明。</p>
<h1 id="六、Kafka篇"><a href="#六、Kafka篇" class="headerlink" title="六、Kafka篇"></a>六、Kafka篇</h1><h3 id="Why-kafka"><a href="#Why-kafka" class="headerlink" title="Why kafka"></a>Why kafka</h3><p>消息队列的作用：<strong>异步、削峰填谷、解耦</strong></p>
<p><strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 <strong>RabbitMQ</strong> （开源、社区活跃）是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 <strong>RocketMQ</strong>（Java二次开发） 是很好的选择。</p>
<p>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 <strong>Kafka</strong> 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</p>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfiyienm0j30zu0hago7.jpg" alt="image-20210107225921930" style="zoom:50%;" />



<p><strong>RabbitMQ</strong></p>
<p>RabbitMQ开始是用在电信业务的可靠通信的，也是少有的几款<strong>支持AMQP</strong>协议的产品之一。</p>
<p><strong>优点：</strong></p>
<ul>
<li>轻量级，快速，部署使用方便</li>
<li>支持灵活的路由配置。RabbitMQ中，在生产者和队列之间有一个交换器模块。根据配置的路由规则，生产者发送的消息可以发送到不同的队列中。路由规则很灵活，还可以自己实现。</li>
<li>RabbitMQ的客户端支持大多数的编程语言，支持<strong>AMQP</strong>协议。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmfjicxzb2j30u80hx0uw.jpg" alt="image-20210107231826261" style="zoom:40%;" />

<p><strong>缺点：</strong></p>
<ul>
<li>如果有大量消息堆积在队列中，性能会急剧下降</li>
<li>每秒处理几万到几十万的消息。如果应用要求高的性能，不要选择RabbitMQ。 </li>
<li>RabbitMQ是Erlang开发的，功能扩展和二次开发代价很高。</li>
</ul>
<p><strong>RocketMQ</strong></p>
<p>借鉴了Kafka的设计并做了很多改进，<strong>几乎具备了消息队列应该具备的所有特性和功能</strong>。</p>
<ul>
<li>RocketMQ主要用于有序，事务，流计算，消息推送，日志流处理，binlog分发等场景。</li>
<li>经过了历次的双11考验，性能，稳定性可靠性没的说。</li>
<li>java开发，阅读源代码、扩展、二次开发很方便。</li>
<li>对电商领域的响应延迟做了很多优化。</li>
<li>每秒处理几十万的消息，同时响应在毫秒级。如果应用很关注响应时间，可以使用RocketMQ。</li>
<li>性能比RabbitMQ高一个数量级，。</li>
<li>支持死信队列，DLX 是一个非常有用的特性。它可以处理<strong>异常情况下，消息不能够被消费者正确消费而被置入死信队列中</strong>的情况，后续分析程序可以通过消费这个死信队列中的内容来分析当时所遇到的异常情况，进而可以<strong>改善和优化系统</strong>。</li>
</ul>
<p><strong>缺点</strong>：</p>
<p>​    跟周边系统的整合和兼容不是很好。</p>
<p><strong>Kafka</strong></p>
<p><strong>高可用</strong>，几乎所有相关的开源软件都支持，满足大多数的应用场景，尤其是<strong>大数据和流计算</strong>领域，</p>
<ul>
<li>Kafka高效，可伸缩，消息持久化。支持分区、副本和容错。</li>
<li>对批处理和异步处理做了大量的设计，因此Kafka可以得到非常高的性能。</li>
<li>每秒处理几十万异步消息消息，如果开启了压缩，最终可以达到每秒处理2000w消息的级别。</li>
<li>但是由于是异步的和批处理的，延迟也会高，不适合电商场景。</li>
</ul>
<h3 id="What-Kafka"><a href="#What-Kafka" class="headerlink" title="What Kafka"></a>What Kafka</h3><ul>
<li>Producer API：允许应用程序将记录流发布到一个或多个Kafka主题。</li>
<li>Consumer API：允许应用程序订阅一个或多个主题并处理为其生成的记录流。</li>
<li>Streams API：允许应用程序充当流处理器，将输入流转换为输出流。</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gme95cirjfj31000kb41j.jpg" alt="image-20210106203420526" style="zoom: 40%;" />



<p><strong>消息Message</strong></p>
<p>​    Kafka的数据单元称为消息。可以把消息看成是数据库里的一个“数据行”或一条“记录”。</p>
<p><strong>批次</strong></p>
<p>​    为了提高效率，消息被分批写入Kafka。提高吞吐量却加大了响应时间</p>
<p><strong>主题Topic</strong></p>
<p>​    通过主题进行分类，类似数据库中的表，</p>
<p><strong>分区Partition</strong></p>
<p>​    Topic可以被分成若干分区分布于kafka集群中，方便扩容</p>
<p>​    单个分区内是有序的，partition设置为一才能保证全局有序</p>
<p><strong>副本Replicas</strong></p>
<p>​    每个主题被分为若干个分区，每个分区有多个副本。</p>
<p><strong>生产者Producer</strong></p>
<p>​    生产者在默认情况下把<strong>消息均衡地分布</strong>到主题的所有分区上：</p>
<ul>
<li>直接指定消息的分区</li>
<li>根据消息的key散列取模得出分区</li>
<li>轮询指定分区。</li>
</ul>
<p><strong>消费者Comsumer</strong></p>
<p>​    消费者通过<strong>偏移量</strong>来区分已经读过的消息，从而消费消息。把每个分区最后读取的消息偏移量保存在Zookeeper 或Kafka上，如果消费者关闭或重启，它的<strong>读取状态不会丢失</strong>。</p>
<p><strong>消费组ComsumerGroup</strong></p>
<p>​    消费组保证<strong>每个分区只能被一个消费者</strong>使用，避免重复消费。如果群组内一个<strong>消费者失效</strong>，消费组里的其他消费者可以<strong>接管失效消费者的工作再平衡</strong>，重新分区</p>
<p><strong>节点Broker</strong></p>
<p>​    连接生产者和消费者，<strong>单个</strong>broker<strong>可以轻松处理</strong>数千个分区<strong>以及</strong>每秒百万级的消息量。</p>
<ul>
<li>broker接收来自生产者的消息，为消息设置偏移量，并提交<strong>消息到磁盘保存</strong>。</li>
<li>broker为消费者提供服务，响应读取分区的请求，<strong>返回已经提交到磁盘上的消息</strong>。</li>
</ul>
<p><strong>集群</strong></p>
<p>​    每隔分区都有一个<strong>首领</strong>，当分区被分配给多个broker时，会通过首领进行<strong>分区复制</strong>。    </p>
<p><strong>生产者Offset</strong></p>
<p>​    消息写入的时候，每一个分区都有一个offset，即每个分区的最新最大的offset。</p>
<p><strong>消费者Offset</strong></p>
<p>​    不同消费组中的消费者可以针对一个分区存储不同的Offset，互不影响</p>
<p><strong>LogSegment</strong></p>
<ul>
<li>一个分区由多个LogSegment组成，</li>
<li>一个LogSegment由<code>.log .index .timeindex</code>组成</li>
<li><code>.log</code>追加是顺序写入的，文件名是以文件中第一条message的offset来命名的</li>
<li><code>.Index</code>进行日志删除的时候和数据查找的时候可以快速定位。</li>
<li><code>.timeStamp</code>则根据<strong>时间戳查找对应的偏移量</strong>。</li>
</ul>
<h3 id="How-Kafka"><a href="#How-Kafka" class="headerlink" title="How Kafka"></a>How Kafka</h3><p><strong>优点</strong></p>
<ul>
<li><strong>高吞吐量</strong>：单机每秒处理几十上百万的消息量。即使存储了TB及消息，也保持稳定的性能。<ul>
<li><strong>零拷贝</strong> 减少内核态到用户态的拷贝，磁盘通过sendfile实现<strong>DMA</strong> 拷贝Socket buffer</li>
<li><strong>顺序读写</strong> 充分利用磁盘顺序读写的超高性能</li>
<li><strong>页缓存mmap</strong>，将磁盘文件<strong>映射</strong>到内存, 用户通过修改内存就能修改磁盘文件。</li>
</ul>
</li>
<li><strong>高性能</strong>：单节点支持上千个客户端，并保证零停机和零数据丢失。</li>
<li><strong>持久化</strong>：将消息持久化到磁盘。通过将数据持久化到硬盘以及replication防止数据丢失。</li>
<li><strong>分布式系统</strong>，易扩展。所有的组件均为分布式的，无需停机即可扩展机器。</li>
<li><strong>可靠性</strong> - Kafka是分布式，分区，复制和容错的。</li>
<li><strong>客户端状态维护</strong>：消息被处理的状态是在Consumer端维护，当失败时能自动平衡。</li>
</ul>
<p><strong>应用场景</strong></p>
<ul>
<li><strong>日志收集：</strong>用Kafka可以收集各种服务的Log，通过大数据平台进行处理；</li>
<li><strong>消息系统：</strong>解耦生产者和消费者、缓存消息等；</li>
<li><strong>用户活动跟踪：</strong>Kafka经常被用来记录Web用户或者App用户的各种活动，如浏览网页、搜索、点击等活动，这些活动信息被各个服务器发布到Kafka的Topic中，然后消费者通过订阅这些Topic来做<strong>运营数据</strong>的实时的监控分析，也可保存到数据库；</li>
</ul>
<h3 id="生产消费基本流程"><a href="#生产消费基本流程" class="headerlink" title="生产消费基本流程"></a><strong>生产消费基本流程</strong></h3><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmeb1cw09gj313m0kgwgb.jpg" alt="image-20210106213944461" style="zoom:40%;" />

<ol>
<li><p>Producer创建时，会创建一个Sender线程并设置为守护线程。</p>
</li>
<li><p>生产的消息先经过拦截器-&gt;序列化器-&gt;分区器，然后将消息缓存在缓冲区。</p>
</li>
<li><p>批次发送的条件为：缓冲区数据大小达到<strong>batch.size</strong>或者<strong>linger.ms</strong>达到上限。</p>
</li>
<li><p>批次发送后，发往指定分区，然后落盘到broker；</p>
<ul>
<li><p><strong>acks&#x3D;0</strong>只要将消息放到缓冲区，就认为消息已经发送完成。</p>
</li>
<li><p><strong>acks&#x3D;1</strong>表示消息<strong>只需要写到主分区</strong>即可。在该情形下，如果主分区收到消息确认之后就宕机了，而副本分区还没来得及同步该消息，则该消息丢失。</p>
</li>
<li><p><strong>acks&#x3D;all （默认）</strong>首领分区会等待<strong>所有的ISR副本分区确认记录</strong>。该处理保证了只要有一个ISR副本分区存活，消息就不会丢失。</p>
</li>
</ul>
</li>
<li><p>如果生产者配置了<strong>retrires参数大于0并且未收到确认</strong>，那么客户端会对该消息进行重试。</p>
</li>
<li><p>落盘到broker成功，返回生产元数据给生产者。</p>
</li>
</ol>
<p><strong>Leader选举</strong></p>
<ul>
<li><p>Kafka会在Zookeeper上针对每个Topic维护一个称为ISR（in-sync replica）的集合</p>
</li>
<li><p>当集合中副本都跟Leader中的副本同步了之后，kafka才会认为消息已提交</p>
</li>
<li><p>只有这些跟Leader保持同步的Follower才应该被选作新的Leader</p>
</li>
<li><p>假设某个topic有N+1个副本，kafka可以容忍N个服务器不可用，冗余度较低</p>
<p>如果ISR中的副本都丢失了，则：</p>
<ul>
<li>可以等待ISR中的副本任何一个恢复，接着对外提供服务，需要时间等待</li>
<li>从OSR中选出一个副本做Leader副本，此时会造成数据丢失</li>
</ul>
</li>
</ul>
<p><strong>副本消息同步</strong></p>
<p>​    首先，Follower 发送 FETCH 请求给 Leader。接着，Leader 会读取底层日志文件中的消 息数据，再更新它内存中的 Follower 副本的 LEO 值，更新为 FETCH 请求中的 fetchOffset 值。最后，尝试更新分区高水位值。Follower 接收到 FETCH 响应之后，会把消息写入到底层日志，接着更新 LEO 和 HW 值。</p>
<p><strong>相关概念</strong>：<strong>LEO</strong>和<strong>HW</strong>。</p>
<ul>
<li>LEO：即日志末端位移(log end offset)，记录了该副本日志中下一条消息的位移值。如果LEO&#x3D;10，那么表示该副本保存了10条消息，位移值范围是[0, 9]</li>
<li>HW：水位值HW（high watermark）即已备份位移。对于同一个副本对象而言，其HW值不会大于LEO值。小于等于HW值的所有消息都被认为是“已备份”的（replicated）</li>
</ul>
<p><strong>Rebalance</strong></p>
<ul>
<li>组成员数量发生变化</li>
<li>订阅主题数量发生变化</li>
<li>订阅主题的分区数发生变化</li>
</ul>
<p>leader选举完成后，当以上三种情况发生时，Leader根据配置的<strong>RangeAssignor</strong>开始分配消费方案，即哪个consumer负责消费哪些topic的哪些partition。一旦完成分配，leader会将这个方案封装进<strong>SyncGroup</strong>请求中发给coordinator，非leader也会发SyncGroup请求，只是内容为空。coordinator接收到分配方案之后会把方案塞进SyncGroup的response中发给各个consumer。这样组内的所有成员就都知道自己应该消费哪些分区了。</p>
<p><strong>分区分配算法RangeAssignor</strong></p>
<ul>
<li><p>原理是按照消费者总数和分区总数进行整除运算平均分配给所有的消费者。</p>
</li>
<li><p>订阅Topic的消费者按照名称的字典序排序，分均分配，剩下的字典序从前往后分配</p>
</li>
</ul>
<p><strong>增删改查</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --create --topic topic_x </span><br><span class="line">								--partitions 1 --replication-factor 1</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --delete --topic topic_x</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --alter --topic topic_x</span><br><span class="line">								--config max.message.bytes=1048576</span><br><span class="line">kafka-topics.sh --zookeeper localhost:2181/myKafka --describe --topic topic_x</span><br></pre></td></tr></table></figure>

<p><strong>如何查看偏移量为23的消息？</strong></p>
<p>通过查询跳跃表<code>ConcurrentSkipListMap</code>，定位到在00000000000000000000.index ，通过二分法在偏移量索引文件中找到不大于 23 的<strong>最大索引项</strong>，即offset 20 那栏，然后从日志分段文件中的物理位置为320 开始顺序查找偏移量为 23 的消息。</p>
<img src="https://img-blog.csdnimg.cn/20191230225447849.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMjMzNzA2,size_16,color_FFFFFF,t_70" alt="img" style="zoom:50%;" />





<p><strong>切分文件</strong></p>
<ul>
<li><strong>大小分片</strong> 当前日志分段文件的大小超过了 broker 端参数 <code>log.segment.bytes</code> 配置的值</li>
<li><strong>时间分片</strong> 当前日志分段中消息的最大时间戳与系统的时间戳的差值大于<code>log.roll.ms</code>配置的值</li>
<li><strong>索引分片</strong> 偏移量或时间戳索引文件大小达到broker端 <code>log.index.size.max.bytes</code>配置的值</li>
<li><strong>偏移分片</strong> 追加的消息的偏移量与当前日志分段的偏移量之间的差值大于 Integer.MAX_VALUE</li>
</ul>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p><strong>幂等性</strong></p>
<p>保证在消息重发的时候，消费者不会重复处理。即使在<strong>消费者收到重复消息的时候，重复处理</strong>，也</p>
<p>要<strong>保证最终结果的一致性</strong>。所谓幂等性，数学概念就是： f(f(x)) &#x3D; f(x) </p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmefdeas1vj315i0bgmya.jpg" alt="image-20210107000942286"></p>
<p><strong>如何实现？</strong></p>
<p>​    添加唯一ID，类似于数据库的主键，用于唯一标记一个消息。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ProducerID：<span class="comment">#在每个新的Producer初始化时，会被分配一个唯一的PID</span></span><br><span class="line">SequenceNumber：<span class="comment">#对于每个PID发送数据的每个Topic都对应一个从0开始单调递增的SN值</span></span><br></pre></td></tr></table></figure>

<img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmefjpeet8j317e0cgmyp.jpg" alt="image-20210107001546404" style="zoom:80%;" />

<p><strong>如何选举</strong></p>
<ol>
<li>使用 Zookeeper 的<strong>分布式锁选举控制器</strong>，并在节点加入集群或退出集群时通知控制器。</li>
<li>控制器负责在节点加入或离开集群时进行分区Leader选举。</li>
<li>控制器使用epoch<code>忽略小的纪元</code>来避免<strong>脑裂</strong>：两个节点同时认为自己是当前的控制器。</li>
</ol>
<h3 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h3><ul>
<li>创建Topic的时候可以指定 –replication-factor 3 ，表示不超过broker的副本数</li>
<li>只有Leader是负责读写的节点，Follower定期地到Leader上Pull数据。</li>
<li>ISR是Leader负责维护的与其保持同步的Replica列表，即当前活跃的副本列表。如果一个Follow落后太多，Leader会将它从ISR中移除。选举时优先从ISR中挑选Follower。 </li>
<li>设置 acks&#x3D;all 。Leader收到了ISR中所有Replica的ACK，才向Producer发送ACK。</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="面试题-2"><a href="#面试题-2" class="headerlink" title="面试题"></a>面试题</h3><h4 id="线上问题rebalance"><a href="#线上问题rebalance" class="headerlink" title="线上问题rebalance"></a><strong>线上问题rebalance</strong></h4><blockquote>
<p>因集群架构变动导致的消费组内重平衡，如果kafka集内节点较多，比如数百个，那重平衡可能会耗时导致<strong>数分钟到数小时</strong>，此时kafka基本处于不可用状态，对kafka的TPS影响极大</p>
</blockquote>
<p>产生的原因：</p>
<ul>
<li><p>组成员数量发生变化</p>
</li>
<li><p>订阅主题数量发生变化</p>
</li>
<li><p>订阅主题的分区数发生变化</p>
<p><strong>组成员崩溃和组成员主动离开是两个不同的场景。</strong>因为在崩溃时成员并不会主动地告知coordinator此事，coordinator有可能需要一个完整的session.timeout周期(心跳周期)才能检测到这种崩溃，这必然会造成consumer的滞后。可以说离开组是主动地发起rebalance；而崩溃则是被动地发起rebalance。</p>
<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gooe9o07fvj30p00btju1.jpg" alt="img"></p>
</li>
</ul>
<p>解决方案：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">加大超时时间</span> <span class="string">session.timout.ms=6s</span></span><br><span class="line"><span class="attr">加大心跳频率</span> <span class="string">heartbeat.interval.ms=2s</span></span><br><span class="line"><span class="attr">增长推送间隔</span> <span class="string">max.poll.interval.ms=t+1 minutes</span></span><br></pre></td></tr></table></figure>



<h4 id="ZooKeeper-的作用"><a href="#ZooKeeper-的作用" class="headerlink" title="ZooKeeper 的作用"></a>ZooKeeper 的作用</h4><p>目前，Kafka 使用 ZooKeeper 存放集群元数据、成员管理、Controller 选举，以及其他一些管理类任务。之后，等 KIP-500 提案完成后，Kafka 将完全不再依赖于 ZooKeeper。</p>
<ul>
<li><strong>存放元数据</strong>是指主题分区的所有数据都保存在 ZooKeeper 中，其他“人”都要与它保持对齐。</li>
<li><strong>成员管理</strong>是指 Broker 节点的注册、注销以及属性变更等 。</li>
<li><strong>Controller 选举</strong>是指选举集群 Controller，包括但不限于主题删除、参数配置等。</li>
</ul>
<p>一言以蔽之:<strong>KIP-500 ，是使用社区自研的基于 Raft 的共识算法，实现 Controller 自选举</strong>。</p>
<p>同样是存储元数据，这几年<strong>基于Raft算法的etcd</strong>认可度越来越高</p>
<p>​    越来越多的系统开始用它保存关键数据。比如，<strong>秒杀系统经常用它保存各节点信息</strong>，以便控制消费 MQ 的服务数量。还有些<strong>业务系统的配置数据</strong>，也会通过 etcd 实时<strong>同步给业务系统的各节点</strong>，比如，秒杀管理后台会使用 etcd 将<strong>秒杀活动的配置数据实时同步给秒杀 API 服务各节点</strong>。</p>
<h4 id="Replica副本的作用"><a href="#Replica副本的作用" class="headerlink" title="Replica副本的作用"></a>Replica副本的作用</h4><p><strong>Kafka 只有 Leader 副本才能 对外提供读写服务，响应 Clients 端的请求。Follower 副本只是采用拉(PULL)的方 式，被动地同步 Leader 副本中的数据，并且在 Leader 副本所在的 Broker 宕机后，随时准备应聘 Leader 副本。</strong></p>
<ul>
<li><strong>自 Kafka 2.4 版本开始</strong>，社区可以通过配置参数，允许 Follower 副本有限度地提供读服务。</li>
<li>之前确保一致性的主要手段是高水位机制， 但高水位值无法保证 Leader 连续变更场景下的数据一致性，因此，社区引入了 <strong>Leader Epoch</strong> 机制，来修复高水位值的弊端。</li>
</ul>
<h4 id="为什么不支持读写分离"><a href="#为什么不支持读写分离" class="headerlink" title="为什么不支持读写分离?"></a>为什么不支持读写分离?</h4><ul>
<li><p><strong>自 Kafka 2.4 之后</strong>，Kafka 提供了有限度的读写分离。</p>
</li>
<li><p><strong>场景不适用</strong>。读写分离适用于那种读负载很大，而写操作相对不频繁的场景。</p>
</li>
<li><p><strong>同步机制</strong>。Kafka 采用 PULL 方式实现 Follower 的同步，同时复制延迟较大。</p>
</li>
</ul>
<h4 id="如何防止重复消费"><a href="#如何防止重复消费" class="headerlink" title="如何防止重复消费"></a>如何防止重复消费</h4><ul>
<li>代码层面每次消费需提交offset</li>
<li>通过Mysql的<strong>唯一键约束</strong>，结合Redis查看<strong>id是否被消费</strong>，存Redis可以直接使用set方法</li>
<li>量大且允许误判的情况下，使用布隆过滤器也可以</li>
</ul>
<h4 id="如何保证数据不会丢失"><a href="#如何保证数据不会丢失" class="headerlink" title="如何保证数据不会丢失"></a><strong>如何保证数据不会丢失</strong></h4><ul>
<li><strong>生产者</strong>生产消息可以通过comfirm配置<strong>ack&#x3D;all</strong>解决</li>
<li><strong>Broker</strong>同步过程中leader宕机可以通过配置<strong>ISR副本+重试</strong>解决</li>
<li><strong>消费者</strong>丢失可以<strong>关闭自动提交</strong>offset功能，系统处理完成时提交offset</li>
</ul>
<h4 id="如何保证顺序消费"><a href="#如何保证顺序消费" class="headerlink" title="如何保证顺序消费"></a><strong>如何保证顺序消费</strong></h4><ul>
<li>单 topic，单partition，单 consumer，单线程消费，吞吐量低，不推荐</li>
<li><strong>如只需保证单key有序</strong>，为每个key申请单独内存 queue，每个线程分别消费一个内存 queue 即可，这样就能保证单key（例如用户id、活动id）顺序性。</li>
</ul>
<h4 id="【线上】如何解决积压消费"><a href="#【线上】如何解决积压消费" class="headerlink" title="【线上】如何解决积压消费"></a>【线上】如何解决积压消费</h4><ul>
<li><strong>修复consumer</strong>，使其具备消费能力，并且扩容N台</li>
<li>写一个<strong>分发的程序</strong>，将Topic均匀分发到临时Topic中</li>
<li>同时<strong>起N台consumer</strong>，消费不同的<strong>临时Topic</strong></li>
</ul>
<h4 id="如何避免消息积压"><a href="#如何避免消息积压" class="headerlink" title="如何避免消息积压"></a>如何避免消息积压</h4><ul>
<li>提高消费并行度</li>
<li>批量消费</li>
<li>减少组件IO的交互次数</li>
<li>优先级消费</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (maxOffset - curOffset &gt; <span class="number">100000</span>) &#123;</span><br><span class="line">  <span class="comment">// TODO 消息堆积情况的优先处理逻辑</span></span><br><span class="line">  <span class="comment">// 未处理的消息可以选择丢弃或者打日志</span></span><br><span class="line">  <span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// TODO 正常消费过程</span></span><br><span class="line"><span class="keyword">return</span> ConsumeConcurrentlyStatus.CONSUME_SUCCESS;</span><br></pre></td></tr></table></figure>



<h4 id="如何设计消息队列"><a href="#如何设计消息队列" class="headerlink" title="如何设计消息队列"></a>如何设计消息队列</h4><p>需要支持快速水平扩容，broker+partition，partition放不同的机器上，增加机器时将数据根据topic做迁移，分布式需要考虑一致性、可用性、分区容错性</p>
<ul>
<li><strong>一致性：</strong>生产者的消息确认、消费者的幂等性、Broker的数据同步</li>
<li><strong>可用性：</strong>数据如何保证不丢不重、数据如何持久化、持久化时如何读写</li>
<li><strong>分区容错：</strong>采用何种选举机制、如何进行多副本同步</li>
<li><strong>海量数据：</strong>如何解决消息积压、海量Topic性能下降</li>
</ul>
<p>性能上，可以借鉴<strong>时间轮、零拷贝、IO多路复用、顺序读写、压缩批处理</strong></p>
<h1 id="七、Spring篇"><a href="#七、Spring篇" class="headerlink" title="七、Spring篇"></a>七、Spring篇</h1><h3 id="设计思想-amp-Beans"><a href="#设计思想-amp-Beans" class="headerlink" title="设计思想&amp;Beans"></a>设计思想&amp;Beans</h3><h4 id="1、IOC-控制反转"><a href="#1、IOC-控制反转" class="headerlink" title="1、IOC 控制反转"></a><strong>1、IOC 控制反转</strong></h4><p>​        IoC（Inverse of Control:控制反转）是⼀种设计思想，就是将原本在程序中⼿动创建对象的控制权，交由Spring框架来管理。 IoC 在其他语⾔中也有应⽤，并⾮ Spring 特有。 </p>
<p>​        IoC 容器是 Spring⽤来实现 IoC 的载体， IoC 容器实际上就是个Map（key，value）,Map 中存放的是各种对象。将对象之间的相互依赖关系交给 IoC 容器来管理，并由 IoC 容器完成对象的注⼊。这样可以很⼤程度上简化应⽤的开发，把应⽤从复杂的依赖关系中解放出来。 IoC 容器就像是⼀个⼯⼚⼀样，当我们需要创建⼀个对象的时候，只需要配置好配置⽂件&#x2F;注解即可，完全不⽤考虑对象是如何被创建出来的。</p>
<p><strong>DI 依赖注入</strong></p>
<p>​    DI:（Dependancy Injection：依赖注入)站在容器的角度，将对象创建依赖的其他对象注入到对象中。</p>
<h4 id="2、AOP-动态代理"><a href="#2、AOP-动态代理" class="headerlink" title="2、AOP 动态代理"></a><strong>2、AOP 动态代理</strong></h4><p>​        AOP(Aspect-Oriented Programming:⾯向切⾯编程)能够将那些与业务⽆关，却为业务模块所共同调⽤的逻辑或责任（例如事务处理、⽇志管理、权限控制等）封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</p>
<p>​        Spring AOP就是基于动态代理的，如果要代理的对象，实现了某个接⼝，那么Spring AOP会使⽤JDKProxy，去创建代理对象，⽽对于没有实现接⼝的对象，就⽆法使⽤ JDK Proxy 去进⾏代理了，这时候Spring AOP会使⽤基于asm框架字节流的Cglib动态代理 ，这时候Spring AOP会使⽤ Cglib ⽣成⼀个被代理对象的⼦类来作为代理。</p>
<h4 id="3、Bean生命周期"><a href="#3、Bean生命周期" class="headerlink" title="3、Bean生命周期"></a><strong>3、Bean生命周期</strong></h4><p><strong>单例对象：</strong> singleton                    </p>
<p>总结：单例对象的生命周期和容器相同        </p>
<p><strong>多例对象：</strong> prototype           </p>
<p>出生：使用对象时spring框架为我们创建            </p>
<p>活着：对象只要是在使用过程中就一直活着            </p>
<p>死亡：当对象长时间不用且没有其它对象引用时，由java的垃圾回收机制回收</p>
<img src="https://s0.lgstatic.com/i/image3/M01/89/0C/Cgq2xl6WvHqAdmt4AABGAn2eSiI631.png" alt="img" style="zoom:67%;" />

<p>IOC容器初始化加载Bean流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> BeansException, IllegalStateException &#123; <span class="keyword">synchronized</span> (<span class="built_in">this</span>.startupShutdownMonitor) &#123;</span><br><span class="line">  <span class="comment">// 第一步:刷新前的预处理 </span></span><br><span class="line">  prepareRefresh();</span><br><span class="line">  <span class="comment">//第二步: 获取BeanFactory并注册到 BeanDefitionRegistry</span></span><br><span class="line">  <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> obtainFreshBeanFactory();</span><br><span class="line">  <span class="comment">// 第三步:加载BeanFactory的预准备工作(BeanFactory进行一些设置，比如context的类加载器等)</span></span><br><span class="line">  prepareBeanFactory(beanFactory);</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 第四步:完成BeanFactory准备工作后的前置处理工作 </span></span><br><span class="line">    postProcessBeanFactory(beanFactory);</span><br><span class="line">    <span class="comment">// 第五步:实例化BeanFactoryPostProcessor接口的Bean </span></span><br><span class="line">    invokeBeanFactoryPostProcessors(beanFactory);</span><br><span class="line">    <span class="comment">// 第六步:注册BeanPostProcessor后置处理器，在创建bean的后执行 </span></span><br><span class="line">    registerBeanPostProcessors(beanFactory);</span><br><span class="line">    <span class="comment">// 第七步:初始化MessageSource组件(做国际化功能;消息绑定，消息解析); </span></span><br><span class="line">    initMessageSource();</span><br><span class="line">    <span class="comment">// 第八步:注册初始化事件派发器 </span></span><br><span class="line">    initApplicationEventMulticaster();</span><br><span class="line">    <span class="comment">// 第九步:子类重写这个方法，在容器刷新的时候可以自定义逻辑 </span></span><br><span class="line">    onRefresh();</span><br><span class="line">    <span class="comment">// 第十步:注册应用的监听器。就是注册实现了ApplicationListener接口的监听器</span></span><br><span class="line">    registerListeners();</span><br><span class="line">    <span class="comment">//第十一步:初始化所有剩下的非懒加载的单例bean 初始化创建非懒加载方式的单例Bean实例(未设置属性)</span></span><br><span class="line">    finishBeanFactoryInitialization(beanFactory);</span><br><span class="line">    <span class="comment">//第十二步: 完成context的刷新。主要是调用LifecycleProcessor的onRefresh()方法，完成创建</span></span><br><span class="line">    finishRefresh();</span><br><span class="line">	&#125;</span><br><span class="line">  ……</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>总结：</p>
<p><strong>四个阶段</strong></p>
<ul>
<li>实例化 Instantiation</li>
<li>属性赋值 Populate</li>
<li>初始化 Initialization</li>
<li>销毁 Destruction</li>
</ul>
<p><strong>多个扩展点</strong></p>
<ul>
<li>影响多个Bean<ul>
<li>BeanPostProcessor</li>
<li>InstantiationAwareBeanPostProcessor</li>
</ul>
</li>
<li>影响单个Bean<ul>
<li>Aware</li>
</ul>
</li>
</ul>
<p><strong>完整流程</strong>  </p>
<ol>
<li>实例化一个Bean－－也就是我们常说的<strong>new</strong>；</li>
<li>按照Spring上下文对实例化的Bean进行配置－－<strong>也就是IOC注入</strong>；</li>
<li>如果这个Bean已经实现了BeanNameAware接口，会调用它实现的setBeanName(String)方法，也就是根据就是Spring配置文件中<strong>Bean的id和name进行传递</strong></li>
<li>如果这个Bean已经实现了BeanFactoryAware接口，会调用它实现setBeanFactory(BeanFactory)也就是Spring配置文件配置的<strong>Spring工厂自身进行传递</strong>；</li>
<li>如果这个Bean已经实现了ApplicationContextAware接口，会调用setApplicationContext(ApplicationContext)方法，和4传递的信息一样但是因为ApplicationContext是BeanFactory的子接口，所以<strong>更加灵活</strong></li>
<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessBeforeInitialization()方法，BeanPostProcessor经常被用作是Bean内容的更改，由于这个是在Bean初始化结束时调用那个的方法，也可以被应用于<strong>内存或缓存技</strong>术</li>
<li>如果Bean在Spring配置文件中配置了init-method属性会自动调用其配置的初始化方法。</li>
<li>如果这个Bean关联了BeanPostProcessor接口，将会调用postProcessAfterInitialization()，<strong>打印日志或者三级缓存技术里面的bean升级</strong></li>
<li>以上工作完成以后就可以应用这个Bean了，那这个Bean是一个Singleton的，所以一般情况下我们调用同一个id的Bean会是在内容地址相同的实例，当然在Spring配置文件中也可以配置非Singleton，这里我们不做赘述。</li>
<li>当Bean不再需要时，会经过清理阶段，如果Bean实现了DisposableBean这个接口，或者根据spring配置的destroy-method属性，调用实现的destroy()方法</li>
</ol>
<h4 id="4、Bean作用域"><a href="#4、Bean作用域" class="headerlink" title="4、Bean作用域"></a><strong>4</strong>、Bean作用域</h4><table>
<thead>
<tr>
<th>名称</th>
<th>作用域</th>
</tr>
</thead>
<tbody><tr>
<td><strong>singleton</strong></td>
<td><strong>单例对象，默认值的作用域</strong></td>
</tr>
<tr>
<td><strong>prototype</strong></td>
<td><strong>每次获取都会创建⼀个新的 bean 实例</strong></td>
</tr>
<tr>
<td>request</td>
<td>每⼀次HTTP请求都会产⽣⼀个新的bean，该bean仅在当前HTTP request内有效。</td>
</tr>
<tr>
<td>session</td>
<td>在一次 HTTP session 中，容器将返回同一个实例</td>
</tr>
<tr>
<td>global-session</td>
<td>将对象存入到web项目集群的session域中,若不存在集群,则global session相当于session</td>
</tr>
</tbody></table>
<p>默认作用域是singleton，多个线程访问同一个bean时会存在线程不安全问题</p>
<p><strong>保障线程安全方法：</strong></p>
<ol>
<li><p>在Bean对象中尽量避免定义可变的成员变量（不太现实）。</p>
</li>
<li><p>在类中定义⼀个ThreadLocal成员变量，将需要的可变成员变量保存在 ThreadLocal 中</p>
</li>
</ol>
<p>  <strong>ThreadLocal</strong>：</p>
<p>  ​        每个线程中都有一个自己的ThreadLocalMap类对象，可以将线程自己的对象保持到其中，各管各的，线程可以正确的访问到自己的对象。</p>
<p>  ​        将一个共用的ThreadLocal静态实例作为key，将不同对象的引用保存到不同线程的ThreadLocalMap中，然后<strong>在线程执行的各处通过这个静态ThreadLocal实例的get()方法取得自己线程保存的那个对象</strong>，避免了将这个对象作为参数传递的麻烦。</p>
<h4 id="5、循环依赖"><a href="#5、循环依赖" class="headerlink" title="5、循环依赖"></a>5、循环依赖</h4><p>​    循环依赖其实就是循环引用，也就是两个或者两个以上的 Bean 互相持有对方，最终形成闭环。比如A 依赖于B，B又依赖于A</p>
<p>Spring中循环依赖场景有: </p>
<ul>
<li><p>prototype 原型 bean循环依赖</p>
</li>
<li><p>构造器的循环依赖（构造器注入）</p>
</li>
<li><p>Field 属性的循环依赖（set注入）</p>
<p>其中，构造器的循环依赖问题无法解决，在解决属性循环依赖时，可以使用懒加载，spring采用的是提前暴露对象的方法。</p>
</li>
</ul>
<p><strong>懒加载@Lazy解决循环依赖问题</strong></p>
<p>​    Spring 启动的时候会把所有bean信息(包括XML和注解)解析转化成Spring能够识别的BeanDefinition并存到Hashmap里供下面的初始化时用，然后对每个 BeanDefinition 进行处理。普通 Bean 的初始化是在容器启动初始化阶段执行的，而被lazy-init&#x3D;true修饰的 bean 则是在从容器里第一次进行<strong>context.getBean() 时进行触发</strong>。</p>
<p><strong>三级缓存解决循环依赖问题</strong></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1glv7ivru2lj31980qcn13.jpg" alt="循环依赖问题" style="zoom: 33%;" />

<ol>
<li><p>Spring容器初始化ClassA通过构造器初始化对象后提前暴露到Spring容器中的singletonFactorys（三级缓存中）。</p>
</li>
<li><p>ClassA调用setClassB方法，Spring首先尝试从容器中获取ClassB，此时ClassB不存在Spring 容器中。</p>
</li>
<li><p>Spring容器初始化ClassB，ClasssB首先将自己暴露在三级缓存中，然后从Spring容器一级、二级、三级缓存中一次中获取ClassA 。</p>
</li>
<li><p>获取到ClassA后将自己实例化放入单例池中，实例 ClassA通过Spring容器获取到ClassB，完成了自己对象初始化操作。</p>
</li>
<li><p>这样ClassA和ClassB都完成了对象初始化操作，从而解决了循环依赖问题。</p>
</li>
</ol>
<div style="page-break-after: always;"></div>

<h3 id="Spring注解"><a href="#Spring注解" class="headerlink" title="Spring注解"></a>Spring注解</h3><h4 id="1、-SpringBoot"><a href="#1、-SpringBoot" class="headerlink" title="1、@SpringBoot"></a>1、@SpringBoot</h4><p>​    <strong>声明bean的注解</strong></p>
<p>​    <strong>@Component</strong> 通⽤的注解，可标注任意类为  Spring 组件</p>
<p>​    <strong>@Service</strong> 在业务逻辑层使用（service层）</p>
<p>​    <strong>@Repository</strong> 在数据访问层使用（dao层）</p>
<p>​    <strong>@Controller</strong> 在展现层使用，控制器的声明（controller层）</p>
<p>​    <strong>注入bean的注解</strong></p>
<p>​    <strong>@Autowired</strong>：默认按照类型来装配注入，**@Qualifier**：可以改成名称</p>
<p>​    <strong>@Resource</strong>：默认按照名称来装配注入，JDK的注解，新版本已经弃用</p>
<p><strong>@Autowired注解原理</strong> </p>
<p>​         @Autowired的使用简化了我们的开发，</p>
<p>​                实现 AutowiredAnnotationBeanPostProcessor 类，该类实现了 Spring 框架的一些扩展接口。<br>​                实现 BeanFactoryAware 接口使其内部持有了 BeanFactory（可轻松的获取需要依赖的的 Bean）。<br>​                实现 MergedBeanDefinitionPostProcessor 接口，实例化Bean 前获取到 里面的 @Autowired 信息并缓存下来；<br>​                实现 postProcessPropertyValues 接口， 实例化Bean 后从缓存取出注解信息，通过反射将依赖对象设置到 Bean 属性里面。</p>
<p><strong>@SpringBootApplication</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JpaApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(JpaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>@SpringBootApplication</strong>注解等同于下面三个注解：</p>
<ul>
<li><strong>@SpringBootConfiguration：</strong> 底层是<strong>Configuration</strong>注解，说白了就是支持<strong>JavaConfig</strong>的方式来进行配置</li>
<li><strong>@EnableAutoConfiguration：</strong>开启<strong>自动配置</strong>功能</li>
<li><strong>@ComponentScan：</strong>就是<strong>扫描</strong>注解，默认是扫描<strong>当前类下</strong>的package</li>
</ul>
<p>其中<code>@EnableAutoConfiguration</code>是关键(启用自动配置)，内部实际上就去加载<code>META-INF/spring.factories</code>文件的信息，然后筛选出以<code>EnableAutoConfiguration</code>为key的数据，加载到IOC容器中，实现自动配置功能！</p>
<p>它主要加载了@SpringBootApplication注解主配置类，这个@SpringBootApplication注解主配置类里边最主要的功能就是SpringBoot开启了一个@EnableAutoConfiguration注解的自动配置功能。</p>
<p> <strong>@EnableAutoConfiguration作用：</strong></p>
<p>它主要利用了一个</p>
<p>EnableAutoConfigurationImportSelector选择器给Spring容器中来导入一些组件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(EnableAutoConfigurationImportSelector.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EnableAutoConfiguration </span><br></pre></td></tr></table></figure>





<h4 id="2、-SpringMVC"><a href="#2、-SpringMVC" class="headerlink" title="2、@SpringMVC"></a><strong>2、@SpringMVC</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span> 声明该类为SpringMVC中的Controller</span><br><span class="line"><span class="meta">@RequestMapping</span> 用于映射Web请求</span><br><span class="line"><span class="meta">@ResponseBody</span> 支持将返回值放在response内，而不是一个页面，通常用户返回json数据</span><br><span class="line"><span class="meta">@RequestBody</span> 允许request的参数在request体中，而不是在直接连接在地址后面。</span><br><span class="line"><span class="meta">@PathVariable</span> 用于接收路径参数</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello/&#123;name&#125;&quot;)</span>申明的路径，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。</span><br></pre></td></tr></table></figure>

<p><strong>SpringMVC原理</strong> </p>
<img src="https://img-blog.csdn.net/20181022224058617?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2F3YWtlX2xxaA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" style="zoom: 50%;" />

<ol>
<li>客户端（浏览器）发送请求，直接请求到  DispatcherServlet 。</li>
<li>DispatcherServlet 根据请求信息调⽤  HandlerMapping ，解析请求对应的  Handler 。</li>
<li>解析到对应的  Handler （也就是  Controller 控制器）后，开始由HandlerAdapter 适配器处理。</li>
<li>HandlerAdapter 会根据  Handler 来调⽤真正的处理器开处理请求，并处理相应的业务逻辑。</li>
<li>处理器处理完业务后，会返回⼀个  ModelAndView 对象， Model 是返回的数据对象</li>
<li>ViewResolver 会根据逻辑  View 查找实际的  View 。</li>
<li>DispaterServlet 把返回的  Model 传给  View （视图渲染）。</li>
<li>把  View 返回给请求者（浏览器）</li>
</ol>
<h4 id="3、-SpringMybatis"><a href="#3、-SpringMybatis" class="headerlink" title="3、@SpringMybatis"></a>3、@SpringMybatis</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert</span> ： 插入sql ,和xml insert sql语法完全一样</span><br><span class="line"><span class="meta">@Select</span> ： 查询sql, 和xml select sql语法完全一样</span><br><span class="line"><span class="meta">@Update</span> ： 更新sql, 和xml update sql语法完全一样</span><br><span class="line"><span class="meta">@Delete</span> ： 删除sql, 和xml delete sql语法完全一样</span><br><span class="line"><span class="meta">@Param</span> ： 入参</span><br><span class="line"><span class="meta">@Results</span> ： 设置结果集合<span class="meta">@Result</span> ： 结果</span><br><span class="line"><span class="meta">@ResultMap</span> ： 引用结果集合</span><br><span class="line"><span class="meta">@SelectKey</span> ： 获取最新插入id </span><br></pre></td></tr></table></figure>

<p><strong>mybatis如何防止sql注入？</strong></p>
<p>​    简单的说就是#{}是经过预编译的，是安全的，**$<strong>{}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。在编写mybatis的映射语句时，尽量采用</strong>“#{xxx}”<strong>这样的格式。如果需要实现动态传入表名、列名，还需要做如下修改：添加属性</strong>statementType&#x3D;”STATEMENT”<strong>，同时sql里的属有变量取值都改成</strong>${xxxx}**</p>
<p><strong>Mybatis和Hibernate的区别</strong> </p>
<p><strong>Hibernate 框架：</strong> </p>
<p>​    <strong>Hibernate</strong>是一个开放源代码的对象关系映射框架,它对JDBC进行了非常轻量级的对象封装,建立对象与数据库表的映射。是一个全自动的、完全面向对象的持久层框架。</p>
<p><strong>Mybatis框架：</strong></p>
<p>​    <strong>Mybatis</strong>是一个开源对象关系映射框架，原名：ibatis,2010年由谷歌接管以后更名。是一个半自动化的持久层框架。</p>
<p><strong>区别：</strong></p>
<p>  <strong>开发方面</strong></p>
<p>​    在项目开发过程当中，就速度而言：</p>
<p>​      hibernate开发中，sql语句已经被封装，直接可以使用，加快系统开发；</p>
<p>​      Mybatis 属于半自动化，sql需要手工完成，稍微繁琐；</p>
<p>​    但是，凡事都不是绝对的，如果对于庞大复杂的系统项目来说，复杂语句较多，hibernate 就不是好方案。</p>
<p>  <strong>sql优化方面</strong></p>
<p>​    Hibernate 自动生成sql,有些语句较为繁琐，会多消耗一些性能；</p>
<p>​    Mybatis 手动编写sql，可以避免不需要的查询，提高系统性能；</p>
<p>  <strong>对象管理比对</strong></p>
<p>​    Hibernate 是完整的对象-关系映射的框架，开发工程中，无需过多关注底层实现，只要去管理对象即可；</p>
<p>​    Mybatis 需要自行管理映射关系；</p>
<h4 id="4、-Transactional"><a href="#4、-Transactional" class="headerlink" title="4、@Transactional"></a>4、@Transactional</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableTransactionManagement</span> </span><br><span class="line"><span class="meta">@Transactional</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<p>​    ①事务函数中不要处理耗时任务，会导致长期占有数据库连接。</p>
<p>​    ②事务函数中不要处理无关业务，防止产生异常导致事务回滚。</p>
<p><strong>事务传播属性</strong></p>
<p><strong>1) REQUIRED（默认属性）</strong> 如果存在一个事务，则支持当前事务。如果没有事务则开启一个新的事务。 </p>
<ol start="2">
<li><p>MANDATORY  支持当前事务，如果当前没有事务，就抛出异常。 </p>
</li>
<li><p>NEVER  以非事务方式执行，如果当前存在事务，则抛出异常。 </p>
</li>
<li><p>NOT_SUPPORTED  以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。 </p>
</li>
<li><p>REQUIRES_NEW  新建事务，如果当前存在事务，把当前事务挂起。 </p>
</li>
<li><p>SUPPORTS  支持当前事务，如果当前没有事务，就以非事务方式执行。</p>
</li>
</ol>
<p><strong>7) NESTED</strong> （<strong>局部回滚</strong>） 支持当前事务，新增Savepoint点，与当前事务同步提交或回滚。 <strong>嵌套事务一个非常重要的概念就是内层事务依赖于外层事务。外层事务失败时，会回滚内层事务所做的动作。而内层事务操作失败并不会引起外层事务的回滚。</strong></p>
<div style="page-break-after: always;"></div>

<h3 id="Spring源码阅读"><a href="#Spring源码阅读" class="headerlink" title="Spring源码阅读"></a>Spring源码阅读</h3><h4 id="1、Spring中的设计模式"><a href="#1、Spring中的设计模式" class="headerlink" title="1、Spring中的设计模式"></a><strong>1、Spring中的设计模式</strong></h4><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&mid=2247485303&idx=1&sn=9e4626a1e3f001f9b0d84a6fa0cff04a&chksm=cea248bcf9d5c1aaf48b67cc52bac74eb29d6037848d6cf213b0e5466f2d1fda970db700ba41&token=255050878&lang=zh_CN%23rd">spring中的设计模式</a></p>
<p><strong>单例设计模式 :</strong> Spring 中的 Bean 默认都是单例的。</p>
<p><strong>⼯⼚设计模式 :</strong> Spring使⽤⼯⼚模式通过  BeanFactory 、 ApplicationContext 创建bean 对象。</p>
<p><strong>代理设计模式 :</strong> Spring AOP 功能的实现。</p>
<p><strong>观察者模式：</strong> Spring 事件驱动模型就是观察者模式很经典的⼀个应⽤。</p>
<p><strong>适配器模式：</strong>Spring AOP 的增强或通知(Advice)使⽤到了适配器模式、spring MVC 中也是⽤到了适配器模式适配 Controller 。</p>
<h1 id="八、SpringCloud篇"><a href="#八、SpringCloud篇" class="headerlink" title="八、SpringCloud篇"></a>八、SpringCloud篇</h1><h4 id="Why-SpringCloud"><a href="#Why-SpringCloud" class="headerlink" title="Why SpringCloud"></a>Why SpringCloud</h4><blockquote>
<p>​    Spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如<strong>服务发现注册</strong>、<strong>配置中心</strong>、<strong>消息总线</strong>、<strong>负载均衡</strong>、<strong>断路器</strong>、<strong>数据监控</strong>等，都可以用 spring boot 的开发风格做到一键启动和部署。</p>
</blockquote>
<table>
<thead>
<tr>
<th>SpringCloud（微服务解决方案）</th>
<th>Dubbo（分布式服务治理框架）</th>
</tr>
</thead>
<tbody><tr>
<td>Rest API （轻量、灵活、swagger）</td>
<td>RPC远程调用（高效、耦合）</td>
</tr>
<tr>
<td>Eureka、Nacos</td>
<td>Zookeeper</td>
</tr>
<tr>
<td>使用方便</td>
<td>性能好</td>
</tr>
<tr>
<td>即将推出SpringCloud2.0</td>
<td>断档5年后17年重启</td>
</tr>
</tbody></table>
<p>​    SpringBoot是Spring推出用于解决传统框架配置文件冗余,装配组件繁杂的基于Maven的解决方案,<strong>旨在快速搭建单个微服务</strong>，SpringCloud是依赖于SpringBoot的,而SpringBoot并不是依赖与SpringCloud,甚至还可以和Dubbo进行优秀的整合开发</p>
<p>​    MartinFlower 提出的微服务之间是通过RestFulApi进行通信，具体实现</p>
<ul>
<li>RestTemplate：基于HTTP协议</li>
<li>Feign：封装了ribbon和Hystrix 、RestTemplate 简化了客户端开发工作量</li>
<li>RPC：基于TCP协议，序列化和传输效率提升明显</li>
<li>MQ：异步解耦微服务之间的调用</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmawejgpgwj30ht0bnt9d.jpg" alt="img" style="zoom:67%;" />

<h4 id="Spring-Boot"><a href="#Spring-Boot" class="headerlink" title="Spring Boot"></a>Spring Boot</h4><blockquote>
<p>Spring Boot 通过<strong>简单的步骤</strong>就可以创建一个 Spring 应用。</p>
<p>Spring Boot 为 Spring 整合第三方框架提供了<strong>开箱即用功能</strong>。</p>
<p>Spring Boot 的核心思想是<strong>约定大于配置</strong>。</p>
</blockquote>
<p><strong>Spring Boot 解决的问题</strong></p>
<ul>
<li><p>搭建后端框架时需要手动添加 Maven 配置，涉及很多 XML 配置文件，增加了搭建难度和时间成本。</p>
</li>
<li><p>将项目编译成 war 包，部署到 Tomcat 中，项目部署依赖 Tomcat，这样非常不方便。</p>
</li>
<li><p>应用监控做的比较简单，通常都是通过一个没有任何逻辑的接口来判断应用的存活状态。</p>
</li>
</ul>
<p><strong>Spring Boot 优点</strong></p>
<p><strong>自动装配：</strong>Spring Boot 会根据某些规则对所有配置的 Bean 进行初始化。可以减少了很多重复性的工作。</p>
<p>​    比如使用 MongoDB 时，只需加入 MongoDB 的 Starter 包，然后配置  的连接信息，就可以直接使用 MongoTemplate 自动装配来操作数据库了。简化了 Maven Jar 包的依赖，降低了烦琐配置的出错几率。</p>
<p><strong>内嵌容器：</strong>Spring Boot 应用程序可以不用部署到外部容器中，比如 Tomcat。</p>
<p>​    应用程序可以直接通过 Maven 命令编译成可执行的 jar 包，通过 java-jar 命令启动即可，非常方便。</p>
<p><strong>应用监控：</strong>Spring Boot 中自带监控功能 Actuator，可以实现对程序内部运行情况进行监控，</p>
<p>​    比如 Bean 加载情况、环境变量、日志信息、线程信息等。当然也可以自定义跟业务相关的监控，通过Actuator 的端点信息进行暴露。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring-boot-starter-web          <span class="comment">//用于快速构建基于 Spring MVC 的 Web 项目。</span></span><br><span class="line">spring-boot-starter-data-redis   <span class="comment">//用于快速整合并操作 Redis。</span></span><br><span class="line">spring-boot-starter-data-mongodb <span class="comment">//用于对 MongoDB 的集成。</span></span><br><span class="line">spring-boot-starter-data-jpa     <span class="comment">//用于操作 MySQL。</span></span><br></pre></td></tr></table></figure>

<p><strong>自定义一个Starter</strong></p>
<ol>
<li><p>创建 Starter 项目，定义 Starter 需要的配置（Properties）类，比如数据库的连接信息；</p>
</li>
<li><p>编写自动配置类，自动配置类就是获取配置，根据配置来自动装配 Bean；</p>
</li>
<li><p>编写 spring.factories 文件加载自动配置类，Spring 启动的时候会扫描 spring.factories 文件，；</p>
</li>
<li><p>编写配置提示文件 spring-configuration-metadata.json（不是必须的），在添加配置的时候，我们想要知道具体的配置项是什么作用，可以通过编写提示文件来提示；</p>
</li>
<li><p>在项目中引入自定义 Starter 的 Maven 依赖，增加配置值后即可使用。</p>
</li>
</ol>
<p><strong>Spring Boot Admin</strong>（将 actuator 提供的数据进行可视化）</p>
<ul>
<li><p>显示应用程序的监控状态、查看 JVM 和线程信息</p>
</li>
<li><p>应用程序上下线监控  </p>
</li>
<li><p>可视化的查看日志、动态切换日志级别</p>
</li>
<li><p>HTTP 请求信息跟踪等实用功能</p>
</li>
</ul>
<h4 id="GateWay-x2F-Zuul"><a href="#GateWay-x2F-Zuul" class="headerlink" title="GateWay &#x2F; Zuul"></a>GateWay &#x2F; Zuul</h4><blockquote>
<p>GateWay⽬标是取代Netflflix Zuul，它基于Spring5.0+SpringBoot2.0+WebFlux等技术开发，提供<strong>统⼀的路由</strong>⽅式（反向代理）并且基于 <strong>Filter</strong>(定义过滤器对请求过滤，完成⼀些功能) 链的⽅式提供了⽹关基本的功能，例如：鉴权、流量控制、熔断、路径重写、⽇志监控。</p>
</blockquote>
<p><strong>组成：</strong></p>
<ul>
<li><p><strong>路由route：</strong> ⽹关最基础的⼯作单元。路由由⼀个ID、⼀个⽬标URL、⼀系列的断⾔（匹配条件判断）和Filter过滤器组成。如果断⾔为true，则匹配该路由。</p>
</li>
<li><p><strong>断⾔predicates：</strong>参考了Java8中的断⾔Predicate，匹配Http请求中的所有内容（类似于nginx中的location匹配⼀样），如果断⾔与请求相匹配则路由。</p>
</li>
<li><p><strong>过滤器filter：</strong>标准的Spring webFilter，使⽤过滤器在请求之前或者之后执⾏业务逻辑。</p>
<p>请求前<code>pre</code>类型过滤器：做<strong>参数校验</strong>、<strong>权限校验</strong>、<strong>流量监控</strong>、<strong>⽇志输出</strong>、<strong>协议转换</strong>等，</p>
<p>请求前<code>post</code>类型的过滤器：做<strong>响应内容</strong>、<strong>响应头</strong>的修改、<strong>⽇志的输出</strong>、<strong>流量监控</strong>等。</p>
</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmc49l9babj31do0n7n13.jpg" alt="image-20210105001419761" style="zoom: 50%;" />

<p><strong>GateWayFilter</strong> 应⽤到单个路由路由上 、<strong>GlobalFilter</strong> 应⽤到所有的路由上</p>
<h4 id="Eureka-x2F-Zookeeper"><a href="#Eureka-x2F-Zookeeper" class="headerlink" title="Eureka &#x2F; Zookeeper"></a>Eureka &#x2F; Zookeeper</h4><blockquote>
<p>服务注册中⼼本质上是为了解耦服务提供者和服务消费者，为了⽀持弹性扩缩容特性，⼀个微服务的提供者的数量和分布往往是动态变化的。</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmawwm3k7bj30o80ecq3u.jpg" alt="image-20210103231405882" style="zoom: 50%;" />

<table>
<thead>
<tr>
<th>区别</th>
<th>Zookeeper</th>
<th>Eureka</th>
<th>Nacos</th>
</tr>
</thead>
<tbody><tr>
<td>CAP</td>
<td>CP</td>
<td>AP</td>
<td>CP&#x2F;AP切换</td>
</tr>
<tr>
<td>可用性</td>
<td>选举期间不可用</td>
<td>自我保护机制，数据不是最新的</td>
<td></td>
</tr>
<tr>
<td>组成</td>
<td>Leader和Follower</td>
<td>节点平等</td>
<td></td>
</tr>
<tr>
<td>优势</td>
<td>分布式协调</td>
<td>注册与发现</td>
<td>注册中心和配置中心</td>
</tr>
<tr>
<td>底层</td>
<td>进程</td>
<td>服务</td>
<td>Jar包</td>
</tr>
</tbody></table>
<p><strong>Eureka</strong>通过<strong>⼼跳检测</strong>、<strong>健康检查</strong>和<strong>客户端缓存</strong>等机制，提⾼系统的灵活性、可伸缩性和可⽤性。</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaxc493qyj30ji0a6mxx.jpg" alt="image-20210103232900353" style="zoom:67%;" />

<ol>
<li>us-east-1c、us-east-1d，us-east-1e代表不同的机房，<strong>每⼀个Eureka Server都是⼀个集群</strong>。</li>
<li>Service作为服务提供者向Eureka中注册服务，Eureka接受到注册事件会在<strong>集群和分区中进⾏数据同步</strong>，Client作为消费端（服务消费者）可以从Eureka中获取到服务注册信息，进⾏服务调⽤。</li>
<li>微服务启动后，会周期性地向Eureka<strong>发送⼼跳</strong>（默认周期为30秒）以续约⾃⼰的信息</li>
<li>Eureka在⼀定时间内<strong>（默认90秒）没有接收</strong>到某个微服务节点的⼼跳，Eureka将会注销该微服务节点</li>
<li>Eureka Client<strong>会缓存Eureka Server中的信息</strong>。即使所有的Eureka Server节点都宕掉，服务消费者依然可以使⽤缓存中的信息找到服务提供者</li>
</ol>
<p><strong>Eureka缓存</strong></p>
<blockquote>
<p>新服务上线后，服务消费者<strong>不能立即访问</strong>到刚上线的新服务，需要过⼀段时间后才能访问？或是将服务下线后，服务还是会被调⽤到，⼀段时候后<strong>才彻底停⽌服务</strong>，访问前期会导致频繁报错！</p>
</blockquote>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmaxmk97q0j30vw0j6gmu.jpg" alt="image-20210103233902439" style="zoom:50%;" />

<p>​    服务注册到注册中⼼后，服务实例信息是<strong>存储在Registry表</strong>中的，也就是内存中。但Eureka为了提⾼响应速度，在内部做了优化，加⼊了两层的缓存结构，将Client需要的实例信息，直接缓存起来，获取的时候直接从缓存中拿数据然后响应给 Client。 </p>
<ul>
<li><p>第⼀层缓存是<strong>readOnlyCacheMap</strong>，采⽤<strong>ConcurrentHashMap</strong>来存储数据的，主要负责定时与readWriteCacheMap进⾏数据同步，默认同步时间为 <strong>30</strong> 秒⼀次。</p>
</li>
<li><p>第⼆层缓存是<strong>readWriteCacheMap</strong>，采⽤<strong>Guava</strong>来实现缓存。缓存过期时间默认为<strong>180</strong>秒，当服务<strong>下线、过期、注册、状态变更</strong>等操作都会清除此缓存中的数据。</p>
</li>
<li><p>如果两级缓存都无法查询，会<strong>触发缓存的加载</strong>，从存储层拉取数据到缓存中，然后再返回给 Client。</p>
<p>Eureka之所以设计⼆级缓存机制，也是为了<strong>提⾼ Eureka Server 的响应速度</strong>，缺点是缓存会导致 Client<strong>获取不到最新的服务实例信息</strong>，然后导致⽆法快速发现新的服务和已下线的服务。</p>
</li>
</ul>
<p><strong>解决方案</strong></p>
<ul>
<li>我们可以<strong>缩短读缓存的更新时间</strong>让服务发现变得更加及时，或者<strong>直接将只读缓存关闭</strong>，同时可以缩短客户端如ribbon服务的定时刷新间隔，多级缓存也导致C层⾯（数据⼀致性）很薄弱。</li>
<li>Eureka Server 中会有<strong>定时任务去检测失效</strong>的服务，将服务实例信息从注册表中移除，也可以将这个失效检测的<strong>时间缩短</strong>，这样服务下线后就能够及时从注册表中清除。</li>
</ul>
<p><strong>自我保护机制开启条件</strong></p>
<ul>
<li>期望最小每分钟能够续租的次数（实例* 频率 * 比例&#x3D;&#x3D;10* 2 *0.85）</li>
<li>期望的服务实例数量（10）</li>
</ul>
<p><strong>健康检查</strong></p>
<ul>
<li><p>Eureka Client 会定时发送心跳给 Eureka Server 来证明自己处于健康的状态</p>
</li>
<li><p>集成SBA以后可以把所有健康状态信息一并返回给eureka</p>
</li>
</ul>
<h4 id="Feign-x2F-Ribbon"><a href="#Feign-x2F-Ribbon" class="headerlink" title="Feign &#x2F; Ribbon"></a>Feign &#x2F; Ribbon</h4><ul>
<li>Feign 可以与 Eureka 和 Ribbon 组合使用以支持负载均衡，</li>
<li>Feign 可以与 Hystrix 组合使用，支持熔断回退</li>
<li>Feign 可以与ProtoBuf实现快速的RPC调用</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmbxsh2rfnj30uo0fgmxz.jpg" alt="img" style="zoom:80%;" />

<ul>
<li><p><strong>InvocationHandlerFactory 代理</strong></p>
<p>采用 JDK 的动态代理方式生成代理对象，当我们调用这个接口，实际上是要去调用远程的 HTTP API</p>
</li>
<li><p><strong>Contract 契约组件</strong></p>
<p>比如请求类型是 GET 还是 POST，请求的 URI 是什么</p>
</li>
<li><p><strong>Encoder 编码组件 \ Decoder 解码组件</strong></p>
<p>通过该组件我们可以将请求信息采用指定的编码方式进行编解码后传输</p>
</li>
<li><p><strong>Logger 日志记录</strong></p>
<p>负责 Feign 中记录日志的，可以指定 Logger 的级别以及自定义日志的输出</p>
</li>
<li><p><strong>Client 请求执行组件</strong></p>
<p>负责 HTTP 请求执行的组件，Feign 中默认的 Client 是通过 JDK 的 HttpURLConnection 来发起请求的，在每次发送请求的时候，都会创建新的 HttpURLConnection 链接，Feign 的性能会很差，可以通过扩展该接口，使用 Apache HttpClient 等基于连接池的高性能 HTTP 客户端。</p>
</li>
<li><p><strong>Retryer 重试组件</strong></p>
<p>负责重试的组件，Feign 内置了重试器，当 HTTP 请求出现 IO 异常时，Feign 会限定一个最大重试次数来进行重试操作。</p>
</li>
<li><p><strong>RequestInterceptor 请求拦截器</strong></p>
<p>可以为 Feign 添加多个拦截器，在请求执行前设置一些扩展的参数信息。</p>
</li>
</ul>
<p><strong>Feign最佳使用技巧</strong></p>
<ul>
<li><p>继承特性</p>
</li>
<li><p>拦截器</p>
<p>比如添加指定的请求头信息，这个可以用在服务间传递某些信息的时候。</p>
</li>
<li><p>GET 请求多参数传递</p>
</li>
<li><p>日志配置</p>
<p>FULL 会输出全部完整的请求信息。</p>
</li>
<li><p>异常解码器</p>
<p>异常解码器中可以获取异常信息，而不是简单的一个code，然后转换成对应的异常对象返回。</p>
</li>
<li><p>源码查看是如何继承Hystrix</p>
<p>HystrixFeign.builder 中可以看到继承了 Feign 的 Builder，增加了 Hystrix的SetterFactory， build 方法里，对 invocationHandlerFactory 进行了重写， create 的时候<strong>返回HystrixInvocationHandler</strong>， 在 invoke 的时候<strong>会将请求包装成 HystrixCommand</strong> 去执行，这里就自然的集成了 Hystrix</p>
</li>
</ul>
<p><strong>Ribbon</strong></p>
<img src="http://s0.lgstatic.com/i/image2/M01/93/96/CgotOV2Nux-AO2PcAAEcl4M1Zi4629.png" alt="img" style="zoom: 50%;" />



<p><strong>使用方式</strong></p>
<ul>
<li><p><strong>原生 API</strong>，Ribbon 是 Netflix 开源的，没有使用 Spring Cloud，需要使用 Ribbon 的原生 API。</p>
</li>
<li><p><strong>Ribbon + RestTemplate</strong>，整合Spring Cloud 后，可以基于 RestTemplate 提供负载均衡的服务</p>
</li>
<li><p><strong>Ribbon + Feign</strong></p>
<img src="http://s0.lgstatic.com/i/image2/M01/93/76/CgoB5l2NuyCALoefAAAdV1DlSHY088.png" alt="img" style="zoom: 67%;" /></li>
</ul>
<p><strong>负载均衡算法</strong></p>
<ul>
<li><p>RoundRobinRule 是<strong>轮询的算法</strong>，A和B轮流选择。</p>
</li>
<li><p>RandomRule 是<strong>随机算法</strong>，这个就比较简单了，在服务列表中随机选取。</p>
</li>
<li><p>BestAvailableRule 选择一个最<strong>小的并发请求 server</strong></p>
</li>
</ul>
<p><strong>自定义负载均衡算法</strong></p>
<ul>
<li>实现 Irule 接口</li>
<li>继承 AbstractLoadBalancerRule 类</li>
</ul>
<p><strong>自定义负载均衡使用场景</strong>（核心）</p>
<ul>
<li><p><strong>灰度发布</strong></p>
<p>灰度发布是能够平滑过渡的一种发布方式，在发布过程中，先发布一部分应用，让指定的用户使用刚发布的应用，等到测试没有问题后，再将其他的全部应用发布。如果新发布的有问题，只需要将这部分恢复即可，不用恢复所有的应用。</p>
</li>
<li><p><strong>多版本隔离</strong></p>
<p>多版本隔离跟灰度发布类似，为了兼容或者过度，某些应用会有多个版本，这个时候如何保证 1.0 版本的客户端不会调用到 1.1 版本的服务，就是我们需要考虑的问题。</p>
</li>
<li><p><strong>故障隔离</strong></p>
<p>当线上某个实例发生故障后，为了不影响用户，我们一般都会先留存证据，比如：线程信息、JVM 信息等，然后将这个实例重启或直接停止。然后线下根据一些信息分析故障原因，如果我能做到故障隔离，就可以直接将出问题的实例隔离，不让正常的用户请求访问到这个出问题的实例，只让指定的用户访问，这样就可以单独用特定的用户来对这个出问题的实例进行测试、故障分析等。</p>
</li>
</ul>
<h4 id="Hystrix-x2F-Sentinel"><a href="#Hystrix-x2F-Sentinel" class="headerlink" title="Hystrix &#x2F; Sentinel"></a>Hystrix &#x2F; Sentinel</h4><p><strong>服务雪崩场景</strong></p>
<p>自己即是服务消费者，同时也是服务提供者，同步调用等待结果导致资源耗尽</p>
<p><strong>解决方案</strong></p>
<p>服务方：扩容、限流，排查代码问题，增加硬件监控</p>
<p>消费方：使用Hystrix资源隔离，熔断降级，快速失败</p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmby7y9ykzj30wr0ehac5.jpg" alt="img" style="zoom:150%;" />

<p><strong>Hystrix断路保护器的作用</strong></p>
<ul>
<li><strong>封装请求</strong>会将用户的操作进行统一封装，统一封装的目的在于进行统一控制。</li>
<li><strong>资源隔离限流</strong>会将对应的资源按照指定的类型进行隔离，比如<strong>线程池</strong>和<strong>信号量</strong>。<ul>
<li>计数器限流，例如5秒内技术1000请求，超数后限流，未超数重新计数</li>
<li>滑动窗口限流，解决计数器不够精确的问题，把一个窗口拆分多滚动窗口</li>
<li>令牌桶限流，类似景区售票，售票的速度是固定的，拿到令牌才能去处理请求</li>
<li>漏桶限流，生产者消费者模型，实现了恒定速度处理请求，能够绝对防止突发流量</li>
</ul>
</li>
<li><strong>失败回退</strong>其实是一个备用的方案，就是说当请求失败后，有没有备用方案来满足这个请求的需求。</li>
<li><strong>断路器</strong>这个是<strong>最核心</strong>的，，如果断路器处于打开的状态，那么所有请求都将失败，执行回退逻辑。如果断路器处于关闭状态，那么请求将会被正常执行。有些场景我们需要手动<strong>打开断路器强制降级</strong>。</li>
<li><strong>指标监控</strong>会对请求的生<strong>命周期进行监控</strong>，请求成功、失败、超时、拒绝等状态，都会被监控起来。</li>
</ul>
<p><strong>Hystrix使用上遇到的坑</strong></p>
<ul>
<li><p>配置可以对接<strong>配置中心</strong>进行动态调整</p>
<p>Hystrix 的配置项非常多，如果不对接配置中心，所有的配置只能在代码里修改，在集群部署的难以应对紧急情况，我们项目只设置一个 CommandKey，其他的都在配置中心进行指定，紧急情况如需隔离部分请求时，只需在配置中心进行修改以后，强制更新即可。</p>
</li>
<li><p>回退逻辑中可以<strong>手动埋点</strong>或者通过<strong>输出日志</strong>进行告警</p>
<p>当请求失败或者超时，会执行回退逻辑，如果有大量的回退，则证明某些服务出问题了，这个时候我们可以在回退的逻辑中进行埋点操作，上报数据给监控系统，也可以输出回退的日志，统一由日志收集的程序去进行处理，这些方式都可以将问题暴露出去，然后通过实时数据分析进行告警操作</p>
</li>
<li><p>用 <strong>ThreadLocal</strong>配合<strong>线程池隔离</strong>模式需当心</p>
<p>当我们用了线程池隔离模式的时候，被隔离的方法会包装成一个 Command 丢入到独立的线程池中进行执行，这个时候就是从 A 线程切换到了 B 线程，ThreadLocal 的数据就会丢失</p>
</li>
<li><p><strong>Gateway中</strong>多用信号量隔离</p>
<p>网关是所有请求的入口，路由的服务数量会很多，几十个到上百个都有可能，如果用线程池隔离，那么需要创建上百个独立的线程池，开销太大，用信号量隔离开销就小很多，还能起到限流的作用。</p>
</li>
</ul>
<p>[^常见问题]: Hystrix的超时时间要⼤于Ribbon的超时时间，因为Hystrix将请求包装了起来，特别需要注意的是，如果Ribbon开启了重试机制，⽐如重试3 次，Ribbon 的超时为 1 秒，那么Hystrix 的超时时间应该⼤于 3 秒，否则就会出现 Ribbon 还在重试中，⽽ Hystrix 已经超时的现象。</p>
<p><strong>Sentinel</strong> </p>
<blockquote>
<p>Sentinel是⼀个⾯向云原⽣微服务的流量控制、熔断降级组件。</p>
<p>替代Hystrix，针对问题：服务雪崩、服务降级、服务熔断、服务限流</p>
</blockquote>
<p>Hystrix区别：</p>
<ul>
<li>独⽴可部署Dashboard（基于 Spring Boot 开发）控制台组件</li>
<li>不依赖任何框架&#x2F;库，减少代码开发，通过UI界⾯配置即可完成细粒度控制</li>
</ul>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmbza4zixbj30kl09sq4p.jpg" alt="image-20210104212151598" style="zoom:80%;" />

<p><strong>丰富的应⽤场景</strong>：Sentinel 承接了阿⾥巴巴近 10 年的双⼗⼀⼤促流量的核⼼场景，例如秒杀、消息削峰填⾕、集群流量控制、实时熔断下游不可⽤应⽤等。</p>
<p><strong>完备的实时监控</strong>：可以看到500 台以下规模的集群的汇总也可以看到单机的秒级数据。</p>
<p><strong>⼴泛的开源⽣态：</strong>与 SpringCloud、Dubbo的整合。您只需要引⼊相应的依赖并进⾏简单的配置即可快速地接⼊ Sentinel。</p>
<p><strong>区别：</strong></p>
<ul>
<li>Sentinel不会像Hystrix那样放过⼀个请求尝试⾃我修复，就是明明确确按照时间窗⼝来，熔断触发后，时间窗⼝内拒绝请求，时间窗⼝后就恢复。</li>
<li>Sentinel Dashboard中添加的规则数据存储在内存，微服务停掉规则数据就消失，在⽣产环境下不合适。可以将Sentinel规则数据持久化到Nacos配置中⼼，让微服务从Nacos获取。</li>
</ul>
<table>
<thead>
<tr>
<th>#</th>
<th>Sentinel</th>
<th>Hystrix</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离</td>
<td>线程池隔离&#x2F;信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间或失败比率</td>
<td>基于失败比率</td>
</tr>
<tr>
<td>实时指标实现</td>
<td>滑动窗口</td>
<td>滑动窗口（基于 RxJava）</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
</tr>
<tr>
<td>限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>不支持</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持慢启动、匀速器模式</td>
<td>不支持</td>
</tr>
<tr>
<td>系统负载保护</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>控制台</td>
<td>开箱即用，可配置规则、查看秒级监控、机器发现等</td>
<td>不完善</td>
</tr>
<tr>
<td>常见框架的适配</td>
<td>Servlet、Spring Cloud、Dubbo、gRPC</td>
<td>Servlet、Spring Cloud Netflix</td>
</tr>
</tbody></table>
<h4 id="Config-x2F-Nacos"><a href="#Config-x2F-Nacos" class="headerlink" title="Config &#x2F; Nacos"></a>Config &#x2F; Nacos</h4><blockquote>
<p>Nacos是阿⾥巴巴开源的⼀个针对微服务架构中<strong>服务发现</strong>、<strong>配置管理</strong>和<strong>服务管理平台</strong>。</p>
<p>Nacos就是<strong>注册中⼼+配置中⼼</strong>的组合（Nacos&#x3D;Eureka+Confifig+Bus）</p>
</blockquote>
<p><strong>Nacos</strong>功能特性</p>
<ul>
<li>服务发现与健康检查</li>
<li>动态配置管理</li>
<li>动态DNS服务</li>
<li>服务和元数据管理</li>
</ul>
<p><strong>保护阈值：</strong></p>
<p>当服务A健康实例数&#x2F;总实例数 &lt; 保护阈值 的时候，说明健康实例真的不多了，这个时候保护阈值会被触发（状态true），nacos将会把该服务所有的实例信息（健康的+不健康的）全部提供给消费者，消费者可能访问到不健康的实例，请求失败，但这样也⽐造成雪崩要好，牺牲了⼀些请求，保证了整个系统的⼀个可⽤。</p>
<p><strong>Nacos</strong> 数据模型（领域模型）</p>
<ul>
<li><strong>Namespace</strong> 代表不同的环境，如开发dev、测试test、⽣产环境prod</li>
<li><strong>Group</strong> 代表某项⽬，⽐如爪哇云项⽬</li>
<li><strong>Service</strong> 某个项⽬中具体xxx服务</li>
<li><strong>DataId</strong> 某个项⽬中具体的xxx配置⽂件</li>
</ul>
<p>可以通过 Spring Cloud 原⽣注解 <code>@RefreshScope</code> 实现配置⾃动更新</p>
<h4 id="Bus-x2F-Stream"><a href="#Bus-x2F-Stream" class="headerlink" title="Bus &#x2F; Stream"></a>Bus &#x2F; Stream</h4><blockquote>
<p>Spring Cloud Stream 消息驱动组件帮助我们更快速，更⽅便的去构建<strong>消息驱动</strong>微服务的</p>
<p>本质：屏蔽掉了底层不同<strong>MQ</strong>消息中间件之间的差异，统⼀了<strong>MQ</strong>的编程模型，降低了学习、开发、维护<strong>MQ</strong>的成本，⽬前⽀持Rabbit、Kafka两种消息</p>
</blockquote>
<h4 id="Sleuth-x2F-Zipkin"><a href="#Sleuth-x2F-Zipkin" class="headerlink" title="Sleuth &#x2F; Zipkin"></a><strong>Sleuth &#x2F; Zipkin</strong></h4><p><strong>全链路追踪</strong></p>
<img src="https://tva1.sinaimg.cn/large/0081Kckwly1gmc3avezqrj30xb0lw76z.jpg" alt="image-20210104234058218" style="zoom:67%;" />

<p><strong>Trace ID</strong>：当请求发送到分布式系统的⼊⼝端点时，Sleuth为该请求创建⼀个唯⼀的跟踪标识Trace ID，在分布式系统内部流转的时候，框架始终保持该唯⼀标识，直到返回给请求⽅</p>
<p><strong>Span ID</strong>：为了统计各处理单元的时间延迟，当请求到达各个服务组件时，也是通过⼀个唯⼀标识SpanID来标记它的开始，具体过程以及结束。</p>
<p>Spring Cloud Sleuth （追踪服务框架）可以追踪服务之间的调⽤，Sleuth可以记录⼀个服务请求经过哪些服务、服务处理时⻓等，根据这些，我们能够理清各微服务间的调⽤关系及进⾏问题追踪分析。</p>
<p><strong>耗时分析</strong>：通过 Sleuth 了解采样请求的耗时，分析服务性能问题（哪些服务调⽤⽐较耗时）</p>
<p><strong>链路优化</strong>：发现频繁调⽤的服务，针对性优化等</p>
<p><strong>聚合展示</strong>：数据信息发送给 Zipkin 进⾏聚合，利⽤ Zipkin 存储并展示数据。</p>
<h3 id="安全认证"><a href="#安全认证" class="headerlink" title="安全认证"></a><strong>安全认证</strong></h3><ul>
<li><p>Session</p>
<p>认证中最常用的一种方式，也是最简单的。存在<strong>多节点session丢失</strong>的情况，可通过<strong>nginx粘性Cookie</strong>和Redis集中式Session存储解决</p>
</li>
<li><p>HTTP Basic Authentication </p>
<p>服务端针对请求头中base64加密的Authorization 和用户名和密码进行<strong>校验</strong>。</p>
</li>
<li><p>Token</p>
<p>Session 只是一个 key，<strong>会话信息存储在后端</strong>。而 Token 中会存储用户的信息，然后通过加密算法进行加密，只有服务端才能解密，<strong>服务端拿到 Token 后进行解密获取用户信息</strong>。</p>
</li>
<li><p>JWT认证</p>
</li>
</ul>
<blockquote>
<p>JWT（JSON Web Token）用户提供用户名和密码给认证服务器，服务器验证用户提交信息的合法性；如果验证成功，会产生并返回一个 Token，用户可以使用这个 Token 访问服务器上受保护的资源。</p>
</blockquote>
<img src="http://s0.lgstatic.com/i/image2/M01/AB/87/CgotOV3WUG2ARl98AAD_xcd-ElM857.png" alt="img" style="zoom:70%;" />

<ol>
<li>认证服务提供认证的 API，校验用户信息，返回认证结果</li>
<li>通过JWTUtils中的RSA算法，生成JWT token，token里封装用户id和有效期</li>
<li>服务间参数通过请求头进行传递，服务内部通过 ThreadLocal 进行上下文传递。</li>
<li>Hystrix导致ThreadLocal失效的问题可以通过，重写 Hystrix 的 Callable 方法，传递需要的数据。</li>
</ol>
<p><strong>Token最佳实践</strong></p>
<ul>
<li><p>设置<strong>较短（合理）的过期时间</strong>。</p>
</li>
<li><p>注销的 Token <strong>及时清除</strong>（放入 Redis 中做一层过滤）。</p>
<p>虽然不能修改 Token 的信息，但是能在验证层面做一层过滤来进行处理。</p>
</li>
<li><p>监控 Token 的<strong>使用频率</strong>。</p>
<p>为了防止数据被别人爬取，最常见的就是监控使用频率，程序写出来的爬虫程序访问频率是有迹可循的 </p>
</li>
<li><p>核心功能敏感操作可以使用<strong>动态验证</strong>（验证码）。</p>
<p>比如提现的功能，要求在提现时再次进行验证码的验证，防止不是本人操作。</p>
</li>
<li><p><strong>网络环境、浏览器</strong>信息等识别。</p>
<p>银行 APP 对环境有很高的要求，使用时如果断网，APP 会自动退出，重新登录，因为网络环境跟之前使用的不一样了，还有一些浏览器的信息之类的判断，这些都是可以用来保证后端 API 的安全。</p>
</li>
<li><p><strong>加密密钥</strong>支持动态修改。</p>
<p>如果 Token 的加密密钥泄露了，也就意味着别人可以伪造你的 Token，可以将密钥存储在配置中心，以支持动态修改刷新，需要注意的是建议在流量低峰的时候去做更换的操作，否则 Token 全部失效，所有在线的请求都会重新申请 Token，并发量会比较大。</p>
</li>
</ul>
<h3 id="灰度发布"><a href="#灰度发布" class="headerlink" title="灰度发布"></a>灰度发布</h3><p><strong>痛点：</strong></p>
<ul>
<li><p>服务数量多，业务变动频繁，一周一发布</p>
</li>
<li><p>灰度发布能降低发布失败风险，<strong>减少影响范围</strong></p>
<p>通过灰度发布，先让一部分用户体验新的服务，或者只让测试人员进行测试，等功能正常后再全部发布，这样能降低发布失败带来的影响范围。 </p>
</li>
<li><p>当发布出现故障时，可以<strong>快速回滚</strong>，不影响用户</p>
<p>灰度后如果发现这个节点有问题，那么只需回滚这个节点即可，当然不回滚也没关系，通过灰度策略隔离，也不会影响正常用户</p>
</li>
</ul>
<p>可以通过Ribbon的负载均衡策略进行灰度发布，可以使用更可靠的Discovery</p>
<p><strong>Discovery</strong></p>
<blockquote>
<p>基于Discovery 服务注册发现、Ribbon 负载均衡、Feign 和 RestTemplate 调用等组件的企业级微服务开源解决方案，包括灰度发布、灰度路由、服务隔离等功能</p>
</blockquote>
<img src="https://s0.lgstatic.com/i/image3/M01/54/41/CgpOIF3nXSaAB9bRAAE8rktrUyY037.png" alt="img" style="zoom:50%;" />

<ol>
<li><p>首先将需要发布的服务从转发过程中移除，等流量剔除之后再发布。</p>
</li>
<li><p>部分机器中的版本进行升级，用户默认还是请求老的服务，通过版本来支持测试请求。</p>
</li>
<li><p>测试完成之后，让新的版本接收正常流量，然后部署下一个节点，以此类推。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">grayVersions = &#123;<span class="string">&quot;discovery-article-service&quot;</span>:[<span class="string">&quot;1.01&quot;</span>]&#125;</span><br></pre></td></tr></table></figure>



<h3 id="多版本隔离"><a href="#多版本隔离" class="headerlink" title="多版本隔离"></a>多版本隔离</h3><img src="https://s0.lgstatic.com/i/image3/M01/54/41/Cgq2xl3nXSeAZMTOAAE2sCaIhPE668.png" alt="img" style="zoom:50%;" />



<p><strong>本地复用测试服务</strong>-Eureka Zone亮点</p>
<p>​    <strong>region</strong> 地理上的分区，比如北京、上海等</p>
<p>​    <strong>zone</strong> 可以简单理解为 region 内的具体机房</p>
<p>​    在调用的过程中会优先选择相同的 zone 发起调用，当找不到相同名称的 zone 时会选择其他的 zone 进行调用，我们可以利用这个特性来解决本地需要启动多个服务的问题。</p>
<p>[^]: 当你访问修改的服务 A 时，这个服务依赖了 B、C 两个服务，B 和 C 本地没有启动，B 和 C 找不到相同的 zone 就会选择其他的 zone 进行调用，也就是会调用到测试环境部署的 B 和 C 服务，这样一来就解决了本地部署多个服务的问题。</p>
<h4 id="各组件调优"><a href="#各组件调优" class="headerlink" title="各组件调优"></a><strong>各组件调优</strong></h4><p>当你对网关进行压测时，会发现并发量一直上不去，错误率也很高。因为你用的是默认配置，这个时候我们就需要去调整配置以达到最优的效果。</p>
<p>首先我们可以对容器进行调优，最常见的就是<strong>内置的 Tomcat</strong> 容器了，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.tomcat.accept-count <span class="comment">//请求队列排队数</span></span><br><span class="line">server.tomcat.max-threads <span class="comment">//最大线程数</span></span><br><span class="line">server.tomcat.max-connections <span class="comment">//最大连接数</span></span><br></pre></td></tr></table></figure>

<p><strong>Hystrix</strong> 的信号量（semaphore）隔离模式，并发量上不去很大的原因都在这里，信号量默认值是 100，也就是最大并发只有 100，超过 100 就得等待。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//信号量</span></span><br><span class="line">zuul.semaphore.max-semaphores <span class="comment">//信号量：最大并发数</span></span><br><span class="line"><span class="comment">//线程池</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.coreSize <span class="comment">//最大线程数</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.maximumSize <span class="comment">//队列的大</span></span><br><span class="line">hystrix.threadpool.<span class="keyword">default</span>.maxQueueSize <span class="comment">//等参数</span></span><br></pre></td></tr></table></figure>

<p>配置<strong>Gateway</strong>并发信息，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gateway.host.max-per-route-connections <span class="comment">//每个路由的连接数 </span></span><br><span class="line">gateway.host.max-total-connections <span class="comment">//总连接数</span></span><br></pre></td></tr></table></figure>

<p>调整<strong>Ribbon</strong> 的并发配置，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ribbon.MaxConnectionsPerHost <span class="comment">//单服务并发数</span></span><br><span class="line">ribbon.MaxTotalConnections   <span class="comment">//总并发数</span></span><br></pre></td></tr></table></figure>

<p>修改<strong>Feign</strong>默认的HttpURLConnection 替换成 httpclient 来提高性能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">feign.httpclient.max-connections-per-route<span class="comment">//每个路由的连接数</span></span><br><span class="line">feign.httpclient.max-connections <span class="comment">//总连接数</span></span><br></pre></td></tr></table></figure>

<p>Gateway+配置中心实现动态路由</p>
<p>Feign+配置中心实现动态日志</p>
<h1 id="九、分布式篇"><a href="#九、分布式篇" class="headerlink" title="九、分布式篇"></a><strong>九、分布式篇</strong></h1><blockquote>
<p>分布式系统是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p>
</blockquote>
<h3 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a><strong>发展历程</strong></h3><ul>
<li><p>入口级负载均衡</p>
<ul>
<li>网关负载均衡</li>
<li>客户端负载均衡</li>
</ul>
</li>
<li><p>单应用架构</p>
<ul>
<li>应用服务和数据服务分离</li>
<li>应用服务集群</li>
<li>应用服务中心化SAAS</li>
</ul>
</li>
<li><p>数据库主备读写分离</p>
<ul>
<li>全文搜索引擎加快数据统计</li>
<li>缓存集群缓解数据库读压力</li>
<li>分布式消息中间件缓解数据库写压力</li>
<li>数据库水平拆分适应微服务</li>
<li>数据库垂直拆分解决慢查询</li>
</ul>
</li>
<li><p>划分上下文拆分微服务</p>
<ul>
<li>服务注册发现（Eureka、Nacos）</li>
<li>配置动态更新（Config、Apollo）</li>
<li>业务灰度发布（Gateway、Feign）</li>
<li>统一安全认证（Gateway、Auth）</li>
<li>服务降级限流（Hystrix、Sentinel）</li>
<li>接口检查监控（Actuator、Prometheus）</li>
<li>服务全链路追踪（Sleuth、Zipkin）</li>
</ul>
</li>
</ul>
<h3 id="CAP"><a href="#CAP" class="headerlink" title="CAP"></a>CAP</h3><ul>
<li><strong>一致性</strong>（2PC、3PC、Paxos、Raft）<ul>
<li>强一致性：<strong>数据库一致性</strong>，牺牲了性能<ul>
<li><strong>ACID</strong>：原子性、一致性、隔离性、持久性</li>
</ul>
</li>
<li>弱一致性：<strong>数据库和缓存</strong>，<strong>延迟双删、重试</strong></li>
<li>单调读一致性：<strong>缓存一致性</strong>，ID或者IP哈希</li>
<li>最终一致性：<strong>边缘业务</strong>，消息队列</li>
</ul>
</li>
<li><strong>可用性</strong>（多级缓存、读写分离）<ul>
<li><strong>BASE</strong> 基本可用：限流导致响应速度慢、降级导致用户体验差<ul>
<li>Basically Availabe 基本可用  </li>
<li>Soft state 软状态</li>
<li>Eventual Consistency 最终一致性</li>
</ul>
</li>
</ul>
</li>
<li>分区容忍性（一致性Hash解决扩缩容问题）</li>
</ul>
<div style="page-break-after: always;"></div>

<h3 id="一致性-1"><a href="#一致性-1" class="headerlink" title="一致性"></a>一致性</h3><h4 id="XA方案"><a href="#XA方案" class="headerlink" title="XA方案"></a>XA方案</h4><p><strong>2PC</strong>协议：两阶段提交协议，P是指<strong>准备</strong>阶段，C是指<strong>提交</strong>阶段</p>
<ul>
<li>准备阶段：询问是否可以开始，写Undo、Redo日志，收到响应</li>
<li>提交阶段：执行Redo日志进行<strong>Commit</strong>，执行Undo日志进行<strong>Rollback</strong></li>
</ul>
<p><strong>3PC</strong>协议：将提交阶段分为<strong>CanCommit</strong>、<strong>PreCommit</strong>、<strong>DoCommit</strong>三个阶段</p>
<p><strong>CanCommit</strong>：发送canCommit请求，并开始等待</p>
<p><strong>PreCommit</strong>：收到全部Yes，写Undo、Redo日志。超时或者No，则中断</p>
<p><strong>DoCommit</strong>：执行Redo日志进行<strong>Commit</strong>，执行Undo日志进行<strong>Rollback</strong> </p>
<p>区别是第二步，参与者<strong>自身增加了超时</strong>，如果<strong>失败可以及时释放资源</strong></p>
<h4 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a><strong>Paxos算法</strong></h4><blockquote>
<p>如何在一个发生异常的分布式系统中，快速且正确地在集群内部对某个数据的值达成一致</p>
</blockquote>
<p>​    参与者（例如Kafka）的一致性可以由协调者（例如Zookeeper）来保证，<strong>协调者的一致性就只能由Paxos保证了</strong></p>
<p>Paxos算法中的角色：</p>
<ul>
<li><strong>Client</strong>：客户端、例如，对分布式文件服务器中文件的写请求。</li>
<li><strong>Proposer</strong>：提案发起者，根据Accept返回选择最大N对应的V，发送[N+1,V]</li>
<li><strong>Acceptor</strong>：决策者，Accept以后会拒绝小于N的提案，并把自己的[N,V]返回给Proposer</li>
<li><strong>Learners</strong>：最终决策的学习者、学习者充当该协议的复制因素</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//算法约束</span></span><br><span class="line">P1:一个Acceptor必须接受它收到的第一个提案。</span><br><span class="line"><span class="comment">//考虑到半数以上才作数，一个Accpter得接受多个相同v的提案</span></span><br><span class="line">P2a:如果某个v的提案被accept，那么被Acceptor接受编号更高的提案必须也是v</span><br><span class="line">P2b:如果某个v的提案被accept，那么从Proposal提出编号更高的提案必须也是v</span><br><span class="line"><span class="comment">//如何确保v的提案Accpter被选定后，Proposal都能提出编号更高的提案呢</span></span><br><span class="line">针对任意的[Mid,Vid]，有半数以上的Accepter集合S，满足以下二选一：</span><br><span class="line">  S中接受的提案都大于Mid</span><br><span class="line">  S中接受的提案若小于Mid，编号最大的那个值为Vid</span><br></pre></td></tr></table></figure>

<p><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmlato63bnj319m0u0wmi.jpg" alt="image-20210112225118095"></p>
<p>面试题：如何保证Paxos算法活性</p>
<p>​    假设存在这样一种极端情况，有两个Proposer依次提出了一系列编号递增的提案，导致最终陷入死循环，没有value被选定</p>
<ul>
<li><strong>通过选取主Proposer</strong>，规定只有主Proposer才能提出议案。只要主Proposer和过半的Acceptor能够正常网络通信，主Proposer提出一个编号更高的提案，该提案终将会被批准。</li>
<li>每个Proposer发送提交提案的时间设置为<strong>一段时间内随机</strong>，保证不会一直死循环</li>
</ul>
<h4 id="ZAB算法"><a href="#ZAB算法" class="headerlink" title="ZAB算法"></a><strong>ZAB算法</strong></h4><h4 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h4><blockquote>
<p>Raft 是一种为了管理复制日志的一致性算法</p>
</blockquote>
<p>Raft使用<strong>心跳机制</strong>来触发选举。当server启动时，初始状态都是<strong>follower</strong>。每一个server都有一个定时器，超时时间为election timeout（<strong>一般为150-300ms</strong>），如果某server<strong>没有超时的情况下收到</strong>来自领导者或者候选者的任何消息，<strong>定时器重启</strong>，如果超时，它就<strong>开始一次选举</strong>。</p>
<p><strong>Leader异常</strong>：异常期间Follower会超时选举，完成后Leader比较彼此步长</p>
<p><strong>Follower异常：</strong>恢复后直接同步至Leader当前状态</p>
<p><strong>多个Candidate：</strong>选举时失败，失败后超时继续选举</p>
<h4 id="数据库和Redis的一致性"><a href="#数据库和Redis的一致性" class="headerlink" title="数据库和Redis的一致性"></a>数据库和Redis的一致性</h4><p><strong>全量缓存保证高效读取</strong></p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185425386.png" alt="image-20210418185425386" style="zoom:50%;" />

<p>所有数据都存储在缓存里，读服务在查询时不会再降级到数据库里，所有的请求都完全依赖缓存。此时，因降级到数据库导致的毛刺问题就解决了。但全量缓存并<strong>没有解决更新时的分布式事务</strong>问题，反而把问题放大了。因为全量缓存<strong>对数据更新要求更加严格</strong>，要求所有数据库<strong>已有数据和实时更新</strong>的数据必须完全同步至缓存，不能有遗漏。对于此问题，一种有效的方案是采用<strong>订阅数据库的 Binlog</strong> 实现数据同步</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185457610.png" alt="image-20210418185457610" style="zoom:50%;" />

<p>​    现在很多开源工具（如<strong>阿里的 Canal</strong>等）可以模拟主从复制的协议。通过模拟协议读取主数据库的 Binlog 文件，从而获取主库的所有变更。对于这些变更，它们开放了各种接口供业务服务获取数据。</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185516743.png" alt="image-20210418185516743" style="zoom:50%;" />

<p>​    将 Binlog 的中间件挂载至目标数据库上，就可以<strong>实时获取该数据库的所有变更数据</strong>。对这些变更数据解析后，便可<strong>直接写入缓存里</strong>。优点还有：</p>
<ul>
<li><p>大幅提升了读取的速度，降低了延迟</p>
</li>
<li><p>Binlog 的主从复制是基于 <strong>ACK</strong> 机制， 解决了分布式事务的问题</p>
<p>如果同步缓存失败了，被消费的 Binlog 不会被确认，下一次会重复消费，数据最终会写入缓存中</p>
</li>
</ul>
<p><strong>缺点</strong>不可避免：1、增加复杂度 2、消耗缓存资源 3、需要筛选和压缩数据 4、极端情况数据丢失</p>
<img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185549520.png" alt="image-20210418185549520" style="zoom:50%;" />

<p>可以通过异步校准方案进行补齐，但是会损耗数据库性能。但是此方案会隐藏中间件使用错误的细节，线上环境前期更重要的是记录日志排查在做后续优化，不能本末倒置。</p>
<div style="page-break-after: always;"></div>

<h3 id="可用性-1"><a href="#可用性-1" class="headerlink" title="可用性"></a>可用性</h3><h4 id="心跳检测"><a href="#心跳检测" class="headerlink" title="心跳检测"></a><strong>心跳检测</strong></h4><blockquote>
<p>以<strong>固定的频率</strong>向其他节点汇报当前节点状态的方式。收到心跳，说明网络和节点的状态是健康的。心跳汇报时，一般会携带一些附加的<strong>状态、元数据，以便管理</strong></p>
</blockquote>
<p><strong>周期检测心跳机制</strong>：超时未返回</p>
<p><strong>累计失效检测机制</strong>：重试超次数</p>
<h4 id="多机房实时热备"><a href="#多机房实时热备" class="headerlink" title="多机房实时热备"></a><strong>多机房实时热备</strong></h4><img src="/Users/suhongliu/Library/Application Support/typora-user-images/image-20210418185610597.png" alt="6.png" style="zoom:50%;" />

<p>两套缓存集群可以分别部署到不同城市的机房。读服务也相应地部署到不同城市或不同分区。在承接请求时，不同机房或分区的读服务只依赖同样属性的缓存集群。此方案有两个好处。</p>
<ol>
<li><strong>提升了性能。</strong>读服务不要分层，读服务要尽可能地和缓存数据源靠近。</li>
<li><strong>增加了可用。</strong>当单机房出现故障时，可以秒级将所有流量都切换至存活的机房或分区</li>
</ol>
<p>此方案虽然带来了性能和可用性的提升，但代价是资源成本的上升。</p>
<div style="page-break-after: always;"></div>

<h3 id="分区容错性"><a href="#分区容错性" class="headerlink" title="分区容错性"></a>分区容错性</h3><blockquote>
<p>分布式系统对于错误包容的能力</p>
</blockquote>
<p>通过限流、降级、兜底、重试、负载均衡等方式增强系统的健壮性</p>
<h4 id="日志复制"><a href="#日志复制" class="headerlink" title="日志复制"></a>日志复制</h4><p><img src="https://i.loli.net/2021/01/14/fmYEJy9N7Zjp2Xd.png" alt="image-20210114154435003"></p>
<ol>
<li><strong>Leader</strong>把指令添加到日志中，发起 RPC 给其他的服务器，让他们复制这条信息</li>
<li><strong>Leader</strong>会不断的重试，直到所有的 Follower响应了ACK并复制了所有的日志条目</li>
<li>通知所有的<strong>Follower</strong>提交，同时Leader该表这条日志的状态，并返回给客户端</li>
</ol>
<h4 id="主备（Master-Slave）"><a href="#主备（Master-Slave）" class="headerlink" title="主备（Master-Slave）"></a><strong>主备（Master-Slave）</strong></h4><p>​    主机宕机时，备机接管主机的一切工作，主机恢复正常后，以自动（<strong>热备</strong>）或手动（<strong>冷备</strong>）方式将服务切换到主机上运行，<strong>Mysql</strong>和<strong>Redis</strong>中常用。</p>
<p>​    MySQL之间数据复制的基础是<strong>二进制日志文件</strong>（binary log fifile）。它的数据库中所有操作都会以<strong>“事件”</strong>的方式记录在二进制日志中，其他数据库作为slave通过一个<strong>I&#x2F;O线程与主服务器保持通信</strong>，并<strong>监控</strong>master的二进制日志文件的变化，如果发现master二进制日志文件<strong>发生变化</strong>，则会把变化复制到自己的<strong>中继日志</strong>中，然后slave的一个SQL线程会把相关的“事件”<strong>执行</strong>到自己的数据库中，以此实现从数据库和主数据库的<strong>一致性</strong>，也就实现了<strong>主从复制</strong></p>
<h4 id="互备（Active-Active）"><a href="#互备（Active-Active）" class="headerlink" title="互备（Active-Active）"></a><strong>互备（Active-Active）</strong></h4><p>​    指两台主机<strong>同时运行</strong>各自的服务工作且<strong>相互监测</strong>情况。在数据库高可用部分，常见的互备是<strong>MM</strong>模式。MM模式即<strong>Multi-Master</strong>模式，指一个系统存在多个master，每个master都具有<strong>read-write</strong>能力，会根据<strong>时间戳</strong>或<strong>业务逻辑</strong>合并版本。</p>
<h4 id="集群（Cluster）模式"><a href="#集群（Cluster）模式" class="headerlink" title="集群（Cluster）模式"></a><strong>集群（Cluster）模式</strong></h4><p>​    是指有多个节点在运行，同时可以通过主控节点<strong>分担服务</strong>请求。如Zookeeper。集群模式需要解决主控节点<strong>本身的高可用</strong>问题，一般采用主备模式。</p>
<div style="page-break-after: always;"></div>

<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><h4 id="XA方案-1"><a href="#XA方案-1" class="headerlink" title="XA方案"></a>XA方案</h4><p><strong>两阶段提交</strong> | <strong>三阶段提交</strong></p>
<ul>
<li>准备阶段的资源锁定，存在性能问题，严重时会造成死锁问题</li>
<li>提交事务请求后，出现网络异常，部分数据收到并执行，会造成一致性问</li>
</ul>
<h4 id="TCC方案"><a href="#TCC方案" class="headerlink" title="TCC方案"></a>TCC方案</h4><p><strong>Try Confirm Cancel &#x2F; 短事务</strong></p>
<ul>
<li><p><strong>Try</strong> 阶段：这个阶段说的是对各个服务的资源做检测以及对资源进行<strong>锁定或者预留</strong></p>
</li>
<li><p><strong>Confirm</strong> 阶段：这个阶段说的是在各个服务中<strong>执行实际的操作</strong></p>
</li>
<li><p><strong>Cancel</strong> 阶段：如果任何一个服务的业务方法执行出错，那么就需要<strong>进行补偿</strong>&#x2F;回滚</p>
</li>
</ul>
<h4 id="Saga方案"><a href="#Saga方案" class="headerlink" title="Saga方案"></a><strong>Saga方案</strong></h4><p>事务性补偿 &#x2F; 长事务</p>
<ul>
<li>流程<strong>长</strong>、流程<strong>多</strong>、调用第三方业务</li>
</ul>
<h4 id="本地消息表（eBay）"><a href="#本地消息表（eBay）" class="headerlink" title="本地消息表（eBay）"></a><strong>本地消息表（eBay）</strong></h4><h4 id="MQ最终一致性"><a href="#MQ最终一致性" class="headerlink" title="MQ最终一致性"></a><strong>MQ最终一致性</strong></h4><img src="https://tva1.sinaimg.cn/large/008eGmZEly1gmr1k3dfbxj31h00pkjy8.jpg" alt="image-20210117220405706" style="zoom:50%;" />

<p>比如阿里的 RocketMQ 就支持消息事务（核心：<strong>双端确认，重试幂等</strong>）</p>
<ol>
<li>A**(订单)** 系统先发送一个 <strong>prepared</strong> 消息到 mq，prepared 消息发送失败则取消操作不执行了</li>
<li>发送成功后，那么执行本地事务，执行成功和和失败发送<strong>确认和回滚</strong>消息到mq</li>
<li>如果发送了确认消息，那么此时 B**(仓储)** 系统会接收到确认消息，然后执行本地的事务</li>
<li>mq 会自动<strong>定时轮询</strong>所有 prepared 消息回调的接口，确认事务执行状态</li>
<li>B 的事务失败后自动<strong>不断重试</strong>直到成功，达到一定次数后发送报警由人工来<strong>手工回滚</strong>和<strong>补偿</strong></li>
</ol>
<h4 id="最大努力通知方案（订单-gt-积分）"><a href="#最大努力通知方案（订单-gt-积分）" class="headerlink" title="最大努力通知方案（订单 -&gt; 积分）"></a>最大努力通知方案（订单 -&gt; 积分）</h4><ol>
<li>系统 A 本地事务执行完之后，发送个消息到 MQ；</li>
<li>这里会有个专门消费 MQ 的<strong>最大努力通知服务</strong>，接着调用系统 B 的接口；</li>
<li>要是系统 B 执行失败了，就定时尝试重新调用系统 B，<strong>反复 N 次</strong>，最后还是不行就<strong>放弃</strong></li>
</ol>
<p>你找一个严格<strong>资金</strong>要求绝对不能错的场景，你可以说你是用的 <strong>TCC 方案</strong>；</p>
<p>如果是一般的分布式事务场景，例如<strong>积分</strong>数据，可以用可靠消息<strong>最终一致性方案</strong></p>
<p>如果分布式场景<strong>允许不一致</strong>，可以使用最大努力通知方案</p>
<div style="page-break-after: always;"></div>

<h3 id="面试题-3"><a href="#面试题-3" class="headerlink" title="面试题"></a>面试题</h3><h4 id="分布式Session实现方案"><a href="#分布式Session实现方案" class="headerlink" title="分布式Session实现方案"></a>分布式Session实现方案</h4><ul>
<li>基于JWT的Token，数据从cache或者数据库中获取</li>
<li>基于Tomcat的Redis，简单配置conf文件</li>
<li>基于Spring的Redis，支持SpringCloud和Springb</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java学习路线问题整理</title>
    <url>/posts/6e379f18/</url>
    <content><![CDATA[<h1 id="java学习路线问题整理"><a href="#java学习路线问题整理" class="headerlink" title="java学习路线问题整理"></a>java学习路线问题整理</h1><p><img src="https://pic1.zhimg.com/50/v2-62586d6789e1a081cc3dc6efd7bdd289_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-62586d6789e1a081cc3dc6efd7bdd289_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="Java-基础"><a href="#Java-基础" class="headerlink" title="Java 基础"></a><strong>Java 基础</strong></h2><p>为了能让自己写出更优秀的代码，《Effective Java》、《重构》 这两本书没事也可以看</p>
<h3 id="并发"><a href="#并发" class="headerlink" title="并发"></a><strong>并发</strong></h3><p>一些关于并发的小问题，拿来自测：</p>
<h4 id="一、什么是线程和进程-线程与进程的关系-区别及优缺点？"><a href="#一、什么是线程和进程-线程与进程的关系-区别及优缺点？" class="headerlink" title="一、什么是线程和进程? 线程与进程的关系,区别及优缺点？"></a>一、什么是线程和进程? 线程与进程的关系,区别及优缺点？</h4><p>*<em>Linux</em>***的进程、线程、文件描述符是 什么</p>
<p>**答案:<strong>在</strong> <strong>Linux</strong> <strong>系统中，进程和线程几乎没有区别</strong>。</p>
<p>Linux 中的进程就是一个数据结构，看明白就可以理解文件描述符、重定 向、管道命令的底层工作原理，最后我们从操作系统的角度看看为什么说线 程和进程基本没有区别。</p>
<h5 id="1、进程是什么"><a href="#1、进程是什么" class="headerlink" title="1、进程是什么"></a><strong>1、进程是什么</strong></h5><p>首先，抽象地来说，我们的计算机就是这个东⻄:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/FsPOLs_20210528153018.png" alt="进程"></p>
<p>   这个大的矩形表示计算机的<strong>内存空间</strong>，其中的小矩形代表<strong>进程</strong>，左下角的圆 形表示<strong>磁盘</strong>，右下角的图形表示一些<strong>输入输出设备</strong>，比如鼠标键盘显示器等 等。另外，注意到内存空间被划分为了两块，上半部分表示<strong>用户空间</strong>，下半部分表示<strong>内核空间</strong>。</p>
<p>   用户空间装着用户进程需要使用的资源，比如你在程序代码里开一个数组， 这个数组肯定存在用户空间;内核空间存放内核进程需要加载的系统资源， 这一些资源一般是不允许用户访问的。但是注意有的用户进程会共享一些内 核空间的资源，比如一些动态链接库等等。</p>
<p>   我们用 C 语言写一个 hello 程序，编译后得到一个可执行文件，在命令行运 行就可以打印出一句 hello world，然后程序退出。在操作系统层面，就是新 建了一个进程，这个进程将我们编译出来的可执行文件读入内存空间，然后 执行，最后退出。</p>
<p>   <strong>你编译好的那个可执行程序只是一个文件</strong>，不是进程，可执行文件必须要载 入内存，包装成一个进程才能真正跑起来。进程是要依靠操作系统创建的， 每个进程都有它的固有属性，比如进程号(PID)、进程状态、打开的文件 等等，进程创建好之后，读入你的程序，你的程序才被系统执行。</p>
<p>   那么，操作系统是如何创建进程的呢?<strong>对于操作系统，进程就是一个数据结 构</strong>，我们直接来看 Linux 的源码:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> &#123;</span> </span><br><span class="line">    <span class="comment">// 进程状态</span></span><br><span class="line">	  <span class="type">long</span> state; </span><br><span class="line">  	<span class="comment">// 虚拟内存结构体</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mm_struct</span> *<span class="title">mm</span>;</span> </span><br><span class="line">  	<span class="comment">// 进程号</span></span><br><span class="line">	  <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="comment">// 指向父进程的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">task_struct</span> __<span class="title">rcu</span> *<span class="title">parent</span>;</span> </span><br><span class="line">  	<span class="comment">// 子进程列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list_head</span> <span class="title">children</span>;</span> </span><br><span class="line">  	<span class="comment">// 存放文件系统信息的指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">fs_struct</span> *<span class="title">fs</span>;</span></span><br><span class="line">    <span class="comment">// 一个数组，包含该进程打开的文件指针 </span></span><br><span class="line">  	<span class="class"><span class="keyword">struct</span> <span class="title">files_struct</span> *<span class="title">files</span>;</span></span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>
<p>task_struct 就是Linux内核对于一个进程的描述，也可以称为「进程描述符」。源码比较复杂，我这里就截取了一小部分比较常⻅的。</p>
<p>   其中比较有意思的是 mm 指针和 files 指针。 mm 指向的是进程的虚拟内 存，也就是载入资源和可执行文件的地方; files 指针指向一个数组，这 个数组里装着所有该进程打开的文件的指针。</p>
<h5 id="2、文件描述符是什么"><a href="#2、文件描述符是什么" class="headerlink" title="2、文件描述符是什么"></a><strong>2、文件描述符是什么</strong></h5><p>   先说 files ，它是一个文件指针数组。一般来说，一个进程会 从 files[0] 读取输入，将输出写入 files[1] ，将错误信息写 入 files[2] 。</p>
<p>   举个例子，以我们的角度 C 语言的 printf 函数是向命令行打印字符，但是 从进程的角度来看，就是向 files[1] 写入数据;同理， scanf函数就是进程试图从files[0] 这个文件中读取数据。</p>
<p>   <strong>每个进程被创建时，</strong> <strong>files</strong> <strong>的前三位被填入默认值，分别指向标准输入 流、标准输出流、标准错误流。我们常说的「文件描述符」就是指这个文件 指针数组的索引</strong>，所以程序的文件描述符默认情况下 0 是输入，1 是输出， 2 是错误。</p>
<p>   我们可以重新画一幅图:</p>
<p>   <img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210528160949534_20210528160949.png"></p>
<p>   对于一般的计算机，输入流是键盘，输出流是显示器，错误流也是显示器， 所以现在这个进程和内核连了三根线。因为硬件都是由内核管理的，我们的 进程需要通过「系统调用」让内核进程访问硬件资源。</p>
<p>   PS:不要忘了，Linux 中一切都被抽象成文件，设备也是文件，可以进行读 和写。</p>
<p>   如果我们写的程序需要其他资源，比如打开一个文件进行读写，这也很简单，进行系统调用，让内核把文件打开，这个文件就会被放到 files 的第 4 个位置:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210528161138345_20210528161138.png"></p>
<p>   明白了这个原理，<strong>输入重定向</strong>就很好理解了，程序想读取数据的时候就会 去 files[0] 读取，所以我们只要把 files[0] 指向一个文件，那么程序就会 从这个文件中读取数据，而不是从键盘:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ command &lt; file.txt</span><br></pre></td></tr></table></figure>
<p>同理，<strong>输出重定向</strong>就是把 files[1] 指向一个文件，那么程序的输出就不会写入到显示器，而是写入到这个文件中:</p>
<p>错误重定向也是一样的，就不再赘述。<br><strong>管道符</strong>其实也是异曲同工，把一个进程的输出流和另一个进程的输入流接起 一条「管道」，数据就在其中传递，不得不说这种设计思想真的很优美:</p>
<p>   $ command &gt; file.txt</p>
   <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">$ cmd1 | cmd2 | cmd3</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/cBsve1_20210528161752.png"></p>
<p>到这里，你可能也看出「Linux 中一切皆文件」设计思路的高明了，不管是 设备、另一个进程、socket 套接字还是真正的文件，全部都可以读写，统一 装进一个简单的 files 数组，进程通过简单的文件描述符访问相应资源， 具体细节交于操作系统，有效解耦，优美高效。</p>
<h5 id="3、线程是什么"><a href="#3、线程是什么" class="headerlink" title="3、线程是什么"></a><strong>3、线程是什么</strong></h5><p>首先要明确的是，多进程和多线程都是并发，都可以提高处理器的利用效率，所以现在的关键是，多线程和多进程有啥区别。</p>
<p>为什么说 Linux 中线程和进程基本没有区别呢，因为从 Linux 内核的角度来 看，并没有把线程和进程区别对待。</p>
<p>我们知道系统调用 fork() 可以新建一个子进程，函数 pthread() 可以新建 一个线程。<strong>但无论线程还是进程，都是用task_struct结构表示的，唯一的 区别就是共享的数据区域不同</strong>。</p>
<p>   换句话说，线程看起来跟进程没有区别，只是线程的某些数据区域和其父进 程是共享的，而子进程是拷⻉副本，而不是共享。就比如说， mm 结构 和 files 结构在线程中都是共享的，我画两张图你就明白了:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/CJSUA2_20210528162328.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/AHziKB_20210528162403.png"></p>
<p>   所以说，我们的多线程程序要利用锁机制，避免多个线程同时往同一区域写 入数据，否则可能造成数据错乱。</p>
<p>   那么你可能问，<strong>既然进程和线程差不多，而且多进程数据不共享，即不存在 数据错乱的问题，为什么多线程的使用比多进程普遍得多呢</strong>?</p>
<p>   因为现实中数据共享的并发更普遍呀，比如十个人同时从一个账户取十元， 我们希望的是这个共享账户的余额正确减少一百元，而不是希望每人获得一 个账户的拷⻉，每个拷⻉账户减少十元。</p>
<p>   当然，必须要说明的是，只有 Linux 系统将线程看做共享数据的进程，不对 其做特殊看待，其他的很多操作系统是对线程和进程区别对待的，线程有其 特有的数据结构，我个人认为不如 Linux 的这种设计简洁，增加了系统的复 杂度。</p>
<p>   在 Linux 中新建线程和进程的效率都是很高的，对于新建进程时内存区域拷 ⻉的问题，Linux 采用了 copy-on-write 的策略优化，也就是并不真正复制父 进程的内存空间，而是等到需要写操作时才去复制。<strong>所以</strong> <strong>Linux</strong> <strong>中新建进 程和新建线程都是很迅速的</strong>。</p>
<h4 id="二、说说并发与并行的区别"><a href="#二、说说并发与并行的区别" class="headerlink" title="二、说说并发与并行的区别?"></a>二、说说并发与并行的区别?</h4><ul>
<li>并发:一个处理器同时处理多个任务。</li>
<li>并行:多个处理器或者是多核的处理器同时处理多个不同的任务.</li>
</ul>
<blockquote>
<p>前者是逻辑上的同时发生（simultaneous），而后者是物理上的同时发生．</p>
</blockquote>
<ul>
<li>并发性(concurrency)，又称共行性，是指能处理多个同时性活动的能力，并发事件之间不一定要同一时刻发生。</li>
<li>并行(parallelism)是指同时发生的两个并发事件，具有并发的含义，而并发则不一定并行。</li>
</ul>
<blockquote>
<p>来个比喻：并发和并行的区别就是一个人同时吃三个馒头和三个人同时吃三个馒头。</p>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/r17aCh_20210603225408.png" alt="img"></p>
<p align="center">并发与并行的区别</p>

<p>下图反映了一个包含8个操作的任务在一个有两核心的CPU中创建四个线程运行的情况。假设每个核心有两个线程，那么每个CPU中两个线程会交替并发，两个CPU之间的操作会并行运算。单就一个CPU而言两个线程可以解决线程阻塞造成的不流畅问题，其本身运行效率并没有提高，多CPU的并行运算才真正解决了运行效率问题，这也正是并发和并行的区别。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/XjIFCX_20210603225422.png" alt="img"></p>
<center>双核四线程运行示意图</center>



<h4 id="三、为什么要使用多线程呢"><a href="#三、为什么要使用多线程呢" class="headerlink" title="三、为什么要使用多线程呢?"></a>三、为什么要使用多线程呢?</h4><h5 id="从系统应用上来思考："><a href="#从系统应用上来思考：" class="headerlink" title="从系统应用上来思考："></a>从系统应用上来思考：</h5><ul>
<li>线程可以比作是轻量级的进程，是程序执行的最小单位，线程间切换和调度的成本远远小于进程。另外，多核 CPU 时代，意味着多个线程可以同时运行，这减少了线程上下文切换的开销；</li>
<li>如今的系统，动不动就要求百万级甚至亿万级的并发量，而多线程并发编程，正是开发高并发系统的基础，利用好多线程机制，可以大大提高系统整体的并发能力以及性能。</li>
</ul>
<h5 id="从计算机背后来探讨："><a href="#从计算机背后来探讨：" class="headerlink" title="从计算机背后来探讨："></a>从计算机背后来探讨：</h5><p><strong>单核时代：</strong> 在单核时代，多线程主要是为了提高 CPU 和 IO 设备的综合利用率。举个例子：当只有一个线程工作的时候，会导致 CPU 计算时，IO 设备空闲；进行 IO 操作时，CPU 空闲。可以简单地理解成，这两者的利用率最高都是 50%左右。但是当有两个线程的时候就不一样了，一个线程执行 CPU 计算时，另外一个线程就可以进行 IO 操作，这样 CPU 和 IO 设备两个的利用率就可以在理想情况下达到 100%；</p>
<p><strong>多核时代：</strong> 多核时代多线程主要是为了提高 CPU 利用率。举个例子：假如我们要计算一个复杂的任务，我们只用一个线程的话，CPU 只有一个 CPU 核心被利用到，而创建多个线程，就可以让多个 CPU 核心被利用到，这样就提高了 CPU 的利用率。</p>
<h4 id="四、创建线程有哪几种方式？（a-继承-Thread-类-b-实现-Runnable-接口-c-使用-Executor-框架-d-使用-FutureTask）"><a href="#四、创建线程有哪几种方式？（a-继承-Thread-类-b-实现-Runnable-接口-c-使用-Executor-框架-d-使用-FutureTask）" class="headerlink" title="四、创建线程有哪几种方式？（a.继承 Thread 类;b.实现 Runnable 接口;c. 使用 Executor 框架;d.使用 FutureTask）"></a>四、创建线程有哪几种方式？（a.继承 Thread 类;b.实现 Runnable 接口;c. 使用 Executor 框架;d.使用 FutureTask）</h4><h4 id="五、说说线程的生命周期和状态"><a href="#五、说说线程的生命周期和状态" class="headerlink" title="五、说说线程的生命周期和状态?"></a>五、说说线程的生命周期和状态?</h4><p>那么现在我们来了解线程一个完整的生命周期的运行过程，与下图可以看出有：新建 - 就绪 - 运行 - 阻塞 - 死亡五个过程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/RqeQ7h_20210603234327.png" alt="img"></p>
<p>下面我们一个一个的来介绍：</p>
<ul>
<li>新建：刚刚创建还在内存当中，还没有在可调度线程池中，还不能被cpu调度执行工作。</li>
<li>就绪：进入调度池，可被调度。</li>
<li>运行：CPU负责调度”可调度线程池”中的处于”就绪状态”的线程，线程执行结束之前,状态可能会在”就绪”和”运行”之间来回的切换。“就绪”和”运行”之间的状态切换由CPU来完成,程序员无法干涉</li>
<li>阻塞：正在运行的线程,当满足某个条件时,可以用休眠或者锁来阻塞线程的执行，被移出调度池，进入内存，不可执行。</li>
<li>死亡：分为两种情况。正常死亡，线程执行结束。非正常死亡，程序突然崩溃&#x2F;当满足某个条件后，在线程内部强制线程退出,调用exit方法。<h5 id="exit方法的作用和总结"><a href="#exit方法的作用和总结" class="headerlink" title="exit方法的作用和总结"></a>exit方法的作用和总结</h5></li>
</ul>
<ol>
<li><p>使当前线程退出.</p>
</li>
<li><p>不能在主线程中调用该方法，会使主线程退出.</p>
</li>
<li><p>当前线程死亡之后,这个线程中的代码都不会被执行.</p>
</li>
<li><p>在调用此方法之前一定要注意释放之前由C语言框架创建的对象.</p>
</li>
</ol>
<h4 id="六、什么是上下文切换"><a href="#六、什么是上下文切换" class="headerlink" title="六、什么是上下文切换?"></a>六、什么是上下文切换?</h4><p>   现在<strong>linux</strong>是大多基于抢占式，CPU给每个任务一定的服务时间，当时间片轮转的时候，需要把当前状态保存下来，同时加载下一个任务，这个过程叫做<strong>上下文切换</strong>。时间片轮转的方式，使得多个任务利用一个CPU执行成为可能，但是保存现场和加载现场，也带来了性能消耗。 那线程上下文切换的次数和时间以及性能消耗如何看呢？</p>
<p>   上下文切换的性能消耗在哪里呢？<br>   context switch过高，会导致CPU像个搬运工，频繁在寄存器和运行队列直接奔波 ，更多的时间花在了线程切换，而不是真正工作的线程上。直接的消耗包括CPU寄存器需要保存和加载，系统调度器的代码需要执行。间接消耗在于多核cache之间的共享数据。</p>
<p>   引起上下文切换的原因有哪些？<br>   对于抢占式操作系统而言， 大体有几种：<br>   1、当前任务的时间片用完之后，系统CPU正常调度下一个任务；<br>   2、当前任务碰到IO阻塞，调度线程将挂起此任务，继续下一个任务；<br>   3、多个任务抢占锁资源，当前任务没有抢到，被调度器挂起，继续下一个任务；<br>   4、用户代码挂起当前任务，让出CPU时间；<br>   5、硬件中断；<br>   监测Linux的应用的时候，当CPU的利用率非常高，但是系统的性能却上不去的时候，不妨监控一下线程&#x2F;进程的切换，看看是不是context switching导致的overhead过高。<br>   常用命令： pidstat vmstat</p>
<h4 id="七、什么是线程死锁-如何避免死锁"><a href="#七、什么是线程死锁-如何避免死锁" class="headerlink" title="七、什么是线程死锁?如何避免死锁?"></a>七、什么是线程死锁?如何避免死锁?</h4><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p> 当线程A持有独占锁a，并尝试去获取独占锁b的同时，线程B持有独占锁b，并尝试获取独占锁a的情况下，就会发生AB两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。</p>
<p>下面用一个非常简单的死锁示例来帮助你理解死锁的定义。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 线程a</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                DeadLockDemo.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 线程b</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">td2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                DeadLockDemo.method2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        td1.start();</span><br><span class="line">        td2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程a尝试获取integer.class&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程b尝试获取String.class&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">----------------</span><br><span class="line">线程b尝试获取String.class</span><br><span class="line">线程a尝试获取integer.class</span><br><span class="line">....</span><br><span class="line">...</span><br><span class="line">..</span><br><span class="line">.</span><br><span class="line">无限阻塞下去</span><br></pre></td></tr></table></figure>

<h5 id="如何避免死锁？"><a href="#如何避免死锁？" class="headerlink" title="如何避免死锁？"></a>如何避免死锁？</h5><p>教科书般的回答应该是，结合“哲学家就餐“模型，分析并总结出以下死锁的原因，最后得出“避免死锁就是破坏造成死锁的，若干条件中的任意一个”的结论。</p>
<p>造成死锁必须达成的4个条件（原因）：</p>
<ol>
<li>互斥条件：一个资源每次只能被一个线程使用。</li>
<li>请求与保持条件：一个线程因请求资源而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：线程已获得的资源，在未使用完之前，不能强行剥夺。</li>
<li>循环等待条件：若干线程之间形成一种头尾相接的循环等待资源关系。</li>
</ol>
<p>但是，“哲学家就餐”光看名字就很讨厌，然后以上这4个条件看起来也很绕口，再加上笔者又是个懒人，所以要让我在面试时把这些“背诵”出来实在是太难了！必须要想办法把这4个条件简化一下！<br> 于是，通过对4个造成死锁的条件进行逐条分析，我们可以得出以下4个结论。</p>
<ol>
<li>互斥条件 —&gt; 独占锁的特点之一。</li>
<li>请求与保持条件 —&gt; 独占锁的特点之一，尝试获取锁时并不会释放已经持有的锁</li>
<li>不剥夺条件 —&gt; 独占锁的特点之一。</li>
<li>循环等待条件 —&gt; 唯一需要记忆的造成死锁的条件。</li>
</ol>
<p>不错！复杂的死锁条件经过简化，现在需要记忆的仅只有独占锁与第四个条件而已。</p>
<p>所以，面对如何避免死锁这个问题，我们只需要这样回答！<br> :   在并发程序中，避免了逻辑中出现复数个线程互相持有对方线程所需要的独占锁的的情况，就可以避免死锁。</p>
<p>下面我们通过“破坏”第四个死锁条件，来解决第一个小节中的死锁示例并证明我们的结论。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeadLockDemo2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 线程a</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">td1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                DeadLockDemo2.method1();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 线程b</span></span><br><span class="line">        <span class="type">Thread</span> <span class="variable">td2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                DeadLockDemo2.method2();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        td1.start();</span><br><span class="line">        td2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程a尝试获取integer.class&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程a获取到integer.class&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 不再获取线程a需要的Integer.class锁。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (String.class) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程b尝试获取Integer.class&quot;</span>);</span><br><span class="line">            <span class="keyword">synchronized</span> (Integer.class) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程b获取到Integer.class&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">-----------------</span><br><span class="line">线程a尝试获取integer.class</span><br><span class="line">线程a获取到integer.class</span><br><span class="line">线程b尝试获取Integer.class</span><br><span class="line">线程b获取到Integer.class</span><br></pre></td></tr></table></figure>

<p>在上面的例子中，由于已经不存在线程a持有线程b需要的锁，而线程b持有线程a需要的锁的逻辑了，所以Demo顺利执行完毕。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>是否能够简单明了的在面试中阐述清楚死锁产生的原因，并给出解决死锁的方案，可以体现程序员在面对对并发问题时思路是否清晰，对并发的基础掌握是否牢固等等。<br> 而且在实际项目中并发模块的逻辑往往比本文的示例复杂许多，所以写并发应用之前一定要充分理解本文所总结的要点，并切记，并发程序编程在不显著影响程序性能的情况下，一定要尽可能的保守。</p>
<h4 id="八、说说-sleep-方法和-wait-方法区别和共同点"><a href="#八、说说-sleep-方法和-wait-方法区别和共同点" class="headerlink" title="八、说说 sleep() 方法和 wait() 方法区别和共同点?"></a>八、说说 sleep() 方法和 wait() 方法区别和共同点?</h4><h5 id="1-方法来源区别"><a href="#1-方法来源区别" class="headerlink" title="1.方法来源区别"></a>1.方法来源区别</h5><p>wait方法定义在Object上,Thread.sleep()定义在Thread上(这很重要,定义决定作用范围)</p>
<h5 id="2-关于锁和cpu"><a href="#2-关于锁和cpu" class="headerlink" title="2.关于锁和cpu"></a>2.关于锁和cpu</h5><p>结论:二者都释放cpu,wait()释放锁,Thread.sleep()不会释放锁.<br> 解释如下:<br> 1.别管是Object.wait()还是Thread.sleep(),都是暂停执行,所以这里都会释放cpu.<br> 2.Object.wait()方法是对象拥有,然后对象锁又是在synchronized同步代码块中使用,所以Object.wait()方法拥有锁的控制权,所以他会释放锁资源.而Thread.sleep()是Thread上的静态方法,所以只能使当前线程睡眠,但是它和锁没有任何关系,所以就没有锁的释放这一问题.</p>
<h5 id="3-作用范围"><a href="#3-作用范围" class="headerlink" title="3.作用范围"></a>3.作用范围</h5><ul>
<li><p>Object.wait()方法只能在synchronized快中调用,并且需要和notify和notifyAll配合使用.</p>
</li>
<li><p>Thread.sleep（）是可以在任何上下文调用的,注意是暂停当前的线程<br> 所以就方法而言,Object.wait()主要用在多线程之间的协同工作,Thread.sleep（）主要是控制一个线程的执行时间长短.</p>
<h5 id="4-关于异常"><a href="#4-关于异常" class="headerlink" title="4 关于异常"></a>4 关于异常</h5><p>Object.wait()方法和Thread.sleep()都抛出 InterruptedException,并且方法定义为final,<br> 所以方法不能被重写,那么在使用 该方法时就只能 try()catch(){}异常,(为什么说只能try,因为如果不捕获异常,那么也意味着你的方法抛出的异常就只能是InterruptedException,或者它的子类,所以这里一般都是捕获异常并处理异常,可以在catch中抛出其他异常)</p>
<h4 id="九、synchronized-关键字、volatile-关键字"><a href="#九、synchronized-关键字、volatile-关键字" class="headerlink" title="九、synchronized 关键字、volatile 关键字"></a>九、synchronized 关键字、volatile 关键字</h4></li>
<li><p>volatile是通知jvm当前变量在寄存器或者cpu中的值是不确定的，需要从主存中读取。不会阻塞线程。</p>
</li>
<li><p>synchronized则是通过锁机制来控制变量是否可以访问。当变量被锁时，其他线程访问变量将被阻塞，直至锁释放。</p>
</li>
</ul>
<h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><strong>volatile</strong></h5><ol>
<li>volatile保证其他线程对这个变量操作时是立即可见的，即操作的是从内存中读取的最新值</li>
<li>无法保证原子性</li>
<li>只能修饰变量</li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="built_in">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase</span>()</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;----&quot;</span> + count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Exception</span> &#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">                        test.increase();        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>控制台输出：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/A70Fzt_20210607142025.png" alt="img"></p>
<p>控制台输出</p>
<ul>
<li>使用场景(DCL双重检测锁)：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Singleton</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(instance==<span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(instance==<span class="literal">null</span>)</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a><strong>synchronized</strong></h5><ol>
<li>保证原子性</li>
<li>即可修饰变量也可修饰方法</li>
<li>会阻塞线程<h6 id="1）synchronized非静态方法"><a href="#1）synchronized非静态方法" class="headerlink" title="1）synchronized非静态方法"></a>1）synchronized非静态方法</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;increase1----&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">increase2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;increase2----&gt;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    test.increase1();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                    test.increase2();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>控制台输出：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/p830x9_20210607142306.png" alt="img"></p>
<ul>
<li>结论：</li>
</ul>
<p>如果一个对象有多个synchronized方法，多个线程同时调用该对象的方法，将会同步执行，即同时只能有一个synchronized方法被调用，其他调用将被阻塞直至该方法执行完</p>
<h6 id="2）synchronized静态方法"><a href="#2）synchronized静态方法" class="headerlink" title="2）synchronized静态方法"></a>2）synchronized静态方法</h6><blockquote>
<p>懒。。  直接给结论了</p>
</blockquote>
<p>synchronized静态方法和非静态方法的区别在于给方法上锁的对象不一样，非静态方法是给调用的对象上锁，静态方法是给类的Class对象上锁</p>
<h6 id="3）synchronized块"><a href="#3）synchronized块" class="headerlink" title="3）synchronized块"></a>3）synchronized块</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Test</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase1</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;increase1----------&gt; start&quot;</span>);</span><br><span class="line">        synchronized (<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;increase1----&gt;&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;increase1----------&gt; end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">increase2</span>()</span> &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;increase2----------&gt; start&quot;</span>);</span><br><span class="line">        synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.<span class="keyword">out</span>.println(<span class="string">&quot;increase2----&gt;&quot;</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;increase2----------&gt; end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws Exception</span> &#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    test.increase1();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">            <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span>()</span> &#123;</span><br><span class="line">                    test.increase2();</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>控制台输出：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/BgNds7_20210607142434.png" alt="img"></p>
<ul>
<li>结论</li>
</ul>
<p><strong>synchronized方法</strong>是控制同时只能有一个线程执行synchronized方法；<strong>synchronized块</strong>是控制同时只能有一个线程执行synchronized块中的内容</p>
<h4 id="十、ThreadLocal-有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？"><a href="#十、ThreadLocal-有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？" class="headerlink" title="十、ThreadLocal 有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？"></a>十、ThreadLocal 有啥用（解决了什么问题）？怎么用？原理了解吗？内存泄露问题了解吗？</h4><h5 id="ThreadLoacl是什么"><a href="#ThreadLoacl是什么" class="headerlink" title="ThreadLoacl是什么"></a>ThreadLoacl是什么</h5><p>在了解ThreadLocal之前，我们先了解下什么是<strong>线程封闭</strong></p>
<blockquote>
<p>把对象封闭在一个线程里，即使这个对象不是线程安全的，也不会出现并发安全问题。</p>
</blockquote>
<p>实现线程封闭大致有三种方式：</p>
<ul>
<li>Ad-hoc线程封闭：维护线程封闭性的职责完全由程序来承担，不推荐使用</li>
<li>栈封闭：就是用<strong>栈</strong>（stack）来保证线程安全</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">testThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> <span class="built_in">StringBuilder</span>();</span><br><span class="line">    sb.<span class="built_in">append</span>(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>StringBuilder是线程不安全的，但是它只是个<strong>局部变量</strong>，局部变量存储在<strong>虚拟机栈</strong>，<strong>虚拟机栈</strong>是线程隔离的，所以不会有线程安全问题</p>
<ul>
<li>ThreadLocal线程封闭：简单易用</li>
</ul>
<p>第三种方式就是通过ThreadLocal来实现线程封闭，线程封闭的指导思想是<strong>封闭</strong>，而不是共享。所以说ThreadLocal是用来解决<strong>变量共享</strong>的并发安全问题，多少有些不精确。</p>
<h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>JDK1.2开始提供的java.lang.ThreadLocal的使用方式非常简单</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ThreadLocalDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>) throws InterruptedException</span> &#123;</span><br><span class="line"></span><br><span class="line">        final ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line">        threadLocal.<span class="keyword">set</span>(<span class="string">&quot;main-thread : Hello&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="comment">// 获取不到主线程设置的值，所以为null</span></span><br><span class="line">            System.<span class="keyword">out</span>.println(threadLocal.<span class="keyword">get</span>());</span><br><span class="line">            threadLocal.<span class="keyword">set</span>(<span class="string">&quot;sub-thread : World&quot;</span>);</span><br><span class="line">            System.<span class="keyword">out</span>.println(threadLocal.<span class="keyword">get</span>());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 启动子线程</span></span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="comment">// 让子线程先执行完成，再继续执行主线</span></span><br><span class="line">        thread.<span class="keyword">join</span>();</span><br><span class="line">        <span class="comment">// 获取到的是主线程设置的值，而不是子线程设置的</span></span><br><span class="line">        System.<span class="keyword">out</span>.println(threadLocal.<span class="keyword">get</span>());</span><br><span class="line">        threadLocal.<span class="keyword">remove</span>();</span><br><span class="line">        System.<span class="keyword">out</span>.println(threadLocal.<span class="keyword">get</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="literal">null</span></span><br><span class="line">sub-thread : World</span><br><span class="line">main-thread : Hello</span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p>运行结果说明了ThreadLocal只能获取本线程设置的值，也就是线程封闭。基本上，ThreadLocal对外提供的方法只有三个get()、set(T)、remove()。</p>
<h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>使用方式非常简单，所以我们来看看ThreadLocal的源码。ThreadLocal内部定义了一个静态ThreadLocalMap类，ThreadLocalMap内部又定义了一个Entry类，这里只看一些主要的属性和方法</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.<span class="built_in">currentThread</span>();</span><br><span class="line">        ThreadLocalMap map = <span class="built_in">getMap</span>(t);</span><br><span class="line">        <span class="keyword">if</span> (map != null) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.<span class="built_in">getEntry</span>(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != null) &#123;</span><br><span class="line">                @<span class="built_in">SuppressWarnings</span>(<span class="string">&quot;unchecked&quot;</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">setInitialValue</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.<span class="built_in">currentThread</span>();</span><br><span class="line">        ThreadLocalMap map = <span class="built_in">getMap</span>(t);</span><br><span class="line">        <span class="keyword">if</span> (map != null)</span><br><span class="line">            map.<span class="built_in">set</span>(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">createMap</span>(t, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="type">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         ThreadLocalMap m = <span class="built_in">getMap</span>(Thread.<span class="built_in">currentThread</span>());</span><br><span class="line">         <span class="keyword">if</span> (m != null)</span><br><span class="line">             m.<span class="built_in">remove</span>(<span class="keyword">this</span>);</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从这里可以看出ThreadLocalMap对象是被Thread类持有的</span></span><br><span class="line">    <span class="function">ThreadLocalMap <span class="title">getMap</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t.threadLocals;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> <span class="built_in">ThreadLocalMap</span>(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 内部类ThreadLocalMap</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalMap</span> &#123;</span><br><span class="line">        <span class="type">static</span> <span class="keyword">class</span> <span class="title class_">Entry</span> extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class="line">            Object value;</span><br><span class="line">            <span class="comment">// 内部类Entity，实际存储数据的地方</span></span><br><span class="line">            <span class="comment">// Entry的key是ThreadLocal对象，不是当前线程ID或者名称</span></span><br><span class="line">            <span class="built_in">Entry</span>(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="built_in">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 注意这里维护的是Entry数组</span></span><br><span class="line">        <span class="keyword">private</span> Entry[] table;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>根据上面的源码，可以大致画出ThreadLocal在虚拟机内存中的结构</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Yr7agv_20210607143151.png" alt="img"></p>
<p>实线箭头表示强引用，虚线箭头表示弱引用。需要注意的是：</p>
<ul>
<li>ThreadLocalMap虽然是在ThreadLocal类中定义的，但是实际上被Thread持有。</li>
<li>Entry的key是（虚引用的）ThreadLocal对象，而不是当前线程ID或者线程名称。</li>
<li>ThreadLocalMap中持有的是Entry数组，而不是Entry对象。</li>
</ul>
<p>对于第一点，ThreadLocalMap被Thread持有是为了实现每个线程都有自己独立的ThreadLocalMap对象，以此为基础，做到线程隔离。第二点和第三点理解，我们先来想一个问题，如果同一个线程中定义了多个ThreadLocal对象，内存结构应该是怎样的？此时再来看一下ThreadLocal.set(T)方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span>(<span class="params">T <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前线程对象</span></span><br><span class="line">    Thread t = Thread.currentThread();</span><br><span class="line">    <span class="comment">// 根据线程对象获取ThreadLocalMap对象（ThreadLocalMap被Thread持有）</span></span><br><span class="line">    ThreadLocalMap map = getMap(t);</span><br><span class="line">    <span class="comment">// 如果ThreadLocalMap存在，则直接插入；不存在，则新建ThreadLocalMap</span></span><br><span class="line">    <span class="keyword">if</span> (map != <span class="literal">null</span>)</span><br><span class="line">        map.<span class="keyword">set</span>(<span class="keyword">this</span>, <span class="keyword">value</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        createMap(t, <span class="keyword">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，如果程序定义了多个ThreadLocal，会共用一个ThreadLocalMap对象，所以内存结构应该是这样</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/t7McjA_20210607143222.png" alt="img"></p>
<p>这个内存结构图解释了第二点和第三点。假设Entry中key为当前线程ID或者名称的话，那么程序中定义多个ThreadLocal对象时，Entry数组中的所有Entry的key都一样（或者说只能存一个value）。ThreadLocalMap中持有的是Entry数组，而不是Entry，则是因为程序可定义多个ThreadLocal对象，自然需要一个数组。</p>
<h5 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h5><p><strong>ThreadLocal会发生内存泄漏吗？</strong></p>
<blockquote>
<p>会</p>
</blockquote>
<p>仔细看下ThreadLocal内存结构就会发现，Entry数组对象通过ThreadLocalMap最终被Thread持有，并且是强引用。也就是说Entry数组对象的生命周期和当前线程一样。即使ThreadLocal对象被回收了，Entry数组对象也不一定被回收，这样就有可能发生内存泄漏。ThreadLocal在设计的时候就提供了一些补救措施：</p>
<ul>
<li>Entry的key是弱引用的ThreadLocal对象，很容易被回收，导致key为null（但是value不为null）。所以在调用get()、set(T)、remove()等方法的时候，会自动清理key为null的Entity。</li>
<li>remove()方法就是用来清理无用对象，防止内存泄漏的。所以每次用完ThreadLocal后需要手动remove()。</li>
</ul>
<p><strong>有些文章认为是弱引用导致了内存泄漏，其实是不对的。假设把弱引用变成强引用，这样无用的对象key和value都不为null，反而不利于GC，只能通过remove()方法手动清理，或者等待线程结束生命周期。也就是说ThreadLocalMap的生命周期由持有它的线程来决定，线程如果不进入terminated状态，ThreadLocalMap就不会被GC回收，这才是ThreadLocal内存泄露的原因。</strong></p>
<h5 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h5><ul>
<li>维护JDBC的java.sql.Connection对象，因为每个线程都需要保持特定的Connection对象。</li>
<li>Web开发时，有些信息需要从controller传到service传到dao，甚至传到util类。看起来非常不优雅，这时便可以使用ThreadLocal来优雅的实现。</li>
<li>包括线程不安全的工具类，比如Random、SimpleDateFormat等</li>
</ul>
<h5 id="与synchronized的关系"><a href="#与synchronized的关系" class="headerlink" title="与synchronized的关系"></a>与synchronized的关系</h5><p>有些文章拿ThreadLocal和synchronized比较，其实它们的实现思想不一样。</p>
<ul>
<li>synchronized是同一时间最多只有一个线程执行，所以变量只需要存一份，算是一种时间换空间的思想</li>
<li>ThreadLocal是多个线程互不影响，所以每个线程存一份变量，算是一种空间换时间的思想</li>
</ul>
<h5 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h5><p>ThreadLocal是一种隔离的思想，当一个变量需要进行线程隔离时，就可以考虑使用ThreadLocal来优雅的实现。</p>
<h4 id="十一、为什么要用线程池？ThreadPoolExecutor-类的重要参数了解吗？ThreadPoolExecutor-饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗？为什么不推荐使用FixedThreadPool？如何设置线程池的大小？"><a href="#十一、为什么要用线程池？ThreadPoolExecutor-类的重要参数了解吗？ThreadPoolExecutor-饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗？为什么不推荐使用FixedThreadPool？如何设置线程池的大小？" class="headerlink" title="十一、为什么要用线程池？ThreadPoolExecutor 类的重要参数了解吗？ThreadPoolExecutor 饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗？为什么不推荐使用FixedThreadPool？如何设置线程池的大小？"></a>十一、为什么要用线程池？ThreadPoolExecutor 类的重要参数了解吗？ThreadPoolExecutor 饱和策略了解吗？线程池原理了解吗？几种常见的线程池了解吗？为什么不推荐使用FixedThreadPool？如何设置线程池的大小？</h4><h4 id="十二、AQS-了解么？原理？AQS-常用组件：Semaphore-信号量-、CountDownLatch-（倒计时器）-CyclicBarrier-循环栅栏"><a href="#十二、AQS-了解么？原理？AQS-常用组件：Semaphore-信号量-、CountDownLatch-（倒计时器）-CyclicBarrier-循环栅栏" class="headerlink" title="十二、AQS 了解么？原理？AQS 常用组件：Semaphore (信号量)、CountDownLatch （倒计时器） CyclicBarrier(循环栅栏)"></a>十二、AQS 了解么？原理？AQS 常用组件：Semaphore (信号量)、CountDownLatch （倒计时器） CyclicBarrier(循环栅栏)</h4><h5 id="1-AQS-概述"><a href="#1-AQS-概述" class="headerlink" title="1 AQS 概述"></a>1 AQS 概述</h5><p><strong>AQS</strong> 的全称为（AbstractQueuedSynchronizer），中文即“<strong>队列同步器</strong>”，这个类放在 java.util.concurrent.locks 包下面。</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739164" alt="img"></p>
<p>AQS是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过内置的FIFO队列来完成资源获取线程的排队工作。使用 AQS 能简单且高效地构造出应用广泛的大量的同步器，比如上篇文章写的ReentrantLock与ReentrantReadWriteLock。除此之外，AQS还能构造出Semaphore，FutureTask(jdk1.7) 等同步器。</p>
<h5 id="2-AQS-原理"><a href="#2-AQS-原理" class="headerlink" title="2 AQS 原理"></a>2 AQS 原理</h5><h6 id="2-1-同步队列"><a href="#2-1-同步队列" class="headerlink" title="2.1 同步队列"></a>2.1 同步队列</h6><p><strong>AQS 是依赖 CLH 队列锁来完成同步状态的管理</strong>。当前线程获取同步状态失败时，同步器会将当前线程以及等待状态等信息构建为一个**节点(Node)**并将其加入同步队列，同步会阻塞当前线程，当同步状态释放时，会将首节点中的线程唤醒，使其再次尝试获取同步状态。</p>
<blockquote>
<p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（<strong>FIFO双向队列</strong>）（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。<strong>AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配</strong>。</p>
</blockquote>
<p>同步队列中的节点（Node）用来保存获取同步状态失败的线程引用、等待状态以及前驱和后继节点信息。</p>
<table>
<thead>
<tr>
<th>属性类型与名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>int waitStatus</td>
<td>等待状态(如CANCELLED&#x3D;1、SIGNAL&#x3D;-1、CONDITION&#x3D;-2、PROPAGATE&#x3D;-3、INITIAL&#x3D;0)</td>
</tr>
<tr>
<td>Node prev</td>
<td>前驱节点(当节点加入同步队列时被设置，在尾部添加)</td>
</tr>
<tr>
<td>Node next</td>
<td>后继节点</td>
</tr>
<tr>
<td>Thread thread</td>
<td>当前获取同步状态的线程</td>
</tr>
</tbody></table>
<p>节点源码如下：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">    <span class="comment">// 表示该节点等待模式为共享式，通常记录于nextWaiter，</span></span><br><span class="line">    <span class="comment">// 通过判断nextWaiter的值可以判断当前结点是否处于共享模式</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> <span class="built_in">Node</span>();</span><br><span class="line">    <span class="comment">// 表示节点处于独占式模式，与SHARED相对</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> Node EXCLUSIVE = null;</span><br><span class="line">    <span class="comment">// waitStatus的不同状态</span></span><br><span class="line">    <span class="comment">// 当前结点是因为超时或者中断取消的，进入该状态后将无法恢复</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> CANCELLED =  <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当前结点的后继结点是(或者将要)由park导致阻塞的，当结点被释放或者取消时，需要通过unpark唤醒后继结点</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> SIGNAL    = <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// 表明结点在等待队列中，结点线程等待在Condition上</span></span><br><span class="line">    <span class="comment">// 当其他线程对Condition调用了signal()方法时，会将其加入到同步队列中   </span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> CONDITION = <span class="number">-2</span>;</span><br><span class="line">    <span class="comment">// 下一次共享式同步状态的获取将会无条件地向后继结点传播</span></span><br><span class="line">    <span class="type">static</span> <span class="keyword">final</span> <span class="type">int</span> PROPAGATE = <span class="number">-3</span>;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> waitStatus;</span><br><span class="line">    <span class="comment">// 记录前驱结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line">    <span class="comment">// 记录后继结点</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line">    <span class="comment">// 记录当前的线程</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line">    <span class="comment">// 用于记录共享模式(SHARED), 也可以用来记录CONDITION队列</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line">    <span class="comment">// 通过nextWaiter的记录值判断当前结点的模式是否为共享模式</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="type">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;    <span class="keyword">return</span> nextWaiter == SHARED;&#125;</span><br><span class="line">    <span class="comment">// 获取当前结点的前置结点</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> throws NullPointerException </span>&#123; ... &#125;</span><br><span class="line">    <span class="comment">// 用于初始化时创建head结点或者创建SHARED结点</span></span><br><span class="line">    <span class="built_in">Node</span>() &#123;&#125;</span><br><span class="line">    <span class="comment">// 在addWaiter方法中使用，用于创建一个新的结点</span></span><br><span class="line">    <span class="built_in">Node</span>(Thread thread, Node mode) &#123;     </span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在CONDITION队列中使用该构造函数新建结点</span></span><br><span class="line">    <span class="built_in">Node</span>(Thread thread, <span class="type">int</span> waitStatus) &#123; </span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 记录头结点</span></span><br><span class="line"><span class="keyword">private</span> transient <span class="keyword">volatile</span> Node head;</span><br><span class="line"><span class="comment">// 记录尾结点</span></span><br><span class="line"><span class="keyword">private</span> transient <span class="keyword">volatile</span> Node tail;</span><br></pre></td></tr></table></figure>

<p>节点是构成同步队列的基础，同步器拥有<strong>首节点（Head）和尾节点（Tail）</strong>，没有成功<strong>获取</strong>同步状态的线程将会成为节点加入该队列的尾部。同步器提供了一个基于CAS的设置尾节点的方法：<code>compareAndSetTail(Node expect, Node update)</code>，它需要传递当前线程“认为”的尾节点和当前节点，只有设置成功后，当前节点才正式与之前的尾节点建立关联。</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739165" alt="img"></p>
<p><strong>首节点是获取同步状态成功的节点</strong>，首节点的线程在<strong>释放</strong>同步状态时，将会唤醒后继节点，而后继节点将会在获取同步状态成功时将自己设置为首节点。设置首节点是通过获取同步状态成功的线程来完成的，不需要使用CAS来保证，只需将首节点设置成为原首节点的后继节点并断开原首节点的next引用即可。</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739166" alt="img"></p>
<h6 id="2-2-同步状态"><a href="#2-2-同步状态" class="headerlink" title="2.2 同步状态"></a>2.2 同步状态</h6><h6 id="1）-独占式-EXCLUSIVE"><a href="#1）-独占式-EXCLUSIVE" class="headerlink" title="1） 独占式(EXCLUSIVE)"></a>1） 独占式(EXCLUSIVE)</h6><p>独占式(EXCLUSIVE)获取需重写<code>tryAcquire</code>、<code>tryRelease</code>方法，并访问<code>acquire</code>、<code>release</code>方法实现相应的功能。</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">public final void acquire(<span class="built_in">int</span> arg) &#123;</span><br><span class="line">    <span class="comment">// 如果线程直接获取成功，或者再尝试获取成功后都是直接工作，</span></span><br><span class="line">    <span class="comment">// 如果是从阻塞状态中唤醒开始工作的线程，将当前的线程中断        </span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">try</span><span class="constructor">Acquire(<span class="params">arg</span>)</span><span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">        </span>acquire<span class="constructor">Queued(<span class="params">addWaiter</span>(Node.EXCLUSIVE)</span>, arg))</span><br><span class="line">        self<span class="constructor">Interrupt()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 封装线程，新建结点并加入到同步队列中</span></span><br><span class="line"><span class="keyword">private</span> Node add<span class="constructor">Waiter(Node <span class="params">mode</span>)</span> &#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> <span class="constructor">Node(Thread.<span class="params">currentThread</span>()</span>, mode);</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 尝试入队， 成功返回</span></span><br><span class="line">    <span class="keyword">if</span> (pred != null) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// CAS操作设置队尾</span></span><br><span class="line">        <span class="keyword">if</span> (compare<span class="constructor">AndSetTail(<span class="params">pred</span>, <span class="params">node</span>)</span>) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            return node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过CAS操作自旋完成node入队操作</span></span><br><span class="line">    enq(node);</span><br><span class="line">    return node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在同步队列中等待获取同步状态</span></span><br><span class="line">final boolean acquire<span class="constructor">Queued(<span class="params">final</span> Node <span class="params">node</span>, <span class="params">int</span> <span class="params">arg</span>)</span> &#123;</span><br><span class="line">    boolean failed = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        boolean interrupted = <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 自旋</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            final Node p = node.predecessor<span class="literal">()</span>;</span><br><span class="line">            <span class="comment">// 前驱节点是否为头节点&amp;&amp;tryAcquire获取同步状态</span></span><br><span class="line">            <span class="keyword">if</span> (p<span class="operator"> == </span>head<span class="operator"> &amp;&amp; </span><span class="keyword">try</span><span class="constructor">Acquire(<span class="params">arg</span>)</span>) &#123;</span><br><span class="line">                set<span class="constructor">Head(<span class="params">node</span>)</span>;</span><br><span class="line">                p.next = null;</span><br><span class="line">                failed = <span class="literal">false</span>;</span><br><span class="line">                return interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取不到同步状态，将前置结点标为SIGNAL状态并且通过park操作将Node封装的线程阻塞</span></span><br><span class="line">            <span class="keyword">if</span> (should<span class="constructor">ParkAfterFailedAcquire(<span class="params">p</span>, <span class="params">node</span>)</span><span class="operator"> &amp;&amp;</span></span><br><span class="line"><span class="operator">                </span>park<span class="constructor">AndCheckInterrupt()</span>)</span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            <span class="comment">// 如果获取失败，将node标记为CANCELLED</span></span><br><span class="line">            cancel<span class="constructor">Acquire(<span class="params">node</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>独占式获取同步状态流程：</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739167" alt="img"></p>
<p>通过调用同步器的<code>release(int arg)</code>方法可以释放同步状态，该方法在释放了同步状态之后，会唤醒其<strong>后继节点</strong>（进而使后继节点重新尝试获取同步状态）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">release</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 首先尝试释放并更新同步状态</span></span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">// 检查是否需要唤醒后置结点</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 唤醒后置结点</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 唤醒后继结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unparkSuccessor</span><span class="params">(Node node)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> node.waitStatus;</span><br><span class="line">    <span class="comment">// 通过CAS操作将waitStatus更新为0</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">    <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">    <span class="comment">// 检查后置结点，若为空或者状态为CANCELLED，找到后置非CANCELLED结点</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="literal">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">Node</span> <span class="variable">t</span> <span class="operator">=</span> tail; t != <span class="literal">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 唤醒后继结点</span></span><br><span class="line">    <span class="keyword">if</span> (s != <span class="literal">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2）共享式-SHARED"><a href="#2）共享式-SHARED" class="headerlink" title="2）共享式(SHARED)"></a>2）共享式(SHARED)</h6><p><strong>共享式获取与独占式获取最主要的区别在于同一时刻能否有多个线程同时获取到同步状态</strong>。</p>
<p>共享式(SHARED)获取需重写<code>tryAcquireShared</code>、<code>tryReleaseShared</code>方法，并访问<code>acquireShared</code>、<code>releaseShared</code>方法实现相应的功能。与独占式相对，共享式支持多个线程同时获取到同步状态并进行工作，如 Semaphore、CountDownLatch、 CyclicBarrier等。ReentrantReadWriteLock 可以看成是组合式，因为 ReentrantReadWriteLock 也就是读写锁允许多个线程同时对某一资源进行读。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">acquireShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试共享式获取同步状态，如果成功获取则可以继续执行，否则执行doAcquireShared</span></span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="comment">// 以共享式不停得尝试获取同步状态</span></span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doAcquireShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 向同步队列中新增一个共享式的结点</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.SHARED);</span><br><span class="line">    <span class="comment">// 标记获取失败状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 标记中断状态(若在该过程中被中断是不会响应的，需要手动中断)</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">interrupted</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="comment">// 自旋</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 获取前置结点</span></span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="comment">// 若前置结点为头结点</span></span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="comment">// 尝试获取同步状态</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> tryAcquireShared(arg);</span><br><span class="line">                <span class="comment">// 若获取到同步状态。</span></span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// 此时，当前结点存储的线程恢复执行，需要将当前结点设置为头结点并且向后传播，</span></span><br><span class="line">                    <span class="comment">// 通知符合唤醒条件的结点一起恢复执行</span></span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="literal">null</span>;</span><br><span class="line">                    <span class="comment">// 需要中断，中断当前线程</span></span><br><span class="line">                    <span class="keyword">if</span> (interrupted)</span><br><span class="line">                        selfInterrupt();</span><br><span class="line">                    <span class="comment">// 获取成功</span></span><br><span class="line">                    failed = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 获取同步状态失败，需要进入阻塞状态</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 获取失败，CANCELL node</span></span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将node设置为同步队列的头结点，并且向后通知当前结点的后置结点，完成传播</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setHeadAndPropagate</span><span class="params">(Node node, <span class="type">int</span> propagate)</span> &#123;</span><br><span class="line">    <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head; </span><br><span class="line">    setHead(node);</span><br><span class="line">    <span class="comment">// 向后传播</span></span><br><span class="line">    <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="literal">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">        (h = head) == <span class="literal">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">s</span> <span class="operator">=</span> node.next;</span><br><span class="line">        <span class="keyword">if</span>(s == <span class="literal">null</span> || s.isShared())</span><br><span class="line">            doReleaseShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>与独占式一样，共享式获取也需要释放同步状态，通过调用releaseShared(intarg)方法可以释放同步状态，释放同步状态成功后，会唤醒后置结点，并且保证传播性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">releaseShared</span><span class="params">(<span class="type">int</span> arg)</span> &#123;</span><br><span class="line">    <span class="comment">// 尝试释放同步状态</span></span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;</span><br><span class="line">        <span class="comment">// 成功后唤醒后置结点</span></span><br><span class="line">        doReleaseShared();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 唤醒后置结点</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">doReleaseShared</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 循环的目的是为了防止新结点在该过程中进入同步队列产生的影响，同时要保证CAS操作的完成</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        <span class="type">Node</span> <span class="variable">h</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="literal">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">ws</span> <span class="operator">=</span> h.waitStatus;</span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                        <span class="keyword">continue</span>;            </span><br><span class="line">                    unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;                </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (h == head)                   </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3）超时获取方式"><a href="#3）超时获取方式" class="headerlink" title="3）超时获取方式"></a>3）超时获取方式</h6><p>通过调用同步器的<code>doAcquireNanos(int arg, long nanosTimeout)</code>方法可以<strong>超时获取同步状态</strong>，即在指定的时间段内获取同步状态，如果获取到同步状态则返回true，否则，返回false。该方法提供了传统Java同步操作（比如synchronized关键字）所不具备的特性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">doAcquireNanos</span><span class="params">(<span class="type">int</span> arg, <span class="type">long</span> nanosTimeout)</span></span><br><span class="line">        <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 计算超时的时间=当前虚拟机的时间+设置的超时时间</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">deadline</span> <span class="operator">=</span> System.nanoTime() + nanosTimeout;</span><br><span class="line">    <span class="comment">// 调用addWaiter将当前线程封装成独占模式的节点，并且加入到同步队列尾部。</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">node</span> <span class="operator">=</span> addWaiter(Node.EXCLUSIVE);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">failed</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 自旋</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Node</span> <span class="variable">p</span> <span class="operator">=</span> node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                <span class="comment">// 如果当前节点的前驱节点为头结点，则让当前节点去尝试获取锁。</span></span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="literal">null</span>; </span><br><span class="line">                failed = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果当前节点的前驱节点不是头结点，或当前节点获取锁失败，</span></span><br><span class="line">            <span class="comment">// 则再次判断当前线程是否已经超时。</span></span><br><span class="line">            nanosTimeout = deadline - System.nanoTime();</span><br><span class="line">            <span class="keyword">if</span> (nanosTimeout &lt;= <span class="number">0L</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="comment">// 调用shouldParkAfterFailedAcquire方法，告诉当前节点的前驱节点，马上进入</span></span><br><span class="line">            <span class="comment">// 等待状态了，即做好进入等待状态前的准备。</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                nanosTimeout &gt; spinForTimeoutThreshold)</span><br><span class="line">                <span class="comment">// 调用LockSupport.parkNanos方法，将当前线程设置成超时等待的状态。</span></span><br><span class="line">                LockSupport.parkNanos(<span class="built_in">this</span>, nanosTimeout);</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由上面代码可知，超时获取也是调用addWaiter将当前线程封装成<strong>独占模式</strong>的节点，并且加入到同步队列尾部。</p>
<p>超时获取与独占式获取同步状态区别<strong>在于获取同步状态失败后的处理</strong>。如果当前线程获取同步状态失败，则判断是否超时（nanosTimeout小于等于0表示已经超时）；如果没有超时，重新计算超时间隔nanosTimeout，然后使当前线程等待nanosTimeout纳秒（当已到设置的超时时间，该线程会从<code>LockSupport.parkNanos(Object blocker, long nanos)</code>方法返回）。</p>
<p>独占式超时获取同步状态流程：</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739168" alt="img"></p>
<h6 id="2-3-模板方法"><a href="#2-3-模板方法" class="headerlink" title="2.3 模板方法"></a>2.3 模板方法</h6><p>AQS 使用一个 int 成员变量来表示同步状态，通过内置的 FIFO 队列来完成获取资源线程的排队工作。AQS 使用 CAS 对该同步状态进行原子操作实现对其值的修改。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> state;<span class="comment">// 共享变量，使用volatile修饰保证线程可见性</span></span><br></pre></td></tr></table></figure>

<p>同步状态<code>state</code>通过 protected 类型的<code>getState</code>，<code>setState</code>，<code>compareAndSetState</code>方法进行操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回同步状态的当前值</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">getState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置同步状态的值</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> newState)</span> &#123;</span><br><span class="line">        state = newState;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// CAS更新同步状态，该方法能够保证状态设置的原子性</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">compareAndSetState</span><span class="params">(<span class="type">int</span> expect, <span class="type">int</span> update)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="built_in">this</span>, stateOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同步器的设计是基于模板方法模式的，也就是说，使用者需要继承同步器并重写指定的方法，随后将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法，而这些模板方法将会调用使用者重写的方法。</p>
<p><strong>自定义同步器时需要重写下面几个 AQS 提供的模板方法：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">isHeldExclusively()<span class="comment">// 该线程是否正在独占资源。只有用到condition才需要去实现它。</span></span><br><span class="line">tryAcquire(<span class="type">int</span>)<span class="comment">// 独占方式。尝试获取资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryRelease(<span class="type">int</span>)<span class="comment">// 独占方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br><span class="line">tryAcquireShared(<span class="type">int</span>)<span class="comment">// 共享方式。尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</span></span><br><span class="line">tryReleaseShared(<span class="type">int</span>)<span class="comment">// 共享方式。尝试释放资源，成功则返回true，失败则返回false。</span></span><br></pre></td></tr></table></figure>

<p>同步器提供的模板方法基本上分为3类：<strong>独占式</strong>获取与释放同步状态、<strong>共享式</strong>获取与释放同步状态和查询同步队列中的等待线程情况。</p>
<p>一般来说，自定义同步器要么是独占方法，要么是共享方式，他们也只需实现<code>tryAcquire-tryRelease</code>、<code>tryAcquireShared-tryReleaseShared</code>中的一种即可。</p>
<p>以 ReentrantLock 为例，state 初始化为 0，表示未锁定状态。A 线程 lock()时，会调用 tryAcquire()独占该锁并将 state+1。此后，其他线程再 tryAcquire()时就会失败，直到 A 线程 unlock()到 state&#x3D;0（即释放锁）为止，其它线程才有机会获取该锁。当然，释放锁之前，A 线程自己是可以重复获取此锁的（state 会累加），这就是可重入的概念。但要注意，获取多少次就要释放多么次，这样才能保证 state 是能回到零态的。</p>
<p>再以 CountDownLatch 以例，任务分为 N 个子线程去执行，state 也初始化为 N（注意 N 要与线程个数一致）。这 N 个子线程是并行执行的，每个子线程执行完后 countDown()一次，state 会 CAS(Compare and Swap)减 1。等到所有子线程都执行完后(即 state&#x3D;0)，会 unpark()主调用线程，然后主调用线程就会从 await()函数返回，继续后续动作。</p>
<p>但 AQS 也支持自定义同步器同时实现独占和共享两种方式，如<code>ReentrantReadWriteLock</code>。</p>
<p>下面就来学习几个常用的并发同步工具。</p>
<h5 id="3-Semaphore-信号量"><a href="#3-Semaphore-信号量" class="headerlink" title="3 Semaphore(信号量)"></a>3 Semaphore(信号量)</h5><p>Semaphore（信号量）用来控制 <strong>同时访问特定资源的线程数量</strong>，它通过协调各个线程，以保证合理的使用公共资源。synchronized 和 ReentrantLock 都是一次只允许一个线程访问某个资源，而<strong>Semaphore(信号量)可以指定多个线程同时访问某个资源</strong>。</p>
<p>以停车场为例。假设一个停车场只有10个车位，这时如果同时来了15辆车，则只允许其中10辆不受阻碍的进入。剩下的5辆车则必须在入口等待，此后来的车也都不得不在入口处等待。这时，如果有5辆车离开停车场，放入5辆；如果又离开2辆，则又可以放入2辆，如此往复。</p>
<p>在这个停车场系统中，车位即是共享资源，每辆车就好比一个线程，信号量就是空车位的数目。</p>
<p>Semaphore中包含了一个实现了AQS的同步器Sync，以及它的两个子类FairSync和NonFairSync。查看Semaphore类结构：</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739169" alt="img"></p>
<p>可见Semaphore也是区分公平模式和非公平模式的。</p>
<ul>
<li><strong>公平模式：</strong> 调用 acquire 的顺序就是获取许可证的顺序，遵循 FIFO。</li>
<li><strong>非公平模式：</strong> 抢占式的。</li>
</ul>
<p>Semaphore 对应的两个构造方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits)</span> &#123;</span><br><span class="line">     sync = <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">Semaphore</span><span class="params">(<span class="type">int</span> permits, <span class="type">boolean</span> fair)</span> &#123;</span><br><span class="line">     sync = fair ? <span class="keyword">new</span> <span class="title class_">FairSync</span>(permits) : <span class="keyword">new</span> <span class="title class_">NonfairSync</span>(permits);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><strong>这两个构造方法，都必须提供许可的数量，第二个构造方法可以指定是公平模式还是非公平模式，默认非公平模式。</strong></p>
<p>Semaphore实现原理这里就不分析了，可以参考<a href="https://juejin.im/post/6844903866329202701">死磕 java同步系列之Semaphore源码解析</a>这篇文章。</p>
<p>需要明白的是，<strong>Semaphore也是共享锁的一种实现</strong>。它默认构造AQS的state为permits。当执行任务的线程数量超出permits，那么多余的线程将会被放入阻塞队列Park，并自旋判断state是否大于0。只有当state大于0的时候，阻塞的线程才能继续执行，此时先前执行任务的线程继续执行release方法，release方法使得state的变量会加1，那么自旋的线程便会判断成功。如此，每次只有最多不超过permits数量的线程能自旋成功，便限制了执行任务线程的数量。</p>
<p>Semaphore常用于做<strong>流量控制</strong>，特别是公用资源有限的应用场景。</p>
<table>
<thead>
<tr>
<th>常用方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>acquire()&#x2F;acquire(int permits)</td>
<td>获取许可证。获取许可失败，会进入AQS的队列中排队。</td>
</tr>
<tr>
<td>tryAcquire()&#x2F;tryAcquire(int permits)</td>
<td>获取许可证。获取许可失败，直接返回false。</td>
</tr>
<tr>
<td>tryAcquire(long timeout, TimeUnit unit)&#x2F; tryAcquire(int permits, long timeout, TimeUnit unit)</td>
<td>超时等待获取许可证。</td>
</tr>
<tr>
<td>release()</td>
<td>归还许可证。</td>
</tr>
<tr>
<td>intavailablePermits()</td>
<td>返回此信号量中当前可用的许可证数。</td>
</tr>
<tr>
<td>intgetQueueLength()</td>
<td>返回正在等待获取许可证的线程数。</td>
</tr>
<tr>
<td>booleanhasQueuedThreads()</td>
<td>是否有线程正在等待获取许可证。</td>
</tr>
<tr>
<td>void reducePermits（int reduction）</td>
<td>减少reduction个许可证，是个protected方法。</td>
</tr>
<tr>
<td>Collection getQueuedThreads()</td>
<td>返回所有等待获取许可证的线程集合，是个protected方法。</td>
</tr>
</tbody></table>
<p>使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SemaphoreTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建一个具有固定线程数量的线程池对象</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(THREAD_COUNT);</span><br><span class="line">        <span class="comment">// 一次只能允许执行的线程数量</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Semaphore</span> <span class="variable">semaphore</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> i;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    semaphore.acquire();<span class="comment">// 获取1个许可，所以可运行线程数量为10/1=10</span></span><br><span class="line">                    test(threadNum);</span><br><span class="line">                    semaphore.release();<span class="comment">// 释放1个许可，所以可运行线程数量为10/1=10</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> threadNum)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);<span class="comment">// 模拟请求的耗时操作</span></span><br><span class="line">        System.out.println(<span class="string">&quot;threadNum:&quot;</span> + threadNum);</span><br><span class="line">        Thread.sleep(<span class="number">1000</span>);<span class="comment">// 模拟请求的耗时操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在代码中，虽然有50个线程在执行，但是只允许10个并发执行。Semaphore的构造方法Semaphore（int permits）接受一个整型的数字，表示可用的许可证数量。Semaphore（10）表示允许10个线程获取许可证，也就是最大并发数是10。Semaphore的用法也很简单，首先线程使用Semaphore的acquire()方法获取一个许可证，使用完之后调用release()方法归还许可证。</p>
<p>除了 <code>acquire</code>方法之外，另一个比较常用的与之对应的方法是<code>tryAcquire</code>方法，该方法如果获取不到许可就立即返回 false。</p>
<h5 id="4-CountDownLatch-倒计时器"><a href="#4-CountDownLatch-倒计时器" class="headerlink" title="4 CountDownLatch (倒计时器)"></a>4 CountDownLatch (倒计时器)</h5><h6 id="4-1-概述"><a href="#4-1-概述" class="headerlink" title="4.1 概述"></a>4.1 概述</h6><p>在日常开发中经常会遇到需要在主线程中开启多个线程去并行执行任务，并且主线程需要等待所有子线程执行完毕后再进行汇总的场景。jdk 1.5之前一般都使用线程的join()方法来实现这一点，但是join方法不够灵活，难以满足不同场景的需要，所以jdk 1.5之后concurrent包提供了CountDownLatch这个类。</p>
<p><strong>CountDownLatch</strong>是一种同步辅助工具，它<strong>允许一个或多个线程等待其他线程完成操作</strong>。</p>
<p>CountDownLatch是通过一个计数器来实现的，计数器的初始化值为线程的数量。每当一个线程完成了自己的任务后，计数器的值就相应得减1。当计数器到达0时，表示所有的线程都已完成任务，然后在闭锁上等待的线程就可以恢复执行任务。</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739171" alt="img"></p>
<p>CountDownLatch的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>await()</td>
<td>调用该方法的线程等到构造方法传入的 N 减到 0 的时候，才能继续往下执行。</td>
</tr>
<tr>
<td>await(long timeout, TimeUnit unit)</td>
<td>调用该方法的线程等到指定的 timeout 时间后，不管 N 是否减至为 0，都会继续往下执行。</td>
</tr>
<tr>
<td>countDown()</td>
<td>使 CountDownLatch 初始值 N 减 1。</td>
</tr>
<tr>
<td>getCount()</td>
<td>获取当前 CountDownLatch 维护的值，也就是AQS的state的值。</td>
</tr>
</tbody></table>
<p>CountDownLatch的实现原理，可以查看 <a href="https://www.cnblogs.com/leesf456/p/5406191.html">【JUC】JDK1.8源码分析之CountDownLatch（五）</a>一文。</p>
<p>根据源码分析可知，<strong>CountDownLatch是AQS中共享锁的一种实现</strong>。AbstractQueuedSynchronizer中维护了一个volatile类型的整数state，volatile可以保证多线程环境下该变量的修改对每个线程都可见，并且由于该属性为整型，因而对该变量的修改也是原子的。</p>
<p>CountDownLatch默认构造 AQS 的 state 值为 count。创建一个CountDownLatch对象时，所传入的整数N就会赋值给state属性。</p>
<p>当调用countDown()方法时，其实是调用了<code>tryReleaseShared</code>方法以CAS的操作来对state减1；而调用await()方法时，当前线程就会判断state属性是否为0。如果为0，阻塞线程被唤醒继续往下执行；如果不为0，则使当前线程放入阻塞队列Park，直至最后一个线程调用了countDown()方法使得state &#x3D;&#x3D; 0，再唤醒在await()方法中等待的线程。</p>
<p><strong>特别注意的是</strong>：</p>
<p><strong>CountDownLatch 是一次性的</strong>，计数器的值只能在构造方法中初始化一次，之后没有任何机制再次对其设置值，当 CountDownLatch 使用完毕后，它不能再次被使用。如果<strong>需要能重置计数，可以使用CyclicBarrier</strong>。</p>
<h6 id="4-2-应用场景"><a href="#4-2-应用场景" class="headerlink" title="4.2 应用场景"></a>4.2 应用场景</h6><p>CountDownLatch主要应用场景：</p>
<ol>
<li><strong>实现最大的并行性</strong>：同时启动多个线程，实现最大程度的并行性。例如110跨栏比赛中，所有运动员准备好起跑姿势，进入到预备状态，等待裁判一声枪响。裁判开了枪，所有运动员才可以开跑。</li>
<li><strong>开始执行前等待N个线程完成各自任务</strong>：例如一群学生在教室考试，学生们都完成了作答，老师才可以进行收卷操作。</li>
</ol>
<p>案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CountDownLatchTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> <span class="type">CountDownLatch</span> <span class="variable">countDownLatch</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(THREAD_COUNT);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> i;</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">// 模拟请求的耗时操作</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;子线程:&quot;</span> + threadNum);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);<span class="comment">// 模拟请求的耗时操作</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();<span class="comment">// 表示一个请求已经被完成</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程启动...&quot;</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">        System.out.println(<span class="string">&quot;子线程执行完毕...&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程执行完毕...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，我们定义了请求的数量为30，当这 30 个请求被处理完成之后，才会打印<code>子线程执行完毕</code>。</p>
<p>主线程在启动其他线程后调用 <code>CountDownLatch.await()</code> 方法进入阻塞状态，直到其他线程完成各自的任务才被唤醒。</p>
<p>开启的30个线程必须引用闭锁对象，因为他们需要通知 <code>CountDownLatch</code> 对象，他们已经完成了各自的任务。这种通知机制是通过 <code>CountDownLatch.countDown()</code>方法来完成的；每调用一次这个方法，在构造函数中初始化的 count 值就减 1。所以当30个线程都调用了这个方法后，count 的值才等于0，然后主线程就能通过 <code>await()</code>方法，继续执行自己的任务。</p>
<h5 id="5-CyclicBarrier-循环栅栏"><a href="#5-CyclicBarrier-循环栅栏" class="headerlink" title="5 CyclicBarrier(循环栅栏)"></a>5 CyclicBarrier(循环栅栏)</h5><h6 id="5-1-概述"><a href="#5-1-概述" class="headerlink" title="5.1 概述"></a>5.1 概述</h6><p><strong>CyclicBarrier的字面意思是可循环使用（Cyclic）的屏障（Barrier）</strong>。它要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续运行。CyclicBarrier 的功能和应用场景与CountDownLatch都非常类似。</p>
<p><img src="https://segmentfault.com/img/remote/1460000037739170" alt="img"></p>
<p>CyclicBarrier常用方法：</p>
<table>
<thead>
<tr>
<th>常用方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>await()</td>
<td>在所有线程都已经在此 barrier上并调用 await 方法之前，将一直等待。</td>
</tr>
<tr>
<td>await(long timeout, TimeUnit unit)</td>
<td>所有线程都已经在此屏障上调用 await 方法之前将一直等待，或者超出了指定的等待时间。</td>
</tr>
<tr>
<td>getNumberWaiting()</td>
<td>返回当前在屏障处等待的线程数目。</td>
</tr>
<tr>
<td>getParties()</td>
<td>返回要求启动此 barrier 的线程数目。</td>
</tr>
<tr>
<td>isBroken()</td>
<td>查询此屏障是否处于损坏状态。</td>
</tr>
<tr>
<td>reset()</td>
<td>将屏障重置为其初始状态。</td>
</tr>
</tbody></table>
<h6 id="5-2-源码分析"><a href="#5-2-源码分析" class="headerlink" title="5.2 源码分析"></a>5.2 源码分析</h6><p>构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，但它不会在启动 barrier 时执行预定义的操作。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(parties, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个新的 CyclicBarrier，它将在给定数量的参与者（线程）处于等待状态时启动，并在启动 barrier 时执行给定的屏障操作。</span></span><br><span class="line"><span class="comment">// 该操作由最后一个进入 barrier 的线程执行。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">CyclicBarrier</span><span class="params">(<span class="type">int</span> parties, Runnable barrierAction)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (parties &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="built_in">this</span>.parties = parties;</span><br><span class="line">    <span class="built_in">this</span>.count = parties;</span><br><span class="line">    <span class="built_in">this</span>.barrierCommand = barrierAction;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中，<strong>parties 就表示屏障拦截的线程数量</strong>。</p>
<p>CyclicBarrier 的最重要的方法就是 await 方法，<code>await()</code> 方法就像树立起一个栅栏的行为一样，将线程挡住了，<strong>当拦住的线程数量达到 parties 的值时，栅栏才会打开，线程才得以通过执行</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, BrokenBarrierException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> dowait(<span class="literal">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (TimeoutException toe) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(toe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当调用 <code>await()</code> 方法时，实际上调用的是<code>dowait(false, 0L)</code>方法。查看<code>dowait(boolean timed, long nanos)</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 当线程数量或者请求数量达到 count 时 await 之后的方法才会被执行。</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">dowait</span><span class="params">(<span class="type">boolean</span> timed, <span class="type">long</span> nanos)</span></span><br><span class="line">    <span class="keyword">throws</span> InterruptedException, BrokenBarrierException,</span><br><span class="line">           TimeoutException &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="built_in">this</span>.lock;</span><br><span class="line">    <span class="comment">// 获取”独占锁“</span></span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 保存“当前的generation”</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">Generation</span> <span class="variable">g</span> <span class="operator">=</span> generation;</span><br><span class="line">        <span class="comment">// 如果当前代损坏，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (g.broken)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BrokenBarrierException</span>();</span><br><span class="line">        <span class="comment">// 如果线程中断，抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">            <span class="comment">// 将损坏状态设置为 true，并唤醒所有阻塞在此栅栏上的线程</span></span><br><span class="line">            breakBarrier();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InterruptedException</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将“count计数器”-1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> --count;</span><br><span class="line">        <span class="comment">// 当 count== 0，说明最后一个线程已经到达栅栏</span></span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ranAction</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> <span class="type">Runnable</span> <span class="variable">command</span> <span class="operator">=</span> barrierCommand;</span><br><span class="line">                <span class="comment">// 执行栅栏任务</span></span><br><span class="line">                <span class="keyword">if</span> (command != <span class="literal">null</span>)</span><br><span class="line">                    command.run();</span><br><span class="line">                ranAction = <span class="literal">true</span>;</span><br><span class="line">                <span class="comment">// 将 count 重置为 parties 属性的初始化值</span></span><br><span class="line">                <span class="comment">// 唤醒之前等待的线程，并更新generation。</span></span><br><span class="line">                nextGeneration();</span><br><span class="line">                <span class="comment">// 结束，等价于return index</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!ranAction)</span><br><span class="line">                    breakBarrier();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当前线程一直阻塞，直到“有parties个线程到达barrier” 或 “当前线程被中断” 或 “超时”这3者条件之一发生</span></span><br><span class="line">        <span class="comment">// 当前线程才继续执行。</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 如果没有时间限制，则直接等待，直到被唤醒。</span></span><br><span class="line">                <span class="keyword">if</span> (!timed)</span><br><span class="line">                    trip.await();</span><br><span class="line">                <span class="comment">// 如果有时间限制，则等待指定时间再唤醒(超时等待)。</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (nanos &gt; <span class="number">0L</span>)</span><br><span class="line">                    nanos = trip.awaitNanos(nanos);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException ie) &#123;</span><br><span class="line">                <span class="comment">// 当前代没有损坏</span></span><br><span class="line">                <span class="keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;</span><br><span class="line">                    <span class="comment">// 让栅栏失效</span></span><br><span class="line">                    breakBarrier();</span><br><span class="line">                    <span class="keyword">throw</span> ie;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 上面条件不满足,说明这个线程不是这代的。</span></span><br><span class="line">                    <span class="comment">// 就不会影响当前这代栅栏执行逻辑。中断。</span></span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果“当前generation已经损坏”，则抛出异常。</span></span><br><span class="line">            <span class="keyword">if</span> (g.broken)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BrokenBarrierException</span>();  </span><br><span class="line">            <span class="comment">// 如果“generation已经换代”，则返回index。</span></span><br><span class="line">            <span class="keyword">if</span> (g != generation)</span><br><span class="line">                <span class="keyword">return</span> index; </span><br><span class="line">            <span class="comment">// 如果是“超时等待”，并且时间已到，则通过breakBarrier()终止CyclicBarrier</span></span><br><span class="line">            <span class="comment">// 唤醒CyclicBarrier中所有等待线程。</span></span><br><span class="line">            <span class="keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                breakBarrier();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TimeoutException</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放“独占锁(lock)”</span></span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>generation是CyclicBarrier的一个成员变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Generation一代的意思。</span></span><br><span class="line"><span class="comment">  * CyclicBarrier是可以循环使用的，用它来标志本代和下一代。</span></span><br><span class="line"><span class="comment">  * broken：当前代是否损坏的标志。标志有线程发生了中断，或者异常，就是任务没有完成。</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Generation</span> &#123;</span><br><span class="line">     <span class="type">boolean</span> <span class="variable">broken</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 实现独占锁</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"> <span class="comment">// 实现多个线程之间相互等待通知，就是满足某些条件之后，线程才能执行，否则就等待</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Condition</span> <span class="variable">trip</span> <span class="operator">=</span> lock.newCondition();</span><br><span class="line"> <span class="comment">// 初始化时屏障数量 </span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> parties;</span><br><span class="line"> <span class="comment">// 当条件满足(即屏障数量为0)之后，会回调这个Runnable</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> Runnable barrierCommand;</span><br><span class="line"> <span class="comment">//当前代</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">Generation</span> <span class="variable">generation</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Generation</span>();</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 剩余的屏障数量count</span></span><br><span class="line"> <span class="keyword">private</span> <span class="type">int</span> count;</span><br></pre></td></tr></table></figure>

<p>在CyclicBarrier中，<strong>同一批的线程属于同一代</strong>，即同一个generation；CyclicBarrier中通过generation对象，记录属于哪一代。<br>当有parties个线程到达barrier，generation就会被更新换代。</p>
<h6 id="总结："><a href="#总结：" class="headerlink" title="总结："></a><strong>总结</strong>：</h6><ol>
<li><code>CyclicBarrier</code> 内部通过一个 count 变量作为计数器，cout 的初始值为 parties 属性的初始化值，每当一个线程到了栅栏，那么就将计数器减1。如果 count 值为 0 了，表示这是这一代最后一个线程到达栅栏，就会将代更新并重置计数器，并唤醒所有之前等待在栅栏上的线程。</li>
<li>如果在等待的过程中，线程中断都也会抛出BrokenBarrierException异常，并且这个异常会传播到其他所有的线程，CyclicBarrier会被损坏。</li>
<li>如果超出指定的等待时间，当前线程会抛出 TimeoutException 异常，其他线程会抛出BrokenBarrierException异常，CyclicBarrier会被损坏。</li>
</ol>
<h6 id="5-3-应用场景"><a href="#5-3-应用场景" class="headerlink" title="5.3 应用场景"></a>5.3 应用场景</h6><p>CyclicBarrier 可以用于多线程计算数据，最后合并计算结果的应用场景。比如我们用一个 Excel 保存了用户所有银行流水，每个 Sheet 保存一个帐户近一年的每笔银行流水，现在需要统计用户的日均银行流水，先用多线程处理每个 sheet 里的银行流水，都执行完之后，得到每个 sheet 的日均银行流水，最后，再用 barrierAction 用这些线程的计算结果，计算出整个 Excel 的日均银行流水。</p>
<p>示例 1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest1</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 需要同步的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;childThread:&quot;</span> + threadNum + <span class="string">&quot; is ready&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 等待60秒，保证子线程完全执行结束</span></span><br><span class="line">                    cyclicBarrier.await(<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;childThread:&quot;</span> + threadNum + <span class="string">&quot; is finish&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">childThread:<span class="number">0</span> is ready</span><br><span class="line">childThread:<span class="number">1</span> is ready</span><br><span class="line">childThread:<span class="number">2</span> is ready</span><br><span class="line">childThread:<span class="number">3</span> is ready</span><br><span class="line">childThread:<span class="number">4</span> is ready</span><br><span class="line">childThread:<span class="number">4</span> is finish</span><br><span class="line">childThread:<span class="number">0</span> is finish</span><br><span class="line">childThread:<span class="number">1</span> is finish</span><br><span class="line">childThread:<span class="number">3</span> is finish</span><br><span class="line">childThread:<span class="number">2</span> is finish</span><br><span class="line">childThread:<span class="number">5</span> is ready</span><br><span class="line">childThread:<span class="number">6</span> is ready</span><br><span class="line">childThread:<span class="number">7</span> is ready</span><br><span class="line">childThread:<span class="number">8</span> is ready</span><br><span class="line">childThread:<span class="number">9</span> is ready</span><br><span class="line">childThread:<span class="number">9</span> is finish</span><br><span class="line">childThread:<span class="number">8</span> is finish</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<p>可以看到当线程数量也就是请求数量达定义的 5 个的时候， <code>await</code>方法之后的方法才被执行。</p>
<p>另外，CyclicBarrier 还提供一个更高级的构造函数<code>CyclicBarrier(int parties, Runnable barrierAction)</code>，用于在线程到达屏障时，优先执行<code>barrierAction</code>，方便处理更复杂的业务场景。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CyclicBarrierTest2</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">THREAD_COUNT</span> <span class="operator">=</span> <span class="number">30</span>;</span><br><span class="line">    <span class="comment">// 需要同步的线程数量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">CyclicBarrier</span> <span class="variable">cyclicBarrier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">5</span>, () -&gt; &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------优先执行------&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="comment">// 创建线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">threadPool</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; THREAD_COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">int</span> <span class="variable">threadNum</span> <span class="operator">=</span> i;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            threadPool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;childThread:&quot;</span> + threadNum + <span class="string">&quot; is ready&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 等待60秒，保证子线程完全执行结束</span></span><br><span class="line">                    cyclicBarrier.await(<span class="number">60</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (BrokenBarrierException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (TimeoutException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(<span class="string">&quot;childThread:&quot;</span> + threadNum + <span class="string">&quot; is finish&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        threadPool.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">childThread:<span class="number">0</span> is ready</span><br><span class="line">childThread:<span class="number">1</span> is ready</span><br><span class="line">childThread:<span class="number">2</span> is ready</span><br><span class="line">childThread:<span class="number">3</span> is ready</span><br><span class="line">childThread:<span class="number">4</span> is ready</span><br><span class="line">------优先执行------</span><br><span class="line">childThread:<span class="number">4</span> is finish</span><br><span class="line">childThread:<span class="number">0</span> is finish</span><br><span class="line">childThread:<span class="number">1</span> is finish</span><br><span class="line">childThread:<span class="number">3</span> is finish</span><br><span class="line">childThread:<span class="number">2</span> is finish</span><br><span class="line">childThread:<span class="number">5</span> is ready</span><br><span class="line">childThread:<span class="number">6</span> is ready</span><br><span class="line">childThread:<span class="number">7</span> is ready</span><br><span class="line">childThread:<span class="number">8</span> is ready</span><br><span class="line">childThread:<span class="number">9</span> is ready</span><br><span class="line">------优先执行------</span><br><span class="line">childThread:<span class="number">9</span> is finish</span><br><span class="line">childThread:<span class="number">6</span> is finish</span><br><span class="line">... ...</span><br></pre></td></tr></table></figure>

<h6 id="5-4-CyclicBarrier和CountDownLatch的区别"><a href="#5-4-CyclicBarrier和CountDownLatch的区别" class="headerlink" title="5.4 CyclicBarrier和CountDownLatch的区别"></a>5.4 CyclicBarrier和CountDownLatch的区别</h6><ol>
<li>CountDownLatch的计数器只能使用一次。而CyclicBarrier的计数器可以使用reset()方法重置，可多次使用。</li>
<li>侧重点不同。CountDownLatch多用于某一个线程等待若干个其他线程执行完任务之后，它才执行；而CyclicBarrier一般用于多个线程互相等待至一个同步点，然后这些线程再继续一起执行。</li>
<li>CyclicBarrier还提供其他有用的方法，比如getNumberWaiting方法可以获得Cyclic-Barrier阻塞的线程数量；isBroken()方法用来了解阻塞的线程是否被中断。</li>
</ol>
<h4 id="十三、ReentrantLock-、-ReentrantReadWriteLock-、StampedLock（JDK8）"><a href="#十三、ReentrantLock-、-ReentrantReadWriteLock-、StampedLock（JDK8）" class="headerlink" title="十三、ReentrantLock 、 ReentrantReadWriteLock 、StampedLock（JDK8）"></a>十三、ReentrantLock 、 ReentrantReadWriteLock 、StampedLock（JDK8）</h4><h5 id="JDK8的一种新的读写锁StampedLock"><a href="#JDK8的一种新的读写锁StampedLock" class="headerlink" title="JDK8的一种新的读写锁StampedLock"></a>JDK8的一种新的读写锁StampedLock</h5><p>JDK8新增一种新的读写锁StampedLock。一个最重要的功能改进就是读写锁中<strong>解决写线程饥饿的问题</strong>。</p>
<h5 id="StampedLock与ReentrantReadWriteLock"><a href="#StampedLock与ReentrantReadWriteLock" class="headerlink" title="StampedLock与ReentrantReadWriteLock"></a>StampedLock与ReentrantReadWriteLock</h5><p>以StampedLock与ReentrantReadWriteLock两者比较为线索介绍StampedLock锁。关于ReentrantReadWriteLock锁参考文档<a href="https://www.jianshu.com/p/e44202261319">ReentrantReadWriteLock源码解析</a>。</p>
<h5 id="StampedLock不基于AQS实现"><a href="#StampedLock不基于AQS实现" class="headerlink" title="StampedLock不基于AQS实现"></a>StampedLock不基于AQS实现</h5><p>之前包括ReentrantReadWriteLock，ReentrantLock和信号量等同步工具，都是基于AQS同步框架实现的。而在StampedLock中摒弃了AQS框架，为StampedLock实现提供了更多的灵活性。</p>
<h5 id="StampedLock增加乐观读锁机制"><a href="#StampedLock增加乐观读锁机制" class="headerlink" title="StampedLock增加乐观读锁机制"></a>StampedLock增加乐观读锁机制</h5><p>先获取记录下当前锁的版本号stamp，执行读取操作后，要验证这个版本号是否改变，如果没有改变继续执行接下来的逻辑。乐观读锁机制基于在系统中大多数时间线程并发竞争不严重，绝大多数读操作都可以在没有竞争的情况下完成的论断。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//乐观读锁</span></span><br><span class="line">stamp = <span class="keyword">lock</span>.tryOptimisticRead();</span><br><span class="line"><span class="comment">//do some reading</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">lock</span>.validate(stamp)) &#123;</span><br><span class="line">    <span class="comment">//do somethinng</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实际中，乐观读的实现是通过判断state的高25位是否有变化来实现的，获取乐观读锁也仅仅是返回当前锁的版本号</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="type">long</span> <span class="title">tryOptimisticRead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">long</span> s;</span><br><span class="line">    <span class="keyword">return</span> (((s = state) &amp; WBIT) == <span class="number">0L</span>) ? (s &amp; SBITS) : <span class="number">0L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="StampedLock锁的状态和版本号"><a href="#StampedLock锁的状态和版本号" class="headerlink" title="StampedLock锁的状态和版本号"></a>StampedLock锁的状态和版本号</h5><p>基于AQS实现实现的ReentrantReadWriteLock，高16位存储读锁被获取的次数，低16位存储写锁被获取的次数。<br> 而摒弃了AQS的StampedLock，自身维护了一个状态变量state。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="type">long</span> state;</span><br></pre></td></tr></table></figure>

<p>StampedLock的状态变量state被分成3段：</p>
<ol>
<li>高24位存储版本号，只有写锁增加其版本号，而读锁不会增加其版本号；</li>
<li>低7位存储读锁被获取的次数；</li>
<li>第8位存储写锁被获取的次数，<strong>因为只有一位用于表示写锁，所以StampedLock不是可重入锁</strong>。</li>
</ol>
<p>关于状态变量state操作的变量设置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">LG_READERS</span> <span class="operator">=</span> <span class="number">7</span>; <span class="comment">//读线程的个数占有低7位</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Values for lock state and stamp operations</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RUNIT</span> <span class="operator">=</span> <span class="number">1L</span>; <span class="comment">//读线程个数每次增加的单位</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">WBIT</span>  <span class="operator">=</span> <span class="number">1L</span> &lt;&lt; LG_READERS;<span class="comment">//写线程个数所在的位置 1000 0000</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RBITS</span> <span class="operator">=</span> WBIT - <span class="number">1L</span>;<span class="comment">//读线程个数的掩码 111 1111</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RFULL</span> <span class="operator">=</span> RBITS - <span class="number">1L</span>;<span class="comment">//最大读线程个数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ABITS</span> <span class="operator">=</span> RBITS | WBIT;<span class="comment">//读线程个数和写线程个数的掩码 1111 1111</span></span><br><span class="line"><span class="comment">// Initial value for lock state; avoid failure value zero</span></span><br><span class="line"><span class="comment">//state的初始值。 1 0000 0000，也就是高24位最后一位为1，版本号初始值为1 0000 0000。锁获取失败返回版本号0。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">ORIGIN</span> <span class="operator">=</span> WBIT &lt;&lt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<h5 id="StampedLock自旋"><a href="#StampedLock自旋" class="headerlink" title="StampedLock自旋"></a>StampedLock自旋</h5><p>如下代码片段，可以看到StampedLock锁获取时存在大量自旋逻辑(for循环)。自旋是一种锁优化技术，在并发程序中大多数的锁持有时间很短暂，通过自旋可以避免线程被阻塞和唤醒产生的开销。<br> 自旋技术对于系统中持有锁时间短暂的任务比较高效，但是对于持有锁时间长的任务是对CPU的浪费。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">acquireWrite</span><span class="params">(<span class="type">boolean</span> interruptible, <span class="type">long</span> deadline)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">spins</span> <span class="operator">=</span> -<span class="number">1</span>;;) &#123; <span class="comment">// spin while enqueuing</span></span><br><span class="line">          ....省略代码逻辑....</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">spins</span> <span class="operator">=</span> -<span class="number">1</span>;;) &#123;</span><br><span class="line">        ....省略代码逻辑....</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> spins;;) &#123; <span class="comment">// spin at head</span></span><br><span class="line">           ....省略代码逻辑....</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">acquireRead</span><span class="params">(<span class="type">boolean</span> interruptible, <span class="type">long</span> deadline)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">spins</span> <span class="operator">=</span> -<span class="number">1</span>;;) &#123;</span><br><span class="line">        ....省略代码逻辑....</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">long</span> m, s, ns;;) &#123;</span><br><span class="line">            ....省略代码逻辑....</span><br><span class="line">        &#125;</span><br><span class="line">        ....省略代码逻辑....</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            ....省略代码逻辑....</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">spins</span> <span class="operator">=</span> -<span class="number">1</span>;;) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> spins;;) &#123; <span class="comment">// spin at head</span></span><br><span class="line">    ....省略代码逻辑....    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="StampedLock的CLH队列"><a href="#StampedLock的CLH队列" class="headerlink" title="StampedLock的CLH队列"></a>StampedLock的CLH队列</h5><p>StampedLock的CLH队列是一个经过改良的队列，在ReentrantReadWriteLock的等待队列中每个线程节点是依次排队，然后责任链设计模式依次唤醒，这样就可能导致读线程全部唤醒，而写线程处于饥饿状态。StampedLock的等待队列，连续的读线程只有首个节点存储在队列中，其它的节点存储在首个节点的cowait队列中。</p>
<p>StampedLock唤醒读锁是一次性唤醒连续的读锁节点。</p>
<p>类WNode是StampedLock等待队列的节点，cowait存放连续的读线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">WNode</span> &#123;</span><br><span class="line">    <span class="keyword">volatile</span> WNode prev;</span><br><span class="line">    <span class="keyword">volatile</span> WNode next;</span><br><span class="line">    <span class="comment">//cowait存放连续的读线程</span></span><br><span class="line">    <span class="keyword">volatile</span> WNode cowait; <span class="comment">// list of linked readers</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread; <span class="comment">//non-null while possibly parked</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">int</span> status;      <span class="comment">// 0, WAITING, or CANCELLED</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> mode;           <span class="comment">// RMODE or WMODE</span></span><br><span class="line">    WNode(<span class="type">int</span> m, WNode p) &#123; mode = m; prev = p; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果两个读节点之间有一个写节点，那么这两个读节点就不是连续的，会分别排队。正是因为这样的机制，会按照到来顺序让先到的写线程先于它后面的读线程执行。</p>
<p>StampedLock只有非公平模式，线程到来就会尝试获取锁。</p>
<h4 id="十四、CAS-了解么？原理？"><a href="#十四、CAS-了解么？原理？" class="headerlink" title="十四、CAS 了解么？原理？"></a>十四、CAS 了解么？原理？</h4><h5 id="1、什么是CAS？"><a href="#1、什么是CAS？" class="headerlink" title="1、什么是CAS？"></a><strong>1、什么是CAS？</strong></h5><p>CAS：Compare and Swap，即比较再交换。</p>
<p>jdk5增加了并发包java.util.concurrent.*,其下面的类使用CAS算法实现了区别于synchronouse同步锁的一种乐观锁。JDK 5之前Java语言是靠synchronized关键字保证同步的，这是一种独占锁，也是是悲观锁。</p>
<h5 id="2、CAS算法理解"><a href="#2、CAS算法理解" class="headerlink" title="2、CAS算法理解"></a><strong>2、CAS算法理解</strong></h5><p>对CAS的理解，CAS是一种无锁算法，CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>
<p>CAS比较与交换的伪代码可以表示为：</p>
<p>do{</p>
<p>备份旧数据；</p>
<p>基于旧数据构造新数据；</p>
<p>}while(!CAS( 内存地址，备份的旧数据，新数据 ))</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/zK9ke8_20210607145034.png" alt="img"></p>
<p>注：t1，t2线程是同时更新同一变量56的值</p>
<p>因为t1和t2线程都同时去访问同一变量56，所以他们会把主内存的值完全拷贝一份到自己的工作内存空间，所以t1和t2线程的预期值都为56。</p>
<p>假设t1在与t2线程竞争中线程t1能去更新变量的值，而其他线程都失败。（失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次发起尝试）。t1线程去更新变量值改为57，然后写到内存中。此时对于t2来说，内存值变为了57，与预期值56不一致，就操作失败了（想改的值不再是原来的值）。</p>
<p>（上图通俗的解释是：CPU去更新一个值，但如果想改的值不再是原来的值，操作就失败，因为很明显，有其它操作先改变了这个值。）</p>
<p>就是指当两者进行比较时，如果相等，则证明共享数据没有被修改，替换成新值，然后继续往下运行；如果不相等，说明共享数据已经被修改，放弃已经所做的操作，然后重新执行刚才的操作。容易看出 CAS 操作是基于共享数据不会被修改的假设，采用了类似于数据库的commit-retry 的模式。当同步冲突出现的机会很少时，这种假设能带来较大的性能提升。</p>
<h5 id="3、CAS开销"><a href="#3、CAS开销" class="headerlink" title="3、CAS开销"></a><strong>3、CAS开销</strong></h5><p>前面说过了，CAS（比较并交换）是CPU指令级的操作，只有一步原子操作，所以非常快。而且CAS避免了请求操作系统来裁定锁的问题，不用麻烦操作系统，直接在CPU内部就搞定了。但CAS就没有开销了吗？不！有cache miss的情况。这个问题比较复杂，首先需要了解CPU的硬件体系结构：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5ckVXA_20210607145057.png" alt="img"></p>
<p>上图可以看到一个8核CPU计算机系统，每个CPU有cache（CPU内部的高速缓存，寄存器），管芯内还带有一个互联模块，使管芯内的两个核可以互相通信。在图中央的系统互联模块可以让四个管芯相互通信，并且将管芯与主存连接起来。数据以“缓存线”为单位在系统中传输，“缓存线”对应于内存中一个 2 的幂大小的字节块，大小通常为 32 到 256 字节之间。当 CPU 从内存中读取一个变量到它的寄存器中时，必须首先将包含了该变量的缓存线读取到 CPU 高速缓存。同样地，CPU 将寄存器中的一个值存储到内存时，不仅必须将包含了该值的缓存线读到 CPU 高速缓存，还必须确保没有其他 CPU 拥有该缓存线的拷贝。</p>
<p>比如，如果 CPU0 在对一个变量执行“比较并交换”（CAS）操作，而该变量所在的缓存线在 CPU7 的高速缓存中，就会发生以下经过简化的事件序列：</p>
<p>CPU0 检查本地高速缓存，没有找到缓存线。</p>
<p>请求被转发到 CPU0 和 CPU1 的互联模块，检查 CPU1 的本地高速缓存，没有找到缓存线。</p>
<p>请求被转发到系统互联模块，检查其他三个管芯，得知缓存线被 CPU6和 CPU7 所在的管芯持有。</p>
<p>请求被转发到 CPU6 和 CPU7 的互联模块，检查这两个 CPU 的高速缓存，在 CPU7 的高速缓存中找到缓存线。</p>
<p>CPU7 将缓存线发送给所属的互联模块，并且刷新自己高速缓存中的缓存线。</p>
<p>CPU6 和 CPU7 的互联模块将缓存线发送给系统互联模块。</p>
<p>系统互联模块将缓存线发送给 CPU0 和 CPU1 的互联模块。</p>
<p>CPU0 和 CPU1 的互联模块将缓存线发送给 CPU0 的高速缓存。</p>
<p>CPU0 现在可以对高速缓存中的变量执行 CAS 操作了</p>
<p>以上是刷新不同CPU缓存的开销。最好情况下的 CAS 操作消耗大概 40 纳秒，超过 60 个时钟周期。这里的“最好情况”是指对某一个变量执行 CAS 操作的 CPU 正好是最后一个操作该变量的CPU，所以对应的缓存线已经在 CPU 的高速缓存中了，类似地，最好情况下的锁操作（一个“round trip 对”包括获取锁和随后的释放锁）消耗超过 60 纳秒，超过 100 个时钟周期。这里的“最好情况”意味着用于表示锁的数据结构已经在获取和释放锁的 CPU 所属的高速缓存中了。锁操作比 CAS 操作更加耗时，是因深入理解并行编程</p>
<p>为锁操作的数据结构中需要两个原子操作。缓存未命中消耗大概 140 纳秒，超过 200 个时钟周期。需要在存储新值时查询变量的旧值的 CAS 操作，消耗大概 300 纳秒，超过 500 个时钟周期。想想这个，在执行一次 CAS 操作的时间里，CPU 可以执行 500 条普通指令。这表明了细粒度锁的局限性。</p>
<p>以下是cache miss cas 和lock的性能对比：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/J5FBy2_20210607145123.png" alt="img"></p>
<h5 id="4、CAS算法在JDK中的应用"><a href="#4、CAS算法在JDK中的应用" class="headerlink" title="4、CAS算法在JDK中的应用"></a><strong>4、CAS算法在JDK中的应用</strong></h5><p>在原子类变量中，如java.util.concurrent.atomic中的AtomicXXX，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作，而在java.util.concurrent中的大多数类在实现时都直接或间接的使用了这些原子变量类。</p>
<p>Java 1.7中AtomicInteger.incrementAndGet()的实现源码为：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/E76D9I_20210607145148.png" alt="img"></p>
<p>由此可见，AtomicInteger.incrementAndGet的实现用了乐观锁技术，调用了类sun.misc.Unsafe库里面的 CAS算法，用CPU指令来实现无锁自增。所以，AtomicInteger.incrementAndGet的自增比用synchronized的锁效率倍增。</p>
<h4 id="十五、Atomic-原子类"><a href="#十五、Atomic-原子类" class="headerlink" title="十五、Atomic 原子类"></a>十五、Atomic 原子类</h4><h5 id="Atomic概览"><a href="#Atomic概览" class="headerlink" title="Atomic概览"></a>Atomic概览</h5><p>整个atomic包包含了17个类，如下图所示：根据其功能及其实现原理，可将其分为五个部分。本文主要针对图中序号1都部分进行源码阅读和分析。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/n8IQyt_20210607145409.png" alt="img"></p>
<h5 id="核心对象——Unsafe"><a href="#核心对象——Unsafe" class="headerlink" title="核心对象——Unsafe"></a>核心对象——Unsafe</h5><p>整个atomic都是基于<code>Unsafe</code>实现的，Unsafe通过通过单例模式来提供实例对象，这里我们主要关注它提供的几个方法：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 清单1 sun.misc.Unsafe.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> final native boolean <span class="title">compareAndSwapInt</span>(<span class="params">Object var1, <span class="built_in">long</span> var2, </span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="built_in">int</span> var4, <span class="built_in">int</span> var5</span>)</span>;      <span class="comment">// 核心方法CAS</span></span><br><span class="line"><span class="comment">// 参数释义：var1为类对象，参数var2为Field的偏移量，var4为旧值，var5为更新后的值</span></span><br><span class="line"><span class="comment">//（对象和偏移量构成唯一的内存地址，如果对源码JVM有兴趣，可下载源码参考，非本文范畴，不赘述）。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算偏移量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> native <span class="built_in">long</span> <span class="title">staticFieldOffset</span>(<span class="params">Field var1</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> native <span class="built_in">long</span> <span class="title">objectFieldOffset</span>(<span class="params">Field var1</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>Unsafe提供的大多是native方法，<code>compareAndSwapInt()</code>通过原子的方式将期望值和内存中的值进行对比，如果两者相等，则执行更新操作。<br> <code>staticFieldOffset()</code>和<code>objectFieldOffset()</code>两方法分别提供两静态、非静态域的偏移量计算方法。</p>
<p>注意：之所以命名为Unsafe，因为该对于大部分Java开发者来说是不安全的，它像C一样，拥有操作指针、分配和回收内存的能力，由该对象申请的内存是无法被JVM回收的，因此轻易别用。当然，如果对并发有非常浓厚的兴趣，就要好好研究下它，许多高性能的框架都使用它作为底层实现，如Netty、Kafka。</p>
<h5 id="AtomicInteger的基本实现"><a href="#AtomicInteger的基本实现" class="headerlink" title="AtomicInteger的基本实现"></a>AtomicInteger的基本实现</h5><p>接着再来看<code>AtomicInteger</code>的源码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"># 清单<span class="number">2</span> AtomicInteger</span><br><span class="line"><span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.<span class="built_in">getUnsafe</span>();    <span class="comment">// 获取单例对象</span></span><br><span class="line"><span class="keyword">private</span> <span class="type">static</span> <span class="keyword">final</span> <span class="type">long</span> valueOffset;    <span class="comment">// 偏移量</span></span><br><span class="line"><span class="type">static</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        valueOffset = unsafe.<span class="built_in">objectFieldOffset</span></span><br><span class="line">                (AtomicInteger.<span class="keyword">class</span>.<span class="built_in">getDeclaredField</span>(<span class="string">&quot;value&quot;</span>))    <span class="comment">// 计算偏移量</span></span><br><span class="line">    &#125; <span class="built_in">catch</span>(Exception ex)&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(ex);&#125;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">int</span> value;    <span class="comment">// 使用volatile修饰，保证可见性</span></span><br></pre></td></tr></table></figure>

<p>私有的静态域Unsafe对象和偏移量都是final修饰的，在静态代码块中，通过Unsafe实例计算出域value的偏移地址。<br> value使用volatile来修饰，保证了其可见性。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 清单3 getAndSetInt的实现</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> final <span class="built_in">int</span> <span class="title">getAndSetInt</span>(<span class="params">Object var1, <span class="built_in">long</span> var2, <span class="built_in">int</span> var4</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);        <span class="comment">// 原子获取变量的值</span></span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class="line">                                                       <span class="comment">// CAS操作，失败重试</span></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过方法名可知清单3中的方法<code>getAndSetInt()</code>为获取旧值并赋予新值的操作，通过CAS失败重试的机制来实现原子操作，这就是乐观锁的思想，也是整个并发包的核心思想。</p>
<h4 id="扩展-灵活的函数式编程"><a href="#扩展-灵活的函数式编程" class="headerlink" title="扩展-灵活的函数式编程"></a>扩展-灵活的函数式编程</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/42TeKb_20210607145444.png" alt="img"></p>
<p>AtomicInteger方法</p>
<p>AtomicInteger的方法中，除了简单的加、减、更新和获取的原子操作外，在JDK1.8中增加了4个方法，即图上标红的方法。通过函数式编程，可以灵活的实现更加复杂的原子操作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 清单5 IntUnaryOperator接口</span></span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">applyAsInt</span>(<span class="params"><span class="built_in">int</span> operand</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="literal">default</span> IntUnaryOperator <span class="title">compose</span>(<span class="params">IntUnaryOperator before</span>)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(before);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span> v) -&gt; applyAsInt(before.applyAsInt(v));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="literal">default</span> IntUnaryOperator <span class="title">andThen</span>(<span class="params">IntUnaryOperator after</span>)</span> &#123;</span><br><span class="line">    Objects.requireNonNull(after);</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span> t) -&gt; after.applyAsInt(applyAsInt(t));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该接口定义了一个待实现方法和两个默认方法，通过compose和andThen即可实现多个IntUnaryOperator的组合调用。在AtomicInteger中做如下调用：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 清单6 AtomicInteger代码片段</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> final <span class="built_in">int</span> <span class="title">getAndUpdate</span>(<span class="params">IntUnaryOperator updateFunction</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">int</span> prev, next;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        prev = <span class="keyword">get</span>();   <span class="comment">// 获取当前值</span></span><br><span class="line">        next = updateFunction.applyAsInt(prev);  <span class="comment">// 函数调用计算</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (!compareAndSet(prev, next));   <span class="comment">// CAS更新操作</span></span><br><span class="line">    <span class="keyword">return</span> prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如同代码清单7，通过函数式编程，可以轻易地完成复杂计算的原子操作。除了IntUnaryOperator接口，还有一个IntBinaryOperator接口，该接口支持额外增加的参数参与计算，两者有相似之处</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 清单7 IntUnaryOperatorTest</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span>(<span class="params">String[] args</span>)</span> &#123;</span><br><span class="line">    IntOperatorAdd <span class="keyword">add</span> = <span class="keyword">new</span> IntOperatorAdd();</span><br><span class="line">    IntOperatorMul mul = <span class="keyword">new</span> IntOperatorMul();</span><br><span class="line">    <span class="built_in">int</span> result = <span class="keyword">new</span> AtomicInteger(<span class="number">3</span>).updateAndGet(<span class="keyword">add</span>);   <span class="comment">// 结果为6 -&gt; 3+3</span></span><br><span class="line">    <span class="built_in">int</span> result2 = <span class="keyword">new</span> AtomicInteger(<span class="number">3</span>).updateAndGet(mul);  <span class="comment">// 结果为9 -&gt; 3*3</span></span><br><span class="line">    <span class="built_in">int</span> result3 = <span class="keyword">new</span> AtomicInteger(<span class="number">3</span>).updateAndGet(<span class="keyword">add</span>.andThen(mul));</span><br><span class="line">                                         <span class="comment">// 结果为36 -&gt; 3+3=6, 6*6=36</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IntOperatorAdd</span> <span class="title">implements</span> <span class="title">IntUnaryOperator</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">applyAsInt</span>(<span class="params"><span class="built_in">int</span> operand</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> operand + operand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">IntOperatorMul</span> <span class="title">implements</span> <span class="title">IntUnaryOperator</span> &#123;</span><br><span class="line">    @Override</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">applyAsInt</span>(<span class="params"><span class="built_in">int</span> operand</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> operand * operand;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="其他原子操作类"><a href="#其他原子操作类" class="headerlink" title="其他原子操作类"></a>其他原子操作类</h5><p>除了AtomicInteger外，还有AtomicLong、AtomicReference以及AtomicBoolean三个原子包装类。其实现原理都是一致的，均可举一反三。</p>
<h4 id="十六、并发容器：ConcurrentHashMap-、-CopyOnWriteArrayList-、-ConcurrentLinkedQueue-BlockingQueue-、ConcurrentSkipListMap"><a href="#十六、并发容器：ConcurrentHashMap-、-CopyOnWriteArrayList-、-ConcurrentLinkedQueue-BlockingQueue-、ConcurrentSkipListMap" class="headerlink" title="十六、并发容器：ConcurrentHashMap 、 CopyOnWriteArrayList 、 ConcurrentLinkedQueue BlockingQueue 、ConcurrentSkipListMap"></a>十六、并发容器：ConcurrentHashMap 、 CopyOnWriteArrayList 、 ConcurrentLinkedQueue BlockingQueue 、ConcurrentSkipListMap</h4><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><p>不考虑多线程并发的情况下，容器类一般使用ArrayList、HashMap等线程不安全的类，效率更高。在并发场景下，常会用到ConcurrentHashMap、ArrayBlockingQueue等线程安全的容器类，虽然牺牲了一些效率，但却得到了安全。</p>
<p>上面提到的线程安全容器都在java.util.concurrent包下，这个包下并发容器不少，今天全部翻出来鼓捣一下。</p>
<p>仅做简单介绍，后续再分别深入探索。</p>
<h5 id="并发容器介绍"><a href="#并发容器介绍" class="headerlink" title="并发容器介绍"></a>并发容器介绍</h5><ol>
<li>ConcurrentHashMap：并发版HashMap</li>
<li>CopyOnWriteArrayList：并发版ArrayList</li>
<li>CopyOnWriteArraySet：并发Set</li>
<li>ConcurrentLinkedQueue：并发队列(基于链表)</li>
<li>ConcurrentLinkedDeque：并发队列(基于双向链表)</li>
<li>ConcurrentSkipListMap：基于跳表的并发Map</li>
<li>ConcurrentSkipListSet：基于跳表的并发Set</li>
<li>ArrayBlockingQueue：阻塞队列(基于数组)</li>
<li>LinkedBlockingQueue：阻塞队列(基于链表)</li>
<li>LinkedBlockingDeque：阻塞队列(基于双向链表)</li>
<li>PriorityBlockingQueue：线程安全的优先队列</li>
<li>SynchronousQueue：读写成对的队列</li>
<li>LinkedTransferQueue：基于链表的数据交换队列</li>
<li>DelayQueue：延时队列</li>
</ol>
<h6 id="1-ConcurrentHashMap-并发版HashMap"><a href="#1-ConcurrentHashMap-并发版HashMap" class="headerlink" title="1.ConcurrentHashMap 并发版HashMap"></a><strong>1.ConcurrentHashMap 并发版HashMap</strong></h6><p>最常见的并发容器之一，可以用作并发场景下的缓存。底层依然是哈希表，但在JAVA 8中有了不小的改变，而JAVA 7和JAVA 8都是用的比较多的版本，因此经常会将这两个版本的实现方式做一些比较（比如面试中）。</p>
<p>一个比较大的差异就是，JAVA 7中采用分段锁来减少锁的竞争，JAVA 8中放弃了分段锁，采用CAS（一种乐观锁），同时为了防止哈希冲突严重时退化成链表（冲突时会在该位置生成一个链表，哈希值相同的对象就链在一起），会在链表长度达到阈值（8）后转换成红黑树（比起链表，树的查询效率更稳定）。</p>
<h6 id="2-CopyOnWriteArrayList-并发版ArrayList"><a href="#2-CopyOnWriteArrayList-并发版ArrayList" class="headerlink" title="2.CopyOnWriteArrayList 并发版ArrayList"></a><strong>2.CopyOnWriteArrayList 并发版ArrayList</strong></h6><p>并发版ArrayList，底层结构也是数组，和ArrayList不同之处在于：当新增和删除元素时会创建一个新的数组，在新的数组中增加或者排除指定对象，最后用新增数组替换原来的数组。</p>
<p>适用场景：由于读操作不加锁，写（增、删、改）操作加锁，因此适用于读多写少的场景。</p>
<p>局限：由于读的时候不会加锁（读的效率高，就和普通ArrayList一样），读取的当前副本，因此可能读取到脏数据。如果介意，建议不用。</p>
<p>看看源码感受下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Zi01aI_20210607145655.png" alt="img"></p>
<h6 id="3-CopyOnWriteArraySet-并发Set"><a href="#3-CopyOnWriteArraySet-并发Set" class="headerlink" title="3.CopyOnWriteArraySet 并发Set"></a><strong>3.CopyOnWriteArraySet 并发Set</strong></h6><p>基于CopyOnWriteArrayList实现（内含一个CopyOnWriteArrayList成员变量），也就是说底层是一个数组，意味着每次add都要遍历整个集合才能知道是否存在，不存在时需要插入（加锁）。</p>
<p>适用场景：在CopyOnWriteArrayList适用场景下加一个，集合别太大（全部遍历伤不起）。</p>
<h6 id="4-ConcurrentLinkedQueue-并发队列-基于链表"><a href="#4-ConcurrentLinkedQueue-并发队列-基于链表" class="headerlink" title="4.ConcurrentLinkedQueue 并发队列(基于链表)"></a><strong>4.ConcurrentLinkedQueue 并发队列(基于链表)</strong></h6><p>基于链表实现的并发队列，使用乐观锁(CAS)保证线程安全。因为数据结构是链表，所以理论上是没有队列大小限制的，也就是说添加数据一定能成功。</p>
<h6 id="5-ConcurrentLinkedDeque-并发队列-基于双向链表"><a href="#5-ConcurrentLinkedDeque-并发队列-基于双向链表" class="headerlink" title="5.ConcurrentLinkedDeque 并发队列(基于双向链表)"></a><strong>5.ConcurrentLinkedDeque 并发队列(基于双向链表)</strong></h6><p>基于双向链表实现的并发队列，可以分别对头尾进行操作，因此除了先进先出(FIFO)，也可以先进后出（FILO），当然先进后出的话应该叫它栈了。</p>
<h6 id="6-ConcurrentSkipListMap-基于跳表的并发Map"><a href="#6-ConcurrentSkipListMap-基于跳表的并发Map" class="headerlink" title="6.ConcurrentSkipListMap 基于跳表的并发Map"></a><strong>6.ConcurrentSkipListMap 基于跳表的并发Map</strong></h6><p>SkipList即跳表，跳表是一种空间换时间的数据结构，通过冗余数据，将链表一层一层索引，达到类似二分查找的效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ECYW6E_20210607145723.png" alt="img"></p>
<h6 id="7-ConcurrentSkipListSet-基于跳表的并发Set"><a href="#7-ConcurrentSkipListSet-基于跳表的并发Set" class="headerlink" title="7.ConcurrentSkipListSet 基于跳表的并发Set"></a><strong>7.ConcurrentSkipListSet 基于跳表的并发Set</strong></h6><p>类似HashSet和HashMap的关系，ConcurrentSkipListSet里面就是一个ConcurrentSkipListMap，就不细说了。</p>
<h6 id="8-ArrayBlockingQueue-阻塞队列-基于数组"><a href="#8-ArrayBlockingQueue-阻塞队列-基于数组" class="headerlink" title="8.ArrayBlockingQueue 阻塞队列(基于数组)"></a><strong>8.ArrayBlockingQueue 阻塞队列(基于数组)</strong></h6><p>基于数组实现的可阻塞队列，构造时必须制定数组大小，往里面放东西时如果数组满了便会阻塞直到有位置（也支持直接返回和超时等待），通过一个锁ReentrantLock保证线程安全。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/P65yAF_20210607145757.png" alt="img"></p>
<p>乍一看会有点疑惑，读和写都是同一个锁，那要是空的时候正好一个读线程来了不会一直阻塞吗？</p>
<p>答案就在notEmpty、notFull里，这两个出自lock的小东西让锁有了类似synchronized + wait + notify的功能。传送门 → 终于搞懂了sleep&#x2F;wait&#x2F;notify&#x2F;notifyAll</p>
<h6 id="9-LinkedBlockingQueue-阻塞队列-基于链表"><a href="#9-LinkedBlockingQueue-阻塞队列-基于链表" class="headerlink" title="9.LinkedBlockingQueue 阻塞队列(基于链表)"></a><strong>9.LinkedBlockingQueue 阻塞队列(基于链表)</strong></h6><p> 基于链表实现的阻塞队列，想比与不阻塞的ConcurrentLinkedQueue，它多了一个容量限制，如果不设置默认为int最大值。</p>
<h6 id="10-LinkedBlockingDeque-阻塞队列-基于双向链表"><a href="#10-LinkedBlockingDeque-阻塞队列-基于双向链表" class="headerlink" title="10.LinkedBlockingDeque 阻塞队列(基于双向链表)"></a><strong>10.LinkedBlockingDeque 阻塞队列(基于双向链表)</strong></h6><p>类似LinkedBlockingQueue，但提供了双向链表特有的操作。</p>
<h6 id="11-PriorityBlockingQueue-线程安全的优先队列"><a href="#11-PriorityBlockingQueue-线程安全的优先队列" class="headerlink" title="11.PriorityBlockingQueue 线程安全的优先队列"></a><strong>11.PriorityBlockingQueue 线程安全的优先队列</strong></h6><p>构造时可以传入一个比较器，可以看做放进去的元素会被排序，然后读取的时候按顺序消费。某些低优先级的元素可能长期无法被消费，因为不断有更高优先级的元素进来。</p>
<h6 id="12-SynchronousQueue-数据同步交换的队列"><a href="#12-SynchronousQueue-数据同步交换的队列" class="headerlink" title="12.SynchronousQueue 数据同步交换的队列"></a><strong>12.SynchronousQueue 数据同步交换的队列</strong></h6><p>一个虚假的队列，因为它实际上没有真正用于存储元素的空间，每个插入操作都必须有对应的取出操作，没取出时无法继续放入。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/yzfXal_20210607145843.png" alt="img"></p>
<p>可以看到，写入的线程没有任何sleep，可以说是全力往队列放东西，而读取的线程又很不积极，读一个又sleep一会。输出的结果却是读写操作成对出现。</p>
<p>JAVA中一个使用场景就是Executors.newCachedThreadPool()，创建一个缓存线程池。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607145908632_20210607145909.png" alt="img"></p>
<h6 id="13-LinkedTransferQueue-基于链表的数据交换队列"><a href="#13-LinkedTransferQueue-基于链表的数据交换队列" class="headerlink" title="13.LinkedTransferQueue 基于链表的数据交换队列"></a><strong>13.LinkedTransferQueue 基于链表的数据交换队列</strong></h6><p>实现了接口TransferQueue，通过transfer方法放入元素时，如果发现有线程在阻塞在取元素，会直接把这个元素给等待线程。如果没有人等着消费，那么会把这个元素放到队列尾部，并且此方法阻塞直到有人读取这个元素。和SynchronousQueue有点像，但比它更强大。</p>
<h6 id="14-DelayQueue-延时队列"><a href="#14-DelayQueue-延时队列" class="headerlink" title="14.DelayQueue 延时队列"></a><strong>14.DelayQueue 延时队列</strong></h6><p>可以使放入队列的元素在指定的延时后才被消费者取出，元素需要实现Delayed接口。</p>
<h5 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a><strong>总结</strong></h5><p>上面简单介绍了JAVA并发包下的一些容器类，知道有这些东西，遇到合适的场景时就能想起有个现成的东西可以用了。想要知其所以然，后续还得再深入探索一番。</p>
<h4 id="十七、Future-和-CompletableFuture"><a href="#十七、Future-和-CompletableFuture" class="headerlink" title="十七、Future 和 CompletableFuture"></a>十七、Future 和 CompletableFuture</h4><p>CompletableFuture是java 8引入的，用于Java异步编程。异步编程是一种通过在与主应用程序线程不同的线程上运行任务并通知主线程其进度，完成或失败的方法来编写非阻塞代码的方法。<br> 这样，您的主线程就不会阻塞&#x2F;等待任务完成，并且可以并行执行其他任务。具有这种并行性可以大大提高程序的性能。</p>
<h5 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h5><p>Future被用作异步计算结果的参考。它提供了一个isDone（）方法来检查计算是否完成，以及一个get（）方法来检索计算完成后的结果。</p>
<h5 id="Future-VS-CompletableFuture："><a href="#Future-VS-CompletableFuture：" class="headerlink" title="Future VS CompletableFuture："></a>Future VS CompletableFuture：</h5><h6 id="1-手动完成"><a href="#1-手动完成" class="headerlink" title="1.手动完成"></a>1.手动完成</h6><p>Future提供了一个isDone（）方法来检查计算是否完成，以及get（）方法来检索计算结果。但是，Future不提供手动完成的方法。CompletableFuture的complete（）方法可帮助我们手动完成Future</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Manual Completion 手动完成</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">manualCompletion</span>() throws ExecutionException, InterruptedException</span> &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    CompletableFuture&lt;String&gt; future = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;1111&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    executorService.submit(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//手动结束核心</span></span><br><span class="line">        future.complete(<span class="string">&quot;手动完成&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    System.<span class="keyword">out</span>.println(future.<span class="keyword">get</span>());</span><br><span class="line">    executorService.shutdown();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为Future的get()方法在完成计算的之前是阻塞的，我们可以使用complete()方法来手动完成计算。</p>
<h6 id="2-多个Future组成调用链"><a href="#2-多个Future组成调用链" class="headerlink" title="2.多个Future组成调用链"></a>2.多个Future组成调用链</h6><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 调用链</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">callbackChain</span>() throws ExecutionException, InterruptedException</span> &#123;</span><br><span class="line">    CompletableFuture completableFuture</span><br><span class="line">            = CompletableFuture</span><br><span class="line">            .supplyAsync(() -&gt; <span class="string">&quot;Knolders!&quot;</span>)</span><br><span class="line">            .thenRun(() -&gt; System.<span class="keyword">out</span>.println(<span class="string">&quot;Example with thenRun().&quot;</span>));</span><br><span class="line">    System.<span class="keyword">out</span>.println(completableFuture.<span class="keyword">get</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="3-组合多个CompletableFuture结果"><a href="#3-组合多个CompletableFuture结果" class="headerlink" title="3.组合多个CompletableFuture结果"></a>3.组合多个CompletableFuture结果</h6><p>如果是Future，则无法创建异步工作流程，即长时间运行的计算。但是CompletableFuture为我们提供了方法来实现此功能：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 组合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">private <span class="keyword">static</span> void <span class="title function_ invoke__">thenCompose</span>() &#123;</span><br><span class="line">    CompletableFuture&lt;<span class="type">String</span>&gt; completableFuture =</span><br><span class="line">            CompletableFuture.<span class="title function_ invoke__">supplyAsync</span>(() <span class="punctuation">-&gt;</span> <span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">                    .<span class="title function_ invoke__">thenCompose</span>(value <span class="punctuation">-&gt;</span></span><br><span class="line">                            CompletableFuture.<span class="title function_ invoke__">supplyAsync</span>(</span><br><span class="line">                                    () <span class="punctuation">-&gt;</span> value + <span class="string">&quot; Knolders! Its thenCompose&quot;</span>));</span><br><span class="line">    completableFuture.<span class="title function_ invoke__">thenAccept</span>(System.out::println); <span class="comment">// Hello Knolders! Its thenCompose</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你希望合并要并行运行的100种不同的Future，然后在所有这些Future完成后再运行某些功能。可是使用如下方法：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 组合所有的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> void allOf() <span class="keyword">throws</span> <span class="type">ExecutionException</span>, <span class="type">InterruptedException</span> &#123;</span><br><span class="line">        <span class="type">CompletableFuture</span>&lt;<span class="type">String</span>&gt; completableFuture1</span><br><span class="line">                <span class="operator">=</span> <span class="type">CompletableFuture</span>.supplyAsync(() -&gt; <span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        <span class="type">CompletableFuture</span>&lt;<span class="type">String</span>&gt; completableFuture2</span><br><span class="line">                <span class="operator">=</span> <span class="type">CompletableFuture</span>.supplyAsync(() -&gt; <span class="string">&quot;lv!&quot;</span>);</span><br><span class="line">        <span class="type">CompletableFuture</span>&lt;<span class="type">String</span>&gt; completableFuture3</span><br><span class="line">                <span class="operator">=</span> <span class="type">CompletableFuture</span>.supplyAsync(() -&gt; <span class="string">&quot;Its allOf&quot;</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这个方法并不直接返回结果只是返回一个CompletableFuture</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="type">CompletableFuture</span>&lt;<span class="type">Void</span>&gt; combinedFuture</span><br><span class="line">                <span class="operator">=</span> <span class="type">CompletableFuture</span>.allOf(completableFuture1, completableFuture2, completableFuture3);</span><br><span class="line"></span><br><span class="line">        <span class="type">System</span>.out.println(combinedFuture.get()); <span class="comment">//输出null</span></span><br><span class="line"></span><br><span class="line">        assert (completableFuture1.isDone());</span><br><span class="line">        assert (completableFuture2.isDone());</span><br><span class="line">        assert (completableFuture3.isDone());</span><br><span class="line">        <span class="comment">//使用以下两种方法获取最终结果</span></span><br><span class="line">        <span class="type">CompletableFuture</span>&lt;<span class="type">List</span>&lt;<span class="type">String</span>&gt;&gt; listCompletableFuture <span class="operator">=</span> combinedFuture.thenApply(v -&gt;</span><br><span class="line">                <span class="type">Stream</span>.of(completableFuture1, completableFuture2, completableFuture3).</span><br><span class="line">                        map(CompletableFuture::join).</span><br><span class="line">                        collect(<span class="type">Collectors</span>.toList()));</span><br><span class="line">        <span class="type">System</span>.out.println(listCompletableFuture.get());</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> combined <span class="operator">=</span> <span class="type">Stream</span>.of(completableFuture1, completableFuture2, completableFuture3)</span><br><span class="line">                .map(CompletableFuture::join)</span><br><span class="line">                .collect(<span class="type">Collectors</span>.joining(<span class="string">&quot; &quot;</span>));</span><br><span class="line">        <span class="type">System</span>.out.println(combined);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h6 id="4-异常处理"><a href="#4-异常处理" class="headerlink" title="4.异常处理"></a>4.异常处理</h6><p>如果发生异常，调用链将会停止调用。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> static void exception() &#123;</span><br><span class="line">    Integer age = -<span class="number">1</span>;</span><br><span class="line">    CompletableFuture&lt;String&gt; exceptionFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new IllegalArgumentException(<span class="string">&quot;Age can not be negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).exceptionally(ex -&gt; &#123;</span><br><span class="line">        System.<span class="keyword">out</span>.println(<span class="string">&quot;Oops! We have an exception - &quot;</span> + ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Unknown!&quot;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    exceptionFuture.thenAccept(System.<span class="keyword">out</span>::println); <span class="comment">//Unknown!</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> static void exceptionUsingHandle() &#123;</span><br><span class="line">    Integer age = -<span class="number">1</span>;</span><br><span class="line">    CompletableFuture&lt;String&gt; exceptionFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> new IllegalArgumentException(<span class="string">&quot;Age can not be negative&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">18</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Adult&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Child&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).handle((result, ex) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (ex != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.<span class="keyword">out</span>.println(<span class="string">&quot;Oops! We have an exception - &quot;</span> + ex.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Unknown!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;);</span><br><span class="line">    exceptionFuture.thenAccept(System.<span class="keyword">out</span>::println); <span class="comment">// Unknown!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="十八、……"><a href="#十八、……" class="headerlink" title="十八、……"></a>十八、……</h4><h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a><strong>JVM</strong></h2><p>对于 Java 程序员来说，JVM 帮助我们做了很多事情比如内存管理、垃圾回收等等。在 JVM 的帮助下，我们的程序出现内存泄漏这些问题的概率相对来说是比较低的。但是，这并不代表我们在日常开发工作中不会遇到。万一你在工作中遇到了 OOM 问题，你至少要知道如何去排查和解决问题吧！<br>并且，就单纯从面试角度来说，JVM 是 Java 后端面试（大厂）中非常重要的一环。不论是应届还是社招，面试国内的一些大厂，你都会被问到很多 JVM 相关的问题（应届的话侧重理论，社招实践）。</p>
<p>只有搞懂了 JVM 才有可能真正把 Java 语言“吃透”。学习 JVM 这部分的内容，一定要注意要实战和理论结合。</p>
<p>书籍的话，**<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34907497/">《深入理解 Java 虚拟机》</a>** 这本书是首先要推荐的。</p>
<p>下面是我总结的一些关于 JVM 的小问题，你可以拿来自测：</p>
<h3 id="一、什么是虚拟机？"><a href="#一、什么是虚拟机？" class="headerlink" title="一、什么是虚拟机？"></a>一、什么是虚拟机？</h3><h4 id="1、-什么是JVM？"><a href="#1、-什么是JVM？" class="headerlink" title="1、 什么是JVM？"></a>1、 什么是JVM？</h4><p>　　JVM是Java Virtual Machine（Java虚拟机）的缩写，JVM是一种用于计算设备的规范，它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。Java虚拟机包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收堆和一个存储方法域。 JVM屏蔽了与具体操作系统平台相关的信息，使Java程序只需生成在Java虚拟机上运行的目标代码（字节码）,就可以在多种平台上不加修改地运行。JVM在执行字节码时，实际上最终还是把字节码解释成具体平台上的机器指令执行。</p>
<p>　　Java语言的一个非常重要的特点就是与平台的无关性。而使用Java虚拟机是实现这一特点的关键。一般的高级语言如果要在不同的平台上运行，至少需要编译成不同的目标代码。而引入Java语言虚拟机后，Java语言在不同平台上运行时不需要重新编译。Java语言使用Java虚拟机屏蔽了与具体平台相关的信息，使得Java语言编译程序只需生成在Java虚拟机上运行的目标代码（字节码），就可以在多种平台上不加修改地运行。Java虚拟机在执行字节码时，把字节码解释成具体平台上的机器指令执行。这就是Java的能够“一次编译，到处运行”的原因。</p>
<h4 id="2、JRE-x2F-JDK-x2F-JVM是什么关系？"><a href="#2、JRE-x2F-JDK-x2F-JVM是什么关系？" class="headerlink" title="2、JRE&#x2F;JDK&#x2F;JVM是什么关系？"></a>2、JRE&#x2F;JDK&#x2F;JVM是什么关系？</h4><p>JRE(JavaRuntimeEnvironment，Java运行环境)，也就是Java平台。所有的Java 程序都要在JRE下才能运行。普通用户只需要运行已开发好的java程序，安装JRE即可。 </p>
<p>JDK(Java Development Kit)是程序开发者用来来编译、调试java程序用的开发工具包。JDK的工具也是Java程序，也需要JRE才能运行。为了保持JDK的独立性和完整性，在JDK的安装过程中，JRE也是 安装的一部分。所以，在JDK的安装目录下有一个名为jre的目录，用于存放JRE文件。 </p>
<p>JVM(JavaVirtualMachine，Java虚拟机)是JRE的一部分。它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统。Java语言最重要的特点就是跨平台运行。使用JVM就是为了支持与操作系统无关，实现跨平台。</p>
<h4 id="3、JVM原理"><a href="#3、JVM原理" class="headerlink" title="3、JVM原理"></a>3、JVM原理</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/vsFMvy_20210607151034.png" alt="img"></p>
<p>　　Java编译器只要面向JVM，生成JVM能理解的代码或字节码文件。Java源文件经编译成字节码程序，通过JVM将每一条指令翻译成不同平台机器码，通过特定平台运行。</p>
<p>我刚整理了一套2018最新的0基础入门和进阶教程，无私分享，加Java学习裙 ：678-241-563 即可获取，内附：开发工具和安装包，以及系统学习路线图</p>
<h4 id="4、JVM的体系结构"><a href="#4、JVM的体系结构" class="headerlink" title="4、JVM的体系结构"></a>4、JVM的体系结构</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/h5akfA_20210607151049.png" alt="img"></p>
<p>（1）java栈内存，它等价于C语言中的栈， 栈的内存地址是不连续的， 每个线程都拥有自己的栈。 栈里面存储着的是StackFrame，在《JVM Specification》中文版中被译作java虚拟机框架，也叫做栈帧。StackFrame包含三类信息：局部变量，执行环境，操作数栈。局部变量用来存储一个类的方法中所用到的局部变量。执行环境用于保存解析器对于java字节码进行解释过程中需要的信息，包括：上次调用的方法、局部变量指针和 操作数栈的栈顶和栈底指针。操作数栈用于存储运算所需要的操作数和结果。StackFrame在方法被调用时创建，在某个线程中，某个时间点上，只有一个 框架是活跃的，该框架被称为Current Frame，而框架中的方法被称为Current Method，其中定义的类为Current Class。局部变量和操作数栈上的操作总是引用当前框架。当Stack Frame中方法被执行完之后，或者调用别的StackFrame中的方法时，则当前栈变为另外一个StackFrame。Stack的大小是由两种类 型，固定和动态的，动态类型的栈可以按照线程的需要分配。 下面两张图是关于栈之间关系以及栈和非堆内存的关系基本描述：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/FK51y8_20210607151103.png" alt="img"></p>
<p>（2） Java堆是用来存放对象信息的，和Stack不同，Stack代表着一种运行时的状态。换句话说，栈是运行时单位，解决程序该如何执行的问题，而堆是存储的单位， 解决数据存储的问题。Heap是伴随着JVM的启动而创建，负责存储所有对象实例和数组的。堆的存储空间和栈一样是不需要连续的。</p>
<p>（3）程序计数寄存器，程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>
<p>　　由于Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间的计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。如果线程正在执行的是一个Java 方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Natvie 方法，这个计数器值则为空（Undefined）。此内存区域是唯一一个在Java 虚拟机规范中没有规定任何OutOfMemoryError 情况的区域。</p>
<p>（4）方法区域（Method Area），在Sun JDK中这块区域对应的为PermanetGeneration，又称为持久代。方法区域存放了所加载的类的信息（名称、修饰符等）、类中的静态变量、类中定义为final类型的常量、类中的Field信息、类中的方法信息，当开发人员在程序中通过Class对象中的getName、isInterface等方法来获取信息时，这些数据都来源于方法区域，同时方法区域也是全局共享的，在一定的条件下它也会被GC，当方法区域需要使用的内存超过其允许的大小时，会抛出OutOfMemory的错误信息。</p>
<p>（5）运行时常量池（Runtime Constant Pool），存放的为类中的固定的常量信息、方法和Field的引用信息等，其空间从方法区域中分配。</p>
<p>（6）本地方法堆栈（Native Method Stacks），JVM采用本地方法堆栈来支持native方法的执行，此区域用于存储每个native方法调用的状态。</p>
<h3 id="二、Java-内存区域是怎么划分的？大对象放在哪个内存区域？"><a href="#二、Java-内存区域是怎么划分的？大对象放在哪个内存区域？" class="headerlink" title="二、Java 内存区域是怎么划分的？大对象放在哪个内存区域？"></a>二、Java 内存区域是怎么划分的？大对象放在哪个内存区域？</h3><h4 id="一、运行时数据区域"><a href="#一、运行时数据区域" class="headerlink" title="一、运行时数据区域"></a>一、运行时数据区域</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/isI7wn_20210607151456.png" alt="img"></p>
<h5 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h5><p>记录正在执行的虚拟机字节码指令地址（如果正在执行的是本地的方法则为空）。</p>
<h5 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h5><p>每个Java方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在Java虚拟机栈中入栈和出栈的过程。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/i4F7mi_20210607151531.png" alt="img"></p>
<p>可以通过-Xss这个虚拟机参数来指定一个Java虚拟机栈内存大小：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -Xss = 512M HackTheJava</span><br></pre></td></tr></table></figure>

<p>该区域可能抛出以下异常：<br>  1、当线程请求的栈深度超过最大值，会抛出StackOverflowError异常；<br>  2、栈进行动态扩展时如果无法申请到足够内存，会抛出OutOfMemoryError异常。</p>
<h5 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h5><p>本地方法不是用Java实现，对待这些方法需要特别处理。<br> 与Java虚拟机栈类似，它们之间的区别只不过是本地方法栈为本地方法服务。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/7A6VYF_20210607151605.png" alt="img"></p>
<h5 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h5><p>所有对象实例都在这里分配内存。</p>
<p>是垃圾收集器的主要区域（”GC堆”），现代的垃圾收集器基本都是采用分代收集算法，该算法的思想是针对不同的对象采取不同的垃圾回收算法，因此虚拟机把Java堆分成以下三块：</p>
<ul>
<li>新生代（Young Generation）</li>
<li>老年代（<a href="https://link.jianshu.com/?t=https://www.cnblogs.com/orientsun/archive/2012/07/25/2608548.html">Tenured Generation</a>）</li>
<li>永久代（Permanent Generation）</li>
</ul>
<p>当一个对象被创建时，首先进入新生代，之后有可能被转移到老年代中。新生代存放着大量的生命很短的对象，因此新生代在三个区域中垃圾回收的频率最高。为了更高效率地进行垃圾回收，把新生代分成以下三个空间：</p>
<ul>
<li>Eden</li>
<li>From Survivor</li>
<li>To Survivor</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/I1PicV_20210607151634.png" alt="img"></p>
<p>Java堆不需要连续内存，并且可以动态增加其内存，增加失败会抛出OutOfMenmoryError异常。<br> 可以通过-Xms和-Xmx两个虚拟机参数来指定一个程序的Java堆内存大小，第一个参数设置初始值，第二个参数设置最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java -Xms = 1M -Xmx = 2M HackTheJava</span><br></pre></td></tr></table></figure>
<h5 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h5><p>用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。<br> 和Java堆不一样不需要连续的内存，并且可以动态扩展，动态扩展失败一样会抛出OutOfMemoryError异常。<br> 对这块区域进行垃圾回收的主要目标是对常量池的回收和类的卸载，但是一般比较难实现，HotSpot把它当成永久代来进行垃圾回收。</p>
<h5 id="运行常量池"><a href="#运行常量池" class="headerlink" title="运行常量池"></a>运行常量池</h5><p>运行常量池是方法区的一部分。<br> Class文件中的常量池（编译器生成的各种字面量和符号引用）会在类加载后被放入这个区域。<br> 除了在编译期生成的常量，还允许动态生成，例如String类的intern()。这部分常量也会被放入运行时常量池。</p>
<h5 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h5><p>在 JDK 1.4 中新加入了 NIO 类，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在 Java 堆里的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。</p>
<h4 id="二、垃圾收集"><a href="#二、垃圾收集" class="headerlink" title="二、垃圾收集"></a>二、垃圾收集</h4><h4 id="重拾Markdown，一些用法的使用记录"><a href="#重拾Markdown，一些用法的使用记录" class="headerlink" title="重拾Markdown，一些用法的使用记录"></a>重拾Markdown，一些用法的使用记录</h4><h5 id="1、空行"><a href="#1、空行" class="headerlink" title="1、空行"></a>1、空行</h5><p>  起作用的：正文内容。<br>  不起作用的：各级标题、分隔线、代码框编辑前后。<strong>使用前后都添加空行</strong></p>
<h5 id="2、缩进控制"><a href="#2、缩进控制" class="headerlink" title="2、缩进控制"></a>2、缩进控制</h5><p>  <code> </code>&amp;ensp;缩进一个空格。<br>  <code> </code>&amp;emsp;缩进两个空格。<br> <a href="https://www.jianshu.com/p/9d94660a96f1">https://www.jianshu.com/p/9d94660a96f1</a></p>
<h5 id="3、代码展示"><a href="#3、代码展示" class="headerlink" title="3、代码展示"></a>3、代码展示</h5><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/m7N6bX_20210607151405.png" alt="img"></p>
<p>&#96;&#96;&#96;和&#96;两者包含的代码框有什么不同？ </p>
<p>&#96;&#96;&#96;代码框。</p>
<p>&#96;代码片。</p>
<p> <a href="https://www.jianshu.com/p/b9b582bb6760">https://www.jianshu.com/p/b9b582bb6760</a></p>
<h5 id="4、Markdown是否有转义字符的使用？"><a href="#4、Markdown是否有转义字符的使用？" class="headerlink" title="4、Markdown是否有转义字符的使用？"></a>4、Markdown是否有转义字符的使用？</h5><p>  比如代码框符号&#96;&#96;&#96;，引用符号&gt;等。这个转义字符就是反斜杠 \。<br> <a href="https://www.jianshu.com/p/b9b582bb6760">https://www.jianshu.com/p/b9b582bb6760</a></p>
<h5 id="5、简数编辑区域的Markdown怎么设置图片的位置？"><a href="#5、简数编辑区域的Markdown怎么设置图片的位置？" class="headerlink" title="5、简数编辑区域的Markdown怎么设置图片的位置？"></a>5、简数编辑区域的Markdown怎么设置图片的位置？</h5><p>  <em>暂时没有解决。</em></p>
<h5 id="6、一些说明："><a href="#6、一些说明：" class="headerlink" title="6、一些说明："></a>6、一些说明：</h5><p>  <strong>图片连接地址前后都设置一个空行。</strong>简书的markdown文章中的图片不用做其他设置都是默认居中，而在个人博客中却默认左对齐，具体效果如下图。对于有轻微强迫症的笔者决定将所有图片修改为居中对齐，搜索了一下，只需在markdown文件中的图片引用前后加上 HTML <div> 标签即可实现居中。</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">-----空行----</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">align</span>=<span class="string">center</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">![]()</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">-----空行----</span><br></pre></td></tr></table></figure>

<p><a href="https://link.jianshu.com/?t=http://www.php-master.com/post/68996.html">http://www.php-master.com/post/68996.html</a></p>
<h5 id="7、强制换行"><a href="#7、强制换行" class="headerlink" title="7、强制换行"></a>7、强制换行</h5><p>  markdown编辑器下直接回车，预览时换行是显示不了的。这时就需要强制换行了。<br>  强制换行语法：<code>&lt;br&gt;</code>。可以直接使用，在简书编辑区域同样有效。</p>
<h5 id="8、杂"><a href="#8、杂" class="headerlink" title="8、杂"></a>8、杂</h5><p>  <code>&lt;br&gt;</code>与<code>&lt;br/&gt;</code>？<br>  不同的标准下的产物，使用上没什么差异，相互兼容。</p>
<p>  分隔符还是统一使用***；使用—如果它的上面没有空行，文字将会被误解析成标题。</p>
<p>  Markdown编辑的文本在不同的解析器下面，换行的长度会不同。</p>
<h3 id="三、垃圾回收有哪些算法？GC-的流程"><a href="#三、垃圾回收有哪些算法？GC-的流程" class="headerlink" title="三、垃圾回收有哪些算法？GC 的流程"></a>三、垃圾回收有哪些算法？GC 的流程</h3><h4 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h4><p>1、一个对象一生经历了什么？<br>2、如何判断对象是否可用？<br>3、引用计数法和可达性分析算法各自优缺点?<br>4、哪些对象可以作为GC ROOT?<br>5、垃圾回收的时候如何快速寻找根节点？<br>6、垃圾回收算法有哪些？各自优缺点？<br>7、有哪些垃圾回收器？各自优缺点？适用什么场景？</p>
<h4 id="1、对象回收处理过程"><a href="#1、对象回收处理过程" class="headerlink" title="1、对象回收处理过程"></a>1、对象回收处理过程</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607152935713_20210607152936.png" alt="img"></p>
<h4 id="2、判断用户是否可用计算"><a href="#2、判断用户是否可用计算" class="headerlink" title="2、判断用户是否可用计算"></a>2、判断用户是否可用计算</h4><h5 id="2-1、引用计数算法"><a href="#2-1、引用计数算法" class="headerlink" title="2.1、引用计数算法"></a>2.1、引用计数算法</h5><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/zQbhzP_20210607153405.png" alt="img"></p>
<p>如上图，给对象一个引用技术refCount。每有一个对象引用它，计时器加1，当它为0时，表示对象补课在用。</p>
<p>缺点。  </p>
<p>很难解决循环引用的问题。</p>
<p>objA.instance &#x3D; objB</p>
<p>objB.instance &#x3D; objA</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/O85ZFh_20210607153439.png" alt="img"></p>
<p>如上，即使objA和objB 都不在被访问后，但是它们还在 相互引用，所以计数器不会为0</p>
<h5 id="2-2、可达性分析算法"><a href="#2-2、可达性分析算法" class="headerlink" title="2.2、可达性分析算法"></a>2.2、可达性分析算法</h5><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/lsM8Kz_20210607153506.png" alt="img"></p>
<p>如上图，从GC Roots开始向下搜索，连接的路径为引用链；</p>
<p>GC Roots不可达的对象被判为不可用；<br><strong>可作为GC Root的对象</strong></p>
<p><strong>如上图，虚拟机栈帧中本地变量表引用的对象，本地方法栈中，JNI引用的对象，方法区中的类静态属性引入的对象和常量引用对象都可以作为GC Root。</strong></p>
<p><strong>引用类型</strong></p>
<ul>
<li>强引用：<br>类似 object a &#x3D; new object();</li>
<li>软引用：<br>SoftReference<String> ref &#x3D; new SoftReference<String>(“Hello World”);OOM前，JVM会把这些对象列入回收范围进行二次回收，如果回收后内存还是不做，则OOM。</li>
<li>弱引用：<br>WeakReference<Car> weakCar &#x3D; new WeakReference<Car>(car);每次垃圾收集，弱引用的对象就会被清理</li>
<li>虚引用：<br>幽灵引用，不能用来获取一个对象的实例，唯一用途：当一个虚引用引用的对象被回收，系统会收到这个对象被回收的通知。</li>
</ul>
<h4 id="3、HotSpot中如何实现判断是否存在与GC-Roots相连接的引用链"><a href="#3、HotSpot中如何实现判断是否存在与GC-Roots相连接的引用链" class="headerlink" title="3、HotSpot中如何实现判断是否存在与GC Roots相连接的引用链"></a>3、HotSpot中如何实现判断是否存在与GC Roots相连接的引用链</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607153915850_20210607153916.png" alt="img"></p>
<p>第一小节流程图里的是否存在与GC Roots相连接的引用链 这个判断子流程是怎么实现的呢，这节我们来仔细探讨下。</p>
<p>一般的，我们都是选取可达性分析算法，这里主要阐述怎么寻找GC Root以及如何检查引用链。</p>
<h5 id="3-1、枚举根节点"><a href="#3-1、枚举根节点" class="headerlink" title="3.1、枚举根节点"></a>3.1、枚举根节点</h5><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607153933179_20210607153933.png" alt="img"></p>
<p>如上图，在一个调用关系为：</p>
<p>ClassA.invokeA() –&gt; ClassB.invokeB() –&gt;doinvokeB() –&gt;ClassC.execute()</p>
<p>的情况下，每个调用对应一个栈帧，栈帧里面的本地变量表存储了GC Roots的引用。</p>
<p>如果直接遍历所有的栈去查找GC Roots，效率太低了。为此我们引入了OopMap和安全点的概念。</p>
<p><strong>安全点和OopMap</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/eNYInZ_20210607154007.png" alt="img"></p>
<p>如上图，在源代码编译的时候，会在特定位置下记录安全点，一般为：</p>
<p>1、循环的末尾</p>
<p>2、方法返回前 或者调用方法的call指令后</p>
<p>3、可能抛出异常的位置</p>
<p>通过安全点把代码分成几段，每段代码一个OopMap。</p>
<p>OopMap记录栈上本地变量到堆上对象的引用关系，每当触发GC的时候，程序都先跑的最近的安全点，然后自动挂起，然后在触发更新OopMap，然后进行枚举类GC ROOT，进行垃圾回收：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/4Wn0gn_20210607154023.png" alt="img"></p>
<p>安全区域：在一段代码片段之中，引用关系不会发生变化，因此在这个区域中的任意位置开始 GC 都是安全的。如处于Sleep或者Blocked状态的线程。</p>
<p>为了在枚举GC Roots的过程中，对象的引用关系不会变更，所以需要一个GC停顿。</p>
<p>还有一种抢先式中断的方式，几乎没有虚拟机采用：先中断所有线程，发现线程没中断在安全点，恢复它，继续执行到安全点。</p>
<p>找到了该回收的对象，下一步就是清掉这些对象了，HotSpot将去交给CG收集器。</p>
<h4 id="4、垃圾回收算法"><a href="#4、垃圾回收算法" class="headerlink" title="4、垃圾回收算法"></a>4、垃圾回收算法</h4><p>概览图</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/TtxwIM_20210607154038.png" alt="img"></p>
<h5 id="4-1、标记-清除算法"><a href="#4-1、标记-清除算法" class="headerlink" title="4.1、标记-清除算法"></a>4.1、标记-清除算法</h5><h6 id="4-1-1、算法描述"><a href="#4-1-1、算法描述" class="headerlink" title="4.1.1、算法描述"></a>4.1.1、算法描述</h6><p>标记阶段：标记处所有需要回收的对象；</p>
<p>清除阶段：标记成功后，统一回收所有被标记的对象；</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/502JCL_20210607154055.png" alt="img"></p>
<h6 id="4-1-2、不足"><a href="#4-1-2、不足" class="headerlink" title="4.1.2、不足"></a>4.1.2、不足</h6><p>效率不高：标记和清除两个过程效率都不高；</p>
<p>空间问题：产生大量不连续的内存碎片，进而无法容纳大对象提早触发另一次GC.。</p>
<h5 id="4-2、复制算法"><a href="#4-2、复制算法" class="headerlink" title="4.2、复制算法"></a>4.2、复制算法</h5><h6 id="4-2-1、算法描述"><a href="#4-2-1、算法描述" class="headerlink" title="4.2.1、算法描述"></a>4.2.1、算法描述</h6><p>将可用内存分为容量大小相等的两块，每次只使用其中一块；</p>
<p>当一块用完，就将存活着的对象复制到另一块，然后将这块全部内存清理掉；</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/0duyuk_20210607154116.png" alt="img"></p>
<h6 id="4-2-2、优点"><a href="#4-2-2、优点" class="headerlink" title="4.2.2、优点"></a>4.2.2、优点</h6><p>不会产生不连续的内存碎片</p>
<p>提高效率： </p>
<p>​    回收：每次都是对整个半区进行回收；</p>
<p>​    分配：分配时也不用考虑内存碎片的问题，只要移动指针，按顺序分配内存即可。</p>
<h6 id="4-2-3、缺点"><a href="#4-2-3、缺点" class="headerlink" title="4.2.3、缺点"></a>4.2.3、缺点</h6><p>可用内存缩小为原来的一半了，适合GC过后只有少量存活的新生代，可以根据实际情况，将内存块大小比例适当调整；</p>
<p>如果存活对象数量比较大，复制性能会变得很差。</p>
<h5 id="4-2-4、JVM中新生代的垃圾回收"><a href="#4-2-4、JVM中新生代的垃圾回收" class="headerlink" title="4.2.4、JVM中新生代的垃圾回收"></a>4.2.4、JVM中新生代的垃圾回收</h5><p>如下图，分为新生代和老年代。其中新生代又分为一个Eden区和两个Survivor去(from区和to区)，默认Eden : from : to 比例为8:1:1。</p>
<p>可通过JVM参数：-XX:SurvivorRatio配置比例，-XX:SurvivorRatio&#x3D;8 表示 Eden区大小 &#x2F; 1块Survivor区大小 &#x3D; 8。</p>
<p><strong>第一次Young GC</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HDxRFt_20210607154131.png" alt="img"></p>
<p>再次触发Young GC，扫描Eden区和from区，把存活的对象复制到To区，清空Eden区和from区。如果此时Survivor区的空间不够了，就会提前把对象放入老年代。</p>
<p>默认的，这样来回交换15次后，如果对象最终还是存活，就放入老年代。</p>
<p>交换次数可以通过JVM参数MaxTenuringThreshold进行设置。</p>
<h5 id="4-2-5、JVM内存模型"><a href="#4-2-5、JVM内存模型" class="headerlink" title="4.2.5、JVM内存模型"></a>4.2.5、JVM内存模型</h5><p>JDK8之前</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/gjNNif_20210607154155.png" alt="img"></p>
<p>JDK8</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KUvMoR_20210607154209.png" alt="img"></p>
<p>如上图，JDK8的方法区实现变成了元空间，元空间在本地内存中。</p>
<h5 id="4-3、标记-整理算法"><a href="#4-3、标记-整理算法" class="headerlink" title="4.3、标记-整理算法"></a>4.3、标记-整理算法</h5><h6 id="4-3-1、算法描述"><a href="#4-3-1、算法描述" class="headerlink" title="4.3.1、算法描述"></a>4.3.1、算法描述</h6><p>标记过程与标记-清楚算法一样；</p>
<p>标记完成后，将存活对象向一端移动，然后直接清理掉边界以外的内存。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/66TPGn_20210607154247.png" alt="img"></p>
<h6 id="4-3-2、优点"><a href="#4-3-2、优点" class="headerlink" title="4.3.2、优点"></a>4.3.2、优点</h6><p>不会产生内存碎片；</p>
<p>不需要浪费额外的空间进行分配担保；</p>
<h6 id="4-3-3、不足"><a href="#4-3-3、不足" class="headerlink" title="4.3.3、不足"></a>4.3.3、不足</h6><p>整理阶段存在效率问题，适合老年代这种垃圾回收频率不是很高的场景；</p>
<h5 id="4-4、分代收集算法"><a href="#4-4、分代收集算法" class="headerlink" title="4.4、分代收集算法"></a>4.4、分代收集算法</h5><p>当前商业虚拟机都采用该算法。</p>
<p>新生代：复制算法(CG后只有少量的对象存活)</p>
<p>老年代：标记-整理算法 或者 标记-清理算法(GC后对象存活率高)</p>
<h4 id="5、垃圾回收器"><a href="#5、垃圾回收器" class="headerlink" title="5、垃圾回收器"></a>5、垃圾回收器</h4><p>这一步就是我们真正进行垃圾回收的过程了。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NYLE3J_20210607154302.png" alt="img"></p>
<p>本节概念约定：并发：用户线程与垃圾收集线程同时执行，但不一定是并行，可能交替执行；并行：多条垃圾收集线程并行工作，单用户线程仍处于等待状态。</p>
<p>以下是垃圾收集器概览图</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/D6zV3r_20210607154323.png" alt="img"></p>
<h5 id="5-1、Serial收集器"><a href="#5-1、Serial收集器" class="headerlink" title="5.1、Serial收集器"></a>5.1、Serial收集器</h5><h6 id="5-1-1、特点"><a href="#5-1-1、特点" class="headerlink" title="5.1.1、特点"></a>5.1.1、特点</h6><p>串行化：在垃圾回收时，必须赞同其他所有工作线程，知道收集结束，Stop The World；</p>
<p>在单CPU模式下无线程交互开销，专心做垃圾收集，简单高效。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Eb3q5X_20210607154332.png" alt="img"></p>
<h6 id="5-1-2、适用场景"><a href="#5-1-2、适用场景" class="headerlink" title="5.1.2、适用场景"></a>5.1.2、适用场景</h6><p>特别适合限定单CPU的环境；</p>
<p>Client模式下的默认新生代收集器，用户桌面应用场景分配给虚拟机的内存一般不会很大，所以停顿时间也是在一百多毫秒以内，影响不大。</p>
<h5 id="5-2、ParNew收集器"><a href="#5-2、ParNew收集器" class="headerlink" title="5.2、ParNew收集器"></a>5.2、ParNew收集器</h5><p>Parallel New?</p>
<h6 id="5-2-1、特点"><a href="#5-2-1、特点" class="headerlink" title="5.2.1、特点"></a>5.2.1、特点</h6><p>Serial收集器的多线程版本；</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/iZVXHy_20210607154350.png" alt="img"></p>
<h6 id="5-2-2、适用场景"><a href="#5-2-2、适用场景" class="headerlink" title="5.2.2、适用场景"></a>5.2.2、适用场景</h6><p>许多运行在Server模式下的虚拟机中的首选新生代收集器；</p>
<p>除了Serial收集器外，只有它能和CMS收集器搭配使用。</p>
<p>-XX:+UseConcMarkSweepGC选型默认使用ParNew收集器。也可以使用-XX:+UseParNewGC选项强制指定它。</p>
<p>ParNew收集器在单CPU环境比Serial收集器效果差(存在线程交互开销)。</p>
<p>CPU数量越多，ParNew效果越好，默认开启收集线程数&#x3D;CPU数量。可以使用-XX:ParallelGCThreads参数限制垃圾收集器的线程数。</p>
<h5 id="5-3、Parallel-Scavenge收集器"><a href="#5-3、Parallel-Scavenge收集器" class="headerlink" title="5.3、Parallel Scavenge收集器"></a>5.3、Parallel Scavenge收集器</h5><h6 id="5-3-1、特点"><a href="#5-3-1、特点" class="headerlink" title="5.3.1、特点"></a>5.3.1、特点</h6><p>新生代收集器，使用复制算法，并行多线程；</p>
<p>吞吐量优先收集器：CMS等收集器会关注如何缩短停顿时间，而这个收集器是为了吞吐量而设计的。</p>
<p>吞吐量 &#x3D; 运行用户代码时间 &#x2F; ( 运行用户代码时间 + 垃圾收集时间 )</p>
<p>也就是说整体垃圾收集时间越短，吞吐量越高。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/EDV0Fw_20210607154405.png" alt="img"></p>
<h6 id="5-3-2、适用场景"><a href="#5-3-2、适用场景" class="headerlink" title="5.3.2、适用场景"></a>5.3.2、适用场景</h6><p>可以高效利用CPU时间，尽快完成程序的运算任务，适合后台运算不需要太多交互的任务；</p>
<h6 id="5-3-3、相关参数"><a href="#5-3-3、相关参数" class="headerlink" title="5.3.3、相关参数"></a>5.3.3、相关参数</h6><p>-XXMaxGCPauseMillis：设置最大垃圾收集停顿时间，大于0的毫秒数；</p>
<p>缩短GC停顿时间会牺牲吞吐量和新生代空间。新生代空间小，GC回收就快，但是同时会导致GC更加频繁，整体垃圾回收时间更长。</p>
<p>-XX:GCTimeRatio：设置吞吞量大小。0~100的整数，垃圾收集时间占总时间的比率，相当于吞吐量的倒数。</p>
<p>19: 1&#x2F;(1+19)&#x3D; 5%，即最大GC时间占比5%；</p>
<p>99: 1&#x2F;(1+99)&#x3D;1%，即最大GC时间占比1%；</p>
<p>-XX:+UseAdaptiveSizePolicy：GC自适应调节策略开关，打开开关，无需手工指定-Xmn(新生代大小)、-XX:SurvivorRatio(Eden与Survivor区比例)、-XX:PretenureSizeThreshold(晋升老年代对象年龄)等参数，虚拟机会收集性能监控信息，动态调整这些参数，确保提供最合适的 停顿时间或者最大吞吐量。</p>
<h5 id="5-4、Serial-Old收集器"><a href="#5-4、Serial-Old收集器" class="headerlink" title="5.4、Serial Old收集器"></a>5.4、Serial Old收集器</h5><h6 id="5-4-1、特点"><a href="#5-4-1、特点" class="headerlink" title="5.4.1、特点"></a>5.4.1、特点</h6><p>Serial收集器的老年代版本。使用单线程，标记-整理算法。</p>
<h6 id="5-4-2、适用场景"><a href="#5-4-2、适用场景" class="headerlink" title="5.4.2、适用场景"></a>5.4.2、适用场景</h6><p>主要给Client模式下的虚拟机使用；</p>
<p>Server模式下，量大用途：</p>
<p>JDK1.5版本之前的版本与Parallel Scavenge收集器搭配使用；</p>
<p>作为CMS收集器的后备预案，发生Concurrent Mode Failure时使用。</p>
<h5 id="5-5、Parallel-Olde收集器"><a href="#5-5、Parallel-Olde收集器" class="headerlink" title="5.5、Parallel Olde收集器"></a>5.5、Parallel Olde收集器</h5><h6 id="5-5-1、特点"><a href="#5-5-1、特点" class="headerlink" title="5.5.1、特点"></a>5.5.1、特点</h6><p>Parallel Scavenge收集器的老年代版本，使用多线程，标记整理算法。</p>
<h6 id="5-5-2、使用场景"><a href="#5-5-2、使用场景" class="headerlink" title="5.5.2、使用场景"></a>5.5.2、使用场景</h6><p>主要配合Parallel Scavenge使用，提高吞吐量。在注重吞吐量以及CPU资源敏感的场合，都可以优先考虑这个组合。</p>
<p>JDK1.6之后提供，之前Parallel Scavenge只能与Serial Old配合使用，老年代Serial Old无法充分利用服务器多CPU处理器能力，拖累了实际的吞吐量，效果不如ParNew+CMS组合；</p>
<h5 id="5-6、CMS收集器"><a href="#5-6、CMS收集器" class="headerlink" title="5.6、CMS收集器"></a>5.6、CMS收集器</h5><p>Concurrent Mark Sweep</p>
<h6 id="5-6-1、特点"><a href="#5-6-1、特点" class="headerlink" title="5.6.1、特点"></a>5.6.1、特点</h6><p>设计目标：获得最短回收停顿时间；</p>
<p>注重服务响应速度；</p>
<p>标记-清除算法；</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/nC3LQY_20210607154423.png" alt="img"></p>
<h6 id="5-6-2、缺点"><a href="#5-6-2、缺点" class="headerlink" title="5.6.2、缺点"></a>5.6.2、缺点</h6><p>对CPU资源敏感，虽然不会导致用户线程停顿，但是会占用一部分线程(CPU资源)而导致应用程序变慢，吞吐量降低；</p>
<p>CMS收集器无法处理浮动垃圾。在CMS并发清理阶段，用户线程会产生垃圾。如果出现Concurrent Mode Failure失败，会启动后备预案：临时启动Serial Old收集器重新进行老年代垃圾收集，停顿时间更长了。-XX:CM SInitiatingOccupancyFraction设置的太高容易导致这个问题；</p>
<p>基于标记-清除算法，会产生大量空间碎片。</p>
<h6 id="5-6-3、使用场景"><a href="#5-6-3、使用场景" class="headerlink" title="5.6.3、使用场景"></a>5.6.3、使用场景</h6><p>互联网网站或者B&#x2F;S系统的服务器；</p>
<h6 id="5-6-4、相关参数"><a href="#5-6-4、相关参数" class="headerlink" title="5.6.4、相关参数"></a>5.6.4、相关参数</h6><p>-XX:+UseCMSCompactAtFullCollection：在CMS要进行Full GC时进行内存碎片整理(默认开启)。内存整理过程无法并发，会增加停顿时间；</p>
<p>-XX:CMSFullGCsBeforeCompaction：在多少次 Full GC 后进行一次空间整理(默认0，即每一次 Full GC 后都进行一次空间整理)；</p>
<p>-XX:CM SInitiatingOccupancyFraction：触发GC的内存百分比，设置的太高容易导致Concurrent Mode Failure失败(GC过程中，用户线程新增的浮动垃圾，导致触发另一个Full GC)。</p>
<p>CMS为什么要采用标记-清除算法？</p>
<p>CMS主要关注低延迟，所以采用并发方式清理垃圾，此时程序还在运行，如果采用压缩算法，则会涉及到移动应用程序的存活对象，这种场景下不做停顿是很难处理的，一般需要停顿下来移动存活对象，再让应用程序继续运行，但是这样停顿时间就边长了，延迟变长。CMS是容忍了空间碎片来换取回收的低延迟。</p>
<h5 id="5-7、G1收集器"><a href="#5-7、G1收集器" class="headerlink" title="5.7、G1收集器"></a>5.7、G1收集器</h5><p>G1：Garbage-First，即优先回收价值最大的Region(注1)。</p>
<p>注1：G1与收集器将整个Java堆换分为多个代销相等的独立区域，跟踪各个Region里面的垃圾堆积的价值大小，优先回收价值最大的Region。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/jtj1A0_20210607154438.png" alt="img"></p>
<p>如上图，G1收集器分为四个阶段：</p>
<p>初始标记：只标记GC Roots能直接关联到的对象，速度很快。并修改TAMS(Next Top at Mark Start)的值，让下一阶段用户程序并发运行时，能够在正确可用的Region中创建新对象，这阶段需要停顿线程；</p>
<p>并发标记：GC RootsTracing过程。该阶段对象变化记录在线程Remembered Set Logs中。</p>
<p>最终标记：修正并发期间因用户程序运作而导致标记产生变动的部分对象的标记记录。把Remembered Set Logs数据合并到Remembered Set中。这个阶段需要停顿，但是可并行执行；</p>
<p>筛选回收：对各个Region回收价值和成本进行排序，根据用户期望Gc停顿时间制定回收计划。与CMS不一样，这里不用和用户线程并发执行，提高收集效率，使用标记-整理算法，不产生空间碎片。</p>
<h6 id="5-7-1、特点"><a href="#5-7-1、特点" class="headerlink" title="5.7.1、特点"></a>5.7.1、特点</h6><p>并行与并发：并发标记，并行最终标记与筛选回收；</p>
<p>分代收集</p>
<p>空间整合：基于标记-整理算法，不会产生碎片。</p>
<p>可预测的停顿：G与收集器将整个Java堆换分为多个代销相等的独立区域，避免在整个Java堆中进行全区域的垃圾回收，跟踪各个Region里面垃圾堆积的价值大小，后台维护一个优先列表，每次根据运行的收集时间，优先回收价值最大的Region。</p>
<h3 id="四、什么是类加载？何时类加载？类加载流程？"><a href="#四、什么是类加载？何时类加载？类加载流程？" class="headerlink" title="四、什么是类加载？何时类加载？类加载流程？"></a>四、什么是类加载？何时类加载？类加载流程？</h3><h4 id="类的加载过程介绍"><a href="#类的加载过程介绍" class="headerlink" title="类的加载过程介绍"></a>类的加载过程介绍</h4><ol>
<li><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><ul>
<li><p>类的加载指的是将类的 .class 文件中的二进制数据读入到 JVM 内存中，将其放在运行时数据区的 <strong>方法区</strong> 内，然后在 <strong>堆区</strong> 创建一个 java.lang.Class 对象，用来封装类在方法区内的数据结构。类的加载的最终是位于堆区中的 Class 对象，Class 对象封装了类在方法区内的数据结构，并且提供了访问方法区内的数据结构的接口。</p>
</li>
<li><p>类的加载过程分为 3 个步骤：<strong>加载；连接（验证、准备、解析）；初始化</strong>，一般情况下 JVM 会连续完成 3 个步骤，有时也会只完成前两步。</p>
</li>
<li><p>如图</p>
<p><img src="https://upload-images.jianshu.io/upload_images/18194036-69d59af96d828f3b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1158/format/webp" alt="img"></p>
<p>类加载过程.jpg</p>
</li>
</ul>
</li>
<li><h5 id="类加载器介绍"><a href="#类加载器介绍" class="headerlink" title="类加载器介绍"></a>类加载器介绍</h5><ul>
<li><a href="https://www.jianshu.com/p/a80db3beb21a">类加载介绍</a></li>
<li>系统可能在第一次使用某一个类时，加载该类，但也可能采用 <strong>预先加载机制</strong> 来加载该类，不管怎样类的加载必须由 <strong>类加载器</strong> 来完成。通常类加载器是由 JVM 提供。</li>
<li>类的加载必须由类加载器完成，通常情况下类加载器由 JVM 提供，但也可以通过自定义。<ol>
<li>JVM 提供的类加载器被称之为 <strong>系统类加载器</strong></li>
<li>开发者还可以通过继承 <strong>ClassLoader</strong> 接口来创建 <strong>自定义类加载器</strong></li>
</ol>
</li>
<li>通过不同的类加载器，可以从不同的 “来源” 加载类的 .class 文件（二进制文件）<ol>
<li>从本地系统中直接读取 .class 文件，大部分的加载方式。</li>
<li>从 ZIP、JAR 等归档文件中加载 .class 文件，很常见。</li>
<li>从网络下载 .class 文件数据。</li>
<li>从专有数据库中读取 .class 文件</li>
<li>将 Java 的源文件数据，上传到服务器中，进行动态编译产生 .class 文件，并加以执行。</li>
</ol>
</li>
<li>但是不管 .class 文件数据来源何处，加载的结果都是相同的<ol>
<li>将字节码文件数据加载到 JVM 内存中，将其放在运行时数据区的 <strong>方法区</strong> 内，然后在 <strong>堆区</strong> 创建一个 java.lang.Class 对象，用来封装类在方法区内的数据结构。类的加载的最终是位于堆区中的 Class 对象，Class 对象封装了类在方法区内的数据结构，并且提供了访问方法区内的数据结构的接口。</li>
</ol>
</li>
</ul>
</li>
</ol>
<h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><ol>
<li><h5 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h5><ul>
<li>通过一个类的全限定名来获取其定义的字节码（二进制字节流），将字节码文件加载到 JVM 内存中，此过程由类加载器完成（可控）</li>
</ul>
</li>
<li><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a><strong>特点</strong></h5><ul>
<li>加载阶段是可控性最强的阶段，既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载。</li>
</ul>
</li>
</ol>
<h4 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h4><ol>
<li><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><ul>
<li>校验 .class 文件是否合法，遵循 .class 文件格式 <a href="https://www.jianshu.com/p/a682f9cc5fea">参考地址</a></li>
</ul>
</li>
<li><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><ul>
<li>为类变量（<code>static</code> 修饰的变量）在 JVM 方法区中分配内存，并进行 <strong>默认初始化</strong><ol>
<li><code>int</code> 默认初始化为 <code>0</code></li>
<li>引用默认初始化为 <code>null</code></li>
<li>等等</li>
</ol>
</li>
<li>静态常量（<code>static final</code>） ，有所不同，直接在 JVM 方法去中 <strong>显示初始化</strong></li>
</ul>
</li>
<li><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><ul>
<li>JVM 将常量池的符号引用。替换为直接（地址）引用</li>
</ul>
</li>
<li><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ul>
<li><strong>此时在堆区中已经创建一个 java.lang.Class 对象，指向方法区中的数据</strong></li>
</ul>
</li>
</ol>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><ol>
<li><h5 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h5><ul>
<li>主要是对类静态的类变量进行 <strong>显示初始化</strong>  <a href="https://links.jianshu.com/go?to=https://blog.csdn.net/u013309870/article/details/72975536">参考地址</a><ol>
<li>init 对非静态变量解析初始化</li>
<li>clinit 是 java.lang.class 类构造器对静态变量，静态代码块进行初始化</li>
</ol>
</li>
<li>类构造器方法（clinit）由编译器收集类中所有类变量的 <strong>显示赋值和静态代码块中的语句合并产生</strong></li>
</ul>
</li>
<li><h5 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h5><ul>
<li>当初始化某个类时，如果其父类没有初始化，则先触发父类的初始化动作</li>
<li>JVM 保证一个类的初始化，在多线中中正确加锁和同步</li>
</ul>
</li>
</ol>
<h4 id="何时会或者不会触发类初始化动作呢？"><a href="#何时会或者不会触发类初始化动作呢？" class="headerlink" title="何时会或者不会触发类初始化动作呢？"></a>何时会或者不会触发类初始化动作呢？</h4><ol>
<li><h5 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h5><ul>
<li>上面已经介绍，类的加载过程分为 3 步，大部分 3 步按顺序完成，有时也会只完成前两步</li>
</ul>
</li>
<li><h5 id="如何区分会不会触发类的初始化"><a href="#如何区分会不会触发类的初始化" class="headerlink" title="如何区分会不会触发类的初始化"></a>如何区分会不会触发类的初始化</h5><ul>
<li><p>如表</p>
<table>
<thead>
<tr>
<th>会触发类的初始化</th>
<th>不会触发类的初始化</th>
</tr>
</thead>
<tbody><tr>
<td>当虚拟机启动时，先初始化 <code>main()</code> 方法所在的类</td>
<td>引用静态常量不会触发此类的初始化</td>
</tr>
<tr>
<td>一次 <code>new</code> 一个类的对象（在 JVM 中一个类的 Class 对象只有一个）</td>
<td>当访问一个静态域时，只有真正声明该域的类才会被初始化（子类继承父类的静态变量，在子类使用该静态变量时，只有父类会初始化，子类不会初始化）</td>
</tr>
<tr>
<td>调用该类的静态变量（<code>static final</code> 除外，因为其在连接时已经显示初始化完成）和静态方法</td>
<td>通过数组定义类引用时，不会触发类初始化（<code>A[] as = new A[2]</code> A 是类，此时不会初始化 A类）</td>
</tr>
<tr>
<td>当初始化某个类时，其父类没有被初始化时，则会先初始化其父类</td>
<td></td>
</tr>
</tbody></table>
</li>
</ul>
</li>
</ol>
<h3 id="五、知道哪些类加载器。类加载器之间的关系？"><a href="#五、知道哪些类加载器。类加载器之间的关系？" class="headerlink" title="五、知道哪些类加载器。类加载器之间的关系？"></a>五、知道哪些类加载器。类加载器之间的关系？</h3><h4 id="一、三种类加载器"><a href="#一、三种类加载器" class="headerlink" title="一、三种类加载器"></a>一、三种类加载器</h4><p>当 JVM 启动的时候，Java 缺省开始使用如下三种类型的类加载器：</p>
<p><strong>启动（Bootstrap）类加载器</strong>：引导类加载器是用 本地代码实现的类加载器，它负责将 <JAVA_HOME>&#x2F;lib 下面的核心类库 或 -Xbootclasspath 选项指定的 jar 包等 虚拟机识别的类库 加载到内存中。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以 不允许直接通过引用进行操作。</p>
<p><strong>扩展（Extension）类加载器</strong>：扩展类加载器是由 Sun 的 ExtClassLoader（sun.misc.Launcher$ExtClassLoader）实现的，它负责将 <JAVA_HOME>&#x2F;lib&#x2F;ext 或者由系统变量 - Djava.ext.dir 指定位置中的类库 加载到内存中。开发者可以直接使用标准扩展类加载器。</p>
<p><strong>系统（System）类加载器</strong>：系统类加载器是由 Sun 的 AppClassLoader（sun.misc.Launcher$AppClassLoader）实现的，它负责将 用户类路径 (java -classpath 或 - Djava.class.path 变量所指的目录，即当前类所在路径及其引用的第三方类库的路径。开发者可以直接使用系统类加载器。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/a3hwNw_20210607160522.png"></p>
<p>通过这两张图我们可以看出，扩展类加载器和系统类加载器均是继承自 java.lang.ClassLoader 抽象类。</p>
<h4 id="二、类加载器的关系"><a href="#二、类加载器的关系" class="headerlink" title="二、类加载器的关系"></a>二、类加载器的关系</h4><p>关系如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ap1Obm_20210607160540.png"></p>
<p>上面图片给人的直观印象是：系统类加载器的父类加载器是标准扩展类加载器，标准扩展类加载器的父类加载器是启动类加载器。</p>
<p>事实上，由于启动类加载器无法被 Java 程序直接引用，因此 JVM 默认直接使用 null 代表启动类加载器。</p>
<p>此外：</p>
<p>1．<strong>系统类加载器（AppClassLoader）调用 ClassLoader (ClassLoader parent) 构造函数将父类加载器设置为标准扩展类加载器 (ExtClassLoader)。</strong>（因为如果不强制设置，默认会通过调用 getSystemClassLoader () 方法获取并设置成系统类加载器。）</p>
<p>2．<strong>扩展类加载器（ExtClassLoader）调用 ClassLoader (ClassLoader parent) 构造函数将父类加载器设置为 null</strong>（null 本身就代表着引导类加载器）。（因为如果不强制设置，默认会通过调用 getSystemClassLoader () 方法获取并设置成系统类加载器，。）</p>
<h3 id="六、类加载器的双亲委派了解么？-结合-Tomcat-说一下双亲委派（Tomcat-如何打破双亲委托机制？…）。"><a href="#六、类加载器的双亲委派了解么？-结合-Tomcat-说一下双亲委派（Tomcat-如何打破双亲委托机制？…）。" class="headerlink" title="六、类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？…）。"></a>六、类加载器的双亲委派了解么？ 结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？…）。</h3><p>这是我们研究Tomcat的第四篇文章，前三篇文章我们搭建了源码框架，了解了tomcat的大致的设计架构， 还写了一个简单的服务器。按照我们最初订的计划，今天，我们要开始研究tomcat的几个主要组件（组件太多，无法一一解析，解析几个核心），包括核心的类加载器，连接器和容器，还有生命周期，还有pipeline 和 valve。一个一个来，今天来研究类加载器。</p>
<p>我们分为4个部分来探讨:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 什么是类加载机制？</span><br><span class="line">2. 什么是双亲委任模型？</span><br><span class="line">3. 如何破坏双亲委任模型？</span><br><span class="line">4. Tomcat 的类加载器是怎么设计的？</span><br></pre></td></tr></table></figure>

<p>我想，在研究tomcat 类加载之前，我们复习一下或者说巩固一下java 默认的类加载器。楼主以前对类加载也是懵懵懂懂，借此机会，也好好复习一下。</p>
<p>楼主翻开了神书《深入理解Java虚拟机》第二版，p227, 关于类加载器的部分。请看：</p>
<h5 id="1-什么是类加载机制？"><a href="#1-什么是类加载机制？" class="headerlink" title="1. 什么是类加载机制？"></a>1. 什么是类加载机制？</h5><blockquote>
<p>代码编译的结果从本地机器码转变成字节码，是存储格式的一小步，却是编程语言发展的一大步。</p>
</blockquote>
<blockquote>
<p>Java虚拟机把描述类的数据从Class文件加载进内存，并对数据进行校验，转换解析和初始化，最终形成可以呗虚拟机直接使用的Java类型，这就是虚拟机的类加载机制。</p>
</blockquote>
<blockquote>
<p>虚拟机设计团队把类加载阶段中的“通过一个类的全限定名来获取描述此类的二进制字节流”这个动作放到Java虚拟机外部去实现，以便让应用程序自己决定如何去获取所需要的类。实现这动作的代码模块成为“类加载器”。</p>
</blockquote>
<h6 id="类与类加载器的关系"><a href="#类与类加载器的关系" class="headerlink" title="类与类加载器的关系"></a>类与类加载器的关系</h6><blockquote>
<p>类加载器虽然只用于实现类的加载动作，但它在Java程序中起到的作用却远远不限于类加载阶段。对于任意一个类，都需要由<strong>加载他的类加载器和这个类本身一同确立其在Java虚拟机中的唯一性</strong>，每一个类加载器，都拥有一个独立的类命名空间。这句话可以表达的更通俗一些：比较两个类是否“相等”，<code>只有在这两个类是由同一个类加载器加载的前提下才有意义</code>，否则，即使这两个类来自同一个Class文件，被同一个虚拟机加载，只要加载他们的类加载器不同，那这个两个类就必定不相等。</p>
</blockquote>
<h5 id="2-什么是双亲委任模型"><a href="#2-什么是双亲委任模型" class="headerlink" title="2. 什么是双亲委任模型"></a>2. 什么是双亲委任模型</h5><ol>
<li>从Java虚拟机的角度来说，只存在两种不同类加载器：一种是**启动类加载器(Bootstrap ClassLoader)**，这个类加载器使用C++语言实现（只限HotSpot），是虚拟机自身的一部分；另一种就是所有其他的类加载器，这些类加载器都由Java语言实现，独立于虚拟机外部，并且全都继承自抽象类<code>java.lang.ClassLoader</code>.</li>
<li>从Java开发人员的角度来看，类加载还可以划分的更细致一些，绝大部分Java程序员都会使用以下3种系统提供的类加载器：<ul>
<li>启动类加载器（Bootstrap ClassLoader）：这个类加载器复杂将存放在 JAVA_HOME&#x2F;lib 目录中的，或者被-Xbootclasspath 参数所指定的路径种的，并且是虚拟机识别的（仅按照文件名识别，如rt.jar，名字不符合的类库即使放在lib目录下也不会重载）。</li>
<li>扩展类加载器（Extension ClassLoader）：这个类加载器由sun.misc.Launcher$ExtClassLoader实现，它负责夹杂JAVA_HOME&#x2F;lib&#x2F;ext 目录下的，或者被java.ext.dirs 系统变量所指定的路径种的所有类库。开发者可以直接使用扩展类加载器。</li>
<li>应用程序类加载器（Application ClassLoader）：这个类加载器由sun.misc.Launcher$AppClassLoader 实现。由于这个类加载器是ClassLoader 种的getSystemClassLoader方法的返回值，所以也成为系统类加载器。它负责加载用户类路径（ClassPath）上所指定的类库。开发者可以直接使用这个类加载器，如果应用中没有定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。</li>
</ul>
</li>
</ol>
<p>这些类加载器之间的关系一般如下图所示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ZjCurq_20210607161016.png" alt="img"></p>
<p>图中各个类加载器之间的关系成为 <strong>类加载器的双亲委派模型（Parents Dlegation Mode）</strong>。双亲委派模型要求除了顶层的启动类加载器之外，<strong>其余的类加载器都应当由自己的父类加载器加载</strong>，这里类加载器之间的父子关系一般不会以继承的关系来实现，而是都使用组合关系来复用父加载器的代码。</p>
<p>类加载器的双亲委派模型在JDK1.2 期间被引入并被广泛应用于之后的所有Java程序中，但他并不是个强制性的约束模型，而是Java设计者推荐给开发者的一种类加载器实现方式。</p>
<p>双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，他首先不会自己去尝试加载这个类，而是把这个请求委派父类加载器去完成。每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个请求（他的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去加载。</p>
<h6 id="为什么要这么做呢？"><a href="#为什么要这么做呢？" class="headerlink" title="为什么要这么做呢？"></a><strong>为什么要这么做呢？</strong></h6><blockquote>
<p>如果没有使用双亲委派模型，由各个类加载器自行加载的话，如果用户自己编写了一个称为java.lang.Object的类，并放在程序的ClassPath中，<strong>那系统将会出现多个不同的Object类</strong>， Java类型体系中最基础的行为就无法保证。应用程序也将会变得一片混乱。</p>
</blockquote>
<h6 id="双亲委任模型时如何实现的？"><a href="#双亲委任模型时如何实现的？" class="headerlink" title="双亲委任模型时如何实现的？"></a><strong>双亲委任模型时如何实现的？</strong></h6><blockquote>
<p>非常简单：所有的代码都在java.lang.ClassLoader中的loadClass方法之中，代码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/rL2L6J_20210607161108.png" alt="img"></p>
</blockquote>
<p>逻辑清晰易懂：先检查是否已经被加载过，若没有加载则调用父加载器的loadClass方法， 如父加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，抛出ClassNotFoundException 异常后，再调用自己的findClass方法进行加载。</p>
<h5 id="3-如何破坏双亲委任模型？"><a href="#3-如何破坏双亲委任模型？" class="headerlink" title="3. 如何破坏双亲委任模型？"></a>3. 如何破坏双亲委任模型？</h5><p>刚刚我们说过，双亲委任模型不是一个强制性的约束模型，而是一个建议型的类加载器实现方式。在Java的世界中大部分的类加载器都遵循者模型，但也有例外，到目前为止，双亲委派模型有过3次大规模的“被破坏”的情况。<br> <strong>第一次</strong>：在双亲委派模型出现之前—–即JDK1.2发布之前。<br> <strong>第二次</strong>：是这个模型自身的缺陷导致的。我们说，双亲委派模型很好的解决了各个类加载器的基础类的统一问题（越基础的类由越上层的加载器进行加载），基础类之所以称为“基础”，是因为它们总是作为被用户代码调用的API， 但没有绝对，<strong>如果基础类调用会用户的代码</strong>怎么办呢？</p>
<p>这不是没有可能的。一个典型的例子就是JNDI服务，JNDI现在已经是Java的标准服务，它的代码由启动类加载器去加载（在JDK1.3时就放进去的rt.jar）,但它需要调用由独立厂商实现并部署在应用程序的ClassPath下的JNDI接口提供者（SPI， Service Provider Interface）的代码，但启动类加载器不可能“认识“这些代码啊。因为这些类不在rt.jar中，但是启动类加载器又需要加载。怎么办呢？</p>
<p>为了解决这个问题，Java设计团队只好引入了一个不太优雅的设计：<strong>线程上下文类加载器（Thread Context ClassLoader）</strong>。这个类加载器可以通过java.lang.Thread类的setContextClassLoader方法进行设置。如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过多的话，那这个类加载器默认即使应用程序类加载器。</p>
<p>嘿嘿，有了线程上下文加载器，JNDI服务使用这个线程上下文加载器去加载所需要的SPI代码，也就是父类加载器请求子类加载器去完成类加载的动作，这种行为实际上就是打通了双亲委派模型的层次结构来逆向使用类加载器，实际上已经违背了双亲委派模型的一般性原则。但这无可奈何，Java中所有涉及SPI的加载动作基本胜都采用这种方式。例如JNDI，<strong>JDBC</strong>，JCE，JAXB，JBI等。</p>
<p><strong>第三次</strong>：为了实现热插拔，热部署，模块化，意思是添加一个功能或减去一个功能不用重启，只需要把这模块连同类加载器一起换掉就实现了代码的热替换。</p>
<p>书中还说到：</p>
<blockquote>
<p>Java 程序中基本有一个共识：OSGI对类加载器的使用时值得学习的，弄懂了OSGI的实现，就可以算是掌握了类加载器的精髓。</p>
</blockquote>
<p>牛逼啊！！！</p>
<p>现在，我们已经基本明白了Java默认的类加载的作用了原理，也知道双亲委派模型。说了这么多，差点把我们的tomcat给忘了，我们的题目是Tomcat 加载器为何违背双亲委派模型？下面就好好说说我们的tomcat的类加载器。</p>
<h5 id="4-Tomcat-的类加载器是怎么设计的？"><a href="#4-Tomcat-的类加载器是怎么设计的？" class="headerlink" title="4. Tomcat 的类加载器是怎么设计的？"></a>4. Tomcat 的类加载器是怎么设计的？</h5><p>首先，我们来问个问题：</p>
<h6 id="Tomcat-如果使用默认的类加载机制行不行？"><a href="#Tomcat-如果使用默认的类加载机制行不行？" class="headerlink" title="Tomcat 如果使用默认的类加载机制行不行？"></a>Tomcat 如果使用默认的类加载机制行不行？</h6><p>我们思考一下：Tomcat是个web容器， 那么它要解决什么问题：</p>
<ol>
<li>一个web容器可能需要部署两个应用程序，不同的应用程序可能会依赖<strong>同一个第三方类库的不同版本</strong>，不能要求同一个类库在同一个服务器只有一份，因此要保证每个应用程序的类库都是独立的，保证相互隔离。</li>
<li>部署在同一个web容器中相同的类库相同的版本可以共享。否则，如果服务器有10个应用程序，那么要有10份相同的类库加载进虚拟机，这是扯淡的。</li>
<li>web容器也有自己依赖的类库，不能于应用程序的类库混淆。基于安全考虑，应该让容器的类库和程序的类库隔离开来。</li>
<li>web容器要支持jsp的修改，我们知道，jsp 文件最终也是要编译成class文件才能在虚拟机中运行，但程序运行后修改jsp已经是司空见惯的事情，否则要你何用？ 所以，web容器需要支持 jsp 修改后不用重启。</li>
</ol>
<p>再看看我们的问题：Tomcat 如果使用默认的类加载机制行不行？<br> 答案是不行的。为什么？我们看，第一个问题，如果使用默认的类加载器机制，那么是无法加载两个相同类库的不同版本的，默认的累加器是不管你是什么版本的，只在乎你的全限定类名，并且只有一份。第二个问题，默认的类加载器是能够实现的，因为他的职责就是保证唯一性。第三个问题和第一个问题一样。我们再看第四个问题，我们想我们要怎么实现jsp文件的热修改（楼主起的名字），jsp 文件其实也就是class文件，那么如果修改了，但类名还是一样，类加载器会直接取方法区中已经存在的，修改后的jsp是不会重新加载的。那么怎么办呢？我们可以直接卸载掉这jsp文件的类加载器，所以你应该想到了，每个jsp文件对应一个唯一的类加载器，当一个jsp文件修改了，就直接卸载这个jsp类加载器。重新创建类加载器，重新加载jsp文件。</p>
<h5 id="Tomcat-如何实现自己独特的类加载机制？"><a href="#Tomcat-如何实现自己独特的类加载机制？" class="headerlink" title="Tomcat 如何实现自己独特的类加载机制？"></a>Tomcat 如何实现自己独特的类加载机制？</h5><p>所以，Tomcat 是怎么实现的呢？牛逼的Tomcat团队已经设计好了。我们看看他们的设计图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/9Fh6Id_20210607161152.png" alt="img"></p>
<p>我们看到，前面3个类加载和默认的一致，CommonClassLoader、CatalinaClassLoader、SharedClassLoader和WebappClassLoader则是Tomcat自己定义的类加载器，它们分别加载<code>/common/*</code>、<code>/server/*</code>、<code>/shared/*</code>（在tomcat 6之后已经合并到根目录下的lib目录下）和<code>/WebApp/WEB-INF/*</code>中的Java类库。其中WebApp类加载器和Jsp类加载器通常会存在多个实例，<strong>每一个Web应用程序</strong>对应一个WebApp类加载器，每一个JSP文件对应一个Jsp类加载器。</p>
<ul>
<li>commonLoader：Tomcat最基本的类加载器，加载路径中的class可以被Tomcat容器本身以及各个Webapp访问；</li>
<li>catalinaLoader：Tomcat容器私有的类加载器，加载路径中的class对于Webapp不可见；</li>
<li>sharedLoader：各个Webapp共享的类加载器，加载路径中的class对于所有Webapp可见，但是对于Tomcat容器不可见；</li>
<li>WebappClassLoader：各个Webapp私有的类加载器，加载路径中的class只对当前Webapp可见；</li>
</ul>
<p>从图中的委派关系中可以看出：</p>
<blockquote>
<p>CommonClassLoader能加载的类都可以被Catalina ClassLoader和SharedClassLoader使用，从而实现了公有类库的共用，而CatalinaClassLoader和Shared ClassLoader自己能加载的类则与对方相互隔离。</p>
</blockquote>
<blockquote>
<p>WebAppClassLoader可以使用SharedClassLoader加载到的类，但各个WebAppClassLoader实例之间相互隔离。</p>
</blockquote>
<blockquote>
<p>而JasperLoader的加载范围仅仅是这个JSP文件所编译出来的那一个.Class文件，它出现的目的就是为了被丢弃：当Web容器检测到JSP文件被修改时，会替换掉目前的JasperLoader的实例，并通过再建立一个新的Jsp类加载器来实现JSP文件的HotSwap功能。</p>
</blockquote>
<p>好了，至此，我们已经知道了tomcat为什么要这么设计，以及是如何设计的，那么，tomcat 违背了java 推荐的双亲委派模型了吗？答案是：违背了。 我们前面说过：</p>
<blockquote>
<p>双亲委派模型要求除了顶层的启动类加载器之外，其余的类加载器都应当由自己的父类加载器加载。</p>
</blockquote>
<p>很显然，tomcat 不是这样实现，tomcat 为了实现隔离性，没有遵守这个约定，每个webappClassLoader加载自己的目录下的class文件，不会传递给父类加载器。</p>
<h5 id="我们扩展出一个问题：如果tomcat-的-Common-ClassLoader-想加载-WebApp-ClassLoader-中的类，该怎么办？"><a href="#我们扩展出一个问题：如果tomcat-的-Common-ClassLoader-想加载-WebApp-ClassLoader-中的类，该怎么办？" class="headerlink" title="我们扩展出一个问题：如果tomcat 的 Common ClassLoader 想加载 WebApp ClassLoader 中的类，该怎么办？"></a>我们扩展出一个问题：如果tomcat 的 Common ClassLoader 想加载 WebApp ClassLoader 中的类，该怎么办？</h5><p>看了前面的关于破坏双亲委派模型的内容，我们心里有数了，我们可以使用线程上下文类加载器实现，使用线程上下文加载器，可以让父类加载器请求子类加载器去完成类加载的动作。牛逼吧。</p>
<h4 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h4><p>好了，终于，我们明白了Tomcat 为何违背双亲委派模型，也知道了tomcat的类加载器是如何设计的。顺便复习了一下 Java 默认的类加载器机制，也知道了如何破坏Java的类加载机制。这一次收获不小哦！！！ 嘿嘿。</p>
<h3 id="七、常见调优参数有哪些？"><a href="#七、常见调优参数有哪些？" class="headerlink" title="七、常见调优参数有哪些？"></a>七、常见调优参数有哪些？</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-Xms2g：初始化推大小为 2g；</span><br><span class="line">-Xmx2g：堆最大内存为 2g；</span><br><span class="line">-XX:NewRatio=<span class="number">4</span>：设置年轻的和老年代的内存比例为 <span class="number">1</span>:<span class="number">4</span>；</span><br><span class="line">-XX:SurvivorRatio=<span class="number">8</span>：设置新生代 Eden 和 Survivor 比例为 <span class="number">8</span>:<span class="number">2</span>；</span><br><span class="line">–XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；</span><br><span class="line">-XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；</span><br><span class="line">-XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；</span><br><span class="line">-XX:+PrintGC：开启打印 gc 信息；</span><br><span class="line">-XX:+PrintGCDetails：打印 gc 详细信息。</span><br></pre></td></tr></table></figure>

<h3 id="八、……"><a href="#八、……" class="headerlink" title="八、……"></a>八、……</h3><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a><strong>数据库</strong></h2><p><strong>学习了 MySQL 之后，务必确保自己掌握下面这些知识点：</strong></p>
<h3 id="一、MySQL-常用命令-："><a href="#一、MySQL-常用命令-：" class="headerlink" title="一、MySQL 常用命令 ："></a>一、MySQL 常用命令 ：</h3><h4 id="1、MySQL常用命令"><a href="#1、MySQL常用命令" class="headerlink" title="1、MySQL常用命令"></a>1、MySQL常用命令</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">create database name; 创建数据库</span><br><span class="line">use databasename; 选择数据库</span><br><span class="line">drop database name 直接删除数据库，不提醒</span><br><span class="line">show tables; 显示表</span><br><span class="line">describe tablename; 表的详细描述</span><br><span class="line">select 中加上distinct去除重复字段</span><br><span class="line">mysqladmin drop databasename 删除数据库前，有提示。</span><br><span class="line">显示当前mysql版本和当前日期</span><br><span class="line">select <span class="title function_">version</span><span class="params">()</span>,current_date;</span><br></pre></td></tr></table></figure>

<h4 id="2、修改mysql中root的密码："><a href="#2、修改mysql中root的密码：" class="headerlink" title="2、修改mysql中root的密码："></a>2、修改mysql中root的密码：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shell&gt;mysql -u root -p</span><br><span class="line"> mysql&gt; update user set password=password(”xueok654123″) where user=’root’;</span><br><span class="line"> mysql&gt; flush privileges <span class="comment">//刷新数据库</span></span><br><span class="line"> mysql&gt;use dbname； 打开数据库：</span><br><span class="line"> mysql&gt;show databases; 显示所有数据库</span><br><span class="line"> mysql&gt;show tables; 显示数据库mysql中所有的表：先use mysql；然后</span><br><span class="line"> mysql&gt;describe user; 显示表mysql数据库中user表的列信息）；</span><br></pre></td></tr></table></figure>

<h4 id="3、grant"><a href="#3、grant" class="headerlink" title="3、grant"></a>3、grant</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">创建一个可以从任何地方连接服务器的一个完全的超级用户，但是必须使用一个口令something做这个</span><br><span class="line"> mysql&gt; grant all privileges on *.* to user<span class="meta">@localhost</span> identified by ’something’ with</span><br><span class="line"> 增加新用户</span><br><span class="line"> 格式：grant select on 数据库.* to 用户名@登录主机 identified by “密码”</span><br><span class="line"> GRANT ALL PRIVILEGES ON *.* TO monty<span class="meta">@localhost</span> IDENTIFIED BY ’something’ WITH GRANT OPTION;</span><br><span class="line"> GRANT ALL PRIVILEGES ON *.* TO monty@”%” IDENTIFIED BY ’something’ WITH GRANT OPTION;</span><br><span class="line"> 删除授权：</span><br><span class="line"> mysql&gt; revoke all privileges on *.* from root@”%”;</span><br><span class="line"> mysql&gt; delete from user where user=”root” and host=”%”;</span><br><span class="line"> mysql&gt; flush privileges;</span><br><span class="line"> 创建一个用户custom在特定客户端it363.com登录，可访问特定数据库fangchandb</span><br><span class="line"> mysql &gt;grant select, insert, update, delete, create,drop on fangchandb.* to custom@ [it363.com](https:<span class="comment">//link.jianshu.com?t=http://it363.com) identified by ‘ passwd’</span></span><br><span class="line"> 重命名表:</span><br><span class="line"> mysql &gt; alter table t1 rename t2;</span><br></pre></td></tr></table></figure>

<h4 id="4、mysqldump"><a href="#4、mysqldump" class="headerlink" title="4、mysqldump"></a>4、mysqldump</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">备份数据库</span><br><span class="line"> shell&gt; mysqldump -h host -u root -p dbname &gt;dbname_backup.sql</span><br><span class="line"> 恢复数据库</span><br><span class="line"> shell&gt; mysqladmin -h myhost -u root -p create dbname</span><br><span class="line"> shell&gt; mysqldump -h host -u root -p dbname &lt; dbname_backup.sql</span><br><span class="line"> 如果只想卸出建表指令，则命令如下：</span><br><span class="line"> shell&gt; mysqladmin -u root -p -d databasename &gt; a.sql</span><br><span class="line"> 如果只想卸出插入数据的sql命令，而不需要建表命令，则命令如下：</span><br><span class="line"> shell&gt; mysqladmin -u root -p -t databasename &gt; a.sql</span><br><span class="line"> 那么如果我只想要数据，而不想要什么sql命令时，应该如何操作呢？</span><br><span class="line"> 　 mysqldump -T./ phptest driver</span><br><span class="line"> 其中，只有指定了-T参数才可以卸出纯文本文件，表示卸出数据的目录，./表示当前目录，即与mysqldump同一目录。如果不指定driver 表，则将卸出整个数据库的数据。每个表会生成两个文件，一个为.sql文件，包含建表执行。另一个为.txt文件，只包含数据，且没有sql指令。</span><br></pre></td></tr></table></figure>

<h4 id="5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。"><a href="#5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。" class="headerlink" title="5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。"></a>5、可将查询存储在一个文件中并告诉mysql从文件中读取查询而不是等待键盘输入。可利用外壳程序键入重定向实用程序来完成这项工作。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">例如，如果在文件my_file.sql 中存放有查</span><br><span class="line"> 询，可如下执行这些查询：</span><br><span class="line"> 例如，如果您想将建表语句提前写在sql.txt中:</span><br><span class="line"> mysql &gt; mysql -h myhost -u root -p database &lt; sql.txt</span><br></pre></td></tr></table></figure>

<h3 id="二、MySQL-中常用的数据类型、字符集编码"><a href="#二、MySQL-中常用的数据类型、字符集编码" class="headerlink" title="二、MySQL 中常用的数据类型、字符集编码"></a>二、MySQL 中常用的数据类型、字符集编码</h3><p>MySQL 支持多种数据类型，主要有数值类型、日期&#x2F;时间类型和字符串类型。</p>
<ul>
<li>数值类型：包括整数类型 <code>TINYINT</code>、<code>SMALLINT</code>、<code>MEDIUMINT</code>、<code>INT</code>、<code>BIGINT</code>、浮点小数数据类型 <code>FLOAT</code>和 <code>DOUBLE</code>、定点小数类型 <code>DECIMAL</code>。</li>
<li>日期&#x2F;时间类型：<code>YEAR</code> 、<code>TIME</code>、 <code>DATE</code>、 <code>DATETIME</code> 和 <code>TIMESTAMP</code>。</li>
<li>字符串类型： <code>CHAR</code> 、<code>VARCHAR</code>、 <code>BINARY</code>、 <code>VARBINARY</code>、 <code>BLOB</code>、 <code>TEXT</code>、 <code>ENUM</code>、 <code>SET</code> 。</li>
</ul>
<h4 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h4><p>MySQL中的整数型数据类型：</p>
<table>
<thead>
<tr>
<th>类型名称</th>
<th align="center">存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>TINYINT</td>
<td align="center">1个字节</td>
</tr>
<tr>
<td>SMALLINT</td>
<td align="center">2个字节</td>
</tr>
<tr>
<td>MEDIUMINT</td>
<td align="center">3个字节</td>
</tr>
<tr>
<td>INT(INTEGER)</td>
<td align="center">4个字节</td>
</tr>
<tr>
<td>BIGINT</td>
<td align="center">8个字节</td>
</tr>
</tbody></table>
<h4 id="日期与时间类型"><a href="#日期与时间类型" class="headerlink" title="日期与时间类型"></a>日期与时间类型</h4><table>
<thead>
<tr>
<th>类型名称</th>
<th>日期格式</th>
<th>日期范围</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>YEAR</td>
<td>YYYY</td>
<td>1901~2155</td>
<td>1个字节</td>
</tr>
<tr>
<td>TIME</td>
<td>HH:MM:SS</td>
<td>-838:59:59~838:59:59</td>
<td>3个字节</td>
</tr>
<tr>
<td>DATE</td>
<td>YYYY-MM-DD</td>
<td>1000-01-01~9999-12-3</td>
<td>3个字节</td>
</tr>
<tr>
<td>DATETIME</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1000-01-01 00:00:00~9999-12-31 23:59:59</td>
<td>8个字节</td>
</tr>
<tr>
<td>TIMESTAMP</td>
<td>YYYY-MM-DD HH:MM:SS</td>
<td>1970-01-01 00:00:01 UTC ~2038-01-19 03:14:07 UTC</td>
<td>4个字节</td>
</tr>
</tbody></table>
<p>在这里提一下** CURRENT_DATE 和 NOW() 的区别**：CURRENT_DATE 返回当前日期值，不包括时间部分，NOW() 函数返回日期和时间值。</p>
<p>提示：TIMESTAMP 和 DATATIME 除了存储字节和支持的范围不同外，还有一个最大的区别就是：DATETIME 在存储日期数据时，按实际输入的格式存储，即输入什么就存储什么，与时区无关；而 TIMESTAMP 值的存储是以 UTC （世界标准时间）格式保存的，存储时对当前时区进行转换，检索时再转换回当前时区。即查询时，根据当前时区的不同，显示的时间值是不同的。</p>
<h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><table>
<thead>
<tr>
<th>类型名称</th>
<th>说明</th>
<th>存储需求</th>
</tr>
</thead>
<tbody><tr>
<td>CHAR(M)</td>
<td>固定长度非二进制字符串</td>
<td>M字节，1&lt;&#x3D;M&lt;&#x3D; 255</td>
</tr>
<tr>
<td>VARCHAR(M)</td>
<td>变长非二进制字符串</td>
<td>L+1字节，L&lt;&#x3D;M和1&lt;&#x3D;M&lt;&#x3D;255</td>
</tr>
<tr>
<td>TINYTEXT</td>
<td>非常小的非二进制字符串</td>
<td>L+1字节，在此L&lt;2^8</td>
</tr>
<tr>
<td>TEXT</td>
<td>小的非二进制字符串</td>
<td>L+2字节，在此L&lt;2^16</td>
</tr>
<tr>
<td>MEDIUMTEXT</td>
<td>中等大小的非二进制字符串</td>
<td>L+3字节，在此L&lt;2^32</td>
</tr>
<tr>
<td>LONGTEXT</td>
<td>大的非二进制字符串</td>
<td>L+4字节，在此L&lt;2^32</td>
</tr>
<tr>
<td>ENUM</td>
<td>枚举类型，只能存一个枚举字符串值</td>
<td>1或2个字节，取决于枚举值的数目（最大值65535）</td>
</tr>
<tr>
<td>SET</td>
<td>一个设置，字符串对象可以有零个或多个 SET 成员</td>
<td>1、2、3、4或8个字节，取决于集合成员的数量（最多64个成员）</td>
</tr>
</tbody></table>
<h3 id="三、MySQL-简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组……"><a href="#三、MySQL-简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组……" class="headerlink" title="三、MySQL 简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组……"></a>三、MySQL 简单查询、条件查询、模糊查询、多表查询以及如何对查询结果排序、过滤、分组……</h3><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607163257520_20210607163257.png" alt="image-20210607163257520"></p>
<h3 id="四、MySQL-中使用索引、视图、存储过程、游标、触发器"><a href="#四、MySQL-中使用索引、视图、存储过程、游标、触发器" class="headerlink" title="四、MySQL 中使用索引、视图、存储过程、游标、触发器"></a>四、MySQL 中使用索引、视图、存储过程、游标、触发器</h3><blockquote>
<p>1 索引<br> 2 触发器<br> 3 存储过程和函数<br> 4 视图<br> 5 基本的数据库建表语句练习</p>
</blockquote>
<h4 id="1-索引"><a href="#1-索引" class="headerlink" title="1 索引"></a>1 索引</h4><h5 id="（1）基本概念"><a href="#（1）基本概念" class="headerlink" title="（1）基本概念"></a>（1）基本概念</h5><p><a href="https://blog.csdn.net/buhuikanjian/article/details/52966039">https://blog.csdn.net/buhuikanjian/article/details/52966039</a></p>
<h5 id="（2）建立索引的原则"><a href="#（2）建立索引的原则" class="headerlink" title="（2）建立索引的原则"></a>（2）建立索引的原则</h5><p><a href="https://www.cnblogs.com/aspwebchh/p/6652855.html">https://www.cnblogs.com/aspwebchh/p/6652855.html</a></p>
<h5 id="（3）具体操作语句"><a href="#（3）具体操作语句" class="headerlink" title="（3）具体操作语句"></a>（3）具体操作语句</h5><p>步骤1  创建表test_table1,添加三个索引</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">CREATE TABLE test_table1(</span><br><span class="line"><span class="keyword">id</span> INT NOT <span class="literal">NULL</span>  PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line">NAME CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">address CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">description CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">UNIQUE INDEX UniqIdx(<span class="keyword">id</span>),</span><br><span class="line">INDEX MultiColIdx(NAME(<span class="number">20</span>), address(<span class="number">30</span>)),</span><br><span class="line">INDEX ComIdx(description(<span class="number">30</span>))</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p>步骤2  创建表test_table1,添加三个索引创建表test_table2，存储引擎为MyISAM</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">test_table2</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">id         INT NOT <span class="literal">NULL</span>  PRIMARY KEY AUTO_INCREMENT,</span></span></span><br><span class="line"><span class="params"><span class="function">firstname   CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">middlename CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">lastname   CHAR(<span class="number">100</span>) NOT <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">birth      DATE NOT <span class="literal">NULL</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">title       CHAR(<span class="number">100</span>) <span class="literal">NULL</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span> ENGINE</span>=MYISAM;</span><br></pre></td></tr></table></figure>

<p>步骤3  创建表test_table1,添加三个索引使用ALTER TABLE语句在表test_table2的birth字段上，建立名称为ComDateIdx的普通索引</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ALTER TABLE test_table2 ADD INDEX <span class="title">ComDateIdx</span><span class="params">(birth)</span></span>;</span><br></pre></td></tr></table></figure>

<p>步骤4 创建表test_table1,添加三个索引使用ALTER TABLE语句在表test_table2的id字段上，添加名称为UniqIdx2的唯一索引，并以降序排列</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ALTER TABLE test_table2 ADD UNIQUE INDEX <span class="title">UniqIdx2</span> <span class="params">(id DESC)</span></span>;</span><br></pre></td></tr></table></figure>

<p>步骤5  创建表test_table1,添加三个索引使用CREATE INDEX在firstname、middlename和lastname3个字段上建立名称为MultiColIdx2的组合索引</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE INDEX MultiColIdx2 ON <span class="title">test_table2</span><span class="params">(firstname, middlename, lastname)</span></span>;</span><br></pre></td></tr></table></figure>

<p>步骤6 创建表test_table1,添加三个索引使用CREATE INDEX在title字段上建立名称为FTIdx的全文索引</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE FULLTEXT INDEX FTIdx ON <span class="title">test_table2</span><span class="params">(title)</span></span>;</span><br></pre></td></tr></table></figure>

<p>步骤7 创建表test_table1,添加三个索引使用ALTER TABLE语句删除表test_table1中名称为UniqIdx的唯一索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALTER TABLE test_table1 DROP INDEX UniqIdx;</span><br></pre></td></tr></table></figure>

<p>步骤8 创建表test_table1,添加三个索引使用DROP INDEX语句删除表test_table2中名称为MultiColIdx2的组合索引</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP INDEX MultiColIdx2 ON test_table2;</span><br></pre></td></tr></table></figure>

<h4 id="2-触发器"><a href="#2-触发器" class="headerlink" title="2 触发器"></a>2 触发器</h4><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Bfkva0_20210607165356.png" alt="img"></p>
<h5 id="（2）触发器使用"><a href="#（2）触发器使用" class="headerlink" title="（2）触发器使用"></a>（2）触发器使用</h5><p><a href="https://www.cnblogs.com/yank/p/4193820.html">https://www.cnblogs.com/yank/p/4193820.html</a></p>
<h4 id="3-存储过程和函数"><a href="#3-存储过程和函数" class="headerlink" title="3 存储过程和函数"></a>3 存储过程和函数</h4><h5 id="（1）存储过程优缺点"><a href="#（1）存储过程优缺点" class="headerlink" title="（1）存储过程优缺点"></a>（1）存储过程优缺点</h5><p><a href="https://blog.csdn.net/jackmacro/article/details/5688687">https://blog.csdn.net/jackmacro/article/details/5688687</a></p>
<h5 id="（2）存储过程、函数、游标"><a href="#（2）存储过程、函数、游标" class="headerlink" title="（2）存储过程、函数、游标"></a>（2）存储过程、函数、游标</h5><p><a href="https://www.cnblogs.com/doudouxiaoye/p/5811836.html">https://www.cnblogs.com/doudouxiaoye/p/5811836.html</a><br> <a href="https://www.cnblogs.com/jacketlin/p/7874009.html">https://www.cnblogs.com/jacketlin/p/7874009.html</a></p>
<h5 id="（3）代码详解"><a href="#（3）代码详解" class="headerlink" title="（3）代码详解"></a>（3）代码详解</h5><p>1 创建查看fruits表的存储过程，创建了一个查看fruits表的存储过程，每次调用这个存储过程的时候都会执行SELECT语句查看表的内容。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE Proc()</span><br><span class="line">     <span class="keyword">BEGIN</span></span><br><span class="line">        SELECT * FROM fruits;</span><br><span class="line">     <span class="keyword">END</span> ;</span><br></pre></td></tr></table></figure>

<p>2 创建名称为CountProc的存储过程，获取fruits表记录条数。COUNT(*) 计算后把结果放入参数param1中。<br> 当使用DELIMITER命令时，应该避免使用反斜杠（’\’）字符，因为反斜线是MySQL的转义字符。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE CountProc (OUT param1 INT)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">SELECT COUNT(*) INTO param1 FROM fruits;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure>

<p>3 创建存储函数NameByZip，该函数返回SELECT语句的查询结果，数值类型为字符串型。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE FUNCTION <span class="title function_ invoke__">NameByZip</span> ()</span><br><span class="line">  RETURNS <span class="title function_ invoke__">CHAR</span>(<span class="number">50</span>)</span><br><span class="line">  <span class="title function_ invoke__">RETURN</span>  (SELECT s_name FROM suppliers WHERE s_call= <span class="string">&#x27;48075&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>4 定义名称为myparam的变量，类型为INT类型，默认值为100。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DECLARE  myparam  INT  DEFAULT <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<p>5 声明3个变量，分别为var1、var2和var3，数据类型为INT，使用SET为变量赋值。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DECLARE var1, var2, var3 INT;</span><br><span class="line">SET var1 = <span class="number">10</span>, var2 = <span class="number">20</span>;</span><br><span class="line">SET var3 = var1 + var2;</span><br></pre></td></tr></table></figure>

<p>MySQL中还可以通过SELECT … INTO为一个或多个变量赋值，语法如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">SELECT col_name<span class="selector-attr">[,...]</span> INTO var_name<span class="selector-attr">[,...]</span> table_expr;</span><br></pre></td></tr></table></figure>

<p>这个SELECT语法把选定的列直接存储到对应位置的变量。col_name表示字段名称；var_name表示定义的变量名称；table_expr表示查询条件表达式，包括表名称和WHERE子句。</p>
<p>6 声明变量fruitname和fruitprice，通过SELECT，INTO语句查询指定记录并为变量赋值。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">DECLARE fruitname <span class="title">CHAR</span>(<span class="params"><span class="number">50</span></span>)</span>;</span><br><span class="line"><span class="function">DECLARE fruitprice <span class="title">DECIMAL</span>(<span class="params"><span class="number">8</span>,<span class="number">2</span></span>)</span>;</span><br><span class="line"></span><br><span class="line">SELECT f_name,f_price INTO fruitname, fruitprice</span><br><span class="line">FROM fruits WHERE f_id =<span class="string">&#x27;a1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>7 声明名称为cursor_fruit的光标</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DECLARE cursor_fruit CURSOR FOR SELECT f_name, f_price FROM fruits ;</span><br></pre></td></tr></table></figure>

<p>8 使用名称为cursor_fruit的光标。将查询出来的数据存入fruit_name和fruit_price这两个变量中。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">FETCH  cursor_fruit INTO fruit_name, fruit_price ;</span><br></pre></td></tr></table></figure>

<p>9 IF语句的示例</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">IF val IS <span class="literal">NULL</span></span><br><span class="line">  THEN SELECT <span class="string">&#x27;val is NULL&#x27;</span>;</span><br><span class="line">  ELSE SELECT <span class="string">&#x27;val is not NULL&#x27;</span>;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure>

<p>10 使用CASE流程控制语句的第1种格式，判断val值等于1、等于2，或者两者都不等。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CASE val</span><br><span class="line">  WHEN <span class="number">1</span> THEN SELECT <span class="string">&#x27;val is 1&#x27;</span>;</span><br><span class="line">  WHEN <span class="number">2</span> THEN SELECT <span class="string">&#x27;val is 2&#x27;</span>;</span><br><span class="line">  ELSE SELECT <span class="string">&#x27;val is not 1 or 2&#x27;</span>;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure>

<p>11 使用LOOP语句进行循环操作，id值小于等于10之前，将重复执行循环过程。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">DECLARE <span class="keyword">id</span> INT DEFAULT <span class="number">0</span>;</span><br><span class="line">add_loop: LOOP  </span><br><span class="line">SET <span class="keyword">id</span> = <span class="keyword">id</span> + <span class="number">1</span>;</span><br><span class="line">  IF <span class="keyword">id</span> &gt;= <span class="number">10</span> THEN  LEAVE add_loop;</span><br><span class="line">  END IF;</span><br><span class="line">END LOOP add_ loop; </span><br></pre></td></tr></table></figure>

<p>12 使用LEAVE语句退出循环。循环执行count加1的操作。当count的值等于50时，使用LEAVE语句跳出循环。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">add_num: LOOP  </span><br><span class="line">SET @count=@count+<span class="number">1</span>;</span><br><span class="line">IF <span class="keyword">@count</span>=50 THEN LEAVE add_num ;</span><br><span class="line">END LOOP add_num ; </span><br></pre></td></tr></table></figure>

<p>13 ITERATE语句示例。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE doiterate()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">DECLARE p1 INT DEFAULT <span class="number">0</span>;</span><br><span class="line"><span class="symbol">my_loop:</span> LOOP</span><br><span class="line">  SET p1= p1 + <span class="number">1</span>;</span><br><span class="line">  IF p1 &lt; <span class="number">10</span> THEN ITERATE my_loop;</span><br><span class="line">  ELSEIF p1 &gt; <span class="number">20</span> THEN LEAVE my_loop;</span><br><span class="line">  <span class="keyword">END</span> IF;</span><br><span class="line">  SELECT <span class="string">&#x27;p1 is between 10 and 20&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> LOOP my_loop;</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure>

<p>14 REPEAT语句示例，id值小于等于10之前，将重复执行循环过程。<br> 该示例循环执行id加1的操作。当id值小于10时，循环重复执行；当id值大于或者等于10时，使用LEAVE语句退出循环。REPEAT循环都以END REPEAT结束。</p>
<figure class="highlight objectivec"><table><tr><td class="code"><pre><span class="line">DECLARE <span class="keyword">id</span> INT DEFAULT <span class="number">0</span>;</span><br><span class="line">REPEAT</span><br><span class="line">SET <span class="keyword">id</span> = <span class="keyword">id</span> + <span class="number">1</span>;</span><br><span class="line">UNTIL  <span class="keyword">id</span> &gt;= <span class="number">10</span></span><br><span class="line">END REPEAT; </span><br></pre></td></tr></table></figure>

<p>15 WHILE语句示例，id值小于等于10之前，将重复执行循环过程。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">DECLARE i INT DEFAULT <span class="number">0</span>;</span><br><span class="line">WHILE i &lt; <span class="number">10</span> DO</span><br><span class="line">SET i = i + <span class="number">1</span>;</span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure>

<p>16 定义名为CountProc1的存储过程，然后调用这个存储过程。</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">CREATE PROCEDURE CountProc1 (IN sid INT, OUT <span class="built_in">num</span> INT)</span><br><span class="line">     BEGIN</span><br><span class="line">       SELECT COUNT(*) INTO <span class="built_in">num</span> FROM fruits WHERE s_id = sid;</span><br><span class="line">     END <span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h4 id="4-视图"><a href="#4-视图" class="headerlink" title="4 视图"></a>4 视图</h4><h5 id="（1）视图的含义和作用"><a href="#（1）视图的含义和作用" class="headerlink" title="（1）视图的含义和作用"></a>（1）视图的含义和作用</h5><p>视图是数据库中的一个虚拟表。同真实的表一样，视图包含一系列的行和列数据。行和列数据来源于自由定义视图查询所引用的表，并且在引用视图是动态生成。</p>
<h5 id="（2）视图和表的联系、区别"><a href="#（2）视图和表的联系、区别" class="headerlink" title="（2）视图和表的联系、区别"></a>（2）视图和表的联系、区别</h5><p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607165527302_20210607165528.png" alt="img"></p>
<h5 id="（3）视图基本操作"><a href="#（3）视图基本操作" class="headerlink" title="（3）视图基本操作"></a>（3）视图基本操作</h5><p>步骤1：创建学生表stu，插入3条记录。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">stu</span> </span></span><br><span class="line"><span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">s_id INT PRIMARY KEY,</span></span></span><br><span class="line"><span class="params"><span class="function">s_name VARCHAR(<span class="number">20</span></span>),</span></span><br><span class="line"><span class="function">addr <span class="title">VARCHAR</span>(<span class="params"><span class="number">50</span></span>),</span></span><br><span class="line"><span class="function">tel <span class="title">VARCHAR</span>(<span class="params"><span class="number">50</span></span>)</span></span><br><span class="line"><span class="function">)</span>; </span><br><span class="line"><span class="function">INSERT INTO stu </span></span><br><span class="line"><span class="function"><span class="title">VALUES</span>(<span class="params"><span class="number">1</span>,<span class="string">&#x27;XiaoWang&#x27;</span>,<span class="string">&#x27;Henan&#x27;</span>,<span class="string">&#x27;0371-12345678&#x27;</span></span>),</span></span><br><span class="line"><span class="function">(<span class="params"><span class="number">2</span>,<span class="string">&#x27;XiaoLi&#x27;</span>,<span class="string">&#x27;Hebei&#x27;</span>,<span class="string">&#x27;13889072345&#x27;</span></span>),</span></span><br><span class="line"><span class="function">(<span class="params"><span class="number">3</span>,<span class="string">&#x27;XiaoTian&#x27;</span>,<span class="string">&#x27;Henan&#x27;</span>,<span class="string">&#x27;0371-12345670&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>

<p>步骤2：创建报名表sign，插入3条记录。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">sign</span> </span></span><br><span class="line"><span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">s_id INT PRIMARY KEY,</span></span></span><br><span class="line"><span class="params"><span class="function">s_name VARCHAR(<span class="number">20</span></span>),</span></span><br><span class="line"><span class="function">s_sch <span class="title">VARCHAR</span>(<span class="params"><span class="number">50</span></span>),</span></span><br><span class="line"><span class="function">s_sign_sch <span class="title">VARCHAR</span>(<span class="params"><span class="number">50</span></span>)</span></span><br><span class="line"><span class="function">)</span>; </span><br><span class="line"><span class="function">INSERT INTO sign </span></span><br><span class="line"><span class="function"><span class="title">VALUES</span>(<span class="params"><span class="number">1</span>,<span class="string">&#x27;XiaoWang&#x27;</span>,<span class="string">&#x27;Middle School1&#x27;</span>,<span class="string">&#x27;Peking University&#x27;</span></span>),</span></span><br><span class="line"><span class="function">(<span class="params"><span class="number">2</span>,<span class="string">&#x27;XiaoLi&#x27;</span>,<span class="string">&#x27;Middle School2&#x27;</span>,<span class="string">&#x27;Tsinghua University&#x27;</span></span>),</span></span><br><span class="line"><span class="function">(<span class="params"><span class="number">3</span>,<span class="string">&#x27;XiaoTian&#x27;</span>,<span class="string">&#x27;Middle School3&#x27;</span>,<span class="string">&#x27;Tsinghua University&#x27;</span></span>)</span>;</span><br></pre></td></tr></table></figure>

<p>步骤3：创建成绩表stu_mark，插入3条记录。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE TABLE <span class="title">stu_mark</span> (<span class="params">s_id INT PRIMARY KEY ,s_name VARCHAR(<span class="number">20</span></span>) ,mark <span class="built_in">int</span> )</span>; </span><br><span class="line"><span class="function">INSERT INTO stu_mark <span class="title">VALUES</span>(<span class="params"><span class="number">1</span>,<span class="string">&#x27;XiaoWang&#x27;</span>,<span class="number">80</span></span>),(<span class="params"><span class="number">2</span>,<span class="string">&#x27;XiaoLi&#x27;</span>,<span class="number">71</span></span>),(<span class="params"><span class="number">3</span>,<span class="string">&#x27;XiaoTian&#x27;</span>,<span class="number">70</span></span>)</span>;</span><br></pre></td></tr></table></figure>

<p>步骤4：创建考上Peking University的学生的视图</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE VIEW <span class="title">beida</span> (<span class="params">id,name,mark,sch</span>)</span></span><br><span class="line"><span class="function">AS SELECT stu_mark.s_id,stu_mark.s_name,stu_mark.mark, sign.s_sign_sch</span></span><br><span class="line"><span class="function">FROM stu_mark ,sign</span></span><br><span class="line"><span class="function">WHERE stu_mark.s_id</span>=sign.s_id AND stu_mark.mark&gt;=<span class="number">41</span></span><br><span class="line">AND sign.s_sign_sch=<span class="string">&#x27;Peking University&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>步骤5：创建考上qinghua University的学生的视图</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function">CREATE VIEW <span class="title">qinghua</span> (<span class="params">id,name,mark,sch</span>) </span></span><br><span class="line"><span class="function">AS SELECT stu_mark.s_id, stu_mark.s_name, stu_mark.mark, sign.s_sign_sch </span></span><br><span class="line"><span class="function">FROM stu_mark ,sign</span></span><br><span class="line"><span class="function">WHERE stu_mark.s_id</span>=sign.s_id  AND stu_mark.mark&gt;=<span class="number">40</span> </span><br><span class="line">AND sign.s_sign_sch=<span class="string">&#x27;Tsinghua University&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>步骤6：XiaoTian的成绩在录入的时候录入错误多录了50分，对其录入成绩进行更正。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">UPDATE stu_mark SET mark = mark-50 WHERE stu_mark.s_name =<span class="string">&#x27;XiaoTian&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>步骤7：查看更新过后视图和表的情况。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT * FROM stu_mark;</span><br><span class="line">SELECT * FROM qinghua;</span><br><span class="line">SELECT * FROM beida;</span><br></pre></td></tr></table></figure>

<p>步骤8：查看视图的创建信息。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">SELECT * <span class="selector-tag">FROM</span> information_schema<span class="selector-class">.views</span></span><br></pre></td></tr></table></figure>

<p>步骤9：删除创建的视图。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DROP VIEW beida;</span><br><span class="line">DROP VIEW qinghua;</span><br></pre></td></tr></table></figure>

<h4 id="5-基本的数据库建表语句练习（这个好像我真的是不会……）"><a href="#5-基本的数据库建表语句练习（这个好像我真的是不会……）" class="headerlink" title="5 基本的数据库建表语句练习（这个好像我真的是不会……）"></a>5 基本的数据库建表语句练习（这个好像我真的是不会……）</h4><blockquote>
<p>建立一个数据库，逻辑名称为Student，包含1个数据文件和1个日志文件。数据文件初始大小为10M</p>
</blockquote>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">if</span> <span class="title">exists</span>(<span class="params"><span class="keyword">select</span> * <span class="keyword">from</span> sys.sysdatabases <span class="keyword">where</span> name=<span class="string">&#x27;Student&#x27;</span></span>)</span></span><br><span class="line"><span class="function">begin</span></span><br><span class="line"><span class="function">use master</span></span><br><span class="line"><span class="function">drop database Student</span></span><br><span class="line"><span class="function">end</span></span><br><span class="line"><span class="function">go</span></span><br><span class="line"><span class="function">create database Student</span></span><br><span class="line"><span class="function"><span class="keyword">on</span></span></span><br><span class="line"><span class="function">--路径根据实际情况自行修改</span></span><br><span class="line"><span class="function">(<span class="params">name=N<span class="string">&#x27;Student&#x27;</span>,filename=N<span class="string">&#x27;E:\Student.mdf&#x27;</span>,size=<span class="number">10</span>mb,maxsize=unlimited,filegrowth=<span class="number">1</span></span>)</span></span><br><span class="line"><span class="function">log <span class="title">on</span></span></span><br><span class="line"><span class="function">(<span class="params">name=N<span class="string">&#x27;Student&#x27;</span>,filename=N<span class="string">&#x27;E:\Student_log.ldf&#x27;</span>,size=<span class="number">10</span>mb,maxsize=unlimited,filegrowth=<span class="number">1</span></span>)</span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/accumulater/p/6158294.html">https://www.cnblogs.com/accumulater/p/6158294.html</a></p>
<blockquote>
<p>创建表，增加约束。包括：主键约束、非空约束、性别范围约束、出生日期约束、年龄约束、外键约束、唯一性约束、评论约束、默认关键词约束</p>
</blockquote>
<p>下面的语句可能不通顺，但是这些约束都有。check也可以使用enum代替。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">CREATE TABLE <span class="title function_ invoke__">tblstudent</span>(</span><br><span class="line">    stuID BIGINT PRIMARY KEY NOT <span class="literal">NULL</span>,</span><br><span class="line">    stuName <span class="title function_ invoke__">NVARCHAR</span>(<span class="number">10</span>) NOT <span class="literal">NULL</span>,</span><br><span class="line">    stuSex <span class="title function_ invoke__">NCHAR</span>(<span class="number">1</span>) NOT <span class="literal">NULL</span> DEFAULT <span class="string">&#x27;男&#x27;</span> <span class="title function_ invoke__">CHECK</span> (stuSex <span class="title function_ invoke__">IN</span> (<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;女&#x27;</span>)),</span><br><span class="line">    stuBirth DATETIME <span class="title function_ invoke__">CHECK</span> (stuBirth &lt; <span class="title function_ invoke__">getdate</span>()) COMMENT <span class="string">&#x27;出生日期&#x27;</span>,</span><br><span class="line">    stuNum <span class="title function_ invoke__">NVARCHAR</span>(<span class="number">18</span>) UNIQUE</span><br><span class="line">    Math INT <span class="title function_ invoke__">CHECK</span>(Sage &gt; <span class="number">18</span> AND Sage &lt; <span class="number">30</span>) COMMENT <span class="string">&#x27;数学&#x27;</span></span><br><span class="line">    stuID BIGINT REFERENCES <span class="title function_ invoke__">tblstudent</span>(stuID)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/ghost-xyx/p/3795679.html">https://www.cnblogs.com/ghost-xyx/p/3795679.html</a></p>
<blockquote>
<p>drop，alter，insert，update，delete</p>
</blockquote>
<p><a href="https://blog.csdn.net/leftwukaixing/article/details/44415875">https://blog.csdn.net/leftwukaixing/article/details/44415875</a></p>
<hr>
<p>这个东西属于基础知识，可能不需要深入了解，但是不知道一定会有问题。</p>
<p><strong>如果你想让自己更加了解 MySQL ，同时也是为了准备面试的话，下面这些知识点要格外注意：</strong></p>
<h3 id="一、索引：索引优缺点、B-树和-B-树、聚集索引与非聚集索引、覆盖索引"><a href="#一、索引：索引优缺点、B-树和-B-树、聚集索引与非聚集索引、覆盖索引" class="headerlink" title="一、索引：索引优缺点、B 树和 B+树、聚集索引与非聚集索引、覆盖索引"></a>一、索引：索引优缺点、B 树和 B+树、聚集索引与非聚集索引、覆盖索引</h3><h4 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引?"></a>什么是索引?</h4><p><strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B树， B+树和Hash。</strong></p>
<p>索引的作用就相当于目录的作用。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。</p>
<p>为什么要用索引?索引的优缺点分析</p>
<h4 id="索引的优点"><a href="#索引的优点" class="headerlink" title="索引的优点"></a>索引的优点</h4><p><strong>可以大大加快 数据的检索速度（大大减少的检索的数据量）, 这也是创建索引的最主要的原因。毕竟大部分系统的读请求总是大于写请求的。</strong>  另外，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。</p>
<p>索引的缺点</p>
<p><strong>创建索引和维护索引需要耗费许多时间</strong>：当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低SQL执行效率。</p>
<p><strong>占用物理存储空间</strong> ：索引需要使用物理文件存储，也会耗费一定空间。</p>
<h4 id="B树和B-树区别"><a href="#B树和B-树区别" class="headerlink" title="B树和B+树区别"></a>B树和B+树区别</h4><p>B树的所有节点既存放 键(key) 也存放 数据(data);而B+树只有叶子节点存放 key 和 data，其他内节点只存放key。</p>
<p>B树的叶子节点都是独立的;B+树的叶子节点有一条引用链指向与它相邻的叶子节点。</p>
<p>B树的检索的过程相当于对范围内的每个节点的关键字做二分查找，可能还没有到达叶子节点，检索就结束了。而B+树的检索效率就很稳定了，任何查找都是从根节点到叶子节点的过程，叶子节点的顺序检索很明显。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/7xaotb_20210607165833.png" alt="img"></p>
<h4 id="Hash索引和-B-树索引优劣分析"><a href="#Hash索引和-B-树索引优劣分析" class="headerlink" title="Hash索引和 B+树索引优劣分析"></a>Hash索引和 B+树索引优劣分析</h4><p><strong>Hash索引定位快</strong></p>
<p>Hash索引指的就是Hash表，最大的优点就是能够在很短的时间内，根据Hash函数定位到数据所在的位置，这是B+树所不能比的。</p>
<p><strong>Hash冲突问题</strong></p>
<p>知道HashMap或HashTable的同学，相信都知道它们最大的缺点就是Hash冲突了。不过对于数据库来说这还不算最大的缺点。</p>
<p><strong>Hash索引不支持顺序和范围查询(Hash索引不支持顺序和范围查询是它最大的缺点。</strong></p>
<p>试想一种情况:</p>
<p>SELECT * FROM tb1 WHERE id &lt; 500;</p>
<p>B+树是有序的，在这种范围查询中，优势非常大，直接遍历比500小的叶子节点就够了。而Hash索引是根据hash算法来定位的，难不成还要把 1 - 499的数据，每个都进行一次hash计算来定位吗?这就是Hash最大的缺点了。</p>
<h4 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h4><ul>
<li><h5 id="主键索引-Primary-Key"><a href="#主键索引-Primary-Key" class="headerlink" title="主键索引(Primary Key)"></a>主键索引(Primary Key)</h5></li>
</ul>
<p><strong>数据表的主键列使用的就是主键索引。</strong></p>
<p><strong>一张数据表有只能有一个主键，并且主键不能为null，不能重复。</strong></p>
<p><strong>在mysql的InnoDB的表中，当没有显示的指定表的主键时，InnoDB会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则InnoDB将会自动创建一个6Byte的自增主键。</strong></p>
<ul>
<li><h5 id="二级索引-辅助索引"><a href="#二级索引-辅助索引" class="headerlink" title="二级索引(辅助索引)"></a>二级索引(辅助索引)</h5></li>
</ul>
<p><strong>二级索引又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。</strong></p>
<p>唯一索引，普通索引，前缀索引等索引属于二级索引。</p>
<p><strong>PS:不懂的同学可以暂存疑，慢慢往下看，后面会有答案的，也可以自行搜索。</strong></p>
<p><strong>唯一索引(Unique Key)</strong> ：唯一索引也是一种约束。<strong>唯一索引的属性列不能出现重复的数据，但是允许数据为NULL，一张表允许创建多个唯一索引。</strong>建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。</p>
<p><strong>普通索引(Index)</strong> ：<strong>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和NULL。</strong></p>
<p><strong>前缀索引(Prefix)</strong> ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小，因为只取前几个字符。</p>
<p><strong>全文索引(Full Text)</strong> ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6之后InnoDB也支持了全文索引。</p>
<p>二级索引:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/lOhKAX_20210607170015.png" alt="img"></p>
<h4 id="聚集索引与非聚集索引"><a href="#聚集索引与非聚集索引" class="headerlink" title="聚集索引与非聚集索引"></a>聚集索引与非聚集索引</h4><ul>
<li><h5 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h5></li>
</ul>
<p><strong>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。</strong></p>
<p>在 Mysql 中，InnoDB引擎的表的 .ibd文件就包含了该表的索引和数据，对于 InnoDB 引擎表来说，该表的索引(B+树)的每个非叶子节点存储索引，叶子节点存储索引和索引对应的数据。</p>
<p>聚集索引的优点</p>
<p>聚集索引的查询速度非常的快，因为整个B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。</p>
<p>聚集索引的缺点</p>
<p><strong>依赖于有序的数据</strong> ：因为B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或UUID这种又长又难比较的数据，插入或查找的速度肯定比较慢。</p>
<p><strong>更新代价大</strong> ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改，而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的，所以对于主键索引来说，主键一般都是不可被修改的。</p>
<ul>
<li><h5 id="非聚集索引"><a href="#非聚集索引" class="headerlink" title="非聚集索引"></a>非聚集索引</h5></li>
</ul>
<p><strong>非聚集索引即索引结构和数据分开存放的索引。</strong></p>
<p><strong>二级索引属于非聚集索引。</strong></p>
<p>MYISAM引擎的表的.MYI文件包含了表的索引，该表的索引(B+树)的每个叶子非叶子节点存储索引，叶子节点存储索引和索引对应数据的指针，指向.MYD文件的数据。</p>
<p><strong>非聚集索引的叶子节点并不一定存放数据的指针，因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。</strong></p>
<p>非聚集索引的优点</p>
<p><strong>更新代价比聚集索引要小</strong> 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的</p>
<p>非聚集索引的缺点</p>
<p>跟聚集索引一样，非聚集索引也依赖于有序的数据</p>
<p><strong>可能会二次查询(回表)</strong> :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。</p>
<p>这是Mysql的表的文件截图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/JhKeja_20210607170103.png" alt="img"></p>
<p>聚集索引和非聚集索引:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/SZAydC_20210607170114.png" alt="img"></p>
<p>非聚集索引一定回表查询吗(覆盖索引)?</p>
<p><strong>非聚集索引不一定回表查询。</strong></p>
<p>试想一种情况，用户准备使用SQL查询用户名，而用户名字段正好建立了索引。</p>
<p> SELECT name FROM table WHERE username&#x3D;’guang19’;</p>
<p>那么这个索引的key本身就是name，查到对应的name直接返回就行了，无需回表查询。</p>
<p><strong>即使是MYISAM也是这样，虽然MYISAM的主键索引确实需要回表，因为它的主键索引的叶子节点存放的是指针。但是如果SQL查的就是主键呢?</strong></p>
<p>SELECT id FROM table WHERE id&#x3D;1;</p>
<p>主键索引本身的key就是主键，查到返回就行了。这种情况就称之为覆盖索引了。</p>
<h4 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h4><p>如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次。这样就会比较慢覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！</p>
<p><strong>覆盖索引即需要查询的字段正好是索引的字段，那么直接根据该索引，就可以查到数据了，而无需回表查询。</strong></p>
<p>如主键索引，如果一条SQL需要查询主键，那么正好根据主键索引就可以查到主键。</p>
<p>再如普通索引，如果一条SQL需要查询name，name字段正好有索引，那么直接根据这个索引就可以查到数据，也无需回表。</p>
<p>覆盖索引:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/FQSLlU_20210607170146.png" alt="img"></p>
<h5 id="索引创建原则"><a href="#索引创建原则" class="headerlink" title="索引创建原则"></a>索引创建原则</h5><ul>
<li>单列索引</li>
</ul>
<p>单列索引即由一列属性组成的索引。</p>
<p>联合索引(多列索引)</p>
<p>联合索引即由多列属性组成索引。</p>
<ul>
<li>最左前缀原则</li>
</ul>
<p>假设创建的联合索引由三个字段组成:</p>
<p>ALTER TABLE table ADD INDEX index_name (num,name,age)</p>
<p>那么当查询的条件有为:num &#x2F; (num AND name) &#x2F; (num AND name AND age)时，索引才生效。所以在创建联合索引时，尽量把查询最频繁的那个字段作为最左(第一个)字段。查询的时候也尽量以这个字段为第一条件。</p>
<p>但可能由于版本原因(我的mysql版本为8.0.x),我创建的联合索引，相当于在联合索引的每个字段上都创建了相同的索引:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607170240035_20210607170240.png" alt="img"></p>
<p>无论是否符合最左前缀原则，每个字段的索引都生效:</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607170253830_20210607170254.png" alt="img"></p>
<h4 id="索引创建注意点"><a href="#索引创建注意点" class="headerlink" title="索引创建注意点"></a>索引创建注意点</h4><ul>
<li><h5 id="最左前缀原则"><a href="#最左前缀原则" class="headerlink" title="最左前缀原则"></a>最左前缀原则</h5></li>
</ul>
<p>虽然我目前的Mysql版本较高，好像不遵守最左前缀原则，索引也会生效。但是我们仍应遵守最左前缀原则，以免版本更迭带来的麻烦。</p>
<ul>
<li><h5 id="选择合适的字段"><a href="#选择合适的字段" class="headerlink" title="选择合适的字段"></a>选择合适的字段</h5></li>
</ul>
<p>1.不为NULL的字段</p>
<p>索引字段的数据应该尽量不为NULL，因为对于数据为NULL的字段，数据库较难优化。如果字段频繁被查询，但又避免不了为NULL，建议使用0,1,true,false这样语义较为清晰的短值或短字符作为替代。</p>
<p>2.被频繁查询的字段</p>
<p>我们创建索引的字段应该是查询操作非常频繁的字段。</p>
<p>3.被作为条件查询的字段</p>
<p>被作为WHERE条件查询的字段，应该被考虑建立索引。</p>
<p>4.被经常频繁用于连接的字段</p>
<p>经常用于连接的字段可能是一些外键列，对于外键列并不一定要建立外键，只是说该列涉及到表与表的关系。对于频繁被连接查询的字段，可以考虑建立索引，提高多表连接查询的效率。</p>
<ul>
<li><h5 id="不合适创建索引的字段"><a href="#不合适创建索引的字段" class="headerlink" title="不合适创建索引的字段"></a>不合适创建索引的字段</h5></li>
</ul>
<p>1.被频繁更新的字段应该慎重建立索引</p>
<p>虽然索引能带来查询上的效率，但是维护索引的成本也是不小的。如果一个字段不被经常查询，反而被经常修改，那么就更不应该在这种字段上建立索引了。</p>
<p>2.不被经常查询的字段没有必要建立索引</p>
<p>3.尽可能的考虑建立联合索引而不是单列索引</p>
<p>因为索引是需要占用磁盘空间的，可以简单理解为每个索引都对应着一颗B+树。如果一个表的字段过多，索引过多，那么当这个表的数据达到一个体量后，索引占用的空间也是很多的，且修改索引时，耗费的时间也是较多的。如果是联合索引，多个字段在一个索引上，那么将会节约很大磁盘空间，且修改数据的操作效率也会提升。</p>
<p>4.注意避免冗余索引</p>
<p>冗余索引指的是索引的功能相同，能够命中 就肯定能命中 ，那么 就是冗余索引如（name,city ）和（name ）这两个索引就是冗余索引，能够命中后者的查询肯定是能够命中前者的 在大多数情况下，都应该尽量扩展已有的索引而不是创建新索引。</p>
<p>5.考虑在字符串类型的字段上使用前缀索引代替普通索引</p>
<p>前缀索引仅限于字符串类型，较普通索引会占用更小的空间，所以可以考虑使用前缀索引带替普通索引。</p>
<p>使用索引一定能提高查询性能吗?</p>
<p>大多数情况下，索引查询都是比全表扫描要快的。但是如果数据库的数据量不大，那么使用索引也不一定能够带来很大提升。</p>
<h3 id="二、事务：事务、数据库事务、ACID、并发事务、事务隔离级别"><a href="#二、事务：事务、数据库事务、ACID、并发事务、事务隔离级别" class="headerlink" title="二、事务：事务、数据库事务、ACID、并发事务、事务隔离级别"></a>二、事务：事务、数据库事务、ACID、并发事务、事务隔离级别</h3><p>事务具有四大特征，分别是原子性（Atomicity）、一致性（Consistency）、隔离性（Isolation）和持久性（Durability），简称为事务的ACID特性。</p>
<h4 id="原子性（Atomicity）"><a href="#原子性（Atomicity）" class="headerlink" title="原子性（Atomicity）"></a>原子性（Atomicity）</h4><p>原子性是指事务必须是一个原子的操作序列单元。事务中包含的各项操作在一次执行过程中，只允许出现以下两种状态之一。</p>
<ul>
<li>全部成功执行</li>
<li>全部不执行</li>
</ul>
<p>任何一项操作失败都将导致整个事务失败，同时其他已经被执行的操作都将被撤消并回滚，只有所有的操作全部成功，整个事务才算是成功完成。</p>
<h4 id="一致性（Consistency）"><a href="#一致性（Consistency）" class="headerlink" title="一致性（Consistency）"></a>一致性（Consistency）</h4><p>一致性是指事务的执行不能破坏数据库数据的完整性和一致性，一个事务在执行之前和执行之后，数据库都必须处于一致性状态。也就是说事务的执行结果必须是使数据库从一个一致性状态转变到另一个一致性状态。因此当事务全部成功提交时，就能说数据库处于一致性状态，如果数据库运行过程中出现故障，导致有些事务尚未完成就被迫中断，这些未完成的事务中的部分操作已经写入的物理数据库，这时数据库就处于一种不一致的状态。</p>
<h4 id="隔离性（Isolation）"><a href="#隔离性（Isolation）" class="headerlink" title="隔离性（Isolation）"></a>隔离性（Isolation）</h4><p>隔离性是指在并发环境中，并发的事务是相互隔离的，一个事务的执行不能被其它事务干扰。也就是说，不同的事务并发操作相同的数据时，每个事务都有各自完整的数据空间，即一个事务内部的操作及使用的数据对其它并发事务是隔离的，并发执行的各个事务之间不能互相干扰。</p>
<p>在标准的SQL规范中，定义了四个事务隔离级别，不同的隔离级别对事务的处理不同</p>
<ul>
<li><strong>未授权读取</strong><br> 也称读未提交（Read Uncommitted），该隔离级别允许脏读，隔离级别最低。</li>
</ul>
<p>什么是脏读？</p>
<p>如果一个事务正在处理某一数据，对其进行了更新，但尚未提交事务，与此同时，另一个事务能够访问该事务更新后的数据。也就是说，事务的中间状态对其它事务是可见的。</p>
<p>举例说明：<br> 用户A原工资为1000元<br> 第一步：事务1执行修改操作，为用户A增加工资1000元，事务1尚未提交事务<br> 第二步：事务2执行读取操作，查询到用户A的工资为2000元。</p>
<p>事务2读取到了事务1中尚未提交的修改结果，但是事务1尚未提交，有可能会因为后续操作失败而产生回滚。</p>
<ul>
<li><strong>授权读取</strong><br> 也称读已提交（Read Committed），该隔离级别禁止脏读，允许不可重复读。</li>
</ul>
<p>什么是不可重复读？</p>
<p>一个事务过程中，对同一数据进行多次查询，查询的数据可能不一样，原因可能是两次查询过程中，另一个事务对该数据进行了修改并成功提交事务。也就是说，事务的结束状态对其它事务是可见的。</p>
<p>举例说明：<br> 用户A原工资为1000元<br> 第一步：事务1执行查询操作，查询到用户A的工资为1000元，事务1尚未提交事务。<br> 第二步：事务2执行修改操作，为用户A的增加工资1000元。<br> 第三步：事务1执行查询操作，查询到用户A的工资为2000元。</p>
<p>对于事务1来说，同一个事务里的多次查询，结果并不稳定。</p>
<ul>
<li><strong>可重复读取</strong><br> 可重复读取（Repeatable Read），该隔离级别禁止不可重复读和脏读，允许幻读。保证在事务处理过程中，多次读取同一数据，其值都和事务开始时刻是一致的。</li>
</ul>
<p>什么是幻读？</p>
<p>不可重复读针对的是数据的修改，而幻读针对的是数据的新增。</p>
<p>举例说明：<br> 用户表，用户名为唯一键<br> 第一步：事务1执行查询操作，查询是否存在用户名为<code>aaa</code>的数据，事务1尚未提交</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> user <span class="keyword">where</span> username = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure>

<p>第二步：事务2执行插入操作，插入用户名为<code>aaa</code>的数据<br> 第三步：事务1执行插入操作，插入用户为为<code>aaa</code>的数据，提示唯一键错误，插入失败。</p>
<p>对于事务一来说，查询用户<code>aaa</code>不存在，保存却报唯一键错误，如梦如幻，故名幻读。</p>
<ul>
<li><strong>串行化</strong><br> 串行化（Serializable）是最严格的事务隔离级别，它要求所有事务都被串行执行，即事务只能一个一个地进行处理，不能并发执行。</li>
</ul>
<blockquote>
<p>mysql 默认使用 Repeatable Read 级别，其它数据库大部分默认使用 Read Committed 级别</p>
</blockquote>
<table>
<thead>
<tr>
<th>隔离级别</th>
<th>脏读</th>
<th>不可重复读</th>
<th>幻读</th>
</tr>
</thead>
<tbody><tr>
<td>未授权读取</td>
<td>存在</td>
<td>存在</td>
<td>存在</td>
</tr>
<tr>
<td>授权读取</td>
<td>不存在</td>
<td>存在</td>
<td>存在</td>
</tr>
<tr>
<td>可重复读取</td>
<td>不存在</td>
<td>不存在</td>
<td>存在</td>
</tr>
<tr>
<td>串行化</td>
<td>不存在</td>
<td>不存在</td>
<td>不存在</td>
</tr>
</tbody></table>
<h4 id="持久性（Durability）"><a href="#持久性（Durability）" class="headerlink" title="持久性（Durability）"></a>持久性（Durability）</h4><p>持久性是指一个事务一旦提交，它对数据库中对应数据的状态变更就应该是永久性的。也就是说，它对数据库所做的更新就必须被永久保存一下，即使发生系统崩溃或机器宕机等故障，只要数据库能够重新启动，那么一定能够将其恢复到事务成功结束时的状态。</p>
<h3 id="三、存储引擎（MyISAM-和-InnoDB）"><a href="#三、存储引擎（MyISAM-和-InnoDB）" class="headerlink" title="三、存储引擎（MyISAM 和 InnoDB）"></a>三、存储引擎（MyISAM 和 InnoDB）</h3><h4 id="1、MySQL默认存储引擎的变迁"><a href="#1、MySQL默认存储引擎的变迁" class="headerlink" title="1、MySQL默认存储引擎的变迁"></a><strong>1、MySQL默认存储引擎的变迁</strong></h4><p>在MySQL 5.1之前的版本中，默认的搜索引擎是MyISAM，从MySQL 5.5之后的版本中，默认的搜索引擎变更为InnoDB。</p>
<h4 id="2、MyISAM与InnoDB存储引擎的主要特点"><a href="#2、MyISAM与InnoDB存储引擎的主要特点" class="headerlink" title="2、MyISAM与InnoDB存储引擎的主要特点"></a><strong>2、MyISAM与InnoDB存储引擎的主要特点</strong></h4><p>MyISAM存储引擎的特点是：表级锁、不支持事务和全文索引，适合一些CMS内容管理系统作为后台数据库使用，但是使用大并发、重负荷生产系统上，表锁结构的特性就显得力不从心；</p>
<p>以下是MySQL 5.7 MyISAM存储引擎的版本特性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/1rNi5X_20210607170801.png" alt="img"></p>
<p>InnoDB存储引擎的特点是：行级锁、事务安全（ACID兼容）、支持外键、不支持FULLTEXT类型的索引(5.6.4以后版本开始支持FULLTEXT类型的索引)。InnoDB存储引擎提供了具有提交、回滚和崩溃恢复能力的事务安全存储引擎。InnoDB是为处理巨大量时拥有最大性能而设计的。它的CPU效率可能是任何其他基于磁盘的关系数据库引擎所不能匹敌的。</p>
<p>以下是MySQL 5.7 InnoDB存储引擎的版本特性：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/AigyQF_20210607170822.png" alt="img"></p>
<p>注意：</p>
<p>InnoDB表的行锁也不是绝对的，假如在执行一个SQL语句时MySQL不能确定要扫描的范围，InnoDB表同样会锁全表，例如<code>update table set num=1 where name like “a%”</code>。</p>
<p>两种类型最主要的差别就是InnoDB支持事务处理与外键和行级锁。而MyISAM不支持。所以MyISAM往往就容易被人认为只适合在小项目中使用。</p>
<h4 id="3、MyISAM与InnoDB性能测试"><a href="#3、MyISAM与InnoDB性能测试" class="headerlink" title="3、MyISAM与InnoDB性能测试"></a><strong>3、MyISAM与InnoDB性能测试</strong></h4><p>下边两张图是官方提供的MyISAM与InnoDB的压力测试结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/9Adido_20210607170839.png" alt="img"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/al7WB3_20210607170855.png" alt="img"></p>
<p>可以看出，随着CPU核数的增加，InnoDB的吞吐量反而越好，而MyISAM，其吞吐量几乎没有什么变化，显然，MyISAM的表锁定机制降低了读和写的吞吐量。</p>
<h4 id="4、事务支持与否"><a href="#4、事务支持与否" class="headerlink" title="4、事务支持与否"></a><strong>4、事务支持与否</strong></h4><p>MyISAM是一种非事务性的引擎，使得MyISAM引擎的MySQL可以提供高速存储和检索，以及全文搜索能力，适合数据仓库等查询频繁的应用；</p>
<p>InnoDB是事务安全的；</p>
<p>事务是一种高级的处理方式，如在一些列增删改中只要哪个出错还可以回滚还原，而MyISAM就不可以了。</p>
<h4 id="5、MyISAM与InnoDB构成上的区别"><a href="#5、MyISAM与InnoDB构成上的区别" class="headerlink" title="5、MyISAM与InnoDB构成上的区别"></a><strong>5、MyISAM与InnoDB构成上的区别</strong></h4><p>（1）每个MyISAM在磁盘上存储成三个文件：</p>
<blockquote>
<p>第一个文件的名字以表的名字开始，扩展名指出文件类型，.frm文件存储表定义。<br> 第二个文件是数据文件，其扩展名为.MYD (MYData)。<br> 第三个文件是索引文件，其扩展名是.MYI (MYIndex)。</p>
</blockquote>
<p>（2）基于磁盘的资源是InnoDB表空间数据文件和它的日志文件，InnoDB 表的 大小只受限于操作系统文件的大小，一般为 2GB。</p>
<h4 id="6、MyISAM与InnoDB表锁和行锁的解释"><a href="#6、MyISAM与InnoDB表锁和行锁的解释" class="headerlink" title="6、MyISAM与InnoDB表锁和行锁的解释"></a><strong>6、MyISAM与InnoDB表锁和行锁的解释</strong></h4><p>MySQL表级锁有两种模式：表共享读锁（Table Read Lock）和表独占写锁（Table Write Lock）。什么意思呢，就是说对MyISAM表进行读操作时，它不会阻塞其他用户对同一表的读请求，但会阻塞对同一表的写操作；而对MyISAM表的写操作，则会阻塞其他用户对同一表的读和写操作。</p>
<p>InnoDB行锁是通过给索引项加锁来实现的，即只有通过索引条件检索数据，InnoDB才使用行级锁，否则将使用表锁！行级锁在每次获取锁和释放锁的操作需要消耗比表锁更多的资源。在InnoDB两个事务发生死锁的时候，会计算出每个事务影响的行数，然后回滚行数少的那个事务。当锁定的场景中不涉及Innodb的时候，InnoDB是检测不到的。只能依靠锁定超时来解决。</p>
<h4 id="7、是否保存数据库表中表的具体行数"><a href="#7、是否保存数据库表中表的具体行数" class="headerlink" title="7、是否保存数据库表中表的具体行数"></a><strong>7、是否保存数据库表中表的具体行数</strong></h4><p>InnoDB 中不保存表的具体行数，也就是说，执行<code>select count(*) from table</code>时，InnoDB要扫描一遍整个表来计算有多少行，但是MyISAM只要简单的读出保存好的行数即可。</p>
<p>注意的是，当<code>count(*)</code>语句包含<code>where</code>条件时，两种表的操作是一样的。也就是 上述“6”中介绍到的InnoDB使用表锁的一种情况。</p>
<h4 id="8、如何选择"><a href="#8、如何选择" class="headerlink" title="8、如何选择"></a><strong>8、如何选择</strong></h4><p>MyISAM适合：</p>
<ul>
<li>（1）做很多count 的计算；</li>
<li>（2）插入不频繁，查询非常频繁，如果执行大量的SELECT，MyISAM是更好的选择；</li>
<li>（3）没有事务。</li>
</ul>
<p>InnoDB适合：</p>
<ul>
<li>（1）可靠性要求比较高，或者要求事务；</li>
<li>（2）表更新和查询都相当的频繁，并且表锁定的机会比较大的情况指定数据引擎的创建；</li>
<li>（3）如果你的数据执行大量的INSERT或UPDATE，出于性能方面的考虑，应该使用InnoDB表；</li>
<li>（4）DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的 删除；</li>
<li>（5）LOAD TABLE FROM MASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性（例如外键）的表不适用。</li>
</ul>
<p>要注意，创建每个表格的代码是相同的，除了最后的 TYPE参数，这一参数用来指定数据引擎。</p>
<h4 id="其他区别："><a href="#其他区别：" class="headerlink" title="其他区别："></a><strong>其他区别：</strong></h4><p>1、对于AUTO_INCREMENT类型的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中，可以和其他字段一起建立联合索引。</p>
<p>2、DELETE FROM table时，InnoDB不会重新建立表，而是一行一行的删除。</p>
<p>3、LOAD TABLE FROMMASTER操作对InnoDB是不起作用的，解决方法是首先把InnoDB表改成MyISAM表，导入数据后再改成InnoDB表，但是对于使用的额外的InnoDB特性(例如外键)的表不适用。</p>
<p>4、 InnoDB存储引擎被完全与MySQL服务器整合，InnoDB存储引擎为在主内存中缓存数据和索引而维持它自己的缓冲池。</p>
<p>5、对于自增长的字段，InnoDB中必须包含只有该字段的索引，但是在MyISAM表中可以和其他字段一起建立联合索引。</p>
<p>6、清空整个表时，InnoDB是一行一行的删除，效率非常慢。MyISAM则会重建表。</p>
<h3 id="四、锁机制与-InnoDB-锁算法"><a href="#四、锁机制与-InnoDB-锁算法" class="headerlink" title="四、锁机制与 InnoDB 锁算法"></a>四、锁机制与 InnoDB 锁算法</h3><h4 id="1、-锁分类（按粒度分）"><a href="#1、-锁分类（按粒度分）" class="headerlink" title="1、 锁分类（按粒度分）"></a>1、 锁分类（按粒度分）</h4><p><strong>解决并发、数据安全的问题，用锁。</strong></p>
<h5 id="1-表级锁"><a href="#1-表级锁" class="headerlink" title="(1)表级锁"></a><strong>(1)表级锁</strong></h5><p><strong>粒度最大</strong>，对整表加锁，实现简单 <strong>，资源消耗也比较少，加锁快，不会出现死锁</strong> 。其锁定<strong>粒度最大</strong>，触发锁冲突的概率最高，<strong>并发度最低</strong>，MyISAM和 InnoDB引擎都支持表级锁。</p>
<h5 id="2-行级锁"><a href="#2-行级锁" class="headerlink" title="(2)行级锁"></a><strong>(2)行级锁</strong></h5><p><strong>粒度最小</strong>。 <strong>减少数据库冲突。加锁粒度最小，并发度高，加锁开销最大，加锁慢，会出现死锁。</strong> InnoDB支持的行级锁：</p>
<p><strong>1)行锁 Record Lock:</strong> 对<strong>索引</strong>项<strong>加锁</strong>，锁定符合条件的行。其他事务不能修改和删除加锁项；</p>
<p><strong>2)间隙锁 Gap Lock:</strong> 对<strong>索引项之间</strong>的“<strong>间隙</strong>”加锁，锁定记录的范围（对第一条记录前的间隙或最后一条将记录后的间隙加锁），不包含索引项本身。其他事务不能在锁范围内插入数据，这样就防止了别的事务新增幻影行。</p>
<p><strong>3)行锁和间隙锁组合 Next-key Lock：</strong> 锁定<strong>索引项本身</strong>和<strong>索引范围</strong>。解决幻读问题。</p>
<p><strong>虽行级索粒度小、并发度高等特点，但表级锁有时候非常必要</strong>：</p>
<p>事务<strong>更新大表</strong>中的<strong>大部分数据</strong>直接使用表级锁<strong>效率更高</strong>；用行级索很可能引起<strong>死锁</strong>导致回滚。</p>
<h4 id="2、另外两个表级锁：IS和IX"><a href="#2、另外两个表级锁：IS和IX" class="headerlink" title="2、另外两个表级锁：IS和IX"></a><strong>2、另外两个表级锁：IS和IX</strong></h4><p>当一个事务需要给自己需要的某个资源加锁的时候，如果遇到一个共享锁正锁定着自己需要的资源的时候，自己可以再加一个共享锁，不过不能加排他锁。但是，如果遇到自己需要锁定的资源已经被一个排他锁占有之后，则只能等待该锁定释放资源之后自己才能获取锁定资源并添加自己的锁定。而<strong>意向锁的作用就是当一个事务在需要获取资源锁定的时候，如果遇到自己需要的资源已经被排他锁占用的时候，该事务可以需要锁定行的表上面添加一个合适的意向锁。如果自己需要一个共享锁，那么就在表上面添加一个意向共享锁。而如果自己需要的是某行（或者某些行）上面添加一个排他锁的话，则先在表上面添加一个意向排他锁。意向共享锁可以同时并存多个，但是意向排他锁同时只能有一个存在。</strong></p>
<p><strong>InnoDB另外的两个表级锁：</strong></p>
<p><strong>意向共享锁（IS）：</strong> 事务准备给数据行记入共享锁，事务在一个数据行加共享锁前必须先取得该表的IS锁。</p>
<p><strong>意向排他锁（IX）：</strong> 事务准备给数据行加入排他锁，事务在一个数据行加排他锁前必须先取得该表的IX锁。</p>
<p><strong>注意：</strong></p>
<p><strong>这里的意向锁是表级锁，表示的是一种意向，仅仅表示事务正在读或写某一行记录，在真正加行锁时才会判断是否冲突。意向锁是InnoDB自动加的，不需要用户干预。</strong></p>
<p><strong>IX，IS是表级锁，不会和行级的X，S锁发生冲突，只会和表级的X，S发生冲突。</strong></p>
<p><strong>InnoDB的锁机制兼容情况如下：</strong> </p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/STIhyH_20210607171136.png" alt="img"></p>
<h4 id="3、死锁和避免死锁"><a href="#3、死锁和避免死锁" class="headerlink" title="3、死锁和避免死锁"></a>3、死锁和避免死锁</h4><p><strong>InnoDB的行级锁是基于索引实现的，</strong>如果查询语句为<strong>命中任何索引，用表级锁.</strong> 对索引加的锁，不针对数据记录，访问不同行记录，如用<strong>相同索引</strong>键仍锁<strong>冲突</strong>，</p>
<p>SELECT…LOCKINSHARE MODE 或 SELECT…FORUPDATE;</p>
<p><strong>用锁</strong>时，如<strong>没有</strong>定义<strong>索引</strong>，<strong>InnoDB****创建</strong>隐藏聚簇索引<strong>加记录锁</strong>。</p>
<p><strong>InnoDB锁逐步获得，两个事务都要获得对方持有的锁，都等待，产生死锁。</strong> 可<strong>检测到</strong>，并使一个事务<strong>释放锁回退</strong>，另一个<strong>获取锁完成事务</strong>，避免死锁：</p>
<p><strong>(1)表级锁来减少死锁</strong></p>
<p><strong>(2)多个程序尽量相同顺序访问表</strong>（解决并发理论中哲学家就餐问题一种思路）</p>
<p><strong>(3)同一个事务尽可能一次锁定所有资源。</strong></p>
<h4 id="4、总结与补充"><a href="#4、总结与补充" class="headerlink" title="4、总结与补充"></a>4、总结与补充</h4><p><strong>页级锁：</strong> 介于行级锁和表级锁中间。表级锁速度快，但冲突多，行级冲突少，但速度慢。页级折衷，一次<strong>锁定相邻一组</strong>记录。BDB支持页级锁。<strong>开销和加锁时间</strong>界于表锁和行锁之间，会出现<strong>死锁</strong>。并发度一般。</p>
<h2 id="Redis"><a href="#Redis" class="headerlink" title="Redis"></a><strong>Redis</strong></h2><p>下面是我总结的一些关于并发的小问题，你可以拿来自测：</p>
<h3 id="一、Redis-和-Memcached-的区别和共同点"><a href="#一、Redis-和-Memcached-的区别和共同点" class="headerlink" title="一、Redis 和 Memcached 的区别和共同点"></a>一、Redis 和 Memcached 的区别和共同点</h3><h4 id="1-背景介绍"><a href="#1-背景介绍" class="headerlink" title="1.背景介绍"></a>1.背景介绍</h4><p>在大多数Web应用都将数据保存到关系型数据库中，WWW服务器从中读取数据并在浏览器中显示。但随着数据量的增大、访问的集中，就会出现关系型数据的负担加重、数据库响应缓慢、网站打开延迟等问题。</p>
<p>通过在内存中缓存数据库的查询结果，减少数据访问次数，以提高动态Web应用的速度，提高网站架构的并发能力和可扩展性</p>
<p>传统开发中用的数据库最多的就是MySQL了，随着数据量上千万或上亿级后，它的关系型数据库的读取速度可能并不能满足我们对数据的需求，所以内存式的缓存系统就出现了</p>
<h4 id="2-知识剖析"><a href="#2-知识剖析" class="headerlink" title="2.知识剖析"></a>2.知识剖析</h4><p>Memcache 是一个高性能的分布式内存对象缓存系统，用于动态Web应用以减轻数据库负载。它通过在内存中缓存数据和对象来减少读取数据库的次数，从而提高动态、数据库驱动网站的速度。</p>
<p>Memcache基于一个存储键&#x2F;值对的hashmap。其守护进程（daemon ）是用C写的，但是客户端可以用任何语言来编写，并通过memcache协议与守护进程通信。</p>
<p>Redis有着更为复杂的数据结构并且提供对他们的原子性操作，这是一个不同于其他数据库的进化路径。Redis的数据类型都是基于基本数据结构的同时对程序员透明，无需进行额外的抽象。</p>
<p>Redis运行在内存中但是可以持久化到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，应用数据量不能大于硬件内存。</p>
<p>在内存数据库方面的另一个优点是， 相比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单，这样Redis可以做很多内部复杂性很强的事情。</p>
<p>同时，在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问。</p>
<h4 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3.常见问题"></a>3.常见问题</h4><p>Redis与memcached有什么不同</p>
<p>什么是原子性,什么是原子性操作？</p>
<h4 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4.解决方案"></a>4.解决方案</h4><p>Memcached</p>
<p>内部的数据存储，使用基于Slab的内存管理方式，有利于减少内存碎片和频繁分配销毁内存所带来的开销。各个Slab按需动态分配一个page的内存</p>
<p>（和4Kpage的概念不同，这里默认page为1M），page内部按照不同slab class的尺寸再划分为内存chunk供服务器存储KV键值对使用</p>
<p>Redis内部的数据结构最终也会落实到key-Value对应的形式，不过从暴露给用户的数据结构来看，</p>
<p>要比memcached丰富，除了标准的通常意义的键值对，Redis还支持List，Set， Hashes，Sorted Set等数据结构</p>
<h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p>Memcached的命令或者说通讯协议非常简单，Server所支持的命令基本就是对特定key的添加，删除，替换，原子更新，读取等，具体包括 Set, Get, Add, Replace, Append, Inc&#x2F;Dec 等等</p>
<p>Memcached的通讯协议包括文本格式和二进制格式，用于满足简单网络客户端工具（如telnet）和对性能要求更高的客户端的不同需求</p>
<p>Redis的命令在KV（String类型）上提供与Memcached类似的基本操作，在其它数据结构上也支持基本类似的操作（当然还有这些数据结构所特有的操作，如Set的union，List的pop等）而支持更多的数据结构，在一定程度上也就意味着更加广泛的应用场合</p>
<p>除了多种数据结构的支持，</p>
<p>Redis相比Memcached还提供了许多额外的特性，比如Subscribe&#x2F;publish命令，以支持发布&#x2F;订阅模式这样的通知机制等等，这些额外的特性同样有助于拓展它的应用场景Redis的客户端-服务器通讯协议完全采用文本格式（在将来可能的服务器间通讯会采用二进制格式）</p>
<h4 id="分布式实现："><a href="#分布式实现：" class="headerlink" title="分布式实现："></a>分布式实现：</h4><p>（1）memcached的分布式由客户端实现，通过一致性哈希算法来保证访问的缓存命中率；Redis的分布式由服务器端实现，通过服务端配置来实现分布式；</p>
<p>（2）事务性，memcached没有事务的概念，但是可以通过CAS协议来保证数据的完整性，一致性。Redis引入数据库中的事务概念来保证数据的完整性和一致性。</p>
<p>（3）简单性，memcached是纯KV缓存，协议简单，学习和使用成本比redis小很多</p>
<p>Memcached也不做数据的持久化工作，但是有许多基于memcached协议的项目实现了数据的持久化，例如memcacheDB使用BerkeleyDB进行数据存储，但本质上它已经不是一个Cache Server，而只是一个兼容Memcached的协议key-valueData Store了</p>
<p>Redis可以以master-slave的方式配置服务器，Slave节点对数据进行replica备份，Slave节点也可以充当Read only的节点分担数据读取的工作</p>
<p>Redis内建支持两种持久化方案，snapshot快照和AOF 增量Log方式。快照顾名思义就是隔一段时间将完整的数据Dump下来存储在文件中。AOF增量Log则是记录对数据的修改操作（实际上记录的就是每个对数据产生修改的命令本身）.</p>
<h3 id="二、为什么要用-Redis-x2F-为什么要用缓存？"><a href="#二、为什么要用-Redis-x2F-为什么要用缓存？" class="headerlink" title="二、为什么要用 Redis&#x2F;为什么要用缓存？"></a>二、为什么要用 Redis&#x2F;为什么要用缓存？</h3><p><strong>简单，来说使用缓存主要是为了提升用户体验以及应对更多的用户。</strong></p>
<p>下面我们主要从“高性能”和“高并发”这两点来看待这个问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/QoQDu9_20210607171659.png" alt="img"></p>
<p><strong>高性能 ：</strong><br> 对照上面<br> 假如用户第一次访问数据库中的某些数据的话，这个过程是比较慢，毕竟是从硬盘中读取的。但是，如果说，用户访问的数据属于高频数据并且不会经常改变的话，那么我们就可以很放心地将该用户访问的数据存在缓存中。<br> 这样有什么好处呢？ 那就是保证用户下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。<br> 不过，要保持数据库和缓存中的数据的一致性。 如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！</p>
<p><strong>高并发：</strong><br> 一般像 MySQL 这类的数据库的 QPS 大概都在 1w 左右（4 核 8g） ，但是使用 Redis 缓存之后很容易达到 10w+，甚至最高能达到 30w+（就单机 redis 的情况，redis 集群的话会更高）。<br> <strong>QPS（Query Per Second）：服务器每秒可以执行的查询次数；</strong><br> 所以，直接操作缓存能够承受的数据库请求数量是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。进而，我们也就提高的系统整体的并发</p>
<h3 id="三、Redis-常见数据结构以及使用场景分析"><a href="#三、Redis-常见数据结构以及使用场景分析" class="headerlink" title="三、Redis 常见数据结构以及使用场景分析"></a>三、Redis 常见数据结构以及使用场景分析</h3><ul>
<li><em>string</em><br>1、介绍 ：string 数据结构是简单的 key-value 类型。虽然 Redis 是用 C 语言写的，但是 Redis 并没有使用 C 的字符串表示，而是自己构建了一种 简单动态字符串（simple dynamic string，SDS）。相比于 C 的原生字符串，Redis 的 SDS 不光可以保存文本数据还可以保存二进制数据，并且获取字符串长度复杂度为 O(1)（C 字符串为 O(N)）,除此之外,Redis 的 SDS API 是安全的，不会造成缓冲区溢出。<br>2、常用命令: set,get,strlen,exists,dect,incr,setex 等等。<br>3、应用场景 ：一般常用在需要计数的场景，比如用户的访问次数、热点文章的点赞转发数量等等。<br> 下面我们简单看看它的使用！</li>
</ul>
<p><strong>普通字符串的基本操作：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; set key value #设置 key-value 类型的值</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get key # 根据 key 获得对应的 value</span><br><span class="line"><span class="string">&quot;value&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; exists key  # 判断某个 key 是否存在</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; strlen key # 返回 key 所储存的字符串值的长度。</span><br><span class="line">(integer) <span class="number">5</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; del key # 删除某个 key 对应的值</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get key</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p><strong>批量设置 :</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; mset key1 value1 key2 value2 # 批量设置 key-value 类型的值</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; mget key1 key2 # 批量获取多个 key 对应的 value</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span>Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>计数器（字符串的内容为整数的时候可以使用）：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; set number <span class="number">1</span></span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; incr number # 将 key 中储存的数字值增一</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; decr number # 将 key 中储存的数字值减一</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; get number</span><br><span class="line"><span class="string">&quot;1&quot;</span>Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>过期：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; expire key  <span class="number">60</span> # 数据在 <span class="number">60s</span> 后过期</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; setex key <span class="number">60</span> value # 数据在 <span class="number">60s</span> 后过期 (setex:[set] + [ex]pire)</span><br><span class="line">OK</span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; ttl key # 查看数据还有多久过期</span><br><span class="line">(integer) <span class="number">56</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>list</em><br> 1.介绍 ：list 即是 链表。链表是一种非常常见的数据结构，特点是易于数据元素的插入和删除并且且可以灵活调整链表长度，但是链表的随机访问困难。许多高级编程语言都内置了链表的实现比如 Java 中的 LinkedList，但是 C 语言并没有实现链表，所以 Redis 实现了自己的链表数据结构。Redis 的 list 的实现为一个 双向链表，即可以支持反向查找和遍历，更方便操作，不过带来了部分额外的内存开销。<br> 2.常用命令: rpush,lpop,lpush,rpop,lrange、llen 等。<br> 3.应用场景: 发布与订阅或者说消息队列、慢查询。<br> 下面我们简单看看它的使用</li>
</ul>
<p><strong>通过 rpush&#x2F;lpop 实现队列：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; rpush myList value1 # 向 list 的头部（右边）添加元素</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; rpush myList value2 value3 # 向list的头部（最右边）添加多个元素</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; lpop myList # 将 list的尾部(最左边)元素取出</span><br><span class="line"><span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; lrange myList <span class="number">0</span> <span class="number">1</span> # 查看对应下标的list列表， <span class="number">0</span> 为 start,<span class="number">1</span>为 end</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; lrange myList <span class="number">0</span> -<span class="number">1</span> # 查看列表中的所有元素，-<span class="number">1</span>表示倒数第一</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value3&quot;</span>Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>通过 rpush&#x2F;rpop 实现栈：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; rpush myList2 value1 value2 value3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; rpop myList2 # 将 list的头部(最右边)元素取出</span><br><span class="line"><span class="string">&quot;value3&quot;</span>Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>我专门花了一个图方便小伙伴们来理解：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210607172058285_20210607172058.png" alt="img"></p>
<p><strong>通过 lrange 查看对应下标范围的列表元素：</strong></p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> rpush myList value1 value2 value3</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> lrange myList <span class="number">0</span> <span class="number">1</span> <span class="comment"># 查看对应下标的list列表， 0 为 start,1为 end</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> lrange myList <span class="number">0</span> -<span class="number">1</span> <span class="comment"># 查看列表中的所有元素，-1表示倒数第一</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value3&quot;</span>Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>

<p><strong>通过 lrange 命令，你可以基于 list 实现分页查询，性能非常高！</strong></p>
<p><strong>通过 llen 查看链表长度：</strong></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; llen myList</span><br><span class="line">(integer) <span class="number">3</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>hash</em></li>
</ul>
<ol>
<li>介绍 ：hash 类似于 JDK1.8 前的 HashMap，内部实现也差不多(数组 + 链表)。不过，Redis 的 hash 做了更多优化。另外，hash 是一个 string 类型的 field 和 value 的映射表，特别适合用于存储对象，后续操作的时候，你可以直接仅仅修改这个对象中的某个字段的值。 比如我们可以 hash 数据结构来存储用户信息，商品信息等等。</li>
<li>常用命令： hset,hmset,hexists,hget,hgetall,hkeys,hvals 等。</li>
<li>应用场景: 系统中对象数据的存储。<br> 下面我们简单看看它的使用！</li>
</ol>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hset userInfoKey name <span class="string">&quot;guide&quot;</span> description <span class="string">&quot;dev&quot;</span> age <span class="string">&quot;24&quot;</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hexists userInfoKey name <span class="comment"># 查看 key 对应的 value中指定的字段是否存在。</span></span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hget userInfoKey name <span class="comment"># 获取存储在哈希表中指定字段的值。</span></span><br><span class="line"><span class="string">&quot;guide&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hget userInfoKey age</span><br><span class="line"><span class="string">&quot;24&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hgetall userInfoKey <span class="comment"># 获取在哈希表中指定 key 的所有字段和值</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;guide&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;description&quot;</span></span><br><span class="line"><span class="number">4</span>) <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="number">5</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="number">6</span>) <span class="string">&quot;24&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hkeys userInfoKey <span class="comment"># 获取 key 列表</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;name&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;description&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;age&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hvals userInfoKey <span class="comment"># 获取 value 列表</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;guide&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;dev&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;24&quot;</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hset userInfoKey name <span class="string">&quot;GuideGeGe&quot;</span> <span class="comment"># 修改某个字段对应的值</span></span><br><span class="line"><span class="meta">127.0.0.1:6379&gt;</span> hget userInfoKey name</span><br><span class="line"><span class="string">&quot;GuideGeGe&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>Set</em><br> 1.介绍 ： set 类似于 Java 中的 HashSet 。Redis 中的 set 类型是一种无序集合，集合中的元素没有先后顺序。当你需要存储一个列表数据，又不希望出现重复数据时，set 是一个很好的选择，并且 set 提供了判断某个成员是否在一个 set 集合内的重要接口，这个也是 list 所不能提供的。可以基于 set 轻易实现交集、并集、差集的操作。比如：你可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。Redis 可以非常方便的实现如共同关注、共同粉丝、共同喜好等功能。这个过程也就是求交集的过程。<br> 2.常用命令： sadd,spop,smembers,sismember,scard,sinterstore,sunion 等。<br> 3.应用场景: 需要存放的数据不能重复以及需要获取多个数据源交集和并集等场景<br> 下面我们简单看看它的使用！</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; sadd mySet value1 value2 # 添加元素进去</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; sadd mySet value1 # 不允许有重复元素</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; smembers mySet # 查看 set 中所有的元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; scard mySet # 查看 set 的长度</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; sismember mySet value1 # 检查某个元素是否存在set 中，只能接收单个元素</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; sadd mySet2 value2 value3</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; sinterstore mySet3 mySet mySet2 # 获取 mySet 和 mySet2 的交集并存放在 mySet3 中</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; smembers mySet3</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value2&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><em>sorted set</em><br> 1.介绍： 和 set 相比，sorted set 增加了一个权重参数 score，使得集合中的元素能够按 score 进行有序排列，还可以通过 score 的范围来获取元素的列表。有点像是 Java 中 HashMap 和 TreeSet 的结合体。<br> 2.常用命令： zadd,zcard,zscore,zrange,zrevrange,zrem 等。<br> 3.应用场景： 需要对数据根据某个权重进行排序的场景。比如在直播系统中，实时排行信息包含直播间在线用户列表，各种礼物排行榜，弹幕消息（可以理解为按消息维度的消息排行榜）等信息。<br> 下面我们简单看看它的使用！</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zadd myZset <span class="number">3.0</span> value1 # 添加元素到 sorted set 中 <span class="number">3.0</span> 为权重</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zadd myZset <span class="number">2.0</span> value2 <span class="number">1.0</span> value3 # 一次添加多个元素</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zcard myZset # 查看 sorted set 中的元素数量</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zscore myZset value1 # 查看某个 value 的权重</span><br><span class="line"><span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zrange  myZset <span class="number">0</span> -<span class="number">1</span> # 顺序输出某个范围区间的元素，<span class="number">0</span> -<span class="number">1</span> 表示输出所有元素</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zrange  myZset <span class="number">0</span> <span class="number">1</span> # 顺序输出某个范围区间的元素，<span class="number">0</span> 为 start  <span class="number">1</span> 为 stop</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value3&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br><span class="line"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">6379</span>&gt; zrevrange  myZset <span class="number">0</span> <span class="number">1</span> # 逆序输出某个范围区间的元素，<span class="number">0</span> 为 start  <span class="number">1</span> 为 stop</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;value1&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;value2&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="四、Redis-没有使用多线程？为什么不使用多线程？Redis6-0-之后为何引入了多线程？"><a href="#四、Redis-没有使用多线程？为什么不使用多线程？Redis6-0-之后为何引入了多线程？" class="headerlink" title="四、Redis 没有使用多线程？为什么不使用多线程？Redis6.0 之后为何引入了多线程？"></a>四、Redis 没有使用多线程？为什么不使用多线程？Redis6.0 之后为何引入了多线程？</h3><p>Redis 6.0 新特性，多线程连环 13 问！</p>
<p>Redis 6.0 来了</p>
<p>—</p>
<p>在全国一片祥和IT民工欢度五一节假日的时候，Redis 6.0不声不响地于5 月 2 日正式发布了，吓得我赶紧从床上爬起来，学无止境！学无止境！</p>
<p>对于6.0版本，Redis之父Antirez在RC1版本发布时（2019-12-19）在他的博客上连续用了几个“EST”词语来评价：</p>
<p>the most “enterprise” Redis version to date &#x2F;&#x2F; 最”企业级”的</p>
<p>the largest release of Redis ever as far as I can tell &#x2F;&#x2F; 最大的</p>
<p>the one where the biggest amount of people participated &#x2F;&#x2F; 参与人数最多的</p>
<p>这个版本提供了诸多令人心动的新特性及功能改进，比如新网络协议RESP3，新的集群代理，ACL等，其中关注度最高的应该是“多线程”了，笔者也第一时间体验了一下，带着众多疑问，我们来一起开始“Redis 6.0 新特性-多线程连环13问”。</p>
<p>Redis 6.0 多线程连环13问</p>
<p>—</p>
<p><strong>1.Redis6.0之前的版本真的是单线程吗？</strong></p>
<p>Redis在处理客户端的请求时，包括获取 (socket 读)、解析、执行、内容返回 (socket 写) 等都由一个顺序串行的主线程处理，这就是所谓的“单线程”。</p>
<p>但如果严格来讲从Redis4.0之后并不是单线程，除了主线程外，它也有后台线程在处理一些较为缓慢的操作，例如清理脏数据、无用连接的释放、大 key 的删除等等。</p>
<p><strong>2.Redis6.0之前为什么一直不使用多线程？</strong></p>
<p>官方曾做过类似问题的回复：使用Redis时，几乎不存在CPU成为瓶颈的情况， Redis主要受限于内存和网络。例如在一个普通的Linux系统上，Redis通过使用pipelining每秒可以处理100万个请求，所以如果应用程序主要使用O(N)或O(log(N))的命令，它几乎不会占用太多CPU。</p>
<p>使用了单线程后，可维护性高。多线程模型虽然在某些方面表现优异，但是它却引入了程序执行顺序的不确定性，带来了并发读写的一系列问题，增加了系统复杂度、同时可能存在线程切换、甚至加锁解锁、死锁造成的性能损耗。</p>
<p>Redis通过AE事件模型以及IO多路复用等技术，处理性能非常高，因此没有必要使用多线程。单线程机制使得 Redis 内部实现的复杂度大大降低，Hash 的惰性 Rehash、Lpush 等等 “线程不安全” 的命令都可以无锁进行。</p>
<p><strong>3.Redis6.0为什么要引入多线程呢？</strong></p>
<p>Redis将所有数据放在内存中，内存的响应时长大约为100纳秒，对于小数据包，Redis服务器可以处理80,000到100,000 QPS，这也是Redis处理的极限了，对于80%的公司来说，单线程的Redis已经足够使用了。</p>
<p>但随着越来越复杂的业务场景，有些公司动不动就上亿的交易量，因此需要更大的QPS。常见的解决方案是在分布式架构中对数据进行分区并采用多个服务器，但该方案有非常大的缺点，例如要管理的Redis服务器太多，维护代价大；某些适用于单个Redis服务器的命令不适用于数据分区；数据分区无法解决热点读&#x2F;写问题；数据偏斜，重新分配和放大&#x2F;缩小变得更加复杂等等。</p>
<p>从Redis自身角度来说，因为读写网络的read&#x2F;write系统调用占用了Redis执行期间大部分CPU时间，瓶颈主要在于网络的 IO 消耗, 优化主要有两个方向:</p>
<p> • 提高网络 IO 性能，典型的实现比如使用 DPDK 来替代内核网络栈的方式</p>
<p> • 使用多线程充分利用多核，典型的实现比如 Memcached。</p>
<p>协议栈优化的这种方式跟 Redis 关系不大，支持多线程是一种最有效最便捷的操作方式。所以总结起来，redis支持多线程主要就是两个原因：</p>
<p> • 可以充分利用服务器 CPU 资源，目前主线程只能利用一个核</p>
<p> • 多线程任务可以分摊 Redis 同步 IO 读写负荷</p>
<p><strong>4.Redis6.0默认是否开启了多线程？</strong></p>
<p>Redis6.0的多线程默认是禁用的，只使用主线程。如需开启需要修改redis.conf配置文件：io-threads-do-reads yes</p>
<p><strong>5.Redis6.0多线程开启时，线程数如何设置？</strong></p>
<p>开启多线程后，还需要设置线程数，否则是不生效的。同样修改redis.conf配置文件</p>
<p>关于线程数的设置，官方有一个建议：4核的机器建议设置为2或3个线程，8核的建议设置为6个线程，线程数一定要小于机器核数。还需要注意的是，线程数并不是越大越好，官方认为超过了8个基本就没什么意义了。</p>
<p><strong>6.Redis6.0采用多线程后，性能的提升效果如何？</strong></p>
<p>Redis 作者 antirez 在 RedisConf 2019分享时曾提到：Redis 6 引入的多线程 IO 特性对性能提升至少是一倍以上。国内也有大牛曾使用unstable版本在阿里云esc进行过测试，GET&#x2F;SET 命令在4线程 IO时性能相比单线程是几乎是翻倍了。</p>
<p><strong>测试环境：</strong></p>
<p>Redis Server: 阿里云 Ubuntu 18.04，8 CPU 2.5 GHZ, 8G 内存，主机型号 ecs.ic5.2xlarge</p>
<p>Redis Benchmark Client: 阿里云 Ubuntu 18.04，8 2.5 GHZ CPU, 8G 内存，主机型号 ecs.ic5.2xlarge</p>
<p><strong>测试结果：</strong></p>
<p><strong>说明1</strong>：这些性能验证的测试并没有针对严谨的延时控制和不同并发的场景进行压测。数据仅供验证参考而不能作为线上指标。</p>
<p><strong>说明2</strong>：如果开启多线程，至少要4核的机器，且Redis实例已经占用相当大的CPU耗时的时候才建议采用，否则使用多线程没有意义。所以估计80%的公司开发人员看看就好。</p>
<hr>
<p><strong>7.Redis6.0多线程的实现机制？</strong></p>
<hr>
<p><strong>流程简述如下：</strong></p>
<p>1、主线程负责接收建立连接请求，获取 socket 放入全局等待读处理队列</p>
<p>2、主线程处理完读事件之后，通过 RR(Round Robin) 将这些连接分配给这些 IO 线程</p>
<p>3、主线程阻塞等待 IO 线程读取 socket 完毕</p>
<p>4、主线程通过单线程的方式执行请求命令，请求数据读取并解析完成，但并不执行</p>
<p>5、主线程阻塞等待 IO 线程将数据回写 socket 完毕</p>
<p>6、解除绑定，清空等待队列</p>
<p><strong>该设计有如下特点：</strong></p>
<p>1、IO 线程要么同时在读 socket，要么同时在写，不会同时读或写</p>
<p>2、IO 线程只负责读写 socket 解析命令，不负责命令处理</p>
<p><strong>8.开启多线程后，是否会存在线程并发安全问题？</strong></p>
<p>从上面的实现机制可以看出，Redis的多线程部分只是用来处理网络数据的读写和协议解析，执行命令仍然是单线程顺序执行。所以我们不需要去考虑控制 key、lua、事务，LPUSH&#x2F;LPOP 等等的并发及线程安全问题。</p>
<p><strong>9.Linux环境上如何安装Redis6.0.1（6.0的正式版是6.0.1）？</strong></p>
<p>这个和安装其他版本的redis没有任何区别，整个流程跑下来也没有任何的坑，所以这里就不做描述了。唯一要注意的就是配置多线程数一定要小于cpu的核心数，查看核心数量命令：</p>
<p>[<a href="mailto:&#x72;&#x6f;&#111;&#116;&#64;&#99;&#x65;&#x6e;&#x74;&#111;&#x73;&#x37;&#x2e;&#x35;">&#x72;&#x6f;&#111;&#116;&#64;&#99;&#x65;&#x6e;&#x74;&#111;&#x73;&#x37;&#x2e;&#x35;</a> ~]# lscpuArchitecture: x86_64CPU op-mode(s): 32-bit, 64-bitByte Order: Little EndianCPU(s): 4On-line CPU(s) list: 0-3</p>
<p><strong>10.Redis6.0的多线程和Memcached多线程模型进行对比</strong></p>
<p>前些年memcached 是各大互联网公司常用的缓存方案，因此redis 和 memcached 的区别基本成了面试官缓存方面必问的面试题，最近几年memcached用的少了，基本都是 redis。</p>
<p>不过随着Redis6.0加入了多线程特性，类似的问题可能还会出现，接下来我们只针对多线程模型来简单比较一下。</p>
<p>如上图所示：Memcached 服务器采用 master-woker 模式进行工作，服务端采用 socket 与客户端通讯。主线程、工作线程 采用 pipe管道进行通讯。主线程采用 libevent 监听 listen、accept 的读事件，事件响应后将连接信息的数据结构封装起来，根据算法选择合适的工作线程，将连接任务携带连接信息分发出去，相应的线程利用连接描述符建立与客户端的socket连接 并进行后续的存取数据操作。</p>
<p>Redis6.0与Memcached多线程模型对比：</p>
<p>相同点：都采用了 master线程-worker 线程的模型</p>
<p>不同点：Memcached 执行主逻辑也是在 worker 线程里，模型更加简单，实现了真正的线程隔离，符合我们对线程隔离的常规理解。而 Redis 把处理逻辑交还给 master 线程，虽然一定程度上增加了模型复杂度，但也解决了线程并发安全等问题。</p>
<p><strong>11.Redis作者是如何点评 “多线程”这个新特性的？</strong></p>
<p>关于多线程这个特性，在6.0 RC1时，Antirez曾做过说明：</p>
<p>Redis支持多线程有2种可行的方式：第一种就是像“memcached”那样，一个Redis实例开启多个线程，从而提升GET&#x2F;SET等简单命令中每秒可以执行的操作。这涉及到I&#x2F;O、命令解析等多线程处理，因此，我们将其称之为“I&#x2F;O threading”。另一种就是允许在不同的线程中执行较耗时较慢的命令，以确保其它客户端不被阻塞，我们将这种线程模型称为“Slow commands threading”。</p>
<p>经过深思熟虑，Redis不会采用“I&#x2F;O threading”，redis在运行时主要受制于网络和内存，所以提升redis性能主要是通过在多个redis实例，特别是redis集群。接下来我们主要会考虑改进两个方面：</p>
<p>\1. Redis集群的多个实例通过编排能够合理地使用本地实例的磁盘，避免同时重写AOF。</p>
<p>2.提供一个Redis集群代理，便于用户在没有较好的集群协议客户端时抽象出一个集群。</p>
<p>补充说明一下，Redis和memcached一样是一个内存系统，但不同于Memcached。多线程是复杂的，必须考虑使用简单的数据模型，执行LPUSH的线程需要服务其他执行LPOP的线程。</p>
<p>我真正期望的实际是“slow operations threading”，在redis6或redis7中，将提供“key-level locking”，使得线程可以完全获得对键的控制以处理缓慢的操作。</p>
<p><strong>12.Redis线程中经常提到IO多路复用，如何理解？</strong></p>
<p>这是IO模型的一种，即经典的Reactor设计模式，有时也称为异步阻塞IO。</p>
<p>多路指的是多个socket连接，复用指的是复用一个线程。多路复用主要有三种技术：select，poll，epoll。epoll是最新的也是目前最好的多路复用技术。采用多路 I&#x2F;O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络IO的时间消耗），且Redis在内存中操作数据的速度非常快（内存内的操作不会成为这里的性能瓶颈），主要以上两点造就了Redis具有很高的吞吐量。</p>
<h3 id="五、Redis-给缓存数据设置过期时间有啥用？"><a href="#五、Redis-给缓存数据设置过期时间有啥用？" class="headerlink" title="五、Redis 给缓存数据设置过期时间有啥用？"></a>五、Redis 给缓存数据设置过期时间有啥用？</h3><h3 id="六、Redis-是如何判断数据是否过期的呢？"><a href="#六、Redis-是如何判断数据是否过期的呢？" class="headerlink" title="六、Redis 是如何判断数据是否过期的呢？"></a>六、Redis 是如何判断数据是否过期的呢？</h3><h3 id="七、过期的数据的删除策略了解么？"><a href="#七、过期的数据的删除策略了解么？" class="headerlink" title="七、过期的数据的删除策略了解么？"></a>七、过期的数据的删除策略了解么？</h3><h4 id="定时删除"><a href="#定时删除" class="headerlink" title="定时删除"></a><strong>定时删除</strong></h4><p>定时删除是指在设置键的过期时间的同时，创建一个定时器，让定时器在键的过期时间来临时，立即执行对键的删除操作。</p>
<p>定时删除策略对内存是最友好的：通过使用定时器，定时删除策略可以保证过期键会尽可能快的被删除，并释放过期键所占用的内存。</p>
<p>定时删除策略的缺点是，他对CPU时间是最不友好的：再过期键比较多的情况下，删除过期键这一行为可能会占用相当一部分CPU时间。</p>
<p>除此之外，创建一个定时器需要用到Redis服务器中的时间事件。而当前时间事件的实现方式—-无序链表，查找一个事件的时间复杂度为O(N)—-并不能高效地处理大量时间事件。</p>
<h4 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a><strong>惰性删除</strong></h4><p>惰性删除是指放任键过期不管，但是每次从键空间中获取键时，都检查取得的键是否过期，如果过期的话就删除该键，如果没有过期就返回该键。</p>
<p>惰性删除策略对CPU时间来说是最友好的，但对内存是最不友好的。如果数据库中有非常多的过期键，而这些过期键又恰好没有被访问到的话，那么他们也许永远也不会被删除。</p>
<h4 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a><strong>定期删除</strong></h4><p>定期删除是指每隔一段时间，程序就对数据库进行一次检查，删除里面的过期键。</p>
<p>定期删除策略是前两种策略的一种整合和折中:</p>
<ul>
<li>定期删除策略每隔一段时间执行一次删除过期键操作，并通过限制删除操作执行的时长和频率来减少删除操作对CPU时间的影响。</li>
<li>除此之外，通过定期删除过期键，定期删除策略有效地减少了因为过期键带来的内存浪费。</li>
</ul>
<p>定期删除策略的难点是确定删除操作执行的时长和频率：</p>
<ul>
<li>如果删除操作执行的太频繁或者执行的时间太长，定期删除策略就会退化成定时删除策略，以至于将CPU时间过多的消耗在删除过期键上面。</li>
<li>如果删除操作执行的太少，或者执行的时间太短，定期删除策略又会和惰性删除策略一样，出现浪费内存的情况。</li>
</ul>
<h4 id="Redis的过期键删除策略"><a href="#Redis的过期键删除策略" class="headerlink" title="Redis的过期键删除策略"></a><strong>Redis的过期键删除策略</strong></h4><p>Redis服务器实际使用的是惰性删除和定期删除两种策略：通过配合使用这两种删除策略，服务器可以很好的在合理使用CPU时间和避免浪费内存空间之间取得平衡。</p>
<h4 id="定期删除策略的实现"><a href="#定期删除策略的实现" class="headerlink" title="定期删除策略的实现"></a><strong>定期删除策略的实现</strong></h4><p>过期键的定期删除策略由函数redis.c&#x2F;activeExpireCycle实现，每当Redis服务器周期性操作redis.c&#x2F;serverCron函数执行时，activeExpireCycle函数就会被调用，它在规定的时间内分多次遍历服务器中的各个数据库，从数据库的expires字典中随机检查一部分键的过期时间，并删除其中的过期键。</p>
<h3 id="八、Redis-内存淘汰机制了解么？"><a href="#八、Redis-内存淘汰机制了解么？" class="headerlink" title="八、Redis 内存淘汰机制了解么？"></a>八、Redis 内存淘汰机制了解么？</h3><h4 id="内存淘汰策略"><a href="#内存淘汰策略" class="headerlink" title="内存淘汰策略"></a>内存淘汰策略</h4><p>内存淘汰只是 Redis 提供的一个功能，为了更好地实现这个功能，必须为不同的应用场景提供不同的策略，内存淘汰策略讲的是为实现内存淘汰我们具体怎么做，要解决的问题包括淘汰键空间如何选择？在键空间中淘汰键如何选择？</p>
<p>Redis 提供了下面几种淘汰策略供用户选择，其中默认的策略为 <code>noeviction</code> 策略：</p>
<ul>
<li>noeviction：当内存使用达到阈值的时候，所有引起申请内存的命令会报错</li>
<li>allkeys-lru：在主键空间中，优先移除最近未使用的key</li>
<li>volatile-lru：在设置了过期时间的键空间中，优先移除最近未使用的 key</li>
<li>allkeys-random：在主键空间中，随机移除某个 key</li>
<li>volatile-random：在设置了过期时间的键空间中，随机移除某个 key</li>
<li>volatile-ttl：在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除</li>
</ul>
<p>这里补充一下主键空间和设置了过期时间的键空间，举个例子，假设我们有一批键存储在Redis中，则有那么一个哈希表用于存储这批键及其值，如果这批键中有一部分设置了过期时间，那么这批键还会被存储到另外一个哈希表中，这个哈希表中的值对应的是键被设置的过期时间。设置了过期时间的键空间为主键空间的子集。</p>
<h4 id="如何选择淘汰策略"><a href="#如何选择淘汰策略" class="headerlink" title="如何选择淘汰策略"></a>如何选择淘汰策略</h4><p>我们了解了 Redis 大概提供了这么几种淘汰策略，那么如何选择呢？淘汰策略的选择可以通过下面的配置指定：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># maxmemory-policy noeviction</span></span><br></pre></td></tr></table></figure>

<p>但是这个值填什么呢？为解决这个问题，我们需要了解我们的应用请求对于 Redis 中存储的数据集的访问方式以及我们的诉求是什么。同时 Redis 也支持 Runtime 修改淘汰策略，这使得我们不需要重启 Redis 实例而实时的调整内存淘汰策略。</p>
<p>下面看看几种策略的适用场景：</p>
<ul>
<li>allkeys-lru：如果我们的应用对缓存的访问符合幂律分布（也就是存在相对热点数据），或者我们不太清楚我们应用的缓存访问分布状况，我们可以选择 allkeys-lru 策略</li>
<li>allkeys-random：如果我们的应用对于缓存 key 的访问概率相等，则可以使用这个策略</li>
<li>volatile-ttl：这种策略使得我们可以向 Redis 提示哪些 key 更适合被 eviction</li>
</ul>
<p>另外，<code>volatile-lru</code> 策略和 <code>volatile-random</code> 策略适合我们将一个Redis实例既应用于缓存和又应用于持久化存储的时候，然而我们也可以通过使用两个 Redis 实例来达到相同的效果，值得一提的是将key设置过期时间实际上会消耗更多的内存，因此我们建议使用 <code>allkeys-lru</code> 策略从而更有效率的使用内存。</p>
<h4 id="非精准的-LRU"><a href="#非精准的-LRU" class="headerlink" title="非精准的 LRU"></a>非精准的 LRU</h4><p>上面提到的 LRU（Least Recently Used）策略，实际上 Redis 实现的 LRU 并不是可靠的 LRU，也就是名义上我们使用 LRU 算法淘汰键，但是实际上被淘汰的键并不一定是真正的最久没用的，这里涉及到一个权衡的问题，如果需要在全部键空间内搜索最优解，则必然会增加系统的开销，Redis 是单线程的，也就是同一个实例在每一个时刻只能服务于一个客户端，所以耗时的操作一定要谨慎。为了在一定成本内实现相对的 LRU，早期的 Redis 版本是基于采样的 LRU，也就是放弃全部键空间内搜索解改为采样空间搜索最优解。自从 Redis3.0 版本之后，Redis 作者对于基于采样的 LRU 进行了一些优化，目的是在一定的成本内让结果更靠近真实的 LRU。</p>
<h3 id="九、Redis-持久化机制-怎么保证-Redis-挂掉之后再重启数据可以进行恢复"><a href="#九、Redis-持久化机制-怎么保证-Redis-挂掉之后再重启数据可以进行恢复" class="headerlink" title="九、Redis 持久化机制(怎么保证 Redis 挂掉之后再重启数据可以进行恢复)"></a>九、Redis 持久化机制(怎么保证 Redis 挂掉之后再重启数据可以进行恢复)</h3><p>Redis是常用的基于内存的缓存服务，能为我们缓存数据减少数据库访问从而提升性能，也能作为NoSQL数据库存储数据或借助有序队列做排队系统等。当仅作为数据缓存用时，Redis服务的可用性要求没那么高， 毕竟挂了还能从数据库获取， 但如果作为数据库或队列使用时，Redis挂了可能会影响到业务。本文整理了Redis的持久化方案，使用它们来对Redis的内存数据进行持久化，保障数据的安全性。</p>
<p>Redis支持RDB与AOF两种持久化机制，持久化可以避免因进程异常退出或down机导致的数据丢失问题，在下次重启时能利用之前的持久化文件实现数据恢复。</p>
<h4 id="RDB持久化"><a href="#RDB持久化" class="headerlink" title="RDB持久化"></a><strong>RDB持久化</strong></h4><p>RDB持久化即通过创建快照（压缩的二进制文件）的方式进行持久化，保存某个时间点的全量数据。RDB持久化是Redis默认的持久化方式。RDB持久化的触发包括手动触发与自动触发两种方式。</p>
<h5 id="手动触发"><a href="#手动触发" class="headerlink" title="手动触发"></a><strong>手动触发</strong></h5><ol>
<li>save， 在命令行执行save命令，将以同步的方式创建rdb文件保存快照，会阻塞服务器的主进程，生产环境中不要用</li>
<li>bgsave, 在命令行执行bgsave命令，将通过fork一个子进程以异步的方式创建rdb文件保存快照，除了fork时有阻塞，子进程在创建rdb文件时，主进程可继续处理请求</li>
</ol>
<h5 id="自动触发"><a href="#自动触发" class="headerlink" title="自动触发"></a><strong>自动触发</strong></h5><ol>
<li>在redis.conf中配置 <code>save m n</code> 定时触发，如 <code>save 900 1</code>表示在900s内至少存在一次更新就触发</li>
<li>主从复制时，如果从节点执行全量复制操作，主节点自动执行bgsave生成RDB文件并发送给从节点</li>
<li>执行debug reload命令重新加载Redis时</li>
<li>执行shutdown且没有开启AOF持久化</li>
</ol>
<p>redis.conf中RDB持久化配置</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 只要满足下列条件之一，则会执行bgsave命令</span></span><br><span class="line">save <span class="number">900</span> <span class="number">1</span> <span class="meta"># 在900s内存在至少一次写操作</span></span><br><span class="line">save <span class="number">300</span> <span class="number">10</span></span><br><span class="line">save <span class="number">60</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 禁用RBD持久化，可在最后加 save &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 当备份进程出错时主进程是否停止写入操作</span></span><br><span class="line">stop-writes-<span class="keyword">on</span>-bgsave-error yes</span><br><span class="line"><span class="meta"># 是否压缩rdb文件 推荐no 相对于硬盘成本cpu资源更贵</span></span><br><span class="line">rdbcompression no</span><br></pre></td></tr></table></figure>

<h5 id="AOF持久化"><a href="#AOF持久化" class="headerlink" title="AOF持久化"></a><strong>AOF持久化</strong></h5><p>AOF（Append-Only-File）持久化即记录所有变更数据库状态的指令，以append的形式追加保存到AOF文件中。在服务器下次启动时，就可以通过载入和执行AOF文件中保存的命令，来还原服务器关闭前的数据库状态。</p>
<p>redis.conf中AOF持久化配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认关闭AOF，若要开启将no改为yes</span></span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"><span class="comment"># append文件的名字</span></span><br><span class="line">appendfilename <span class="string">&quot;appendonly.aof&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔一秒将缓存区内容写入文件 默认开启的写入方式</span></span><br><span class="line">appendfsync everysec</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当AOF文件大小的增长率大于该配置项时自动开启重写（这里指超过原大小的100%）。</span></span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当AOF文件大小大于该配置项时自动开启重写</span></span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br></pre></td></tr></table></figure>

<p>AOF持久化的实现包括3个步骤:</p>
<ol>
<li>命令追加：将命令追加到AOF缓冲区</li>
<li>文件写入：缓冲区内容写到AOF文件</li>
<li>文件保存：AOF文件保存到磁盘</li>
</ol>
<p>其中后两步的频率通过appendfsync来配置，appendfsync的选项包括</p>
<ul>
<li>always， 每执行一个命令就保存一次，安全性最高，最多只丢失一个命令的数据，但是性能也最低（频繁的磁盘IO）</li>
<li>everysec，每一秒保存一次，推荐使用，在安全性与性能之间折中，最多丢失一秒的数据</li>
<li>no， 依赖操作系统来执行（一般大概30s一次的样子），安全性最低，性能最高，丢失操作系统最后一次对AOF文件触发SAVE操作之后的数据</li>
</ul>
<p>AOF通过保存命令来持久化，随着时间的推移，AOF文件会越来越大，Redis通过AOF文件重写来解决AOF文件不断增大的问题（可以减少文件的磁盘占有量，加快数据恢复的速度），原理如下：</p>
<ol>
<li>调用fork，创建一个子进程</li>
<li>子进程读取当前数据库的状态来“重写”一个新的AOF文件（这里虽然叫“重写”，但实际并没有对旧文件进行任何读取，而是根据数据库的当前状态来形成指令）</li>
<li>主进程持续将新的变动同时写到AOF重写缓冲区与原来的AOF缓冲区中</li>
<li>主进程获取到子进程重写AOF完成的信号，调用信号处理函数将AOF重写缓冲区内容写入新的AOF文件中，并对新文件进行重命名，原子地覆盖原有AOF文件，完成新旧文件的替换</li>
</ol>
<p>AOF的重写也分为手动触发与自动触发</p>
<ul>
<li>手动触发：直接调用bgrewriteaof命令</li>
<li>自动触发：根据auto-aof-rewrite-min-size和auto-aof-rewrite-percentage参数确定自动触发时机。其中auto-aof-rewrite-min-size表示运行AOF重写时文件最小体积，默认为64MB。auto-aof-rewrite-percentage表示当前AOF文件大小（aof_current_size）和上一次重写后AOF文件大小（aof_base_size）的比值。自动触发时机为 aof_current_size &gt; auto-aof-rewrite-min-size &amp;&amp;（aof_current_size - aof_base_size）&#x2F;aof_base_size&gt; &#x3D; auto-aof-rewrite-percentage</li>
</ul>
<h5 id="RDB-vs-AOF"><a href="#RDB-vs-AOF" class="headerlink" title="RDB vs AOF"></a><strong>RDB vs AOF</strong></h5><p>RDB与AOF两种方式各有优缺点。</p>
<p>RDB的优点：与AOF相比，RDB文件相对较小，恢复数据比较快（原因见数据恢复部分）<br> RDB的缺点：服务器宕机，RBD方式会丢失掉上一次RDB持久化后的数据；使用bgsave fork子进程时会耗费内存。</p>
<p>AOF的优点：AOF只是追加文件，对服务器性能影响较小，速度比RDB快，消耗内存也少，同时可读性高。<br> AOF的缺点：生成的文件相对较大，即使通过AOF重写，仍然会比较大；恢复数据的速度比RDB慢。</p>
<h5 id="数据库的恢复"><a href="#数据库的恢复" class="headerlink" title="数据库的恢复"></a><strong>数据库的恢复</strong></h5><p>服务器启动时，如果没有开启AOF持久化功能，则会自动载入RDB文件，期间会阻塞主进程。如果开启了AOF持久化功能，服务器则会优先使用AOF文件来还原数据库状态，因为AOF文件的更新频率通常比RDB文件的更新频率高，保存的数据更完整。</p>
<p>redis数据库恢复的处理流程如下，</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/qJZdWt_20210607200126.png" alt="img"></p>
<p>在数据恢复方面，RDB的启动时间会更短，原因有两个：</p>
<ol>
<li>RDB 文件中每一条数据只有一条记录，不会像AOF日志那样可能有一条数据的多次操作记录。所以每条数据只需要写一次就行了，文件相对较小。</li>
<li>RDB 文件的存储格式和Redis数据在内存中的编码格式是一致的，不需要再进行数据编码工作，所以在CPU消耗上要远小于AOF日志的加载。</li>
</ol>
<p>但是在进行RDB持久化时，fork出来进行dump操作的子进程会占用与父进程一样的内存，采用的copy-on-write机制，对性能的影响和内存的消耗都是比较大的。比如16G内存，Redis已经使用了10G，这时save的话会再生成10G，变成20G，大于系统的16G。这时候会发生交换，要是虚拟内存不够则会崩溃，导致数据丢失。所以在用redis的时候一定对系统内存做好容量规划。</p>
<h4 id="RDB、AOF混合持久化"><a href="#RDB、AOF混合持久化" class="headerlink" title="RDB、AOF混合持久化"></a><strong>RDB、AOF混合持久化</strong></h4><p>Redis从4.0版开始支持RDB与AOF的混合持久化方案。首先由RDB定期完成内存快照的备份，然后再由AOF完成两次RDB之间的数据备份，由这两部分共同构成持久化文件。该方案的优点是充分利用了RDB加载快、备份文件小及AOF尽可能不丢数据的特性。缺点是兼容性差，一旦开启了混合持久化，在4.0之前的版本都不识别该持久化文件，同时由于前部分是RDB格式，阅读性较低。</p>
<p>开启混合持久化</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">aof-<span class="keyword">use</span>-<span class="title">rdb</span>-<span class="title">preamble</span> <span class="title">yes</span></span><br></pre></td></tr></table></figure>

<p>数据恢复加载过程就是先按照RDB进行加载，然后把AOF命令追加写入。</p>
<h4 id="持久化方案的建议"><a href="#持久化方案的建议" class="headerlink" title="持久化方案的建议"></a><strong>持久化方案的建议</strong></h4><ol>
<li>如果Redis只是用来做缓存服务器，比如数据库查询数据后缓存，那可以不用考虑持久化，因为缓存服务失效还能再从数据库获取恢复。</li>
<li>如果你要想提供很高的数据保障性，那么建议你同时使用两种持久化方式。如果你可以接受灾难带来的几分钟的数据丢失，那么可以仅使用RDB。</li>
<li>通常的设计思路是利用主从复制机制来弥补持久化时性能上的影响。即Master上RDB、AOF都不做，保证Master的读写性能，而Slave上则同时开启RDB和AOF（或4.0以上版本的混合持久化方式）来进行持久化，保证数据的安全性。</li>
</ol>
<h3 id="十、Redis-缓存穿透、缓存雪崩？"><a href="#十、Redis-缓存穿透、缓存雪崩？" class="headerlink" title="十、Redis 缓存穿透、缓存雪崩？"></a>十、Redis 缓存穿透、缓存雪崩？</h3><h4 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h4><p>通过某个key比如A进行查询时，每次都不能从缓存中获取到数据，因此每次都是访问数据库进行查询（数据库中也没有）。</p>
<p><strong>解决方案</strong><br> 当key值A从数据库未查询到数据时，在缓存中将A的值设为空并设置过期时间。</p>
<h4 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h4><p>某个热点key A在高并发的请求的情况下，缓存失效的瞬间，大量请求击穿缓存访问数据库。</p>
<p><strong>解决方案</strong></p>
<ul>
<li>1.业务允许的情况下，热点数据不过期；</li>
<li>2.构建互斥锁，在第一个请求创建完成缓存后再释放锁，从而其他请求可以通过key访问缓存；</li>
</ul>
<h4 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h4><p>雪崩是指缓存中大量数据过期导致系统涌入大量查询请求时，因大部分数据在Redis层已经失效，请求渗透到数据库层，大批量请求引起数据库压力造成查询堵塞甚至宕机。</p>
<p><strong>代码层面，设置数据过期时间：</strong></p>
<ul>
<li>1.数据失效时间分散，不要在同一个时间大量缓存数据失效；</li>
<li>2.业务允许的情况下，数据不失效；</li>
</ul>
<p><strong>架构层面：</strong></p>
<ul>
<li>1.redis高可用，Redis Cluster，主从同步，避免redis全盘奔溃；</li>
<li>2.缓存分级，ehcache + redis + mysql模式，本地内存中无数据再从redis中查找；再者，MySQL实现限流和降级，避免宕机。</li>
<li>3.redis必须要持久化，重启后从磁盘加载数据，快速恢复缓存数据；</li>
</ul>
<h3 id="十一、如何保证缓存和数据库数据的一致性？"><a href="#十一、如何保证缓存和数据库数据的一致性？" class="headerlink" title="十一、如何保证缓存和数据库数据的一致性？"></a>十一、如何保证缓存和数据库数据的一致性？</h3><p>看到好些人在写更新缓存数据代码时，<strong>先删除缓存，然后再更新数据库，而后续的操作会把数据再装载的缓存中</strong>。然而，这个是逻辑是错误的。试想，两个并发操作，一个是更新操作，另一个是查询操作，更新操作删除缓存后，查询操作没有命中缓存，先把老数据读出来后放到缓存中，然后更新操作更新了数据库。于是，在缓存中的数据还是老的数据，导致缓存中的数据是脏的，而且还一直这样脏下去了。</p>
<p>这篇文章说一下几个缓存更新的Design Pattern（让我们多一些套路吧）。</p>
<p>这里，我们先不讨论更新缓存和更新数据这两个事是一个事务的事，或是会有失败的可能，我们先假设更新数据库和更新缓存都可以成功的情况（我们先把成功的代码逻辑先写对）。</p>
<p>更新缓存的的Design Pattern有四种：</p>
<ul>
<li>Cache aside （旁路缓存 ）</li>
<li>Read through</li>
<li>Write through</li>
<li>Write behind caching</li>
</ul>
<h4 id="Cache-Aside-Pattern"><a href="#Cache-Aside-Pattern" class="headerlink" title="Cache Aside Pattern"></a>Cache Aside Pattern</h4><p>这是最常用最常用的pattern了。其具体逻辑如下：</p>
<ul>
<li><strong>失效：</strong>应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
<li><strong>命中：</strong>应用程序从cache中取数据，取到后返回。</li>
<li><strong>更新：</strong>先把数据存到数据库中，成功后，<strong>再让缓存失效</strong>。</li>
</ul>
<p>注意，我们的更新是先更新数据库，成功后，让缓存失效。那么，这种方式是否可以没有文章前面提到过的那个问题呢？我们可以脑补一下。</p>
<p>一个是查询操作，一个是更新操作的并发，首先，没有了删除cache数据的操作了，而是先更新了数据库中的数据，此时，缓存依然有效，所以，并发的查询操作拿的是没有更新的数据，但是，更新操作马上让缓存的失效了，后续的查询操作再把数据从数据库中拉出来。而不会像文章开头的那个逻辑产生的问题，后续的查询操作一直都在取老的数据。</p>
<p>这是标准的design pattern，包括Facebook的论文《<a href="https://links.jianshu.com/go?to=https://www.usenix.org/system/files/conference/nsdi13/nsdi13-final170_update.pdf">Scaling Memcache at Facebook</a>》也使用了这个策略。为什么不是写完数据库后更新缓存？你可以看一下Quora上的这个问答《<a href="https://links.jianshu.com/go?to=https://www.quora.com/Why-does-Facebook-use-delete-to-remove-the-key-value-pair-in-Memcached-instead-of-updating-the-Memcached-during-write-request-to-the-backend">Why does Facebook use delete to remove the key-value pair in Memcached instead of updating the Memcached during write request to the backend?</a>》，主要是怕两个并发的写操作导致脏数据。</p>
<p>那么，是不是Cache Aside这个就不会有并发问题了？不是的，比如，一个是读操作，但是没有命中缓存，然后就到数据库中取数据，此时来了一个写操作，写完数据库后，让缓存失效，然后，之前的那个读操作再把老的数据放进去，所以，会造成脏数据。</p>
<p>但，这个case理论上会出现，不过，实际上出现的概率可能非常低，因为这个条件需要发生在读缓存时缓存失效，而且并发着有一个写操作。而实际上数据库的写操作会比读操作慢得多，而且还要锁表，而读操作必需在写操作前进入数据库操作，而又要晚于写操作更新缓存，所有的这些条件都具备的概率基本并不大。</p>
<p><strong>所以，这也就是Quora上的那个答案里说的，要么通过2PC或是Paxos协议保证一致性，要么就是拼命的降低并发时脏数据的概率，而Facebook使用了这个降低概率的玩法，因为2PC太慢，而Paxos太复杂。当然，最好还是为缓存设置上过期时间。</strong></p>
<h4 id="Read-x2F-Write-Through-Pattern"><a href="#Read-x2F-Write-Through-Pattern" class="headerlink" title="Read&#x2F;Write Through Pattern"></a>Read&#x2F;Write Through Pattern</h4><p>我们可以看到，在上面的Cache Aside套路中，我们的应用代码需要维护两个数据存储，一个是缓存（Cache），一个是数据库（Repository）。所以，应用程序比较啰嗦。而Read&#x2F;Write Through套路是把更新数据库（Repository）的操作由缓存自己代理了，所以，对于应用层来说，就简单很多了。<strong>可以理解为，应用认为后端就是一个单一的存储，而存储自己维护自己的Cache。</strong></p>
<h5 id="Read-Through"><a href="#Read-Through" class="headerlink" title="Read Through"></a>Read Through</h5><p>Read Through 套路就是在查询操作中更新缓存，也就是说，当缓存失效的时候（过期或LRU换出），Cache Aside是由调用方负责把数据加载入缓存，而Read Through则用缓存服务自己来加载，从而对应用方是透明的。</p>
<h5 id="Write-Through"><a href="#Write-Through" class="headerlink" title="Write Through"></a>Write Through</h5><p>Write Through 套路和Read Through相仿，不过是在更新数据时发生。当有数据更新的时候，如果没有命中缓存，直接更新数据库，然后返回。如果命中了缓存，则更新缓存，然后再由Cache自己更新数据库（这是一个同步操作）<br> 下图自来Wikipedia的<a href="https://links.jianshu.com/go?to=https://en.wikipedia.org/wiki/Cache_(computing)">Cache词条</a>。其中的Memory你可以理解为就是我们例子里的数据库。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5yRk3U_20210607200416.png" alt="img"></p>
<h4 id="Write-Behind-Caching-Pattern"><a href="#Write-Behind-Caching-Pattern" class="headerlink" title="Write Behind Caching Pattern"></a>Write Behind Caching Pattern</h4><p>Write Behind 又叫 Write Back。<strong>一些了解Linux操作系统内核的同学对write back应该非常熟悉，这不就是Linux文件系统的Page Cache的算法吗？是的，你看基础这玩意全都是相通的。</strong>所以，基础很重要，我已经不是一次说过基础很重要这事了。</p>
<p>Write Back套路，一句说就是，在更新数据的时候，只更新缓存，不更新数据库，而我们的缓存会异步地批量更新数据库。这个设计的好处就是让数据的I&#x2F;O操作飞快无比（因为直接操作内存嘛 ），因为异步，write backg还可以合并对同一个数据的多次操作，所以性能的提高是相当可观的。</p>
<p>但是，其带来的问题是，数据不是强一致性的，而且可能会丢失（我们知道Unix&#x2F;Linux非正常关机会导致数据丢失，就是因为这个事）。在软件设计上，我们基本上不可能做出一个没有缺陷的设计，就像算法设计中的时间换空间，空间换时间一个道理，有时候，强一致性和高性能，高可用和高性性是有冲突的。软件设计从来都是取舍Trade-Off。</p>
<p>另外，Write Back实现逻辑比较复杂，因为他需要track有哪数据是被更新了的，需要刷到持久层上。操作系统的write back会在仅当这个cache需要失效的时候，才会被真正持久起来，比如，内存不够了，或是进程退出了等情况，这又叫lazy write。</p>
<p>在wikipedia上有一张write back的流程图，基本逻辑如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/gV226v_20210607200455.png" alt="img"></p>
<h4 id="再多唠叨一些"><a href="#再多唠叨一些" class="headerlink" title="再多唠叨一些"></a>再多唠叨一些</h4><p>1）上面讲的这些Design Pattern，其实并不是软件架构里的mysql数据库和memcache&#x2F;redis的更新策略，这些东西都是计算机体系结构里的设计，比如CPU的缓存，硬盘文件系统中的缓存，硬盘上的缓存，数据库中的缓存。<strong>基本上来说，这些缓存更新的设计模式都是非常老古董的，而且历经长时间考验的策略</strong>，所以这也就是，工程学上所谓的Best Practice，遵从就好了。</p>
<p>2）有时候，我们觉得能做宏观的系统架构的人一定是很有经验的，其实，宏观系统架构中的很多设计都来源于这些微观的东西。比如，云计算中的很多虚拟化技术的原理，和传统的虚拟内存不是很像么？Unix下的那些I&#x2F;O模型，也放大到了架构里的同步异步的模型，还有Unix发明的管道不就是数据流式计算架构吗？TCP的好些设计也用在不同系统间的通讯中，仔细看看这些微观层面，你会发现有很多设计都非常精妙……所以，<strong>请允许我在这里放句观点鲜明的话——如果你要做好架构，首先你得把计算机体系结构以及很多老古董的基础技术吃透了。</strong></p>
<p>3）在软件开发或设计中，我非常建议在之前先去参考一下已有的设计和思路，<strong>看看相应的guideline，best practice或design pattern，吃透了已有的这些东西，再决定是否要重新发明轮子</strong>。千万不要似是而非地，想当然的做软件设计。</p>
<p>4）上面，我们没有考虑缓存（Cache）和持久层（Repository）的整体事务的问题。比如，更新Cache成功，更新数据库失败了怎么吗？或是反过来。关于这个事，如果你需要强一致性，你需要使用“两阶段提交协议”——prepare, commit&#x2F;rollback，比如Java 7 的XAResource，还有MySQL 5.7的 XA Transaction，有些cache也支持XA，比如EhCache。当然，XA这样的强一致性的玩法会导致性能下降，关于分布式的事务的相关话题，你可以看看《<a href="https://links.jianshu.com/go?to=https://coolshell.cn/articles/10910.html">分布式系统的事务处理</a>》一文。</p>
<h2 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a><strong>常用工具</strong></h2><p>非常重要！非常重要！特别是 Git 和 Docker。</p>
<h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a><strong>Docker</strong></h3><p>传统的开发流程中，我们的项目通常需要使用 MySQL、Redis、FastDFS 等等环境，这些环境都是需要我们手动去进行下载并配置的，安装配置流程极其复杂，而且不同系统下的操作也不一样。</p>
<p>Docker 的出现完美地解决了这一问题，我们可以在容器中安装 MySQL、Redis 等软件环境，使得应用和环境架构分开，它的优势在于：</p>
<ol>
<li>一致的运行环境，能够更轻松地迁移</li>
<li>对进程进行封装隔离，容器与容器之间互不影响，更高效地利用系统资源</li>
<li>可以通过镜像复制多个一致的容器</li>
</ol>
<p>Docker 常见概念解读，可以看这篇 Github 上开源的这篇<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Docker">《Docker 基本概念解读》</a> ，从零到上手实战可以看<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/tools/Docker%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%AE%9E%E6%88%98">《Docker 从入门到上手干事》</a>这篇文章，内容非常详细！</p>
<p>另外，再给大家推荐一本质量非常高的开源书籍<a href="https://link.zhihu.com/?target=https://yeasy.gitbook.io/docker_practice/introduction/why">《Docker 从入门到实践》</a> ，这本书的内容非常新，毕竟书籍的内容是开源的，可以随时改进。</p>
<p><img src="https://pic1.zhimg.com/50/v2-f5d0bf0587f742c9a65f985e7fc12f93_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-f5d0bf0587f742c9a65f985e7fc12f93_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="常用框架"><a href="#常用框架" class="headerlink" title="常用框架"></a><strong>常用框架</strong></h2><p><a href="https://link.zhihu.com/?target=https://t.1yb.co/mBsy">2021 最新Java实战项目源码打包下载t.1yb.co<img src="https://pic2.zhimg.com/v2-5c70f2d4123edf16afab8b4bed070b4d_180x120.jpg" alt="图标"></a></p>
<h2 id="Spring-x2F-SpringBoot"><a href="#Spring-x2F-SpringBoot" class="headerlink" title="Spring&#x2F;SpringBoot"></a><strong>Spring&#x2F;SpringBoot</strong></h2><p><strong>Spring 和 SpringBoot 真的很重要！</strong></p>
<p>一定要搞懂 AOP 和 IOC 这两个概念。Spring 中 bean 的作用域与生命周期、SpringMVC 工作原理详解等等知识点都是非常重要的，一定要搞懂。</p>
<p>企业中做 Java 后端，你一定离不开 SpringBoot ，这个是必备的技能了！一定一定一定要学好！</p>
<p>像 SpringBoot 和一些常见技术的整合你也要知识怎么做，比如 SpringBoot 整合 MyBatis、 ElasticSearch、SpringSecurity、Redis 等等。</p>
<p>学习 Spring 的话，可以多看看 **<a href="https://link.zhihu.com/?target=https://spring.io/projects/spring-framework%23learn">《Spring 的官方文档》</a>**，写的很详细。你可以在这里找到 Spring 全家桶的学习资源。</p>
<p><img src="https://pic4.zhimg.com/50/v2-617c73716c914ce3ee4c9a32be97daa3_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-617c73716c914ce3ee4c9a32be97daa3_720w.jpg?source=1940ef5c" alt="img"></p>
<p>你也可以把 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34949443/">《Spring 实战》</a></strong> 这本书作为学习 Spring 的参考资料。 这本书还是比较新的，目前已经出到了第 5 版，基于 Spring 5 来讲。</p>
<p><img src="https://pic2.zhimg.com/50/v2-27116d84a7876e40fe9e008d0bd1927e_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-27116d84a7876e40fe9e008d0bd1927e_720w.jpg?source=1940ef5c" alt="img"></p>
<p>了解了 Spring 中的一些常见概念和基本用法之后，你就可以开始学习 Spring Boot 了。</p>
<p>当然了，Spring 其实并不是学习 Spring Boot 的前置基础，相比于 Spring 来说，Spring Boot 要更容易上手一些！如果你只是想使用 Spring Boot 来做项目的话，直接学 Spring Boot 就可以了。</p>
<p>不过，我建议你在学习 Spring Boot 之前，可以看看 <strong><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/framework/spring/Spring%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93">《Spring 常见问题总结》</a></strong> 。这些问题都是 Spring 比较重要的知识点，也是面试中经常会被问到的。</p>
<p>学习 Spring Boot 的话，还是建议可以多看看  **<a href="https://link.zhihu.com/?target=https://spring.io/projects/spring-boot%23learn">《Spring Boot 的官方文档》</a>**，写的很详细。</p>
<p>你也可以把 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/26857423/">《Spring Boot 实战》</a></strong> 这本书作为学习 Spring Boot 的参考资料。</p>
<p><img src="https://pic2.zhimg.com/50/v2-ccd869cdada64fb595d5e2c524180eba_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-ccd869cdada64fb595d5e2c524180eba_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书的整体质量实际一般，你当做参考书来看就好了!</p>
<p>相比于 《Spring Boot 实战》这本书，我更推荐国人写的 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/34894533/">《Spring Boot 实战派》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-347c02b27d1c8074dd6423c11c867b95_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-347c02b27d1c8074dd6423c11c867b95_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书使用的 Spring Boot 2.0+的版本，还算比较新。整本书采用“知识点+实例”的形式编写，书籍的最后两章还有 2 个综合性的企业实战项目：</p>
<ul>
<li>开发企业级通用的后台系统</li>
<li>实现一个类似“京东”的电子商务商城</li>
</ul>
<p>作者在注意实战的过程中还不忘记对于一些重要的基础知识的讲解。</p>
<p>如果你想专研 Spring Boot 底层原理的话，可以看看 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/33390560/">《Spring Boot 编程思想（核心篇）》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-2c3fd8e3b31d9020d78e49fac4ecb91a_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-2c3fd8e3b31d9020d78e49fac4ecb91a_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书稍微有点啰嗦，不过，原理介绍的比较清楚（不适合初学者）。</p>
<p>如果你比较喜欢看视频的话，推荐尚硅谷雷神的**<a href="https://link.zhihu.com/?target=https://www.bilibili.com/video/BV19K4y1L7MT">《2021 版 Spring Boot2 零基础入门》</a>** 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-8edcdf9da09d431d5a827737df1326f8_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-8edcdf9da09d431d5a827737df1326f8_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这可能是全网质量最高并且免费的 Spring Boot 教程了，好评爆炸！</p>
<p>另外，Spring Boot 这块还有很多优质的开源教程，我已经整理好放到 <a href="https://link.zhihu.com/?target=https://github.com/CodingDocs/awesome-java%23springboot">awesome-java@SpringBoot</a> 中了。</p>
<p><img src="https://pic4.zhimg.com/50/v2-bd98e686b9da09ebbe25bfc843364147_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-bd98e686b9da09ebbe25bfc843364147_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a><strong>Netty</strong></h2><p>但凡涉及到网络通信就必然必然离不开网络编程。 Netty 目前作为 Java 网络编程最热门的框架，毫不夸张地说是每个 Java 程序员必备的技能之一。</p>
<p><strong>为什么说学好 Netty 很有必要呢？</strong></p>
<ol>
<li>Netty 基于 NIO （NIO 是一种同步非阻塞的 I&#x2F;O 模型，在 Java 1.4 中引入了 NIO ）。使用 Netty 可以极大地简化并简化了 TCP 和 UDP 套接字服务器等网络编程,并且性能以及安全性等很多方面都非常优秀。</li>
<li>我们平常经常接触的 Dubbo、RocketMQ、Elasticsearch、gRPC、Spark、Elasticsearch 等等热门开源项目都用到了 Netty。</li>
<li>大部分微服务框架底层涉及到网络通信的部分都是基于 Netty 来做的，比如说 Spring Cloud 生态系统中的网关 Spring Cloud Gateway 。</li>
</ol>
<p>下面是一些比较推荐的书籍&#x2F;专栏。</p>
<p><strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/27038538/">《Netty 实战》</a></strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-8a4c942af44520f5d2c99c3d6f37b4dc_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-8a4c942af44520f5d2c99c3d6f37b4dc_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书可以用来入门 Netty ，内容从 BIO 聊到了 NIO、之后才详细介绍为什么有 Netty 、Netty 为什么好用以及 Netty 重要的知识点讲解。</p>
<p>这本书基本把 Netty 一些重要的知识点都介绍到了，而且基本都是通过实战的形式讲解。</p>
<p><strong>《Netty 进阶之路：跟着案例学 Netty》</strong></p>
<p><img src="https://pic4.zhimg.com/50/v2-214ed872bb89b37b2b3c06b4c8c022e5_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-214ed872bb89b37b2b3c06b4c8c022e5_720w.jpg?source=1940ef5c" alt="img"></p>
<p>内容都是关于使用 Netty 的实践案例比如内存泄露这些东西。如果你觉得你的 Netty 已经完全入门了，并且你想要对 Netty 掌握的更深的话，推荐你看一下这本书。</p>
<p><strong>《Netty 入门与实战：仿写微信 IM 即时通讯系统》</strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-31d3de0843d01caea292fc461ca00d55_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-31d3de0843d01caea292fc461ca00d55_720w.jpg?source=1940ef5c" alt="img"></p>
<p>通过一个基于 Netty 框架实现 IM 核心系统为引子，带你学习 Netty。整个小册的质量还是很高的，即使你没有 Netty 使用经验也能看懂。</p>
<h2 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a><strong>搜索引擎</strong></h2><p>搜索引擎用于提高搜索效率，功能和浏览器搜索引擎类似。比较常见的搜索引擎是 Elasticsearch（推荐） 和 Solr。</p>
<p>如果你要学习 Elasticsearch 的话，<a href="https://link.zhihu.com/?target=http://www.elasticsearch.cn/">Elastic 中文社区</a> 以及 <a href="https://link.zhihu.com/?target=https://www.elastic.co/cn/blog/">Elastic 官方博客</a> 都是非常不错的资源，上面会分享很多具体的实践案例。</p>
<p>除此之外，极客时间的<a href="https://link.zhihu.com/?target=http://gk.link/a/10bcT">《Elasticsearch 核心技术与实战》</a>这门课程非常赞！这门课基于 Elasticsearch 7.1 版本讲解，比较新。并且，作者是 eBay 资深技术专家，有 20 年的行业经验，课程质量有保障！</p>
<p><img src="https://pic1.zhimg.com/50/v2-057c22f1e83338a78f2e6b22e5da777d_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-057c22f1e83338a78f2e6b22e5da777d_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你想看书的话，可以考虑一下 《Elasticsearch 实战》 这本书。不过，需要说明的是，这本书中的 Elasticsearch 版本比较老，你可以将其作为一个参考书籍来看，有一些原理性的东西可以在上面找找答案。</p>
<p><img src="https://pic2.zhimg.com/50/v2-d2048059f45eac3a26001579c7826d8f_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-d2048059f45eac3a26001579c7826d8f_720w.jpg?source=1940ef5c" alt="img"></p>
<p>如果你想进一步深入研究 Elasticsearch 原理的话，可以看看张超老师的《Elasticsearch 源码解析与优化实战》这本书。这是市面上唯一一本写 Elasticsearch 源码的书。</p>
<p><img src="https://pic4.zhimg.com/50/v2-85d4049c868a55ecbc76ae6c329eaebf_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic4.zhimg.com/80/v2-85d4049c868a55ecbc76ae6c329eaebf_720w.jpg?source=1940ef5c" alt="img"></p>
<h2 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a><strong>分布式</strong></h2><p>下面我们开始学习分布式以及高并发、高可用了。</p>
<p>这块内容的话，对于每一个知识点没有特定的书籍。我就推荐 2 本我觉得还不错的书籍吧！这两把书籍基本把下面涉及到的知识点给涵盖了。</p>
<p>第一本是李运华老师的**<a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30335935/">《从零开始学架构》</a>** 。</p>
<p><img src="https://pic2.zhimg.com/50/v2-145c577cd6856daca487eec730ffc394_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-145c577cd6856daca487eec730ffc394_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这本书对应的有一个极客时间的专栏—<a href="https://link.zhihu.com/?target=http://gk.link/a/10pKZ">《从零开始学架构》</a>，里面的很多内容都是这个专栏里面的，两者买其一就可以了。</p>
<p>第二本是余老师的 <strong><a href="https://link.zhihu.com/?target=https://book.douban.com/subject/30443578/">《软件架构设计：大型网站技术架构与业务架构融合之道》</a></strong> 。</p>
<p><img src="https://pic1.zhimg.com/50/v2-fe7286730c9ea0f94196b5e9f1dd3e07_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-fe7286730c9ea0f94196b5e9f1dd3e07_720w.jpg?source=1940ef5c" alt="img"></p>
<p>事务与锁、分布式（CAP、分布式事务……）、高并发、高可用这本书都有介绍到。值得推荐！良心好书！</p>
<h3 id="理论"><a href="#理论" class="headerlink" title="理论"></a><strong>理论</strong></h3><h4 id="CAP-理论"><a href="#CAP-理论" class="headerlink" title="CAP 理论"></a><strong>CAP 理论</strong></h4><p>CAP 也就是 Consistency（一致性）、Availability（可用性）、Partition Tolerance（分区容错性） 这三个单词首字母组合。</p>
<p>关于 CAP 的详细解读请看：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/CAP%E7%90%86%E8%AE%BA">《CAP 理论解读》</a>。</p>
<h4 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a><strong>BASE 理论</strong></h4><p><strong>BASE</strong> 是 <strong>Basically Available（基本可用）</strong> 、<strong>Soft-state（软状态）</strong> 和 <strong>Eventually Consistent（最终一致性）</strong> 三个短语的缩写。BASE 理论是对 CAP 中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于 CAP 定理逐步演化而来的，它大大降低了我们对系统的要求。</p>
<p>关于 CAP 的详细解读请看：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/BASE%E7%90%86%E8%AE%BA">《BASE 理论解读》</a>。</p>
<h4 id="Paxos-算法和-Raft-算法"><a href="#Paxos-算法和-Raft-算法" class="headerlink" title="Paxos 算法和 Raft 算法"></a><strong>Paxos 算法和 Raft 算法</strong></h4><p><strong>Paxos 算法</strong>诞生于 1990 年，这是一种解决分布式系统一致性的经典算法 。但是，由于 Paxos 算法非常难以理解和实现，不断有人尝试简化这一算法。到了 2013 年才诞生了一个比 Paxos 算法更易理解和实现的分布式一致性算法—<strong>Raft 算法</strong>。</p>
<h3 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a><strong>RPC</strong></h3><p>RPC 让调用远程服务调用像调用本地方法那样简单。</p>
<p>Dubbo 是一款国产的 RPC 框架，由阿里开源。相关阅读：</p>
<ul>
<li><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/rpc/Dubbo">Dubbo 常见问题总结</a></li>
<li><a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/rpc/%E6%9C%8D%E5%8A%A1%E4%B9%8B%E9%97%B4%E7%9A%84%E8%B0%83%E7%94%A8%E4%B8%BA%E5%95%A5%E4%B8%8D%E7%9B%B4%E6%8E%A5%E7%94%A8HTTP%E8%80%8C%E7%94%A8RPC">服务之间的调用为啥不直接用 HTTP 而用 RPC？</a></li>
</ul>
<h4 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a><strong>服务注册与发现</strong></h4><p>Eureka、Zookeeper、Consul、Nacos 都可以提供服务注册与发现的功能。</p>
<p><img src="https://pic1.zhimg.com/50/v2-c5458b7d70c752fcaa3f42e1ee1aa2ea_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-c5458b7d70c752fcaa3f42e1ee1aa2ea_720w.jpg?source=1940ef5c" alt="img"></p>
<h3 id="API-网关"><a href="#API-网关" class="headerlink" title="API 网关"></a><strong>API 网关</strong></h3><p>网关主要用于请求转发、安全认证、协议转换、容灾。</p>
<p>SpringCloud Gateway 是 Spring Cloud 的一个全新项目，为了取代 Netflix Zuul。</p>
<h4 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a><strong>配置中心</strong></h4><p>微服务下，业务的发展一般会导致服务数量的增加，进而导致程序配置（服务地址、数据库参数等等）增多。</p>
<p>传统的配置文件的方式已经无法满足当前需求，主要有两点原因：一是安全性得不到保障（配置放在代码库中容易泄露）；二是时效性不行 （修改配置需要重启服务才能生效）。</p>
<p>Spring Cloud Config、Nacos 、Apollo、K8s ConfigMap 都可以用来做配置中心。</p>
<p>Apollo 和 Nacos 我个人更喜欢。Nacos 使用起来更加顺手，Apollo 在配置管理方面做的更加全面。</p>
<h3 id="分布式-id"><a href="#分布式-id" class="headerlink" title="分布式 id"></a><strong>分布式 id</strong></h3><p>日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。</p>
<p><img src="https://pic1.zhimg.com/50/v2-21c5fb2a333d04d70ccf2554e4a66995_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-21c5fb2a333d04d70ccf2554e4a66995_720w.jpg?source=1940ef5c" alt="img"></p>
<p>简单来说，<strong>ID 就是数据的唯一标识</strong>。</p>
<p>分布式 ID 是分布式系统下的 ID。分布式 ID 不存在与现实生活中，属于计算机系统中的一个概念。</p>
<p>我简单举一个分库分表的例子。</p>
<p>我司的一个项目，使用的是单机 MySQL 。但是，没想到的是，项目上线一个月之后，随着使用人数越来越多，整个系统的数据量将越来越大。</p>
<p>单机 MySQL 已经没办法支撑了，需要进行分库分表（推荐 Sharding-JDBC）。</p>
<p>在分库之后， 数据遍布在不同服务器上的数据库，数据库的自增主键已经没办法满足生成的主键唯一了。<strong>我们如何为不同的数据节点生成全局唯一主键呢？</strong></p>
<p><img src="https://pic1.zhimg.com/50/v2-1f699f3733924441f3707926da884744_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic1.zhimg.com/80/v2-1f699f3733924441f3707926da884744_720w.jpg?source=1940ef5c" alt="img"></p>
<p>这个时候就需要生成<strong>分布式 ID</strong>了。</p>
<p>分布式 ID 的解决方案有很多比如 ：</p>
<ul>
<li>算法 ：UUID、Snowflake</li>
<li>开源框架 ： UidGenerator、Leaf 、Tinyid</li>
</ul>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a><strong>分布式事务</strong></h3><p>微服务架构下，一个系统被拆分为多个小的微服务。</p>
<p>每个微服务都可能存在不同的机器上，并且每个微服务可能都有一个单独的数据库供自己使用。这种情况下，一组操作可能会涉及到多个微服务以及多个数据库。</p>
<p>举个例子：电商系统中，你创建一个订单往往会涉及到订单服务（订单数加一）、库存服务（库存减一）等等服务，这些服务会有供自己单独使用的数据库。</p>
<p><img src="https://pic2.zhimg.com/50/v2-feaa7d9765154fa367bc008444d208c3_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-feaa7d9765154fa367bc008444d208c3_720w.jpg?source=1940ef5c" alt="img"></p>
<p><strong>那么如何保证这一组操作要么都执行成功，要么都执行失败呢？</strong></p>
<p>这个时候单单依靠数据库事务就不行了！我们就需要引入 <strong>分布式事务</strong> 这个概念了！</p>
<p>常用分布式事务解决方案有 Seata 和 Hmily。</p>
<ol>
<li><strong><a href="https://link.zhihu.com/?target=https://seata.io/zh-cn/index.html">Seata</a></strong> :Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://gitee.com/shuaiqiyu/hmily">Hmily</a></strong> : 金融级分布式事务解决方案</li>
</ol>
<h3 id="分布式链路追踪"><a href="#分布式链路追踪" class="headerlink" title="分布式链路追踪"></a><strong>分布式链路追踪</strong></h3><p>不同于单体架构，在分布式架构下，请求需要在多个服务之间调用，排查问题会非常麻烦。我们需要分布式链路追踪系统来解决这个痛点。</p>
<p>目前分布式链路追踪系统基本都是根据谷歌的《Dapper 大规模分布式系统的跟踪系统》这篇论文发展而来，主流的有 Pinpoint，Skywalking ，CAT（当然也有其他的例如 Zipkin，Jaeger 等产品，不过总体来说不如前面选取的 3 个完成度高）等。</p>
<p>Zipkin 是 Twitter 公司开源的一个分布式链路追踪工具，Spring Cloud Sleuth 实际是基于 Zipkin 的。</p>
<p>SkyWalking 是国人吴晟（华为）开源的一款分布式追踪，分析，告警的工具，现在是 Apache 旗下开源项目</p>
<h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a><strong>微服务</strong></h2><p>微服务的很多东西实际在分布式这一节已经提到了。</p>
<p>我这里就再补充一些微服务架构中，经常使用到的一些组件。</p>
<ul>
<li><strong>声明式服务调用</strong> : Feign</li>
<li><strong>负载均衡</strong> : Ribbon</li>
<li>……</li>
</ul>
<h3 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a><strong>高并发</strong></h3><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a><strong>消息队列</strong></h4><p><img src="https://pic2.zhimg.com/50/v2-4903cf7307350d41a16d0277112d5424_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-4903cf7307350d41a16d0277112d5424_720w.jpg?source=1940ef5c" alt="img"></p>
<p>消息队列在分布式系统中主要是为了解耦和削峰。相关阅读：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/distributed-system/message-queue/message-queue">消息队列常见问题总结</a>。</p>
<p>常用的消息队列如下：</p>
<ol>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/apache/rocketmq">RocketMQ</a></strong> ：阿里巴巴开源的一款高性能、高吞吐量的分布式消息中间件。</li>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/apache/kafka">Kafaka</a></strong>: Kafka 是一种分布式的，基于发布 &#x2F; 订阅的消息系统。关于它的入门可以查看：<a href="https://link.zhihu.com/?target=https://github.com/Snailclimb/JavaGuide/blob/master/docs/system-design/data-communication/Kafka%E5%85%A5%E9%97%A8%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86.md">Kafka 入门看这一篇就够了</a></li>
<li><strong><a href="https://link.zhihu.com/?target=https://github.com/rabbitmq">RabbitMQ</a></strong> :由 erlang 开发的基于 AMQP（Advanced Message Queue 高级消息队列协议）协议实现的消息队列。</li>
</ol>
<h3 id="读写分离-amp-分库分表"><a href="#读写分离-amp-分库分表" class="headerlink" title="读写分离&amp;分库分表"></a><strong>读写分离&amp;分库分表</strong></h3><p>读写分离主要是为了将数据库的读和写操作分不到不同的数据库节点上。主服务器负责写，从服务器负责读。另外，一主一从或者一主多从都可以。</p>
<p>读写分离可以大幅提高读性能，小幅提高写的性能。因此，读写分离更适合单机并发读请求比较多的场景。</p>
<p><img src="https://pic3.zhimg.com/50/v2-36f2ed6de6018bb4cebab32623373864_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic3.zhimg.com/80/v2-36f2ed6de6018bb4cebab32623373864_720w.jpg?source=1940ef5c" alt="img"></p>
<p>分库分表是为了解决由于库、表数据量过大，而导致数据库性能持续下降的问题。</p>
<p>常见的分库分表工具有：sharding-jdbc（当当）、TSharding（蘑菇街）、MyCAT（基于 Cobar）、Cobar（阿里巴巴）…。 推荐使用 sharding-jdbc。 因为，sharding-jdbc 是一款轻量级 Java 框架，以 jar 包形式提供服务，不要我们做额外的运维工作，并且兼容性也很好。</p>
<p><img src="https://pic2.zhimg.com/50/v2-635a97b84f0e3b718b1cfdc61a0bbe08_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/v2-635a97b84f0e3b718b1cfdc61a0bbe08_720w.jpg?source=1940ef5c" alt="img"></p>
<p>相关阅读： <a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/%E8%AF%BB%E5%86%99%E5%88%86%E7%A6%BB&%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8">读写分离&amp;分库分表常见问题总结</a></p>
<h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a><strong>负载均衡</strong></h3><p>负载均衡系统通常用于将任务比如用户请求处理分配到多个服务器处理以提高网站、应用或者数据库的性能和可靠性。</p>
<p>常见的负载均衡系统包括 3 种：</p>
<ol>
<li><strong>DNS 负载均衡</strong> ：一般用来实现地理级别的均衡。</li>
<li><strong>硬件负载均衡</strong> ： 通过单独的硬件设备比如 F5 来实现负载均衡功能（硬件的价格一般很贵）。</li>
<li><strong>软件负载均衡</strong> ：通过负载均衡软件比如 Nginx 来实现负载均衡功能。</li>
</ol>
<h2 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a><strong>高可用</strong></h2><p>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的 。</p>
<p>相关阅读： <strong>《<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/high-availability/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E8%A6%81%E8%80%83%E8%99%91%E5%93%AA%E4%BA%9B%E5%9C%B0%E6%96%B9">如何设计一个高可用系统？要考虑哪些地方？</a>》</strong> 。</p>
<h3 id="限流-amp-降级-amp-熔断"><a href="#限流-amp-降级-amp-熔断" class="headerlink" title="限流&amp;降级&amp;熔断"></a><strong>限流&amp;降级&amp;熔断</strong></h3><p>限流是从用户访问压力的角度来考虑如何应对系统故障。限流为了对服务端的接口接受请求的频率进行限制，防止服务挂掉。比如某一接口的请求限制为 100 个每秒, 对超过限制的请求放弃处理或者放到队列中等待处理。限流可以有效应对突发请求过多。相关阅读：<a href="https://link.zhihu.com/?target=https://snailclimb.gitee.io/javaguide/%23/docs/system-design/high-availability/limit-request">限流算法有哪些？</a></p>
<p>降级是从系统功能优先级的角度考虑如何应对系统故障。服务降级指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</p>
<p>熔断和降级是两个比较容易混淆的概念，两者的含义并不相同。</p>
<p>降级的目的在于应对系统自身的故障，而熔断的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/Netflix/Hystrix">Hystrix</a> 和 <a href="https://link.zhihu.com/?target=https://github.com/alibaba/Sentinel">Sentinel</a> 都能实现限流、降级、熔断。</p>
<p>Hystrix 是 Netflix 开源的熔断降级组件，Sentinel 是阿里中间件团队开源的一款不光具有熔断降级功能，同时还支持系统负载保护的组件。</p>
<p>两者都是主要做熔断降级 ，那么两者到底有啥异同呢？该如何选择呢？</p>
<p><a href="https://link.zhihu.com/?target=https://github.com/alibaba/Sentinel/wiki/Sentinel-%E4%B8%8E-Hystrix-%E7%9A%84%E5%AF%B9%E6%AF%94">Sentinel 的 wiki 中已经详细描述了其与 Hystrix 的区别</a>，你可以看看。</p>
<h3 id="排队"><a href="#排队" class="headerlink" title="排队"></a><strong>排队</strong></h3><p>另类的一种限流，类比于现实世界的排队。玩过英雄联盟的小伙伴应该有体会，每次一有活动，就要经历一波排队才能进入游戏。</p>
<h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a><strong>集群</strong></h3><p>相同的服务部署多份，避免单点故障。</p>
<h3 id="超时和重试机制"><a href="#超时和重试机制" class="headerlink" title="超时和重试机制"></a><strong>超时和重试机制</strong></h3><p><strong>一旦用户的请求超过某个时间得不到响应就结束此次请求并抛出异常。</strong> 如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法在处理请求。</p>
<h4 id="另外，重试的次数一般设为-3-次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。"><a href="#另外，重试的次数一般设为-3-次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。" class="headerlink" title="另外，重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。"></a>另外，重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。</h4>]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>动态规划设计之最长递增子序列</title>
    <url>/posts/117b65dd/</url>
    <content><![CDATA[<h1 id="动态规划设计之最长递增子序列"><a href="#动态规划设计之最长递增子序列" class="headerlink" title="动态规划设计之最长递增子序列"></a>动态规划设计之最长递增子序列</h1><h2 id="预计阅读时间：-9-分钟"><a href="#预计阅读时间：-9-分钟" class="headerlink" title="预计阅读时间： 9 分钟"></a>预计阅读时间： 9 分钟</h2><p>很多读者反应，就算看了前文 <a href="http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247483818&idx=1&sn=6035f861d1b2bfd0178e842f26ac4836&chksm=fb3361e8cc44e8fe331154bfd32bd7b3b4f159bfad5d38d4a6b0b9f0d7e3485b93b828ee72cc&scene=21#wechat_redirect">动态规划详解</a>，了解了动态规划的套路，也不会写状态转移方程，没有思路，怎么办？本文就借助「最长递增子序列」来讲一种设计动态规划的通用技巧：数学归纳思想。</p>
<p>最长递增子序列（Longest Increasing Subsequence，简写 LIS）是比较经典的一个问题，比较容易想到的是动态规划解法，时间复杂度 O(N^2)，我们借这个问题来由浅入深讲解如何写动态规划。</p>
<p>比较难想到的是利用二分查找，时间复杂度是 O(NlogN)，我们通过一种简单的纸牌游戏来辅助理解这种巧妙的解法。</p>
<p>先看一下题目，很容易理解：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/MEAMGr_20210715222744.png" alt="图片"></p>
<p>注意「子序列」和「子串」这两个名词的区别，子串一定是连续的，而子序列不一定是连续的。下面先来一步一步设计动态规划算法解决这个问题。</p>
<h2 id="一、动态规划解法"><a href="#一、动态规划解法" class="headerlink" title="一、动态规划解法"></a>一、动态规划解法</h2><p><strong>动态规划的核心设计思想是数学归纳法。</strong></p>
<p>相信大家对数学归纳法都不陌生，高中就学过，而且思路很简单。比如我们想证明一个数学结论，那么我们先假设这个结论在 k&lt;n 时成立，然后想办法证明 k&#x3D;<em>n</em> 的时候此结论也成立。如果能够证明出来，那么就说明这个结论对于 k 等于任何数都成立。</p>
<p>类似的，我们设计动态规划算法，不是需要一个 dp 数组吗？我们可以假设 <em>dp</em>[0…<em>i</em>−1] 都已经被算出来了，然后问自己：怎么通过这些结果算出<em>dp[i] ?</em></p>
<p>直接拿最长递增子序列这个问题举例你就明白了。不过，首先要定义清楚 dp 数组的含义，即 dp[i] 的值到底代表着什么？</p>
<p><strong>我们的定义是这样的：****dp[i] 表示以 nums[i] 这个数结尾的最长递增子序列的长度。</strong></p>
<p>举个例子：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/S9DvIE_20210715222829.png" alt="图片"></p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/vrYoH4_20210715222841.png" alt="图片"></p>
<p>算法演进的过程是这样的：<img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/640_20210715222950.gif" alt="图片"></p>
<p>根据这个定义，我们的最终结果（子序列的最大长度）应该是 dp 数组中的最大值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">    res = Math.max(res, dp[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure>



<p>读者也许会问，刚才这个过程中每个 dp[i] 的结果是我们肉眼看出来的，我们应该怎么设计算法逻辑来正确计算每个 dp[i] 呢？</p>
<p>这就是动态规划的重头戏了，要思考如何进行状态转移，这里就可以使用数学归纳的思想：</p>
<p>我们已经知道了 <em>d**p</em>[0…4] 的所有结果，我们如何通过这些已知结果推出 <em>d**p</em>[5] 呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/xpC5LY_20210715223016.png" alt="图片"></p>
<p>根据刚才我们对 dp 数组的定义，现在想求 dp[5] 的值，也就是想求以 nums[5] 为结尾的最长递增子序列。</p>
<p>nums[5] &#x3D; 3，既然是递增子序列，我们只要找到前面那些结尾比 3 小的子序列，然后把 3 接到最后，就可以形成一个新的递增子序列，而且这个新的子序列长度加一。</p>
<p>当然，可能形成很多种新的子序列，但是我们只要最长的，把最长子序列的长度作为 dp[5] 的值即可。</p>
<p>![图片](<a href="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/640">https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/640</a> (1)_20210715223303.gif)</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/QksgN5_20210715223039.png" alt="图片"></p>
<p>这段代码的逻辑就可以算出 dp[5]。到这里，这道算法题我们就基本做完了。读者也许会问，我们刚才只是算了 dp[5] 呀，dp[4], dp[3] 这些怎么算呢？</p>
<p>类似数学归纳法，你已经可以通过 dp[0…4] 算出 dp[5] 了，那么任意 dp[i] 你肯定都可以算出来：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/9CYook_20210715223056.png" alt="图片"></p>
<p>还有一个细节问题，就是 base case。dp 数组应该全部初始化为 1，因为子序列最少也要包含自己，所以长度最小为 1。下面我们看一下完整代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210715223113307_20210715223113.png" alt="图片"></p>
<p>至此，这道题就解决了，时间复杂度 O(N^2)。总结一下动态规划的设计流程：</p>
<p>首先明确 dp 数组所存数据的含义。这步很重要，如果不得当或者不够清晰，会阻碍之后的步骤。</p>
<p>然后根据 dp 数组的定义，运用数学归纳法的思想，假设 <em>d**p</em>[0…<em>i</em>−1] 都已知，想办法求出 <em>d**p</em>[<em>i</em>]，一旦这一步完成，整个题目基本就解决了。</p>
<p>但如果无法完成这一步，很可能就是 dp 数组的定义不够恰当，需要重新定义 dp 数组的含义；或者可能是 dp 数组存储的信息还不够，不足以推出下一步的答案，需要把 dp 数组扩大成二维数组甚至三维数组。</p>
<h2 id="二、二分查找解法"><a href="#二、二分查找解法" class="headerlink" title="二、二分查找解法"></a>二、二分查找解法</h2><p>这个解法的时间复杂度会将为 O(NlogN)，但是说实话，正常人基本想不到这种解法（也许玩过某些纸牌游戏的人可以想出来）。所以如果大家了解一下就好，正常情况下能够给出动态规划解法就已经很不错了。</p>
<p>根据题目的意思，我都很难想象这个问题竟然能和二分查找扯上关系。其实最长递增子序列和一种叫做 patience game 的纸牌游戏有关，甚至有一种排序方法就叫做 patience sorting（耐心排序）。</p>
<p>为了简单起见，后文跳过所有数学证明，通过一个简化的例子来理解一下思路。</p>
<p>首先，给你一排扑克牌，我们像遍历数组那样从左到右一张一张处理这些扑克牌，最终要把这些牌分成若干堆。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/DFBLV6_20210715223123.png" alt="图片"></p>
<p>处理这些扑克牌要遵循以下规则：</p>
<p>只能把点数小的牌压到点数比它大的牌上。如果当前牌点数较大没有可以放置的堆，则新建一个堆，把这张牌放进去。如果当前牌有多个堆可供选择，则选择最左边的堆放置。</p>
<p>比如说上述的扑克牌最终会被分成这样 5 堆（我们认为 A 的值是最大的，而不是 1）。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210715223138612_20210715223138.png" alt="图片"></p>
<p>为什么遇到多个可选择堆的时候要放到最左边的堆上呢？因为这样可以保证牌堆顶的牌有序（2, 4, 7, 8, Q），证明略。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Cnd9HF_20210715223145.png" alt="图片"></p>
<p>按照上述规则执行，可以算出最长递增子序列，牌的堆数就是我们想求的最长递增子序列的长度，证明略。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/8SHDGY_20210715223158.png" alt="图片"></p>
<p>我们只要把处理扑克牌的过程编程写出来即可。每次处理一张扑克牌不是要找一个合适的牌堆顶来放吗，牌堆顶的牌不是有序吗，这就能用到二分查找了：用二分查找来搜索当前牌应放置的位置。</p>
<p>PS：旧文 <a href="http://mp.weixin.qq.com/s?__biz=MzU0MDg5OTYyOQ==&mid=2247484090&idx=1&sn=5635cf1c4fd8a8570b63c7ae9b4304c2&chksm=fb3362f8cc44ebee0a19a4cfba7f2e13923e05f47e15f2e99a1f42b01aeee83b946aceac3d4c&scene=21#wechat_redirect">二分查找算法详解</a> 详细介绍了二分查找的细节及变体，这里就完美应用上了。如果没读过强烈建议阅读。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/f6Golz_20210715223219.png" alt="图片"></p>
<p>至此，二分查找的解法也讲解完毕。</p>
<p>这个解法确实很难想到。首先涉及数学证明，谁能想到按照这些规则执行，就能得到最长递增子序列呢？其次还有二分查找的运用，要是对二分查找的细节不清楚，给了思路也很难写对。</p>
<p>所以，这个方法作为思维拓展好了。但动态规划的设计方法应该完全理解：假设之前的答案已知，利用数学归纳的思想正确进行状态的推演转移，最终得到答案。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法团灭排列组合子集问题</title>
    <url>/posts/6e5dcbe0/</url>
    <content><![CDATA[<h1 id="回溯算法团灭排列-x2F-组合-x2F-子集问题"><a href="#回溯算法团灭排列-x2F-组合-x2F-子集问题" class="headerlink" title="回溯算法团灭排列&#x2F;组合&#x2F;子集问题"></a>回溯算法团灭排列&#x2F;组合&#x2F;子集问题</h1><h2 id="回溯算法团灭排列-x2F-组合-x2F-子集问题-1"><a href="#回溯算法团灭排列-x2F-组合-x2F-子集问题-1" class="headerlink" title="回溯算法团灭排列&#x2F;组合&#x2F;子集问题"></a>回溯算法团灭排列&#x2F;组合&#x2F;子集问题</h2><h2 id="预计阅读时间：7-分钟"><a href="#预计阅读时间：7-分钟" class="headerlink" title="预计阅读时间：7 分钟"></a>预计阅读时间：7 分钟</h2><p>今天就来聊三道考察频率高，而且容易让人搞混的算法问题，分别是求子集（subset），求排列（permutation），求组合（combination）。这几个问题都可以用回溯算法解决。</p>
<h3 id="一、子集"><a href="#一、子集" class="headerlink" title="一、子集"></a>一、子集</h3><p>问题很简单，输入一个<strong>不包含重复数字</strong>的数组，要求算法输出这些数字的所有子集。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">subsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span>;</span><br></pre></td></tr></table></figure>

<p>比如输入 <code>nums = [1,2,3]</code>，你的算法应输出 8 个子集，包含空集和本身，顺序可以不同：</p>
<p>[ [],[1],[2],[3],[1,3],[2,3],[1,2],[1,2,3] ]</p>
<p><strong>第一个解法是利用数学归纳的思想</strong>：假设我现在知道了规模更小的子问题的结果，如何推导出当前问题的结果呢？</p>
<p>具体来说就是，现在让你求 <code>[1,2,3]</code> 的子集，如果你知道了 <code>[1,2]</code> 的子集，是否可以推导出 <code>[1,2,3]</code> 的子集呢？先把  <code>[1,2]</code> 的子集写出来瞅瞅：</p>
<p>[ [],[1],[2],[1,2] ]</p>
<p>你会发现这样一个规律：</p>
<p>subset(<code>[1,2,3]</code>) - subset(<code>[1,2]</code>)</p>
<p>&#x3D; [3],[1,3],[2,3],[1,2,3]</p>
<p>而这个结果，就是把 sebset(<code>[1,2]</code>) 的结果中每个集合再添加上 3。</p>
<p>换句话说，如果 <code>A = subset([1,2])</code> ，那么：</p>
<p>subset(<code>[1,2,3]</code>)</p>
<p>&#x3D; A + [A[i].add(3) for i &#x3D; 1..len(A)]</p>
<p>这就是一个典型的递归结构嘛，<code>[1,2,3]</code> 的子集可以由 <code>[1,2]</code> 追加得出，<code>[1,2]</code> 的子集可以由 <code>[1]</code> 追加得出，base case 显然就是当输入集合为空集时，输出子集也就是一个空集。</p>
<p>翻译成代码就很容易理解了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">subsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    <span class="comment">// base case，返回一个空集</span></span><br><span class="line">    <span class="keyword">if</span> (nums.empty()) <span class="keyword">return</span> &#123;&#123;&#125;&#125;;</span><br><span class="line">    <span class="comment">// 把最后一个元素拿出来</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.back();</span><br><span class="line">    nums.pop_back();</span><br><span class="line">    <span class="comment">// 先递归算出前面元素的所有子集</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res = subsets(nums);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> res.size();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="comment">// 然后在之前的结果之上追加</span></span><br><span class="line">        res.push_back(res[i]);</span><br><span class="line">        res.back().push_back(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>这个问题的时间复杂度计算比较容易坑人</strong>。我们之前说的计算递归算法时间复杂度的方法，是找到递归深度，然后乘以每次递归中迭代的次数。对于这个问题，递归深度显然是 N，但我们发现每次递归 for 循环的迭代次数取决于 <code>res</code> 的长度，并不是固定的。</p>
<p>根据刚才的思路，<code>res</code> 的长度应该是每次递归都翻倍，所以说总的迭代次数应该是 2^N。或者不用这么麻烦，你想想一个大小为 N 的集合的子集总共有几个？2^N 个对吧，所以说至少要对 <code>res</code> 添加 2^N 次元素。</p>
<p>那么算法的时间复杂度就是 O(2^N) 吗？还是不对，2^N 个子集是 <code>push_back</code> 添加进 <code>res</code> 的，所以要考虑 <code>push_back</code> 这个操作的效率：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res = ...</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    res.push_back(res[i]); <span class="comment">// O(N)</span></span><br><span class="line">    res.back().push_back(n); <span class="comment">// O(1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为 <code>res[i]</code> 也是一个数组呀，<code>push_back</code> 是把 <code>res[i]</code> copy 一份然后添加到数组的最后，所以一次操作的时间是 O(N)。</p>
<p>综上，总的时间复杂度就是 O(N*2^N)，还是比较耗时的。</p>
<p>空间复杂度的话，如果不计算储存返回结果所用的空间的，只需要 O(N) 的递归堆栈空间。如果计算 <code>res</code> 所需的空间，应该是 O(N*2^N)。</p>
<p><strong>第二种通用方法就是回溯算法</strong>。旧文「回溯算法详解」写过回溯算法的模板：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">result = []</span><br><span class="line">def <span class="title function_">backtrack</span><span class="params">(路径, 选择列表)</span>:</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">for</span> 选择 in 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<p>只要改造回溯算法的模板就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">subsets</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 记录走过的路径</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; track;</span><br><span class="line">    backtrack(nums, <span class="number">0</span>, track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> start, vector&lt;<span class="type">int</span>&gt;&amp; track)</span> &#123;</span><br><span class="line">    res.push_back(track);</span><br><span class="line">    <span class="comment">// 注意 i 从 start 开始递增</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; nums.size(); i++) &#123;</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.push_back(nums[i]);</span><br><span class="line">        <span class="comment">// 回溯</span></span><br><span class="line">        backtrack(nums, i + <span class="number">1</span>, track);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看见，对 <code>res</code> 的更新是一个<strong>前序遍历</strong>，也就是说，<code>res</code> 就是树上的所有节点：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/sULT7a_20210507182400.png" alt="图片"></p>
<h3 id="二、组合"><a href="#二、组合" class="headerlink" title="二、组合"></a>二、组合</h3><p>输入两个数字 <code>n, k</code>，算法输出 <code>[1..n]</code> 中 k 个数字的所有组合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span>;</span><br></pre></td></tr></table></figure>

<p>比如输入 <code>n = 4, k = 2</code>，输出如下结果，顺序无所谓，但是不能包含重复（按照组合的定义，<code>[1,2]</code> 和 <code>[2,1]</code> 也算重复）：</p>
<p>[<br> [1,2],<br> [1,3],<br> [1,4],<br> [2,3],<br> [2,4],<br> [3,4]<br>]</p>
<p>这就是典型的回溯算法，<code>k</code> 限制了树的高度，<code>n</code> 限制了树的宽度，直接套我们以前讲过的回溯算法模板框架就行了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/y3DT6L_20210507182421.png" alt="图片"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;res;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (k &lt;= <span class="number">0</span> || n &lt;= <span class="number">0</span>) <span class="keyword">return</span> res;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; track;</span><br><span class="line">    backtrack(n, k, <span class="number">1</span>, track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start, vector&lt;<span class="type">int</span>&gt;&amp; track)</span> &#123;</span><br><span class="line">    <span class="comment">// 到达树的底部</span></span><br><span class="line">    <span class="keyword">if</span> (k == track.size()) &#123;</span><br><span class="line">        res.push_back(track);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 注意 i 从 start 开始递增</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.push_back(i);</span><br><span class="line">        backtrack(n, k, i + <span class="number">1</span>, track);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        track.pop_back();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>backtrack</code> 函数和计算子集的差不多，<strong>区别在于，更新 <code>res</code> 的地方是树的底端</strong>。</p>
<h3 id="三、排列"><a href="#三、排列" class="headerlink" title="三、排列"></a>三、排列</h3><p>输入一个不包含重复数字的数组 <code>nums</code>，返回这些数字的全部排列。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">permute</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span>;</span><br></pre></td></tr></table></figure>

<p>比如说输入数组 <code>[1,2,3]</code>，输出结果应该如下，顺序无所谓，不能有重复：</p>
<p>[<br> [1,2,3],<br> [1,3,2],<br> [2,1,3],<br> [2,3,1],<br> [3,1,2],<br> [3,2,1]<br>]</p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484709&idx=1&sn=1c24a5c41a5a255000532e83f38f2ce4&chksm=9bd7fb2daca0723be888b30345e2c5e64649fc31a00b05c27a0843f349e2dd9363338d0dac61&scene=21#wechat_redirect">回溯算法详解</a> 中就是拿这个问题来解释回溯模板的。这里又列出这个问题，是将「排列」和「组合」这两个回溯算法的代码拿出来对比。</p>
<p>首先画出回溯树来看一看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/uRIb5X_20210507182434.png" alt="图片"></p>
<p>我们当时使用 Java 代码写的解法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主函数，输入一组不重复的数字，返回它们的全排列 */</span></span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="comment">// 记录「路径」</span></span><br><span class="line">    LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">    backtrack(nums, track);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> &#123;</span><br><span class="line">    <span class="comment">// 触发结束条件</span></span><br><span class="line">    <span class="keyword">if</span> (track.size() == nums.length) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> <span class="title class_">LinkedList</span>(track));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 排除不合法的选择</span></span><br><span class="line">        <span class="keyword">if</span> (track.contains(nums[i]))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        track.add(nums[i]);</span><br><span class="line">        <span class="comment">// 进入下一层决策树</span></span><br><span class="line">        backtrack(nums, track);</span><br><span class="line">        <span class="comment">// 取消选择</span></span><br><span class="line">        track.removeLast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回溯模板依然没有变，但是根据排列问题和组合问题画出的树来看，排列问题的树比较对称，而组合问题的树越靠右节点越少。</p>
<p>在代码中的体现就是，排列问题每次通过 <code>contains</code> 方法来排除在 <code>track</code> 中已经选择过的数字；而组合问题通过传入一个 <code>start</code> 参数，来排除 <code>start</code> 索引之前的数字。</p>
<p><strong>以上，就是排列组合和子集三个问题的解法，总结一下</strong>：</p>
<p>子集问题可以利用数学归纳思想，假设已知一个规模较小的问题的结果，思考如何推导出原问题的结果。也可以用回溯算法，要用 <code>start</code> 参数排除已选择的数字。</p>
<p>组合问题利用的是回溯思想，结果可以表示成树结构，我们只要套用回溯算法模板即可，关键点在于要用一个 <code>start</code> 排除已经选择过的数字。</p>
<p>排列问题是回溯思想，也可以表示成树结构套用算法模板，不同之处在于使用 <code>contains</code> 方法排除已经选择的数字，前文有详细分析，这里主要是和组合问题作对比。</p>
<p>对于这三个问题，关键区别在于回溯树的结构，不妨多观察递归树的结构，很自然就可以理解代码的含义了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯算法和动态规划，到底谁是谁爹</title>
    <url>/posts/e775a8f2/</url>
    <content><![CDATA[<h1 id="回溯算法和动态规划，到底谁是谁爹？"><a href="#回溯算法和动态规划，到底谁是谁爹？" class="headerlink" title="回溯算法和动态规划，到底谁是谁爹？"></a>回溯算法和动态规划，到底谁是谁爹？</h1><p>我们前文经常说回溯算法和递归算法有点类似，有的问题如果实在想不出状态转移方程，尝试用回溯算法暴力解决也是一个聪明的策略，总比写不出来解法强。</p>
<p>那么，回溯算法和动态规划到底是啥关系？它俩都涉及递归，算法模板看起来还挺像的，都涉及做「选择」，真的酷似父与子。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/RGwzua_20210422224714.png" alt="图片"></p>
<p>那么，它俩具体有啥区别呢？回溯算法和动态规划之间，是否可能互相转化呢？</p>
<p>今天就用力扣第 494 题「目标和」来详细对比一下回溯算法和动态规划，真可谓群魔乱舞：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/fMFTnw_20210422224839.png" alt="图片"></p>
<p>注意，给出的例子 <code>nums</code> 全是 1，但实际上可以是任意正整数哦。</p>
<h2 id="一、回溯思路"><a href="#一、回溯思路" class="headerlink" title="一、回溯思路"></a>一、回溯思路</h2><p>其实我第一眼看到这个题目，花了两分钟就写出了一个回溯解法。</p>
<p>任何算法的核心都是穷举，回溯算法就是一个暴力穷举算法，前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484709&idx=1&sn=1c24a5c41a5a255000532e83f38f2ce4&chksm=9bd7fb2daca0723be888b30345e2c5e64649fc31a00b05c27a0843f349e2dd9363338d0dac61&scene=21#wechat_redirect">回溯算法解题框架</a> 就写了回溯算法框架：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">backtrack</span>(<span class="params">路径, 选择列表</span>):</span><br><span class="line">    <span class="keyword">if</span> 满足结束条件:</span><br><span class="line">        result.add(路径)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> 选择 <span class="keyword">in</span> 选择列表:</span><br><span class="line">        做选择</span><br><span class="line">        backtrack(路径, 选择列表)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<p>关键就是搞清楚什么是「选择」，而对于这道题，「选择」不是明摆着的吗？</p>
<p>**对于每个数字 <code>nums[i]</code>，我们可以选择给一个正号 <code>+</code> 或者一个负号 <code>-</code>**，然后利用回溯模板穷举出来所有可能的结果，数一数到底有几种组合能够凑出 <code>target</code> 不就行了嘛？</p>
<p>伪码思路如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">backtrack</span><span class="params">(nums, i)</span>:</span><br><span class="line">    <span class="type">if</span> <span class="variable">i</span> <span class="operator">=</span>= len(nums):</span><br><span class="line">        <span class="keyword">if</span> 达到 target:</span><br><span class="line">            result += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> op in &#123; +<span class="number">1</span>, -<span class="number">1</span> &#125;:</span><br><span class="line">        选择 op * nums[i]</span><br><span class="line">        # 穷举 nums[i + <span class="number">1</span>] 的选择</span><br><span class="line">        backtrack(nums, i + <span class="number">1</span>)</span><br><span class="line">        撤销选择</span><br></pre></td></tr></table></figure>

<p>如果看过我们之前的几篇回溯算法文章，这个代码可以说是比较简单的了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主函数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    backtrack(nums, <span class="number">0</span>, target);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 回溯算法模板 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (i == nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明恰好凑出 target</span></span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 给 nums[i] 选择 - 号</span></span><br><span class="line">    rest += nums[i];</span><br><span class="line">    <span class="comment">// 穷举 nums[i + 1]</span></span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>, rest);</span><br><span class="line">    <span class="comment">// 撤销选择</span></span><br><span class="line">    rest -= nums[i]; </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给 nums[i] 选择 + 号</span></span><br><span class="line">    rest -= nums[i];</span><br><span class="line">    <span class="comment">// 穷举 nums[i + 1]</span></span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>, rest);</span><br><span class="line">    <span class="comment">// 撤销选择</span></span><br><span class="line">    rest += nums[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有的读者可能问，选择 <code>-</code> 的时候，为什么是 <code>rest += nums[i]</code>，选择 <code>+</code> 的时候，为什么是 <code>rest -= nums[i]</code> 呢，是不是写反了？</p>
<p>不是的，「如何凑出 <code>target</code>」和「如何把 <code>target</code> 减到 0」其实是一样的。我们这里选择后者，因为前者必须给 <code>backtrack</code> 函数多加一个参数，我觉得不美观：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> sum, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (i == nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            result++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因此，如果我们给 <code>nums[i]</code> 选择 <code>+</code> 号，就要让 <code>rest - nums[i]</code>，反之亦然。</p>
<p>以上回溯算法可以解决这个问题，时间复杂度为 <code>O(2^N)</code>，<code>N</code> 为 <code>nums</code> 的大小。这个复杂度怎么算的？回忆前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484852&idx=1&sn=85b50b8b0470bb4897e517955f4e5002&chksm=9bd7fbbcaca072aa75e2a241064a403fde1e579d57ab846cd8537a54253ceb2c8b93cc3bf38e&scene=21#wechat_redirect">学习数据结构和算法的框架思维</a>，发现这个回溯算法就是个二叉树的遍历问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>, rest - nums[i]);</span><br><span class="line">    backtrack(nums, i + <span class="number">1</span>, rest + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>树的高度就是 <code>nums</code> 的长度嘛，所以说时间复杂度就是这棵二叉树的节点数，为 <code>O(2^N)</code>，其实是非常低效的。</p>
<p>那么，这个问题如何用动态规划思想进行优化呢？</p>
<h2 id="二、消除重叠子问题"><a href="#二、消除重叠子问题" class="headerlink" title="二、消除重叠子问题"></a>二、消除重叠子问题</h2><p>动态规划之所以比暴力算法快，是因为动态规划技巧消除了重叠子问题。</p>
<p>如何发现重叠子问题？看是否可能出现重复的「状态」。对于递归函数来说，函数参数中会变的参数就是「状态」，对于 <code>backtrack</code> 函数来说，会变的参数为 <code>i</code> 和 <code>rest</code>。</p>
<p>前文 动态规划之编辑距离 说了一种一眼看出重叠子问题的方法，先抽象出递归框架：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">    backtrack(i + <span class="number">1</span>, rest - nums[i]);</span><br><span class="line">    backtrack(i + <span class="number">1</span>, rest + nums[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个简单的例子，如果 <code>nums[i] = 0</code>，会发生什么？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">    backtrack(i + <span class="number">1</span>, rest);</span><br><span class="line">    backtrack(i + <span class="number">1</span>, rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>你看，这样就出现了两个「状态」完全相同的递归函数，无疑这样的递归计算就是重复的。<strong>这就是重叠子问题，而且只要我们能够找到一个重叠子问题，那一定还存在很多的重叠子问题</strong>。</p>
<p>因此，状态 <code>(i, rest)</code> 是可以用备忘录技巧进行优化的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dp(nums, <span class="number">0</span>, target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 备忘录</span></span><br><span class="line">HashMap&lt;String, Integer&gt; memo = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">int</span> <span class="title function_">dp</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> rest)</span> &#123;</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">if</span> (i == nums.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (rest == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 把它俩转成字符串才能作为哈希表的键</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> i + <span class="string">&quot;,&quot;</span> + rest;</span><br><span class="line">    <span class="comment">// 避免重复计算</span></span><br><span class="line">    <span class="keyword">if</span> (memo.containsKey(key)) &#123;</span><br><span class="line">        <span class="keyword">return</span> memo.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 还是穷举</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> dp(nums, i + <span class="number">1</span>, rest - nums[i]) + dp(nums, i + <span class="number">1</span>, rest + nums[i]);</span><br><span class="line">    <span class="comment">// 记入备忘录</span></span><br><span class="line">    memo.put(key, result);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以前我们都是用 Python 的元组配合哈希表 <code>dict</code> 来做备忘录的，其他语言没有元组，可以用把「状态」转化为字符串作为哈希表的键，这是一个常用的小技巧。</p>
<p>这个解法通过备忘录消除了很多重叠子问题，效率有一定的提升，但是这就结束了吗？</p>
<h2 id="三、动态规划"><a href="#三、动态规划" class="headerlink" title="三、动态规划"></a>三、动态规划</h2><p>事情没有这么简单，先来算一算，消除重叠子问题之后，算法的时间复杂度是多少？其实最坏情况下依然是 <code>O(2^N)</code>。</p>
<p>为什么呢？因为我们只不过恰好发现了重叠子问题，顺手用备忘录技巧给优化了，但是底层思路没有变，依然是暴力穷举的回溯算法，依然在遍历一棵二叉树。<strong>这只能叫对回溯算法进行了「剪枝」，提升了算法在某些情况下的效率</strong>，但算不上质的飞跃。</p>
<p>其实，这个问题可以转化为一个子集划分问题，而子集划分问题又是一个典型的背包问题。动态规划总是这么玄学，让人摸不着头脑……</p>
<p>首先，如果我们把 <code>nums</code> 划分成两个子集 <code>A</code> 和 <code>B</code>，分别代表分配 <code>+</code> 的数和分配 <code>-</code> 的数，那么他们和 <code>target</code> 存在如下关系：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sum(A) - sum(B) = target</span><br><span class="line"><span class="title function_">sum</span><span class="params">(A)</span> = target + sum(B)</span><br><span class="line">sum(A) + sum(A) = target + sum(B) + sum(A)</span><br><span class="line"><span class="number">2</span> * sum(A) = target + sum(nums)</span><br></pre></td></tr></table></figure>

<p>综上，可以推出 <code>sum(A) = (target + sum(nums)) / 2</code>，也就是把原问题转化成：**<code>nums</code> 中存在几个子集 <code>A</code>，使得 <code>A</code> 中元素的和为 <code>(target + sum(nums)) / 2</code>**？</p>
<p>类似的子集划分问题我们前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485103&idx=1&sn=8a9752e18ed528e5c18d973dcd134260&chksm=9bd7f8a7aca071b14c736a30ef7b23b80914c676414b01f8269808ef28da48eb13e90a432fff&scene=21#wechat_redirect">经典背包问题：子集划分</a> 讲过，现在实现这么一个函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 计算 nums 中有几个子集的和为 sum */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> sum)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>然后，可以这样调用这个函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> n : nums) sum += n;</span><br><span class="line">    <span class="comment">// 这两种情况，不可能存在合法的子集划分</span></span><br><span class="line">    <span class="keyword">if</span> (sum &lt; target || (sum + target) % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> subsets(nums, (sum + target) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好的，变成背包问题的标准形式：</p>
<p><strong>有一个背包，容量为 <code>sum</code>，现在给你 <code>N</code> 个物品，第 <code>i</code> 个物品的重量为 <code>nums[i - 1]</code>（注意 <code>1 &lt;= i &lt;= N</code>），每个物品只有一个，请问你有几种不同的方法能够恰好装满这个背包</strong>？</p>
<p>现在，这就是一个正宗的动态规划问题了，下面按照我们一直强调的动态规划套路走流程：</p>
<p><strong>第一步要明确两点，「状态」和「选择」</strong>。</p>
<p>对于背包问题，这个都是一样的，状态就是「背包的容量」和「可选择的物品」，选择就是「装进背包」或者「不装进背包」。</p>
<p><strong>第二步要明确 <code>dp</code> 数组的定义</strong>。</p>
<p>按照背包问题的套路，可以给出如下定义：</p>
<p><code>dp[i][j] = x</code> 表示，若只在前 <code>i</code> 个物品中选择，若当前背包的容量为 <code>j</code>，则最多有 <code>x</code> 种方法可以恰好装满背包。</p>
<p>翻译成我们探讨的子集问题就是，若只在 <code>nums</code> 的前 <code>i</code> 个元素中选择，若目标和为 <code>j</code>，则最多有 <code>x</code> 种方法划分子集。</p>
<p>根据这个定义，显然 <code>dp[0][..] = 0</code>，因为没有物品的话，根本没办法装背包；<code>dp[..][0] = 1</code>，因为如果背包的最大载重为 0，「什么都不装」就是唯一的一种装法。</p>
<p>我们所求的答案就是 <code>dp[N][sum]</code>，即使用所有 <code>N</code> 个物品，有几种方法可以装满容量为 <code>sum</code> 的背包。</p>
<p><strong>第三步，根据「选择」，思考状态转移的逻辑</strong>。</p>
<p>回想刚才的 <code>dp</code> 数组含义，可以根据「选择」对 <code>dp[i][j]</code> 得到以下状态转移：</p>
<p>如果不把 <code>nums[i]</code> 算入子集，<strong>或者说你不把这第 <code>i</code> 个物品装入背包</strong>，那么恰好装满背包的方法数就取决于上一个状态 <code>dp[i-1][j]</code>，继承之前的结果。</p>
<p>如果把 <code>nums[i]</code> 算入子集，<strong>或者说你把这第 <code>i</code> 个物品装入了背包</strong>，那么只要看前 <code>i - 1</code> 个物品有几种方法可以装满 <code>j - nums[i-1]</code> 的重量就行了，所以取决于状态 <code>dp[i-1][j-nums[i-1]]</code>。</p>
<p>PS：注意我们说的 <code>i</code> 是从 1 开始算的，而数组 <code>nums</code> 的索引时从 0 开始算的，所以 <code>nums[i-1]</code> 代表的是第 <code>i</code> 个物品的重量，<code>j - nums[i-1]</code> 就是背包装入物品 <code>i</code> 之后还剩下的容量。</p>
<p><strong>由于 <code>dp[i][j]</code> 为装满背包的总方法数，所以应该以上两种选择的结果求和，得到状态转移方程</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br></pre></td></tr></table></figure>

<p>然后，根据状态转移方程写出动态规划算法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 计算 nums 中有几个子集的和为 sum */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> sum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>][sum + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= sum; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= nums[i-<span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="comment">// 两种选择的结果之和</span></span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j] + dp[i-<span class="number">1</span>][j-nums[i-<span class="number">1</span>]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 背包的空间不足，只能选择不装物品 i</span></span><br><span class="line">                dp[i][j] = dp[i-<span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n][sum];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后，发现这个 <code>dp[i][j]</code> 只和前一行 <code>dp[i-1][..]</code> 有关，那么肯定可以优化成一维 <code>dp</code>：</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 计算 nums 中有几个子集的和为 sum */</span></span><br><span class="line"><span class="built_in">int</span> subsets(<span class="built_in">int</span>[] nums, <span class="built_in">int</span> <span class="keyword">sum</span>) &#123;</span><br><span class="line">    <span class="built_in">int</span> n = nums.length;</span><br><span class="line">    <span class="built_in">int</span>[] dp = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="keyword">sum</span> + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="comment">// j 要从后往前遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="keyword">sum</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">            <span class="comment">// 状态转移方程</span></span><br><span class="line">            <span class="keyword">if</span> (j &gt;= nums[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                dp[j] = dp[j] + dp[j-nums[i<span class="number">-1</span>]];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[j] = dp[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="keyword">sum</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对照二维 <code>dp</code>，只要把 <code>dp</code> 数组的第一个维度全都去掉就行了，唯一的区别就是这里的 <code>j</code> 要从后往前遍历，原因如下</strong>：</p>
<p>因为二维压缩到一维的根本原理是，<code>dp[j]</code> 和 <code>dp[j-nums[i-1]]</code> 还没被新结果覆盖的时候，相当于二维 <code>dp</code> 中的 <code>dp[i-1][j]</code> 和 <code>dp[i-1][j-nums[i-1]]</code>。</p>
<p>那么，我们就要做到：<strong>在计算新的 <code>dp[j]</code> 的时候，<code>dp[j]</code> 和 <code>dp[j-nums[i-1]]</code> 还是上一轮外层 for 循环的结果</strong>。</p>
<p>如果你从前往后遍历一维 <code>dp</code> 数组，<code>dp[j]</code> 显然是没问题的，但是 <code>dp[j-nums[i-1]]</code> 已经不是上一轮外层 for 循环的结果了，这里就会使用错误的状态，当然得不到正确的答案。</p>
<p>现在，这道题算是彻底解决了。</p>
<p>总结一下，回溯算法虽好，但是复杂度高，即便消除一些冗余计算，也只是「剪枝」，没有本质的改进。而动态规划就比较玄学了，经过各种改造，从一个加减法问题变成子集问题，又变成背包问题，经过各种套路写出解法，又搞出状态压缩，还得反向遍历。</p>
<p>现在搞得我都忘了自己是来干嘛的了。嗯，这也许就是动态规划的魅力吧。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>如何拆解复杂问题：实现一个计算器</title>
    <url>/posts/92e48ba5/</url>
    <content><![CDATA[<h1 id="如何拆解复杂问题：实现一个计算器"><a href="#如何拆解复杂问题：实现一个计算器" class="headerlink" title="如何拆解复杂问题：实现一个计算器"></a>如何拆解复杂问题：实现一个计算器</h1><p>我记得很多大学数据结构的教材上，在讲栈这种数据结构的时候，应该都会用计算器举例，但是有一说一，讲的真的垃圾，我只感受到被数据结构支配的恐惧，丝毫没有支配数据结构的快感。</p>
<p>不知道多少未来的计算机科学家就被这种简单的数据结构劝退了。</p>
<p><em><strong>1、</strong></em>输入一个字符串，可以包含<code>+ - * / (</code>)&#96;&#96;、数字、空格，你的算法返回运算结果。</p>
<p><em><strong>2、</strong></em>要符合运算法则，括号的优先级最高，先乘除后加减。</p>
<p><em><strong>3、</strong></em>除号是整数除法，无论正负都向 0 取整（5&#x2F;2&#x3D;2，-5&#x2F;2&#x3D;-2）。</p>
<p><em><strong>4、</strong></em>可以假定输入的算式一定合法，且计算过程不会出现整型溢出，不会出现除数为 0 的意外情况。</p>
<p>比如输入如下字符串，算法会返回 9：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> * (<span class="number">2</span>-<span class="number">6</span> /(<span class="number">3</span> -<span class="number">7</span>))</span><br></pre></td></tr></table></figure>

<p>可以看到，这就已经非常接近我们实际生活中使用的计算器了，虽然我们以前肯定都用过计算器，但是如果简单思考一下其算法实现，就会大惊失色：</p>
<p><em><strong>1、</strong></em>按照常理处理括号，要先计算最内层的括号，然后向外慢慢化简。这个过程我们手算都容易出错，何况写成算法呢！</p>
<p><em><strong>2、</strong></em>要做到先乘除，后加减，这一点教会小朋友还不算难，但教给计算机恐怕有点困难。</p>
<p><em><strong>3、</strong></em>要处理空格。我们为了美观，习惯性在数字和运算符之间打个空格，但是计算之中得想办法忽略这些空格。</p>
<p>那么本文就来聊聊怎么实现上述一个功能完备的计算器功能，<strong>关键在于层层拆解问题，化整为零，逐个击破</strong>，相信这种思维方式能帮大家解决各种复杂问题。</p>
<p>下面就来拆解，从最简单的一个问题开始。</p>
<h2 id="一、字符串转整数"><a href="#一、字符串转整数" class="headerlink" title="一、字符串转整数"></a>一、字符串转整数</h2><p>是的，就是这么一个简单的问题，首先告诉我，怎么把一个字符串形式的<strong>正</strong>整数，转化成 int 型？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">string</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;458&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[i];</span><br><span class="line">    n = <span class="number">10</span> * n + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// n 现在就等于 458</span></span><br></pre></td></tr></table></figure>

<p>这个还是很简单的吧，老套路了。但是即便这么简单，依然有坑：**<code>(c - &#39;0&#39;)</code>的这个括号不能省略，否则可能造成整型溢出**。</p>
<p>因为变量<code>c</code>是一个 ASCII 码，如果不加括号就会先加后减，想象一下<code>n</code>如果接近 INT_MAX，就会溢出。所以用括号保证先减后加才行。</p>
<h2 id="二、处理加减法"><a href="#二、处理加减法" class="headerlink" title="二、处理加减法"></a>二、处理加减法</h2><p>现在进一步，<strong>如果输入的这个算式只包含加减法，而且不存在空格</strong>，你怎么计算结果？我们拿字符串算式<code>1-12+3</code>为例，来说一个很简单的思路：</p>
<p><em><strong>1、</strong></em>先给第一个数字加一个默认符号<code>+</code>，变成<code>+1-12+3</code>。</p>
<p><em><strong>2、</strong></em>把一个运算符和数字组合成一对儿，也就是三对儿<code>+1</code>，<code>-12</code>，<code>+3</code>，把它们转化成数字，然后放到一个栈中。</p>
<p><em><strong>3、</strong></em>将栈中所有的数字求和，就是原算式的结果。</p>
<p>我们直接看代码，结合一张图就看明白了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">calculate</span><span class="params">(string s)</span> &#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">    <span class="comment">// 记录算式中的数字</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录 num 前的符号，初始化为 +</span></span><br><span class="line">    <span class="type">char</span> <span class="variable">sign</span> <span class="operator">=</span> <span class="string">&#x27;+&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[i];</span><br><span class="line">        <span class="comment">// 如果是数字，连续读取到 num</span></span><br><span class="line">        <span class="keyword">if</span> (isdigit(c)) </span><br><span class="line">            num = <span class="number">10</span> * num + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="comment">// 如果不是数字，就是遇到了下一个符号，</span></span><br><span class="line">        <span class="comment">// 之前的数字和符号就要存进栈中</span></span><br><span class="line">        <span class="keyword">if</span> (!isdigit(c) || i == s.size() - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    stk.push(num); <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    stk.push(-num); <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 更新符号为当前符号，数字清零</span></span><br><span class="line">            sign = c;</span><br><span class="line">            num = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 将栈中所有结果求和就是答案</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!stk.empty()) &#123;</span><br><span class="line">        res += stk.top();</span><br><span class="line">        stk.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我估计就是中间带<code>switch</code>语句的部分有点不好理解吧，**<code>i</code>就是从左到右扫描，<code>sign</code>和<code>num</code>跟在它身后。**当<code>s[i]</code>遇到一个运算符时，情况是这样的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/1331pt_20210507173639.png" alt="图片"></p>
<p>所以说，此时要根据<code>sign</code>的 case 不同选择<code>nums</code>的正负号，存入栈中，然后更新<code>sign</code>并清零<code>nums</code>记录下一对儿符合和数字的组合。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/aqyyv2_20210507173723.png" alt="图片"></p>
<p>另外注意，不只是遇到新的符号会触发入栈，当<code>i</code>走到了算式的尽头（<code>i == s.size() - 1</code>），也应该将前面的数字入栈，方便后续计算最终结果。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HuuIs3_20210507173811.png" alt="图片"></p>
<p>至此，仅处理紧凑加减法字符串的算法就完成了，请确保理解以上内容，后续的内容就基于这个框架修修改改就完事儿了。</p>
<h2 id="三、处理乘除法"><a href="#三、处理乘除法" class="headerlink" title="三、处理乘除法"></a>三、处理乘除法</h2><p>其实思路跟仅处理加减法没啥区别，拿字符串<code>2-3*4+5</code>举例，核心思路依然是把字符串分解成符号和数字的组合。</p>
<p>比如上述例子就可以分解为<code>+2</code>，<code>-3</code>，<code>*4</code>，<code>+5</code>几对儿，我们刚才不是没有处理乘除号吗，很简单，<strong>其他部分都不用变</strong>，在<code>switch</code>部分加上对应的 case 就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.size(); i++) &#123;</span><br><span class="line">    <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[i];</span><br><span class="line">    <span class="keyword">if</span> (isdigit(c)) </span><br><span class="line">        num = <span class="number">10</span> * num + (c - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isdigit(c) || i == s.size() - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (sign) &#123;</span><br><span class="line">            <span class="type">int</span> pre;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                stk.push(num); <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                stk.push(-num); <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// 只要拿出前一个数字做对应运算即可</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                pre = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                stk.push(pre * num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                pre = stk.top();</span><br><span class="line">                stk.pop();</span><br><span class="line">                stk.push(pre / num);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 更新符号为当前符号，数字清零</span></span><br><span class="line">        sign = c;</span><br><span class="line">        num = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>乘除法优先于加减法体现在，乘除法可以和栈顶的数结合，而加减法只能把自己放入栈</strong>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/849zPF_20210507173855.png" alt="图片"></p>
<p>现在我们<strong>思考一下****如何处理字符串中可能出现的空格字符</strong>。其实也非常简单，想想空格字符的出现，会影响我们现有代码的哪一部分？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果 c 非数字</span></span><br><span class="line"><span class="keyword">if</span> (!isdigit(c) || i == s.size() - <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (c) &#123;...&#125;</span><br><span class="line">    sign = c;</span><br><span class="line">    num = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>显然空格会进入这个 if 语句，但是我们并不想让空格的情况进入这个 if，因为这里会更新<code>sign</code>并清零<code>nums</code>，空格根本就不是运算符，应该被忽略。</p>
<p>那么只要多加一个条件即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ((!isdigit(c) &amp;&amp; c != <span class="string">&#x27; &#x27;</span>) || i == s.size() - <span class="number">1</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>好了，现在我们的算法已经可以按照正确的法则计算加减乘除，并且自动忽略空格符，剩下的就是如何让算法正确识别括号了。</p>
<h2 id="四、处理括号"><a href="#四、处理括号" class="headerlink" title="四、处理括号"></a>四、处理括号</h2><p>处理算式中的括号看起来应该是最难的，但真没有看起来那么难。</p>
<p>为了规避编程语言的繁琐细节，我把前面解法的代码翻译成 Python 版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">calculate</span><span class="params">(s: str)</span> -&gt; <span class="type">int</span>:</span><br><span class="line"></span><br><span class="line">    def <span class="title function_">helper</span><span class="params">(s: List)</span> -&gt; <span class="type">int</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        sign = <span class="string">&#x27;+&#x27;</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="title function_">len</span><span class="params">(s)</span> &gt; <span class="number">0</span>:</span><br><span class="line">            c = s.pop(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> c.isdigit():</span><br><span class="line">                num = <span class="number">10</span> * num + <span class="type">int</span>(c)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (not c.isdigit() and c != <span class="string">&#x27; &#x27;</span>) or <span class="title function_">len</span><span class="params">(s)</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="type">if</span> <span class="variable">sign</span> <span class="operator">=</span>= <span class="string">&#x27;+&#x27;</span>:</span><br><span class="line">                    stack.append(num)</span><br><span class="line">                <span class="type">elif</span> <span class="variable">sign</span> <span class="operator">=</span>= <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">                    stack.append(-num)</span><br><span class="line">                <span class="type">elif</span> <span class="variable">sign</span> <span class="operator">=</span>= <span class="string">&#x27;*&#x27;</span>:</span><br><span class="line">                    stack[-<span class="number">1</span>] = stack[-<span class="number">1</span>] * num</span><br><span class="line">                <span class="type">elif</span> <span class="variable">sign</span> <span class="operator">=</span>= <span class="string">&#x27;/&#x27;</span>:</span><br><span class="line">                    # python 除法向 <span class="number">0</span> 取整的写法</span><br><span class="line">                    stack[-<span class="number">1</span>] = <span class="type">int</span>(stack[-<span class="number">1</span>] / <span class="type">float</span>(num))                    </span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                sign = c</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sum(stack)</span><br><span class="line">    # 需要把字符串转成列表方便操作</span><br><span class="line">    <span class="keyword">return</span> helper(list(s))</span><br></pre></td></tr></table></figure>

<p>这段代码跟刚才 C++ 代码完全相同，唯一的区别是，不是从左到右遍历字符串，而是不断从左边<code>pop</code>出字符，本质还是一样的。</p>
<p>那么，为什么说处理括号没有看起来那么难呢，<strong>因为括号具有递归性质</strong>。我们拿字符串<code>3*(4-5/2)-6</code>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">calculate(`<span class="number">3</span>*(<span class="number">4</span>-<span class="number">5</span>/<span class="number">2</span>)-<span class="number">6</span>`)</span><br><span class="line">= <span class="number">3</span> * calculate(`<span class="number">4</span>-<span class="number">5</span>/<span class="number">2</span>`) - <span class="number">6</span></span><br><span class="line">= <span class="number">3</span> * <span class="number">2</span> - <span class="number">6</span></span><br><span class="line">= <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>可以脑补一下，无论多少层括号嵌套，通过 calculate 函数递归调用自己，都可以将括号中的算式化简成一个数字。<strong>换句话说，括号包含的算式，我们直接视为一个数字就行了</strong>。</p>
<p>现在的问题是，递归的开始条件和结束条件是什么？<strong>遇到<code>(</code>开始递归，遇到<code>)</code>结束递归</strong>：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">def calculate(s: str) -&gt; <span class="keyword">int</span>:</span><br><span class="line"></span><br><span class="line">    def helper(s: List) -&gt; <span class="keyword">int</span>:</span><br><span class="line">        stack = []</span><br><span class="line">        <span class="keyword">sign</span> = <span class="string">&#x27;+&#x27;</span></span><br><span class="line">        num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> <span class="built_in">len</span>(s) &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">c</span> = s.<span class="keyword">pop</span>(<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">c</span>.isdigit():</span><br><span class="line">                num = <span class="number">10</span> * num + <span class="keyword">int</span>(<span class="keyword">c</span>)</span><br><span class="line">            # 遇到左括号开始递归计算 num</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">c</span> == <span class="string">&#x27;(&#x27;</span>:</span><br><span class="line">                num = helper(s)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (not <span class="keyword">c</span>.isdigit() <span class="built_in">and</span> <span class="keyword">c</span> != <span class="string">&#x27; &#x27;</span>) <span class="built_in">or</span> <span class="built_in">len</span>(s) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">sign</span> == <span class="string">&#x27;+&#x27;</span>: ...</span><br><span class="line">                elif <span class="keyword">sign</span> == <span class="string">&#x27;-&#x27;</span>: ... </span><br><span class="line">                elif <span class="keyword">sign</span> == <span class="string">&#x27;*&#x27;</span>: ...</span><br><span class="line">                elif <span class="keyword">sign</span> == <span class="string">&#x27;/&#x27;</span>: ...</span><br><span class="line">                num = <span class="number">0</span></span><br><span class="line">                <span class="keyword">sign</span> = <span class="keyword">c</span></span><br><span class="line">            # 遇到右括号返回递归结果</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">c</span> == <span class="string">&#x27;)&#x27;</span>: <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">return</span> sum(stack)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> helper(<span class="keyword">list</span>(s))</span><br></pre></td></tr></table></figure>



<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/lipbTF_20210507174049.png" alt="图片"></p>
<p>你看，加了两三行代码，就可以处理括号了，这就是递归的魅力。至此，计算器的全部功能就实现了，通过对问题的层层拆解化整为零，再回头看，这个问题似乎也没那么复杂嘛。</p>
<h2 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h2><p>本文借实现计算器的问题，主要想表达的是一种处理复杂问题的思路。</p>
<p>我们首先从字符串转数字这个简单问题开始，进而处理只包含加减法的算式，进而处理包含加减乘除四则运算的算式，进而处理空格字符，进而处理包含括号的算式。</p>
<p><strong>可见，对于一些比较困难的问题，其解法并不是一蹴而就的，而是步步推进，螺旋上升的</strong>。如果一开始给你原题，你不会做，甚至看不懂答案，都很正常，关键在于我们自己如何简化问题，如何以退为进。</p>
<p><strong>退而求其次是一种很聪明策略</strong>。你想想啊，假设这是一道考试题，你不会实现这个计算器，但是你写了字符串转整数的算法并指出了容易溢出的陷阱，那起码可以得 20 分吧；如果你能够处理加减法，那可以得 40 分吧；如果你能处理加减乘除四则运算，那起码够 70 分了；再加上处理空格字符，80 有了吧。我就是不会处理括号，那就算了，80 已经很 OK 了好不好。</p>
<p>我们要支配算法，而不是被算法支配。如果这种思维方式对大家有些启发，希望点个在看分享。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>子序列解题模板：最长回文子序列</title>
    <url>/posts/7f30ba70/</url>
    <content><![CDATA[<h1 id="子序列解题模板：最长回文子序列"><a href="#子序列解题模板：最长回文子序列" class="headerlink" title="子序列解题模板：最长回文子序列"></a>子序列解题模板：最长回文子序列</h1><h2 id="预计阅读时间：6-分钟"><a href="#预计阅读时间：6-分钟" class="headerlink" title="预计阅读时间：6 分钟"></a>预计阅读时间：6 分钟</h2><p>子序列问题是常见的算法问题，而且并不好解决。</p>
<p>首先，子序列问题本身就相对子串、子数组更困难一些，因为前者是不连续的序列，而后两者是连续的，就算穷举都不容易，更别说求解相关的算法问题了。</p>
<p>而且，子序列问题很可能涉及到两个字符串，比如让你求两个字符串的 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484486&idx=1&sn=0bdcb94c6390307ea32427757ec0072c&chksm=9bd7fa4eaca073583623cdb93b05dc9e1d0757b25697bb40b29b3e450124e929ff1a8eaac50f&scene=21#wechat_redirect">最长公共子序列</a>，如果没有一定的处理经验，真的不容易想出来。所以本文就来扒一扒子序列问题的套路，<strong>其实就有两种模板，相关问题只要往这两种思路上想，十拿九稳。</strong></p>
<p>一般来说，这类问题都是让你求一个<strong>最长</strong>子序列，因为最短子序列就是一个字符嘛，没啥可问的。一旦涉及到子序列和最值，那几乎可以肯定，**考察的是动态规划技巧，时间复杂度一般都是 O(n^2)**。</p>
<p>原因很简单，你想想一个字符串，它的子序列有多少种可能？起码是指数级的吧，这种情况下，不用动态规划技巧，还想怎么着呢？</p>
<p>既然要用动态规划，那就要定义 dp 数组，找状态转移关系。我们说的两种思路模板，就是 dp 数组的定义思路。不同的问题可能需要不同的 dp 数组定义来解决。</p>
<h2 id="一、两种思路"><a href="#一、两种思路" class="headerlink" title="一、两种思路"></a>一、两种思路</h2><p><strong>1、****第一种思路模板是一个一维的 dp 数组</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> array.length;</span><br><span class="line"><span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">        dp[i] = 最值(dp[i], dp[j] + ...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>举个我们写过的例子 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484498&idx=1&sn=df58ef249c457dd50ea632f7c2e6e761&chksm=9bd7fa5aaca0734c29bcf7979146359f63f521e3060c2acbf57a4992c887aeebe2a9e4bd8a89&scene=21#wechat_redirect">最长递增子序列</a>，在这个思路中 dp 数组的定义是：</p>
<p>*<em>在子数组<code>array[0..i]</code>中，以*</em><code>array[i]</code>**结尾的目标子序列（最长递增子序列）的长度是<code>dp[i]</code>**。</p>
<p>为啥最长递增子序列需要这种思路呢？前文说得很清楚了，因为这样符合归纳法，可以找到状态转移的关系，这里就不具体展开了。</p>
<p><strong>2、****第二种思路模板是一个二维的 dp 数组</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length;</span><br><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">dp</span>[n][n];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == arr[j]) </span><br><span class="line">            dp[i][j] = dp[i][j] + ...</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            dp[i][j] = 最值(...)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种思路运用相对更多一些，尤其是涉及两个字符串&#x2F;数组的子序列。本思路中 dp 数组含义又分为「只涉及一个字符串」和「涉及两个字符串」两种情况。</p>
<p><strong>2.1</strong> <strong>涉及两个字符串&#x2F;数组时</strong>（比如最长公共子序列），dp 数组的含义如下：</p>
<p>**在子数组<code>arr1[0..i]</code>和子数组<code>arr2[0..j]</code>中，我们要求的子序列（最长公共子序列）长度为<code>dp[i][j]</code>**。</p>
<p><strong>2.2</strong> <strong>只涉及一个字符串&#x2F;数组时</strong>（比如本文要讲的最长回文子序列），dp 数组的含义如下：</p>
<p>**在子数组<code>array[i..j]</code>中，我们要求的子序列（最长回文子序列）的长度为<code>dp[i][j]</code>**。</p>
<p>第一种情况可以参考这两篇旧文：<a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484484&idx=1&sn=74594297022c84952162a68b7f739133&chksm=9bd7fa4caca0735a1364dd13901311ecd6ec4913c8db05a1ff6cae8f069627eebe8d651bbeb1&scene=21#wechat_redirect">详解编辑距离</a> 和 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484486&idx=1&sn=0bdcb94c6390307ea32427757ec0072c&chksm=9bd7fa4eaca073583623cdb93b05dc9e1d0757b25697bb40b29b3e450124e929ff1a8eaac50f&scene=21#wechat_redirect">最长公共子序列</a>。</p>
<p>下面就借最长回文子序列这个问题，详解一下第二种情况下如何使用动态规划。</p>
<h3 id="二、最长回文子序列"><a href="#二、最长回文子序列" class="headerlink" title="二、最长回文子序列"></a>二、最长回文子序列</h3><p>之前解决了 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484471&idx=1&sn=7c26d04a1f035770920d31377a1ebd42&chksm=9bd7fa3faca07329189e9e8b51e1a665166946b66b8e8978299ba96d5f2c0d3eafa7db08b681&scene=21#wechat_redirect">最长回文子串</a> 的问题，这次提升难度，求最长回文子序列的长度：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/LAjRcC_20210507181302.png" alt="图片"></p>
<p>我们说这个问题对 dp 数组的定义是：**在子串<code>s[i..j]</code>中，最长回文子序列的长度为<code>dp[i][j]</code>**。一定要记住这个定义才能理解算法。</p>
<p>为啥这个问题要这样定义二维的 dp 数组呢？我们前文多次提到，<strong>找状态转移需要归纳思维，说白了就是如何从已知的结果推出未知的部分</strong>，这样定义容易归纳，容易发现状态转移关系。</p>
<p>具体来说，如果我们想求<code>dp[i][j]</code>，假设你知道了子问题<code>dp[i+1][j-1]</code>的结果（<code>s[i+1..j-1]</code>中最长回文子序列的长度），你是否能想办法算出<code>dp[i][j]</code>的值（<code>s[i..j]</code>中，最长回文子序列的长度）呢？</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/2kxUZI_20210507181356.png" alt="图片"></p>
<p>可以！<strong>这取决于<code>s[i]</code>和<code>s[j]</code>的字符</strong>：</p>
<p><strong>如果它俩相等</strong>，那么它俩加上<code>s[i+1..j-1]</code>中的最长回文子序列就是<code>s[i..j]</code>的最长回文子序列：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/aUzko6_20210507181418.png" alt="图片"></p>
<p><strong>如果它俩不相等</strong>，说明它俩<strong>不可能同时</strong>出现在<code>s[i..j]</code>的最长回文子序列中，那么把它俩<strong>分别</strong>加入<code>s[i+1..j-1]</code>中，看看哪个子串产生的回文子序列更长即可：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/syOQNF_20210507181435.png" alt="图片"></p>
<p>以上两种情况写成代码就是这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">    <span class="comment">// 它俩一定在最长回文子序列中</span></span><br><span class="line">    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="comment">// s[i+1..j] 和 s[i..j-1] 谁的回文子序列更长？</span></span><br><span class="line">    dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br></pre></td></tr></table></figure>

<p>至此，状态转移方程就写出来了，根据 dp 数组的定义，我们要求的就是<code>dp[0][n - 1]</code>，也就是整个<code>s</code>的最长回文子序列的长度。</p>
<h3 id="三、代码实现"><a href="#三、代码实现" class="headerlink" title="三、代码实现"></a>三、代码实现</h3><p>首先明确一下 base case，如果只有一个字符，显然最长回文子序列长度是 1，也就是<code>dp[i][j] = 1,(i == j)</code>。</p>
<p>因为<code>i</code>肯定小于等于<code>j</code>，所以对于那些<code>i &gt; j</code>的位置，根本不存在什么子序列，应该初始化为 0。</p>
<p>另外，看看刚才写的状态转移方程，想求<code>dp[i][j]</code>需要知道<code>dp[i+1][j-1]</code>，<code>dp[i+1][j]</code>，<code>dp[i][j-1]</code>这三个位置；再看看我们确定的 base case，填入 dp 数组之后是这样：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/K0G91r_20210507181558.png" alt="图片"></p>
<p><strong>为了保证每次计算<code>dp[i][j]</code>，左、下、左下三个方向的位置已经被计算出来，只能斜着遍历或者反着遍历</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Ckwq8R_20210507181610.png" alt="图片"></p>
<p>我选择反着遍历，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">longestPalindromeSubseq</span><span class="params">(string s)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.size();</span><br><span class="line">    <span class="comment">// dp 数组全部初始化为 0</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">dp</span><span class="params">(n, vector&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>)</span>);</span><br><span class="line">    <span class="comment">// base case</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        dp[i][i] = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 反着遍历保证正确的状态转移</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="comment">// 状态转移方程</span></span><br><span class="line">            <span class="keyword">if</span> (s[i] == s[j])</span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                dp[i][j] = max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 整个 s 的最长回文子串长度</span></span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，最长回文子序列的问题就解决了。</p>
<p>主要还是正确定义 dp 数组的含义，遇到子序列问题，首先想到两种动态规划思路，然后根据实际问题看看哪种思路容易找到状态转移关系。</p>
<p>另外，找到状态转移和 base case 之后，<strong>一定要观察 DP table</strong>，看看怎么遍历才能保证通过已计算出来的结果解决新的问题</p>
<p>有了以上思路方向，子序列问题也不过如此嘛。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>完全二叉树的节点数，你真的会算吗？</title>
    <url>/posts/dbdb8baa/</url>
    <content><![CDATA[<h1 id="完全二叉树的节点数，你真的会算吗？"><a href="#完全二叉树的节点数，你真的会算吗？" class="headerlink" title="完全二叉树的节点数，你真的会算吗？"></a>完全二叉树的节点数，你真的会算吗？</h1><p>如果让你数一下一棵普通二叉树有多少个节点，这很简单，只要在二叉树的遍历框架上加一点代码就行了。</p>
<p>但是，如果给你一棵<strong>完全二叉树</strong>，让你计算它的节点个数，你会不会？算法的时间复杂度是多少？</p>
<p>这个算法的时间复杂度应该是 O(logN*logN)，如果你心中的算法没有达到这么高效，那么本文就是给你写的。</p>
<p>首先要明确一下两个关于二叉树的名词「完全二叉树」和「满二叉树」。</p>
<p>我们说的<strong>完全二叉树</strong>如下图，每一层都是<strong>紧凑靠左</strong>排列的：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdEP9mVB4tqBYfNT69s5yTbm0UlN0d2fmKXn6RCv25WiapjvnsxLZ7mkobu5v1NPQY3cVkt8iawyMYvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>我们说的<strong>满二叉树</strong>如下图，是一种特殊的完全二叉树，每层都是是满的，像一个稳定的三角形：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/UuUXKT_20210810164344.png" alt="图片"></p>
<p>说句题外话，关于这两个定义，中文语境和英文语境似乎有点区别，我们说的完全二叉树对应英文 Complete Binary Tree，没有问题。但是我们说的满二叉树对应英文 Perfect Binary Tree，而英文中的 Full Binary Tree 是指一棵二叉树的所有节点要么没有孩子节点，要么有两个孩子节点。如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/GzzIX6_20210810164402.png" alt="图片"></p>
<p>以上定义出自 wikipedia，这里就是顺便一提，其实名词叫什么都无所谓，重要的是算法操作。</p>
<p><strong>本文就按我们中文的语境，记住「满二叉树」和「完全二叉树」的区别，等会会用到</strong>。</p>
<h3 id="一、思路分析"><a href="#一、思路分析" class="headerlink" title="一、思路分析"></a>一、思路分析</h3><p>现在回归正题，如何求一棵完全二叉树的节点个数呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 输入一棵完全二叉树，返回节点总数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span>;</span><br></pre></td></tr></table></figure>

<p>如果是一个<strong>普通</strong>二叉树，显然只要向下面这样遍历一边即可，时间复杂度 O(N)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + countNodes(root.left) + countNodes(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那如果是一棵<strong>满</strong>二叉树，节点总数就和树的高度呈指数关系，时间复杂度 O(logN)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 计算树的高度</span></span><br><span class="line">    <span class="keyword">while</span> (root != <span class="literal">null</span>) &#123;</span><br><span class="line">        root = root.left;</span><br><span class="line">        h++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 节点总数就是 2^h - 1</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(<span class="number">2</span>, h) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>完全</strong>二叉树比普通二叉树特殊，但又没有满二叉树那么特殊，计算它的节点总数，可以说是普通二叉树和完全二叉树的结合版，先看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countNodes</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">    <span class="type">TreeNode</span> <span class="variable">l</span> <span class="operator">=</span> root, r = root;</span><br><span class="line">    <span class="comment">// 记录左、右子树的高度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">hl</span> <span class="operator">=</span> <span class="number">0</span>, hr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (l != <span class="literal">null</span>) &#123;</span><br><span class="line">        l = l.left;</span><br><span class="line">        hl++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (r != <span class="literal">null</span>) &#123;</span><br><span class="line">        r = r.right;</span><br><span class="line">        hr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果左右子树的高度相同，则是一棵满二叉树</span></span><br><span class="line">    <span class="keyword">if</span> (hl == hr) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="type">int</span>)Math.pow(<span class="number">2</span>, hl) - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果左右高度不同，则按照普通二叉树的逻辑计算</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> + countNodes(root.left) + countNodes(root.right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结合刚才针对满二叉树和普通二叉树的算法，上面这段代码应该不难理解，就是一个结合版，但是<strong>其中降低时间复杂度的技巧是非常微妙的</strong>。</p>
<h3 id="二、复杂度分析"><a href="#二、复杂度分析" class="headerlink" title="二、复杂度分析"></a>二、复杂度分析</h3><p>开头说了，这个算法的时间复杂度是 O(logN*logN)，这是怎么算出来的呢？</p>
<p>直觉感觉好像最坏情况下是 O(N*logN) 吧，因为之前的 while 需要 logN 的时间，最后要 O(N) 的时间向左右子树递归：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">return <span class="number">1</span> + count<span class="constructor">Nodes(<span class="params">root</span>.<span class="params">left</span>)</span> + count<span class="constructor">Nodes(<span class="params">root</span>.<span class="params">right</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>关键点在于，这两个递归只有一个会真的递归下去，另一个一定会触发<code>hl == hr</code>而立即返回，不会递归下去</strong>。</p>
<p>为什么呢？原因如下：</p>
<p><strong>一棵完全二叉树的两棵子树，至少有一棵是满二叉树</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Z2YcMA_20210810164429.png" alt="图片"></p>
<p>看图就明显了吧，由于完全二叉树的性质，其子树一定有一棵是满的，所以一定会触发<code>hl == hr</code>，只消耗 O(logN) 的复杂度而不会继续递归。</p>
<p>综上，算法的递归深度就是树的高度 O(logN)，每次递归所花费的时间就是 while 循环，需要 O(logN)，所以总体的时间复杂度是 O(logN*logN)。</p>
<p>所以说，「完全二叉树」这个概念还是有它存在的原因的，不仅适用于数组实现二叉堆，而且连计算节点总数这种看起来简单的操作都有高效的算法实现。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>快慢指针的一些证明</title>
    <url>/posts/196710be/</url>
    <content><![CDATA[<h1 id="快慢指针在链表中的一些证明"><a href="#快慢指针在链表中的一些证明" class="headerlink" title="快慢指针在链表中的一些证明"></a>快慢指针在链表中的一些证明</h1><p>目录</p>
<h3 id="一、一定会相遇的证明"><a href="#一、一定会相遇的证明" class="headerlink" title="一、一定会相遇的证明"></a>一、一定会相遇的证明</h3><h3 id="二、环长度"><a href="#二、环长度" class="headerlink" title="二、环长度"></a>二、环长度</h3><h3 id="三、连接点"><a href="#三、连接点" class="headerlink" title="三、连接点"></a>三、连接点</h3><h3 id="四、带环链表总长度"><a href="#四、带环链表总长度" class="headerlink" title="四、带环链表总长度"></a>四、带环链表总长度</h3><h3 id="五、例题"><a href="#五、例题" class="headerlink" title="五、例题"></a>五、例题</h3><h2 id="一、一定会相遇的证明-1"><a href="#一、一定会相遇的证明-1" class="headerlink" title="一、一定会相遇的证明"></a>一、一定会相遇的证明</h2><h4 id="证明1"><a href="#证明1" class="headerlink" title="证明1"></a>证明1</h4><p>1、如果链表没有环，那么快指针比慢指针先到达尾部（null)。</p>
<p>2、如果链表有环的话，因为快指针走的比慢指针快，所以在环中相遇的过程可以看作是快指针从环后边追赶慢指针的过程。</p>
<p>用递归法证明，快慢指针一定会相遇：</p>
<p>（1)快指针与慢指针之间差一步。此时继续往后走，慢指针前进一步，快指针前进两步，两者相遇。<br>（2)快指针与慢指针之间差两步。此时继续往后走，慢指针前进一步，快指针前进两步，两者之间相差一步，转化为第一种情况。<br>（3)快指针与慢指针之间差N步。此时继续往后走，慢指针前进一步，快指针前进两步，两者之间相差(N+1-2)即N-1步。重复这个过程，直到快指针和慢指针相遇。</p>
<p>因此，此题得证。所以快指针必然与慢指针相遇。</p>
<h4 id="证明2"><a href="#证明2" class="headerlink" title="证明2"></a>证明2</h4><p>如果链表存在环，快慢指针就一定能相遇。设快指针每次移动q步，慢指针每次移动s步，环的长度为n，环之前的链表长度为m，如下图所示</p>
<p><img src="https://pic2.zhimg.com/50/da087f6034204e3713f69f94542c99e1_hd.jpg?source=1940ef5c" alt="img"><img src="https://pic2.zhimg.com/80/da087f6034204e3713f69f94542c99e1_720w.jpg?source=1940ef5c" alt="img"></p>
<p>假设慢指针第一次到达环时移动了x次，位置为a，此时快指针也移动了x次，位置为b，</p>
<p>则此时快慢指针相遇的等式为<img src="https://www.zhihu.com/equation?tex=(b+q*y)mod(n)+=+(a+s*y)mod(n)" alt="[公式]">，</p>
<p>也即<img src="https://www.zhihu.com/equation?tex=((b-a)++(q-s)*y)mod(n)+=+0+" alt="[公式]">（1）成立，</p>
<p>又：</p>
<p><img src="https://www.zhihu.com/equation?tex=b=(q*x+-+m)mod(n)" alt="[公式]">（2），</p>
<p><img src="https://www.zhihu.com/equation?tex=a=(s*x-m)mod(n)" alt="[公式]">（3），</p>
<p>由（1）（2）（3）可得出<img src="https://www.zhihu.com/equation?tex=(q-s)(x+y)mod(n)=0" alt="[公式]">成立，显而易见（q(x+y)-s(x+y) &#x3D;&#x3D; n *k(k&#x3D;1,2,3,…)），x+y是n的整数倍的时候，该式一定成立。</p>
<p>————————————————找环的起点分割线——————————————<br>假设快指针每次移动2步，慢指针每次移动1步，则根据上述证明可知，<img src="https://www.zhihu.com/equation?tex=x=m" alt="[公式]">，<img src="https://www.zhihu.com/equation?tex=a=0" alt="[公式]">，相遇的位置在y处；求环的起点，就是求m的大小，此时令一指针p1从头结点出发，每次移动1步，令一指针q1从相遇处出发，每次移动1步，则p1与q1再次相遇的地方就是环的起点处，因为此时两个指针均移动m步，由<img src="https://www.zhihu.com/equation?tex=(y+m)mod(n)=0" alt="[公式]">可知，相遇</p>
<p><strong>推导：慢指针进入环后，快指针最多多绕一个圈。</strong></p>
<p><strong>快指针F先进环，慢指针S后进。</strong></p>
<p><strong>假设慢指针进环那一刻快指针差m步能追上（0&lt;&#x3D; m &lt; Length环），根据上边结论，两个指针走m次就会相遇了。</strong></p>
<p><strong>因为m &lt; Length环，所以快指针在慢指针进环那一刻最多比慢指针多绕一个圈</strong>。</p>
<h2 id="二、环长度-1"><a href="#二、环长度-1" class="headerlink" title="二、环长度"></a>二、环长度</h2><p>快指针和慢指针第一次相遇时的节点pq（碰撞点），快指针和慢指针从该点开始继续往前走，再次碰撞时所用的操作数就是环的长度Length环。</p>
<p>证明:由上边的推导可得，这里的m为Lengh环。</p>
<h2 id="三、连接点-1"><a href="#三、连接点-1" class="headerlink" title="三、连接点"></a>三、连接点</h2><p><img src="https://images2015.cnblogs.com/blog/833392/201704/833392-20170409211030332-1528137014.png" alt="img"></p>
<p>假设慢指针进入环中时，即连接点p，快指针（q）需要m步才能追上慢指针。</p>
<p>p和q第一次相遇时，碰撞点在pq处。此时，p走到pq时用了m步。</p>
<p> 假设head到p的距离为a，环长度为Length环，慢指针走了s步，则快指针走了2s步。</p>
<p>从上图可知:</p>
<p>s &#x3D; a + m</p>
<p>2s &#x3D; a + m + n * Length环（n为快指针绕环的圈数）</p>
<p>可得</p>
<p>a &#x3D; n * Length环 - m</p>
<p>也就是：若在头结点和相遇结点分别设一指针，同步(单步)前进，则最后一定相遇在环入口结点p。</p>
<p>可根据这个结论来找到入口节点。</p>
<h2 id="四、带环链表总长度-1"><a href="#四、带环链表总长度-1" class="headerlink" title="四、带环链表总长度"></a>四、带环链表总长度</h2><p>找到连接点p后，求head到p的长度，再加上环的长度，即为链表的总长。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>益智游戏克星：BFS暴力搜索算法</title>
    <url>/posts/20eb9dff/</url>
    <content><![CDATA[<h1 id="益智游戏克星：BFS暴力搜索算法"><a href="#益智游戏克星：BFS暴力搜索算法" class="headerlink" title="益智游戏克星：BFS暴力搜索算法"></a>益智游戏克星：BFS暴力搜索算法</h1><h2 id="益智游戏克星：BFS暴力搜索算法-1"><a href="#益智游戏克星：BFS暴力搜索算法-1" class="headerlink" title="益智游戏克星：BFS暴力搜索算法"></a>益智游戏克星：BFS暴力搜索算法</h2><p>滑动拼图游戏大家应该都玩过，下图是一个 4x4 的滑动拼图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/5zWwfF_20210507183108.png" alt="图片"></p>
<p>拼图中有一个格子是空的，可以利用这个空着的格子移动其他数字。你需要通过移动这些数字，得到某个特定排列顺序，这样就算赢了。</p>
<p>我小时候还玩过一款叫做「华容道」的益智游戏，也和滑动拼图比较类似：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/ueMqO0_20210507183151.png" alt="图片"></p>
<p>那么这种游戏怎么玩呢？我记得是有一些套路的，类似于魔方还原公式。但是我们今天不来研究让人头秃的技巧，<strong>这些益智游戏通通可以用暴力搜索算法解决，所以今天我们就学以致用，用 BFS 算法框架来秒杀这些游戏</strong>。</p>
<h3 id="一、题目解析"><a href="#一、题目解析" class="headerlink" title="一、题目解析"></a>一、题目解析</h3><p>LeetCode 第 773 题就是滑动拼图问题，题目的意思如下：</p>
<p>给你一个 2x3 的滑动拼图，用一个 2x3 的数组<code>board</code>表示。拼图中有数字 0~5 六个数，其中数字 0 就表示那个空着的格子，你可以移动其中的数字，当<code>board</code>变为<code>[[1,2,3],[4,5,0]]</code>时，赢得游戏。</p>
<p>请你写一个算法，计算赢得游戏需要的最少移动次数，如果不能赢得游戏，返回 -1。</p>
<p>比如说输入的二维数组<code>board = [[4,1,2],[5,0,3]]</code>，算法应该返回 5：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/DnxfJo_20210507183245.png" alt="图片"></p>
<p>如果输入的是<code>board = [[1,2,3],[4,0,5]]</code>，则算法返回 -1，因为这种局面下无论如何都不能赢得游戏。</p>
<h3 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h3><p>对于这种计算最小步数的问题，我们就要敏感地想到 BFS 算法。</p>
<p>这个题目转化成 BFS 问题是有一些技巧的，我们面临如下问题：</p>
<p>1、一般的 BFS 算法，是从一个起点<code>start</code>开始，向终点<code>target</code>进行寻路，但是拼图问题不是在寻路，而是在不断交换数字，这应该怎么转化成 BFS 算法问题呢？</p>
<p>2、即便这个问题能够转化成 BFS 问题，如何处理起点<code>start</code>和终点<code>target</code>？它们都是数组哎，把数组放进队列，套 BFS 框架，想想就比较麻烦且低效。</p>
<p>首先回答第一个问题，<strong>BFS 算法并不只是一个寻路算法，而是一种暴力搜索算法</strong>，只要涉及暴力穷举的问题，BFS 就可以用，而且可以最快地找到答案。</p>
<p>你想想计算机怎么解决问题的？哪有那么多奇技淫巧，本质上就是把所有可行解暴力穷举出来，然后从中找到一个最优解罢了。</p>
<p>明白了这个道理，我们的问题就转化成了：<strong>如何穷举出<code>board</code>当前局面下可能衍生出的所有局面</strong>？这就简单了，看数字 0 的位置呗，和上下左右的数字进行交换就行了：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/KoSRd4_20210507183301.png" alt="图片"></p>
<p>这样其实就是一个 BFS 问题，每次先找到数字 0，然后和周围的数字进行交换，形成新的局面加入队列…… 当第一次到达<code>target</code>时，就得到了赢得游戏的最少步数。</p>
<p>对于第二个问题，我们这里的<code>board</code>仅仅是 2x3 的二维数组，所以可以压缩成一个一维字符串。<strong>其中比较有技巧性的点在于，二维数组有「上下左右」的概念，压缩成一维后，如何得到某一个索引上下左右的索引</strong>？</p>
<p>很简单，我们只要手动写出来这个映射就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; neighbor = &#123;</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span> &#125;,</span><br><span class="line">    &#123; <span class="number">1</span>, <span class="number">5</span> &#125;,</span><br><span class="line">    &#123; <span class="number">0</span>, <span class="number">4</span> &#125;,</span><br><span class="line">    &#123; <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span> &#125;,</span><br><span class="line">    &#123; <span class="number">4</span>, <span class="number">2</span> &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>**这个含义就是，在一维字符串中，索引<code>i</code>在二维数组中的的相邻索引为<code>neighbor[i]</code>**，：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/CkiHlV_20210507183314.png" alt="图片"></p>
<p>至此，我们就把这个问题完全转化成标准的 BFS 问题了，借助前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485134&idx=1&sn=fd345f8a93dc4444bcc65c57bb46fc35&chksm=9bd7f8c6aca071d04c4d383f96f2b567ad44dc3e67d1c3926ec92d6a3bcc3273de138b36a0d9&scene=21#wechat_redirect">BFS 算法框架套路详解</a> 的代码框架，直接就可以套出解法代码了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">slidingPuzzle</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; board)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">2</span>, n = <span class="number">3</span>;</span><br><span class="line">    <span class="type">string</span> <span class="variable">start</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="type">string</span> <span class="variable">target</span> <span class="operator">=</span> <span class="string">&quot;123450&quot;</span>;</span><br><span class="line">    <span class="comment">// 将 2x3 的数组转化成字符串</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            start.push_back(board[i][j] + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 记录一维字符串的相邻索引</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; neighbor = &#123;</span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">3</span> &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">4</span>, <span class="number">2</span> &#125;,</span><br><span class="line">        &#123; <span class="number">1</span>, <span class="number">5</span> &#125;,</span><br><span class="line">        &#123; <span class="number">0</span>, <span class="number">4</span> &#125;,</span><br><span class="line">        &#123; <span class="number">3</span>, <span class="number">1</span>, <span class="number">5</span> &#125;,</span><br><span class="line">        &#123; <span class="number">4</span>, <span class="number">2</span> &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******* BFS 算法框架开始 *******/</span></span><br><span class="line">    queue&lt;string&gt; q;</span><br><span class="line">    unordered_set&lt;string&gt; visited;</span><br><span class="line">    q.push(start);</span><br><span class="line">    visited.insert(start);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">step</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sz</span> <span class="operator">=</span> q.size();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            <span class="type">string</span> <span class="variable">cur</span> <span class="operator">=</span> q.front(); q.pop();</span><br><span class="line">            <span class="comment">// 判断是否达到目标局面</span></span><br><span class="line">            <span class="keyword">if</span> (target == cur) &#123;</span><br><span class="line">                <span class="keyword">return</span> step;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到数字 0 的索引</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (; cur[idx] != <span class="string">&#x27;0&#x27;</span>; idx++);</span><br><span class="line">            <span class="comment">// 将数字 0 和相邻的数字交换位置</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> adj : neighbor[idx]) &#123;</span><br><span class="line">                <span class="type">string</span> <span class="variable">new_board</span> <span class="operator">=</span> cur;</span><br><span class="line">                swap(new_board[adj], new_board[idx]);</span><br><span class="line">                <span class="comment">// 防止走回头路</span></span><br><span class="line">                <span class="keyword">if</span> (!visited.count(new_board)) &#123;</span><br><span class="line">                    q.push(new_board);</span><br><span class="line">                    visited.insert(new_board);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="comment">/******* BFS 算法框架结束 *******/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，这道题目就解决了，其实框架完全没有变，套路都是一样的，我们只是花了比较多的时间将滑动拼图游戏转化成 BFS 算法。</p>
<p><strong>很多益智游戏都是这样，虽然看起来特别巧妙，但都架不住暴力穷举</strong>，常用的算法就是回溯算法或者 BFS 算法，感兴趣的话我们以后再聊。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典动态规划：0-1 背包问题</title>
    <url>/posts/87975f1/</url>
    <content><![CDATA[<h1 id="经典动态规划：0-1-背包问题"><a href="#经典动态规划：0-1-背包问题" class="headerlink" title="经典动态规划：0-1 背包问题"></a>经典动态规划：0-1 背包问题</h1><p>后台天天有人问背包问题，这个问题其实不难啊，如果我们号动态规划系列的十几篇文章你都看过，借助框架，遇到背包问题可以说是手到擒来好吧。无非就是状态 + 选择，也没啥特别之处嘛。</p>
<p>今天就来说一下背包问题吧，就讨论最常说的 0-1 背包问题，简单描述一下吧：</p>
<p>给你一个可装载重量为<code>W</code>的背包和<code>N</code>个物品，每个物品有重量和价值两个属性。其中第<code>i</code>个物品的重量为<code>wt[i]</code>，价值为<code>val[i]</code>，现在让你用这个背包装物品，最多能装的价值是多少？</p>
<p>举个简单的例子，输入如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">N = <span class="number">3</span>, W = <span class="number">4</span></span><br><span class="line">wt = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>]</span><br><span class="line">val = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<p>算法返回 6，选择前两件物品装进背包，总重量 3 小于<code>W</code>，可以获得最大价值 6。</p>
<p>题目就是这么简单，一个典型的动态规划问题。<strong>这个题目中的物品不可以分割，要么装进包里，要么不装，不能说切成两块装一半。</strong>这也许就是 0-1 背包这个名词的来历。</p>
<p>解决这个问题没有什么排序之类巧妙的方法，只能穷举所有可能，根据我们 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484731&idx=1&sn=f1db6dee2c8e70c42240aead9fd224e6&chksm=9bd7fb33aca07225bee0b23a911c30295e0b90f393af75eca377caa4598ffb203549e1768336&scene=21#wechat_redirect">动态规划套路详解</a> 中的套路，直接走流程就行了。</p>
<h2 id="动规标准套路"><a href="#动规标准套路" class="headerlink" title="动规标准套路"></a>动规标准套路</h2><p>看来我得每篇动态规划文章都得重复一遍套路，历史文章中的动态规划问题都是按照下面的套路来的，今天再来手把手演示一下：</p>
<p><strong>第一步****要明确两点，「状态」和「选择」</strong>。</p>
<p>先说状态，如何才能描述一个问题局面？只要给定几个可选物品和一个背包的容量限制，就形成了一个背包问题，对不对？<strong>所以状态有两个，就是「背包的容量」和「可选择的物品」</strong>。</p>
<p>再说选择，也很容易想到啊，对于每件物品，你能选择什么？<strong>选择就是「装进背包」或者「不装进背包」嘛</strong>。</p>
<p>明白了状态和选择，动态规划问题基本上就解决了，只要往这个框架套就完事儿了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> in 状态<span class="number">1</span>的所有取值：</span><br><span class="line">    <span class="keyword">for</span> 状态<span class="number">2</span> in 状态<span class="number">2</span>的所有取值：</span><br><span class="line">        <span class="keyword">for</span> ...</span><br><span class="line">            dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 择优(选择<span class="number">1</span>，选择<span class="number">2.</span>..)</span><br></pre></td></tr></table></figure>

<p>PS：此框架出自历史文章 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484508&idx=1&sn=42cae6e7c5ccab1f156a83ea65b00b78&chksm=9bd7fa54aca07342d12ae149dac3dfa76dc42bcdd55df2c71e78f92dedbbcbdb36dec56ac13b&scene=21#wechat_redirect">团灭 LeetCode 股票买卖问题</a>。</p>
<p><strong>第二步**<strong>要明确</strong></strong><code>dp</code>数组的定义**。</p>
<p><code>dp</code>数组是什么？其实就是描述问题局面的一个数组。换句话说，我们刚才明确问题有什么「状态」，现在需要用<code>dp</code>数组把状态表示出来。</p>
<p>首先看看刚才找到的「状态」，有两个，也就是说我们需要一个二维<code>dp</code>数组，一维表示可选择的物品，一维表示背包的容量。</p>
<p><strong><code>dp[i][w]</code>的定义如下：对于前<code>i</code>个物品，当前背包的容量为<code>w</code>，这种情况下可以装的最大价值是<code>dp[i][w]</code>。</strong></p>
<p>比如说，如果 <code>dp[3][5]</code> &#x3D; 6，其含义为：对于给定的一系列物品中，若只对前 3 个物品进行选择，当背包容量为 5 时，最多可以装下的价值为 6。</p>
<p>PS：为什么要这么定义？便于状态转移，或者说这就是套路，记下来就行了。建议看一下我们的动态规划系列文章，几种动规套路都被扒得清清楚楚了。</p>
<p><strong>根据这个定义，我们想求的最终答案就是</strong>**<code>dp[N][W]</code>。base case 就是<code>dp[0][..] = dp[..][0] = 0</code>**，因为没有物品或者背包没有空间的时候，能装的最大价值就是 0。</p>
<p>细化上面的框架：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dp[N+<span class="number">1</span>][W+<span class="number">1</span>]</span><br><span class="line">dp[<span class="number">0</span>][..] = <span class="number">0</span></span><br><span class="line">dp[..][<span class="number">0</span>] = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i in [<span class="number">1.</span>.N]:</span><br><span class="line">    <span class="keyword">for</span> w in [<span class="number">1.</span>.W]:</span><br><span class="line">        dp[i][w] = max(</span><br><span class="line">            把物品 i 装进背包,</span><br><span class="line">            不把物品 i 装进背包</span><br><span class="line">        )</span><br><span class="line"><span class="keyword">return</span> dp[N][W]</span><br></pre></td></tr></table></figure>

<p><strong>第三步****，根据「选择」，思考状态转移的逻辑</strong>。</p>
<p>简单说就是，上面伪码中「把物品<code>i</code>装进背包」和「不把物品<code>i</code>装进背包」怎么用代码体现出来呢？</p>
<p><strong>这一步要结合对</strong><strong><code>dp</code>数组的定义和我们的算法逻辑来分析：</strong></p>
<p>先重申一下刚才我们的<code>dp</code>数组的定义：</p>
<p><code>dp[i][w]</code>表示：对于前<code>i</code>个物品，当前背包的容量为<code>w</code>时，这种情况下可以装下的最大价值是<code>dp[i][w]</code>。</p>
<p><strong>如果你没有把这第</strong><strong><code>i</code>个物品装入背包</strong>，那么很显然，最大价值<code>dp[i][w]</code>应该等于<code>dp[i-1][w]</code>。你不装嘛，那就继承之前的结果。</p>
<p><strong>如果你把这第</strong><strong><code>i</code>个物品装入了背包</strong>，那么<code>dp[i][w]</code>应该等于<code>dp[i-1][w-wt[i-1]] + val[i-1]</code>。</p>
<p>首先，由于<code>i</code>是从 1 开始的，所以对<code>val</code>和<code>wt</code>的取值是<code>i-1</code>。</p>
<p>而<code>dp[i-1][w-wt[i-1]]</code>也很好理解：你如果想装第<code>i</code>个物品，你怎么计算这时候的最大价值？<strong>换句话说，在装第</strong><strong><code>i</code>个物品的前提下，背包能装的最大价值是多少？</strong></p>
<p>显然，你应该寻求剩余重量<code>w-wt[i-1]</code>限制下能装的最大价值，加上第<code>i</code>个物品的价值<code>val[i-1]</code>，这就是装第<code>i</code>个物品的前提下，背包可以装的最大价值。</p>
<p>综上就是两种选择，我们都已经分析完毕，也就是写出来了状态转移方程，可以进一步细化代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i in [<span class="number">1.</span>.N]:</span><br><span class="line">    <span class="keyword">for</span> w in [<span class="number">1.</span>.W]:</span><br><span class="line">        dp[i][w] = max(</span><br><span class="line">            dp[i-<span class="number">1</span>][w],</span><br><span class="line">            dp[i-<span class="number">1</span>][w - wt[i-<span class="number">1</span>]] + val[i-<span class="number">1</span>]</span><br><span class="line">        )</span><br><span class="line"><span class="keyword">return</span> dp[N][W]</span><br></pre></td></tr></table></figure>

<p><strong>最后一步****，把伪码翻译成代码，处理一些边界情况</strong>。</p>
<p>我用 C++ 写的代码，把上面的思路完全翻译了一遍，并且处理了<code>w - wt[i-1]</code>可能小于 0 导致数组索引越界的问题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">knapsack</span><span class="params">(<span class="type">int</span> W, <span class="type">int</span> N, vector&lt;<span class="type">int</span>&gt;&amp; wt, vector&lt;<span class="type">int</span>&gt;&amp; val)</span> &#123;</span><br><span class="line">    <span class="comment">// vector 全填入 0，base case 已初始化</span></span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="title function_">dp</span><span class="params">(N + <span class="number">1</span>, vector&lt;<span class="type">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>)</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> <span class="number">1</span>; w &lt;= W; w++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (w - wt[i-<span class="number">1</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 当前背包容量装不下，只能选择不装入背包</span></span><br><span class="line">                dp[i][w] = dp[i - <span class="number">1</span>][w];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 装入或者不装入背包，择优</span></span><br><span class="line">                dp[i][w] = max(dp[i - <span class="number">1</span>][w - wt[i-<span class="number">1</span>]] + val[i-<span class="number">1</span>], </span><br><span class="line">                               dp[i - <span class="number">1</span>][w]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在你看这个解法代码，是不是感觉非常简单，就是把我们刚才分析的思路原封不动翻译了一下而已。</p>
<p>所以说，明确了动态规划的套路，思路就显得行云流水，非常自然就出答案了。</p>
<p>至此，背包问题就解决了。相比而言，我觉得这是比较简单的动态规划问题，因为状态转移的推导逻辑比较容易想到，基本上你明确了<code>dp</code>数组的定义，就可以理所当然地确定状态转移了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>滑动窗口</title>
    <url>/posts/50cab45/</url>
    <content><![CDATA[<h1 id="滑动窗口算法"><a href="#滑动窗口算法" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h1><h2 id="滑动窗口算法-1"><a href="#滑动窗口算法-1" class="headerlink" title="滑动窗口算法"></a>滑动窗口算法</h2><p><strong>滑动窗口框架套路详解</strong></p>
<p>在滑动窗口算法框架中，我编写一首小诗来歌颂滑动窗口算法的伟大：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdEsLiaY9d9CcVdNcPTAdO5MRwZhsxtTc6BaDMpHQtibCX5kY406sxFeaClrlft3j6XiaJ48jq0Gnj2dQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>关于双指针的快慢指针和左右指针的用法，可以参见前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484505&idx=1&sn=0e9517f7c4021df0e6146c6b2b0c4aba&chksm=9bd7fa51aca07347009c591c403b3228f41617806429e738165bd58d60220bf8f15f92ff8a2e&scene=21#wechat_redirect">双指针技巧汇总</a>，<strong>本文就解决一类最难掌握的双指针技巧：滑动窗口技巧，并总结出一套框架，可以保你闭着眼直接套出答案。</strong></p>
<p>说起滑动窗口算法，很多读者都会头疼。这个算法技巧的思路非常简单，就是维护一个窗口，不断滑动，然后更新答案么。LeetCode 上有起码 10 道运用滑动窗口算法的题目，难度都是中等和困难。该算法的大致逻辑如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">    <span class="comment">// 增大窗口</span></span><br><span class="line">    window.add(s[right]);</span><br><span class="line">    right++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (window needs shrink) &#123;</span><br><span class="line">        <span class="comment">// 缩小窗口</span></span><br><span class="line">        window.remove(s[left]);</span><br><span class="line">        left++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个算法技巧的时间复杂度是 O(N)，比一般的字符串暴力算法要高效得多。</p>
<p><strong><em>其实困扰大家的</em>，不是算法的思路，而是各种细节问题</strong>。比如说如何向窗口中添加新元素，如何缩小窗口，在窗口滑动的哪个阶段更新结果。即便你明白了这些细节，也容易出 bug，找 bug 还不知道怎么找，真的挺让人心烦的。</p>
<p><strong>所以今天我就写一套滑动窗口算法的代码框架，我连在哪里做输出 debug 都给你写好了，以后遇到相关的问题，你就默写出来如下框架然后改三个地方就行，还不会出边界问题</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 滑动窗口算法框架 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">slidingWindow</span>(<span class="params">string s, string t</span>) &#123;</span><br><span class="line">    unordered_map&lt;char, int&gt; need, <span class="variable language_">window</span>;</span><br><span class="line">    <span class="keyword">for</span> (char c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    int left = <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    int valid = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.<span class="title function_">size</span>()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        char c = s[right];</span><br><span class="line">        <span class="comment">// 右移窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*** debug 输出的位置 ***/</span></span><br><span class="line">        <span class="title function_">printf</span>(<span class="string">&quot;window: [%d, %d)\n&quot;</span>, left, right);</span><br><span class="line">        <span class="comment">/********************/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="variable language_">window</span> needs shrink) &#123;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            char d = s[left];</span><br><span class="line">            <span class="comment">// 左移窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中两处<code>...</code>表示的更新窗口数据的地方，到时候你直接往里面填就行了</strong>。</p>
<p>而且，这两个<code>...</code>处的操作分别是右移和左移窗口更新操作，等会你会发现它们操作是完全对称的。</p>
<p><strong>说句题外话，其实有很多人喜欢执着于表象，不喜欢探求问题的本质。</strong>比如说有很多人评论我这个框架，说什么散列表速度慢，不如用数组代替散列表；还有很多人喜欢把代码写得特别短小，说我这样代码太多余，影响编译速度，LeetCode 上速度不够快。</p>
<p>我也是服了，算法看的是时间复杂度，你能确保自己的时间复杂度最优就行了。至于 LeetCode 所谓的运行速度，那个都是玄学，只要不是慢的离谱就没啥问题，根本不值得你从编译层面优化，不要舍本逐末……</p>
<p>重点在于算法思想，你把框架思维了然于心套出解法，然后随你再魔改代码好吧，你高兴就好。</p>
<p>言归正传，<strong>下面就直接上*<em>四道*</em> LeetCode 原题来套这个框架</strong>，其中第一道题会详细说明其原理，后面四道就直接闭眼睛秒杀了。</p>
<p>本文代码为 C++ 实现，不会用到什么编程方面的奇技淫巧，但是还是简单介绍一下一些用到的数据结构，以免有的读者因为语言的细节问题阻碍对算法思想的理解：</p>
<p><code>unordered_map</code>就是哈希表（字典），它的一个方法<code>count(key)</code>相当于 Java 的<code>containsKey(key)</code>可以判断键 key 是否存在。</p>
<p>可以使用方括号访问键对应的值<code>map[key]</code>。需要注意的是，如果该<code>key</code>不存在，C++ 会自动创建这个 key，并把<code>map[key]</code>赋值为 0。</p>
<p>所以代码中多次出现的<code>map[key]++</code>相当于 Java 的<code>map.put(key, map.getOrDefault(key, 0) + 1)</code>。</p>
<h3 id="一、最小覆盖子串"><a href="#一、最小覆盖子串" class="headerlink" title="一、最小覆盖子串"></a>一、最小覆盖子串</h3><p>LeetCode 76 题，Minimum Window Substring，难度 <strong>Hard</strong>，我带大家看看它到底有多 <strong>Hard</strong>：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowk6hiaxmGN6ibHiaTqxHMqYvCRA4lWuRCQicPSfZY78De1GmwkXviar4psjw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>就是说要在<code>S</code>(source) 中找到包含<code>T</code>(target) 中全部字母的一个子串，且这个子串一定是所有可能子串中最短的。</p>
<p>如果我们使用暴力解法，代码大概是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.size(); i++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; s.size(); j++)</span><br><span class="line">        <span class="keyword">if</span> s[i:j] 包含 t 的所有字母:</span><br><span class="line">            更新答案</span><br></pre></td></tr></table></figure>

<p>思路很直接，但是显然，这个算法的复杂度肯定大于 O(N^2) 了，不好。</p>
<p><strong>滑动窗口算法的思路是这样</strong>：</p>
<p><em><strong>1、</strong></em>我们在字符串<code>S</code>中使用双指针中的左右指针技巧，初始化<code>left = right = 0</code>，<strong>把索引左闭右开区间<code>[left, right)</code>称为一个「窗口」</strong>。</p>
<p><em><strong>2、</strong></em>我们先不断地增加<code>right</code>指针扩大窗口<code>[left, right)</code>，直到窗口中的字符串符合要求（包含了<code>T</code>中的所有字符）。</p>
<p><em><strong>3、</strong></em>此时，我们停止增加<code>right</code>，转而不断增加<code>left</code>指针缩小窗口<code>[left, right)</code>，直到窗口中的字符串不再符合要求（不包含<code>T</code>中的所有字符了）。同时，每次增加<code>left</code>，我们都要更新一轮结果。</p>
<p><em><strong>4、</strong></em>重复第 2 和第 3 步，直到<code>right</code>到达字符串<code>S</code>的尽头。</p>
<p>这个思路其实也不难，<strong>第 2 步相当于在寻找一个「可行解」，然后第 3 步在优化这个「可行解」，最终找到最优解，</strong>也就是最短的覆盖子串。左右指针轮流前进，窗口大小增增减减，窗口不断向右滑动，这就是「滑动窗口」这个名字的来历。</p>
<p>下面画图理解一下，<code>needs</code>和<code>window</code>相当于计数器，分别记录<code>T</code>中字符出现次数和「窗口」中的相应字符的出现次数。</p>
<p>初始状态：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEow6FwvAvsZKyCTCtrmLcvKDxhYAJEqI36cAZxfoIWLFibEhmz9IfHf24Q/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>增加<code>right</code>，直到窗口<code>[left, right)</code>包含了<code>T</code>中所有字符：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowCyAS47jbjAGEfqUVRzkKDWbT6Y8JiarUicPMVR2yI72X3X6hjBGj4bGw/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>现在开始增加<code>left</code>，缩小窗口<code>[left, right)</code>。</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowoE6BjdgVFKZwEb1q6VibCzIsNuoYmHuNicVdlDibQrQD6lRJbibjkBxO4A/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>直到窗口中的字符串不再符合要求，<code>left</code>不再继续移动。</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowZQrqU81dPoEicq1J93aicY0A70IdicorFC5kfhJKa66CibKQTJxY4A60jA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>之后重复上述过程，先移动<code>right</code>，再移动<code>left</code>…… 直到<code>right</code>指针到达字符串<code>S</code>的末端，算法结束。</p>
<p>如果你能够理解上述过程，恭喜，你已经完全掌握了滑动窗口算法思想。<strong>现在我们来看看这个滑动窗口代码框架怎么用</strong>：</p>
<p>首先，初始化<code>window</code>和<code>need</code>两个哈希表，记录窗口中的字符和需要凑齐的字符：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">char</span> c : t) need[c]++;</span><br></pre></td></tr></table></figure>

<p>然后，使用<code>left</code>和<code>right</code>变量初始化窗口的两端，不要忘了，区间<code>[left, right)</code>是左闭右开的，所以初始情况下窗口没有包含任何元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>; </span><br><span class="line"><span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">    <span class="comment">// 开始滑动</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>其中<code>valid</code>变量表示窗口中满足<code>need</code>条件的字符个数</strong>，如果<code>valid</code>和<code>need.size</code>的大小相同，则说明窗口已满足条件，已经完全覆盖了串<code>T</code>。</p>
<p><strong>现在开始套模板，只需要思考以下四个问题</strong>：</p>
<p><strong>1、</strong>当移动<code>right</code>扩大窗口，即加入字符时，应该更新哪些数据？</p>
<p><strong>2、</strong>什么条件下，窗口应该暂停扩大，开始移动<code>left</code>缩小窗口？</p>
<p><strong>3、</strong>当移动<code>left</code>缩小窗口，即移出字符时，应该更新哪些数据？</p>
<p><strong>4、</strong>我们要的结果应该在扩大窗口时还是缩小窗口时进行更新？</p>
<p>如果一个字符进入窗口，应该增加<code>window</code>计数器；如果一个字符将移出窗口的时候，应该减少<code>window</code>计数器；当<code>valid</code>满足<code>need</code>时应该收缩窗口；应该在收缩窗口的时候更新最终结果。</p>
<p>下面是完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">string <span class="title function_">minWindow</span><span class="params">(string s, string t)</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 记录最小覆盖子串的起始索引及长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, len = INT_MAX;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="comment">// c 是将移入窗口的字符</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">        <span class="comment">// 右移窗口</span></span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        <span class="keyword">if</span> (need.count(c)) &#123;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (window[c] == need[c])</span><br><span class="line">                valid++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (valid == need.size()) &#123;</span><br><span class="line">            <span class="comment">// 在这里更新最小覆盖子串</span></span><br><span class="line">            <span class="keyword">if</span> (right - left &lt; len) &#123;</span><br><span class="line">                start = left;</span><br><span class="line">                len = right - left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// d 是将移出窗口的字符</span></span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s[left];</span><br><span class="line">            <span class="comment">// 左移窗口</span></span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span> (need.count(d)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (window[d] == need[d])</span><br><span class="line">                    valid--;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;                    </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回最小覆盖子串</span></span><br><span class="line">    <span class="type">return</span> <span class="variable">len</span> <span class="operator">=</span>= INT_MAX ?</span><br><span class="line">        <span class="string">&quot;&quot;</span> : s.substr(start, len);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的是，当我们发现某个字符在<code>window</code>的数量满足了<code>need</code>的需要，就要更新<code>valid</code>，表示有一个字符已经满足要求。而且，你能发现，两次对窗口内数据的更新操作是完全对称的。</p>
<p>当<code>valid == need.size()</code>时，说明<code>T</code>中所有字符已经被覆盖，已经得到一个可行的覆盖子串，现在应该开始收缩窗口了，以便得到「最小覆盖子串」。</p>
<p>移动<code>left</code>收缩窗口时，窗口内的字符都是可行解，所以应该在收缩窗口的阶段进行最小覆盖子串的更新，以便从可行解中找到长度最短的最终结果。</p>
<p>至此，应该可以完全理解这套框架了，滑动窗口算法又不难，就是细节问题让人烦得很。<strong>以后遇到滑动窗口算法，你就按照这框架写代码，保准没有 bug，还省事儿</strong>。</p>
<p>下面就直接利用这套框架秒杀几道题吧，你基本上一眼就能看出思路了。</p>
<h3 id="二、字符串排列"><a href="#二、字符串排列" class="headerlink" title="二、字符串排列"></a>二、字符串排列</h3><p>LeetCode 567 题，Permutation in String，难度 Medium：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowmo3G9oN6XDmHeHjGic6tUauwoZia40pxjbicJXtN1RcjMMRDkfcGaVNVg/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>注意哦，输入的<code>s1</code>是可以包含重复字符的，所以这个题难度不小。</p>
<p>这种题目，是明显的滑动窗口算法，<strong>相当给你一个<code>S</code>和一个<code>T</code>，请问你<code>S</code>中是否存在一个子串，包含<code>T</code>中所有字符且不包含其他字符</strong>？</p>
<p>首先，先复制粘贴之前的算法框架代码，然后明确刚才提出的 4 个问题，即可写出这道题的答案：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断 s 中是否存在 t 的排列</span></span><br><span class="line">bool <span class="title function_">checkInclusion</span><span class="params">(string t, string s)</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        <span class="keyword">if</span> (need.count(c)) &#123;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (window[c] == need[c])</span><br><span class="line">                valid++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (right - left &gt;= t.size()) &#123;</span><br><span class="line">            <span class="comment">// 在这里判断是否找到了合法的子串</span></span><br><span class="line">            <span class="keyword">if</span> (valid == need.size())</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s[left];</span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span> (need.count(d)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (window[d] == need[d])</span><br><span class="line">                    valid--;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 未找到符合条件的子串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于这道题的解法代码，基本上和最小覆盖子串一模一样，只需要改变两个地方：</p>
<p><strong>1、</strong>本题移动<code>left</code>缩小窗口的时机是窗口大小大于<code>t.size()</code>时，因为排列嘛，显然长度应该是一样的。</p>
<p><strong>2、</strong>当发现<code>valid == need.size()</code>时，就说明窗口中就是一个合法的排列，所以立即返回<code>true</code>。</p>
<p>至于如何处理窗口的扩大和缩小，和最小覆盖子串完全相同。</p>
<h3 id="三、找所有字母异位词"><a href="#三、找所有字母异位词" class="headerlink" title="三、找所有字母异位词"></a>三、找所有字母异位词</h3><p>这是 LeetCode 第 438 题，Find All Anagrams in a String，难度 Medium：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowe98rknTABmhPaxgzV5Vv9gHdEpNUDia6CO0gxuPpNR5My6ogK8wuibTQ/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>呵呵，这个所谓的字母异位词，不就是排列吗，搞个高端的说法就能糊弄人了吗？<strong>相当于，输入一个串<code>S</code>，一个串<code>T</code>，找到<code>S</code>中所有<code>T</code>的排列，返回它们的起始索引</strong>。</p>
<p>直接默写一下框架，明确刚才讲的 4 个问题，即可秒杀这道题：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; <span class="title function_">findAnagrams</span><span class="params">(string s, string t)</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; need, window;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : t) need[c]++;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">valid</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; res; <span class="comment">// 记录结果</span></span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        <span class="keyword">if</span> (need.count(c)) &#123;</span><br><span class="line">            window[c]++;</span><br><span class="line">            <span class="keyword">if</span> (window[c] == need[c]) </span><br><span class="line">                valid++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (right - left &gt;= t.size()) &#123;</span><br><span class="line">            <span class="comment">// 当窗口符合条件时，把起始索引加入 res</span></span><br><span class="line">            <span class="keyword">if</span> (valid == need.size())</span><br><span class="line">                res.push_back(left);</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s[left];</span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            <span class="keyword">if</span> (need.count(d)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (window[d] == need[d])</span><br><span class="line">                    valid--;</span><br><span class="line">                window[d]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>跟寻找字符串的排列一样，只是找到一个合法异位词（排列）之后将起始索引加入<code>res</code>即可。</p>
<h3 id="四、最长无重复子串"><a href="#四、最长无重复子串" class="headerlink" title="四、最长无重复子串"></a>四、最长无重复子串</h3><p>这是 LeetCode 第 3 题，Longest Substring Without Repeating Characters，难度 Medium：</p>
<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/gibkIz0MVqdGQlBxOlAet1AXGPoibCzEowdOEyLaTVTiabiabMHr2Z7SzZZ08fxMDZt4uzzRcfvoI7sJzfdORvH0tA/640?wx_fmt=png&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<p>这个题终于有了点新意，不是一套框架就出答案，不过反而更简单了，稍微改一改框架就行了：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">lengthOfLongestSubstring</span><span class="params">(string s)</span> &#123;</span><br><span class="line">    unordered_map&lt;<span class="type">char</span>, <span class="type">int</span>&gt; window;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 记录结果</span></span><br><span class="line">    <span class="keyword">while</span> (right &lt; s.size()) &#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> s[right];</span><br><span class="line">        right++;</span><br><span class="line">        <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">        window[c]++;</span><br><span class="line">        <span class="comment">// 判断左侧窗口是否要收缩</span></span><br><span class="line">        <span class="keyword">while</span> (window[c] &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">d</span> <span class="operator">=</span> s[left];</span><br><span class="line">            left++;</span><br><span class="line">            <span class="comment">// 进行窗口内数据的一系列更新</span></span><br><span class="line">            window[d]--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 在这里更新答案</span></span><br><span class="line">        res = max(res, right - left);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这就是变简单了，连<code>need</code>和<code>valid</code>都不需要，而且更新窗口内数据也只需要简单的更新计数器<code>window</code>即可。</p>
<p>当<code>window[c]</code>值大于 1 时，说明窗口中存在重复字符，不符合条件，就该移动<code>left</code>缩小窗口了嘛。</p>
<p>唯一需要注意的是，在哪里更新结果<code>res</code>呢？我们要的是最长无重复子串，哪一个阶段可以保证窗口中的字符串是没有重复的呢？</p>
<p>这里和之前不一样，**要在收缩窗口完成后更新<code>res</code>**，因为窗口收缩的 while 条件是存在重复元素，换句话说收缩完成后一定保证窗口中没有重复嘛。</p>
<h3 id="五、最后总结"><a href="#五、最后总结" class="headerlink" title="五、最后总结"></a>五、最后总结</h3><p><strong>建议背诵并默写这套框架，顺便背诵一下文章开头的那首诗。以后就再也不怕子串、子数组问题了。</strong></p>
<p>我觉得吧，能够看到这的都是高手，要么就是在成为高手的路上。有了框架，任他窗口怎么滑，东哥这波车开得依然稳如老狗。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典动态规划：戳气球问题</title>
    <url>/posts/93bfdc7a/</url>
    <content><![CDATA[<h1 id="经典动态规划：戳气球问题"><a href="#经典动态规划：戳气球问题" class="headerlink" title="经典动态规划：戳气球问题"></a>经典动态规划：戳气球问题</h1><p>今天我们要聊的这道题「Burst Balloon」和之前我们写过的那篇 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484675&idx=1&sn=4a4ac1c0f1279530b42fedacc6cca6e6&chksm=9bd7fb0baca0721dda1eaa1d00b9a520672dc9d5c3be762eeca869be35d7ce232922ba8e928b&scene=21#wechat_redirect">经典动态规划：高楼扔鸡蛋问题</a> 分析过的高楼扔鸡蛋问题类似，知名度很高，但难度确实也很大。因此 labuladong 公众号就给这道题赐个座，来看一看这道题目到底有多难。</p>
<p>它是 LeetCode 第 312 题，题目如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/NNiTSq_20210507180038.png" alt="图片"></p>
<p>首先必须要说明，这个题目的状态转移方程真的比较巧妙，所以说如果你看了题目之后完全没有思路恰恰是正常的。虽然最优答案不容易想出来，但基本的思路分析是我们应该力求做到的。所以本文会先分析一下常规思路，然后再引入动态规划解法。</p>
<h2 id="一、回溯思路"><a href="#一、回溯思路" class="headerlink" title="一、回溯思路"></a>一、回溯思路</h2><p>先来顺一下解决这种问题的套路：</p>
<p><strong>我们前文多次强调过，很显然只要涉及求最值，没有任何奇技淫巧，一定是穷举所有可能的结果，然后对比得出最值</strong>。</p>
<p>所以说，只要遇到求最值的算法问题，首先要思考的就是：如何穷举出所有可能的结果？</p>
<p>穷举主要有两种算法，就是回溯算法和动态规划，前者就是暴力穷举，而后者是根据状态转移方程推导「状态」。</p>
<p>如何将我们的扎气球问题转化成回溯算法呢？这个应该不难想到的，<strong>我们其实就是想穷举戳气球的顺序</strong>，不同的戳气球顺序可能得到不同的分数，我们需要把所有可能的分数中最高的那个找出来，对吧。</p>
<p>那么，这不就是一个「全排列」问题嘛，我们前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484709&idx=1&sn=1c24a5c41a5a255000532e83f38f2ce4&chksm=9bd7fb2daca0723be888b30345e2c5e64649fc31a00b05c27a0843f349e2dd9363338d0dac61&scene=21#wechat_redirect">回溯算法框架套路详解</a> 中有全排列算法的详解和代码，其实只要稍微改一下逻辑即可，伪码思路如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> Integer.MIN_VALUE;</span><br><span class="line"><span class="comment">/* 输入一组气球，返回戳破它们获得的最大分数 */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">maxCoins</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    backtrack(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 回溯算法的伪码解法 */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> socre)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums 为空) &#123;</span><br><span class="line">        res = max(res, score);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">point</span> <span class="operator">=</span> nums[i-<span class="number">1</span>] * nums[i] * nums[i+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> nums[i];</span><br><span class="line">        <span class="comment">// 做选择</span></span><br><span class="line">        在 nums 中删除元素 nums[i]</span><br><span class="line">        <span class="comment">// 递归回溯</span></span><br><span class="line">        backtrack(nums, score + point);</span><br><span class="line">        <span class="comment">// 撤销选择</span></span><br><span class="line">        将 temp 还原到 nums[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>回溯算法就是这么简单粗暴，但是相应的，算法的效率非常低。这个解法等同于全排列，所以时间复杂度是阶乘级别，非常高，题目说了<code>nums</code>的大小<code>n</code>最多为 500，所以回溯算法肯定是不能通过所有测试用例的。</p>
<h2 id="二、动态规划思路"><a href="#二、动态规划思路" class="headerlink" title="二、动态规划思路"></a>二、动态规划思路</h2><p>这个动态规划问题和我们之前的动态规划系列文章相比有什么特别之处？为什么它比较难呢？</p>
<p><strong>原因在于，这个问题中我们每戳破一个气球<code>nums[i]</code>，得到的分数和该气球相邻的气球<code>nums[i-1]</code>和<code>nums[i+1]</code>是有相关性的</strong>。</p>
<p>我们前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484731&idx=1&sn=f1db6dee2c8e70c42240aead9fd224e6&chksm=9bd7fb33aca07225bee0b23a911c30295e0b90f393af75eca377caa4598ffb203549e1768336&scene=21#wechat_redirect">动态规划套路框架详解</a> 说过运用动态规划算法的一个重要条件：<strong>子问题必须独立</strong>。所以对于这个戳气球问题，如果想用动态规划，必须巧妙地定义<code>dp</code>数组的含义，避免子问题产生相关性，才能推出合理的状态转移方程。</p>
<p>如何定义<code>dp</code>数组呢，这里需要对问题进行一个简单地转化。题目说可以认为<code>nums[-1] = nums[n] = 1</code>，那么我们先直接把这两个边界加进去，形成一个新的数组<code>points</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxCoins</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 两端加入两个虚拟气球</span></span><br><span class="line">    <span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>];</span><br><span class="line">    points[<span class="number">0</span>] = points[n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        points[i] = nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在气球的索引变成了从<code>1</code>到<code>n</code>，<code>points[0]</code>和<code>points[n+1]</code>可以认为是两个「虚拟气球」。</p>
<p>那么我们可以改变问题：<strong>在一排气球<code>points</code>中，请你戳破气球<code>0</code>和气球<code>n+1</code>之间的所有气球（不包括<code>0</code>和<code>n+1</code>），使得最终只剩下气球<code>0</code>和气球<code>n+1</code>两个气球，最多能够得到多少分</strong>？</p>
<p>现在可以定义<code>dp</code>数组的含义：</p>
<p>**<code>dp[i][j] = x</code>表示，戳破气球<code>i</code>和气球<code>j</code>之间（开区间，不包括<code>i</code>和<code>j</code>）的所有气球，可以获得的最高分数为<code>x</code>**。</p>
<p>那么根据这个定义，题目要求的结果就是<code>dp[0][n+1]</code>的值，而 base case 就是<code>dp[i][j] = 0</code>，其中<code>0 &lt;= i &lt;= n+1, j &lt;= i+1</code>，因为这种情况下，开区间<code>(i, j)</code>中间根本没有气球可以戳。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// base case 已经都被初始化为 0</span></span><br><span class="line"><span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br></pre></td></tr></table></figure>

<p>现在我们要根据这个<code>dp</code>数组来推导状态转移方程了，根据我们前文的套路，所谓的推导「状态转移方程」，实际上就是在思考怎么「做选择」，也就是这道题目最有技巧的部分：</p>
<p>不就是想求戳破气球<code>i</code>和气球<code>j</code>之间的最高分数吗，如果「正向思考」，就只能写出前文的回溯算法；<strong>我们需要「反向思考」，想一想气球<code>i</code>和气球<code>j</code>之间最后一个被戳破的气球可能是哪一个</strong>？</p>
<p>其实气球<code>i</code>和气球<code>j</code>之间的所有气球都可能是最后被戳破的那一个，不防假设为<code>k</code>。回顾动态规划的套路，这里其实已经找到了「状态」和「选择」：<code>i</code>和<code>j</code>就是两个「状态」，最后戳破的那个气球<code>k</code>就是「选择」。</p>
<p><strong>根据刚才对<code>dp</code>数组的定义，如果最后一个戳破气球<code>k</code>，<code>dp[i][j]</code>的值应该为</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[i][j] = dp[i][k] + dp[k][j] </span><br><span class="line">         + points[i]*points[k]*points[j]</span><br></pre></td></tr></table></figure>

<p>你不是要最后戳破气球<code>k</code>吗？那得先把开区间<code>(i, k)</code>的气球都戳破，再把开区间<code>(k, j)</code>的气球都戳破；最后剩下的气球<code>k</code>，相邻的就是气球<code>i</code>和气球<code>j</code>，这时候戳破<code>k</code>的话得到的分数就是<code>points[i]*points[k]*points[j]</code>。</p>
<p>那么戳破开区间<code>(i, k)</code>和开区间<code>(k, j)</code>的气球最多能得到的分数是多少呢？嘿嘿，就是<code>dp[i][k]</code>和<code>dp[k][j]</code>，这恰好就是我们对<code>dp</code>数组的定义嘛！</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/BgWf3s_20210507180154.png" alt="图片"></p>
<p>结合这个图，就能体会出<code>dp</code>数组定义的巧妙了。由于是开区间，<code>dp[i][k]</code>和<code>dp[k][j]</code>不会影响气球<code>k</code>；而戳破气球<code>k</code>时，旁边相邻的就是气球<code>i</code>和气球<code>j</code>了，最后还会剩下气球<code>i</code>和气球<code>j</code>，这也恰好满足了<code>dp</code>数组开区间的定义。</p>
<p>那么，对于一组给定的<code>i</code>和<code>j</code>，我们只要穷举<code>i &lt; k &lt; j</code>的所有气球<code>k</code>，选择得分最高的作为<code>dp[i][j]</code>的值即可，这也就是状态转移方程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 最后戳破的气球是哪个？</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + <span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">    <span class="comment">// 择优做选择，使得 dp[i][j] 最大</span></span><br><span class="line">    dp[i][j] = Math.max(</span><br><span class="line">        dp[i][j], </span><br><span class="line">        dp[i][k] + dp[k][j] + points[i]*points[j]*points[k]</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>写出状态转移方程就完成这道题的一大半了，但是还有问题：对于<code>k</code>的穷举仅仅是在做「选择」，但是应该如何穷举「状态」<code>i</code>和<code>j</code>呢？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ...; ; )</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> ...; ; )</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + <span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">            dp[i][j] = Math.max(</span><br><span class="line">                dp[i][j], </span><br><span class="line">                dp[i][k] + dp[k][j] + points[i]*points[j]*points[k]</span><br><span class="line">            );</span><br><span class="line"><span class="keyword">return</span> dp[<span class="number">0</span>][n+<span class="number">1</span>];</span><br></pre></td></tr></table></figure>

<h2 id="三、写出代码"><a href="#三、写出代码" class="headerlink" title="三、写出代码"></a>三、写出代码</h2><p><strong>关于「状态」的穷举，最重要的一点就是：状态转移所依赖的状态必须被提前计算出来</strong>。</p>
<p>拿这道题举例，<code>dp[i][j]</code>所依赖的状态是<code>dp[i][k]</code>和<code>dp[k][j]</code>，那么我们必须保证：在计算<code>dp[i][j]</code>时，<code>dp[i][k]</code>和<code>dp[k][j]</code>已经被计算出来了（其中<code>i &lt; k &lt; j</code>）。</p>
<p>那么应该如何安排<code>i</code>和<code>j</code>的遍历顺序，来提供上述的保证呢？我们前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484832&idx=1&sn=44ad2505ac5c276bf36eea1c503b78c3&chksm=9bd7fba8aca072be32f66e6c39d76ef4e91bdbf4ef993014d4fee82896687ad61da4f4fc4eda&scene=21#wechat_redirect">动态规划答疑篇</a> 写过处理这种问题的一个鸡贼技巧：<strong>根据 base case 和最终状态进行推导</strong>。</p>
<p>PS：最终状态就是指题目要求的结果，对于这道题目也就是<code>dp[0][n+1]</code>。</p>
<p>我们先把 base case 和最终的状态在 DP table 上画出来：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/u3gd6W_20210507180507.png" alt="图片"></p>
<p>对于任一<code>dp[i][j]</code>，我们希望所有<code>dp[i][k]</code>和<code>dp[k][j]</code>已经被计算，画在图上就是这种情况：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/Nhk1gt_20210507180419.png" alt="图片"></p>
<p>那么，为了达到这个要求，可以有两种遍历方法，要么斜着遍历，要么从下到上从左到右遍历：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/F2pPqp_20210507180541.png" alt="图片"></p>
<p>斜着遍历有一点难写，所以一般我们就从下往上遍历，下面看完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxCoins</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">    <span class="comment">// 添加两侧的虚拟气球</span></span><br><span class="line">    <span class="type">int</span>[] points = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>];</span><br><span class="line">    points[<span class="number">0</span>] = points[n + <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        points[i] = nums[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// base case 已经都被初始化为 0</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">2</span>][n + <span class="number">2</span>];</span><br><span class="line">    <span class="comment">// 开始状态转移</span></span><br><span class="line">    <span class="comment">// i 应该从下往上</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> n; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// j 应该从左往右</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; n + <span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="comment">// 最后戳破的气球是哪个？</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i + <span class="number">1</span>; k &lt; j; k++) &#123;</span><br><span class="line">                <span class="comment">// 择优做选择</span></span><br><span class="line">                dp[i][j] = Math.max(</span><br><span class="line">                    dp[i][j], </span><br><span class="line">                    dp[i][k] + dp[k][j] + points[i]*points[j]*points[k]</span><br><span class="line">                );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">0</span>][n + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>至此，这道题目就完全解决了，十分巧妙，但也不是那么难，对吧？</p>
<p>关键在于<code>dp</code>数组的定义，需要避免子问题互相影响，所以我们反向思考，将<code>dp[i][j]</code>的定义设为开区间，考虑最后戳破的气球是哪一个，以此构建了状态转移方程。</p>
<p>对于如何穷举「状态」，我们使用了小技巧，通过 base case 和最终状态推导出<code>i,j</code>的遍历方向，保证正确的状态转移。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典面试题：如何寻找最⻓回文子串</title>
    <url>/posts/afbd7c28/</url>
    <content><![CDATA[<h1 id="经典面试题：如何寻找最⻓回文子串"><a href="#经典面试题：如何寻找最⻓回文子串" class="headerlink" title="经典面试题：如何寻找最⻓回文子串"></a>经典面试题：如何寻找最⻓回文子串</h1><h2 id="预计阅读时间：5-分钟"><a href="#预计阅读时间：5-分钟" class="headerlink" title="预计阅读时间：5 分钟"></a>预计阅读时间：5 分钟</h2><p>回文串是面试常常遇到的问题（虽然问题本身没啥意义），本文就告诉你回文串问题的核心思想是什么。</p>
<p>首先，明确一下什：<strong>回文串就是正着读和反着读都一样的字符串</strong>。</p>
<p>比如说字符串<code>aba</code>和<code>abba</code>都是回文串，因为它们对称，反过来还是和本身一样。反之，字符串<code>abac</code>就不是回文串。</p>
<p>可以看到回文串的的长度可能是奇数，也可能是偶数，这就添加了回文串问题的难度，解决该类问题的核心是<strong>双指针</strong>。下面就通过一道最长回文子串的问题来具体理解一下回文串问题：</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/map09icNxZ4lLwdm05DtOeOPia4eSQF3HJWKPuI6XXSumtytXXkvgQPwO1szjiaWicF84yMiaIwmFyRic4RmocZz3qvw/640?wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">string <span class="title function_">longestPalindrome</span><span class="params">(string s)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="一、思考"><a href="#一、思考" class="headerlink" title="一、思考"></a>一、思考</h3><p>对于这个问题，我们首先应该思考的是，给一个字符串<code>s</code>，如何在<code>s</code>中找到一个回文子串？</p>
<p>有一个很有趣的思路：既然回文串是一个正着反着读都一样的字符串，那么如果我们把<code>s</code>反转，称为<code>s&#39;</code>，然后在<code>s</code>和<code>s&#39;</code>中寻找<strong>最长公共子串</strong>，这样应该就能找到最长回文子串。</p>
<p>比如说字符串<code>abacd</code>，反过来是<code>dcaba</code>，它俩的最长公共子串是<code>aba</code>，也就是最长回文子串。</p>
<p>但是这个思路是错误的，比如说字符串<code>aacxycaa</code>，反转之后是<code>aacyxcaa</code>，最长公共子串是<code>aac</code>，但是最长回文子串应该是<code>aa</code>。</p>
<p>虽然这个思路不正确，但是<strong>这种把问题转化为其他形式的思考方式是非常值得提倡的</strong>。</p>
<p>下面，就来说一下正确的思路，如何使用双指针。</p>
<p><strong>寻找回文串的问题核心思想是：从中间开始向两边扩散来判断回文串</strong>。对于最长回文子串，就是这个意思：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; len(s):</span><br><span class="line">    找到以 s[i] 为中心的回文串</span><br><span class="line">    更新答案</span><br></pre></td></tr></table></figure>

<p>但是呢，我们刚才也说了，回文串的长度可能是奇数也可能是偶数，如果是<code>abba</code>这种情况，没有一个中心字符，上面的算法就没辙了。所以我们可以修改一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; len(s):</span><br><span class="line">    找到以 s[i] 为中心的回文串</span><br><span class="line">    找到以 s[i] 和 s[i+<span class="number">1</span>] 为中心的回文串</span><br><span class="line">    更新答案</span><br></pre></td></tr></table></figure>

<p>PS：读者可能发现这里的索引会越界，等会会处理。</p>
<h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><p>按照上面的思路，先要实现一个函数来寻找最长回文串，这个函数是有点技巧的：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/HpyEbX_20210507183744.png" alt="图片"></p>
<p>为什么要传入两个指针<code>l</code>和<code>r</code>呢？<strong>因为这样实现可以同时处理回文串长度为奇数和偶数的情况</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="number">0</span> &lt;= i &lt; len(s):</span><br><span class="line">    # 找到以 s[i] 为中心的回文串</span><br><span class="line">    palindrome(s, i, i)</span><br><span class="line">    # 找到以 s[i] 和 s[i+<span class="number">1</span>] 为中心的回文串</span><br><span class="line">    palindrome(s, i, i + <span class="number">1</span>)</span><br><span class="line">    更新答案</span><br></pre></td></tr></table></figure>

<p>下面看下<code>longestPalindrome</code>的完整代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/VFGLHs_20210507183807.png" alt="图片"></p>
<p>至此，这道最长回文子串的问题就解决了，时间复杂度 O(N^2)，空间复杂度 O(1)。</p>
<p>值得一提的是，这个问题可以用动态规划方法解决，时间复杂度一样，但是空间复杂度至少要 O(N^2) 来存储 DP table。这道题是少有的动态规划非最优解法的问题。</p>
<p>另外，这个问题还有一个巧妙的解法，时间复杂度只需要 O(N)，不过该解法比较复杂，我个人认为没必要掌握。该算法的名字叫 Manacher’s Algorithm（马拉车算法），有兴趣的读者可以自行搜索一下。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典动态规划：高楼扔鸡蛋（进阶篇）</title>
    <url>/posts/d0fbc9db/</url>
    <content><![CDATA[<h1 id="经典动态规划：高楼扔鸡蛋（进阶篇）"><a href="#经典动态规划：高楼扔鸡蛋（进阶篇）" class="headerlink" title="经典动态规划：高楼扔鸡蛋（进阶篇）"></a>经典动态规划：高楼扔鸡蛋（进阶篇）</h1><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxODQxMDM0Mw==&action=getalbum&album_id=1318881141113536512&scene=173&from_msgid=2247484675&from_itemidx=1&count=3&nolastread=1#wechat_redirect">手把手刷动态规划 25个</a></p>
<h2 id="预计阅读时间：9-分钟"><a href="#预计阅读时间：9-分钟" class="headerlink" title="预计阅读时间：9 分钟"></a>预计阅读时间：9 分钟</h2><p>我们在 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484675&idx=1&sn=4a4ac1c0f1279530b42fedacc6cca6e6&chksm=9bd7fb0baca0721dda1eaa1d00b9a520672dc9d5c3be762eeca869be35d7ce232922ba8e928b&scene=21#wechat_redirect">上篇文章</a> 聊了高楼扔鸡蛋问题，讲了一种效率不是很高，但是较为容易理解的动态规划解法。后台很多读者问如何更高效地解决这个问题，今天就谈两种思路，来优化一下这个问题，分别是二分查找优化和重新定义状态转移。</p>
<p>如果还不知道高楼扔鸡蛋问题的读者可以看下 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484675&idx=1&sn=4a4ac1c0f1279530b42fedacc6cca6e6&chksm=9bd7fb0baca0721dda1eaa1d00b9a520672dc9d5c3be762eeca869be35d7ce232922ba8e928b&scene=21#wechat_redirect">经典动态规划：高楼扔鸡蛋</a>，<strong>那篇文章详解了题目的含义和基本的动态规划解题思路，请确保理解前文，<strong><strong>因为</strong></strong>今天的优化都是基于这个基本解法的</strong>。</p>
<p>二分搜索的优化思路也许是我们可以尽力尝试写出的，而修改状态转移的解法可能是不容易想到的，可以借此见识一下动态规划算法设计的玄妙，当做思维拓展。</p>
<h2 id="一、二分搜索优化"><a href="#一、二分搜索优化" class="headerlink" title="一、二分搜索优化"></a>一、二分搜索优化</h2><p>之前提到过这个解法，核心是因为状态转移方程的单调性，这里可以具体展开看看。</p>
<p>题目要求最坏情况下至少需要扔几次鸡蛋才能测出鸡蛋恰好摔不碎的楼层<code>F</code>。首先简述一下原始动态规划的思路：</p>
<p><strong>1</strong>、暴力穷举尝试在所有楼层<code>1 &lt;= i &lt;= N</code>扔鸡蛋，每次选择尝试次数<strong>最少</strong>的那一层；</p>
<p><strong>2</strong>、每次扔鸡蛋有两种可能，要么碎，要么没碎；</p>
<p><strong>3</strong>、如果鸡蛋碎了，<code>F</code>应该在第<code>i</code>层下面，否则，<code>F</code>应该在第<code>i</code>层上面；</p>
<p><strong>4</strong>、鸡蛋是碎了还是没碎，取决于哪种情况下尝试次数<strong>更多</strong>，因为我们想求的是最坏情况下的结果。</p>
<p>核心的状态转移代码是这段：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 当前状态为 K 个鸡蛋，面对 N 层楼</span><br><span class="line"># 返回这个状态下的最优结果</span><br><span class="line">def <span class="title function_">dp</span><span class="params">(K, N)</span>:</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= i &lt;= N:</span><br><span class="line">        # 最坏情况下的最少扔鸡蛋次数</span><br><span class="line">        res = min(res, </span><br><span class="line">                  max( </span><br><span class="line">                        dp(K - <span class="number">1</span>, i - <span class="number">1</span>), # 碎</span><br><span class="line">                        dp(K, N - i)      # 没碎</span><br><span class="line">                     ) + <span class="number">1</span> # 在第 i 楼扔了一次</span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">return</span> </span><br></pre></td></tr></table></figure>

<p>这个 for 循环就是下面这个状态转移方程的具体代码实现：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/CyPTgO_20210429195258.png" alt="图片"></p>
<p>如果能够理解这个状态转移方程，那么就很容易理解二分查找的优化思路。</p>
<p>首先我们根据<code>dp(K, N)</code>数组的定义（有<code>K</code>个鸡蛋面对<code>N</code>层楼，最少需要扔 dp(K, N) 次），<strong>很容易知道<code>K</code>固定时，这个函数随着<code>N</code>的增加一定是单调递增的</strong>，无论你策略多聪明，楼层增加的话，测试次数一定要增加。</p>
<p>那么注意<code>dp(K - 1, i - 1)</code>和<code>dp(K, N - i)</code>这两个函数，其中<code>i</code>是从 1 到<code>N</code>单增的，如果我们固定<code>K</code>和<code>N</code>，<strong>把这两个函数看做关于<code>i</code>的函数，前者随着<code>i</code>的增加应该也是单调递增的，而后者随着<code>i</code>的增加应该是单调递减的</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/6NYUjf_20210429195215.png" alt="图片"></p>
<p>这时候求二者的较大值，再求这些最大值之中的最小值，其实就是求这两条直线交点，也就是红色折线的最低点嘛。</p>
<p>我们前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484598&idx=1&sn=69edaf4a7f6bfd0b1185cae5d0689c1d&chksm=9bd7fabeaca073a8820bc93cb67a8e26fa9eaa1ab9717b7e3ac41b4aac12235067c8af3520d5&scene=21#wechat_redirect">二分搜索只能用来查找元素吗？</a>讲过，二分查找的运用很广泛，形如下面这种形式的 for 循环代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (isOK(i))</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>都很有可能可以运用二分查找来优化线性搜索的复杂度，回顾这两个<code>dp</code>函数的曲线，我们要找的最低点其实就是这种情况：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= N; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (dp(K - <span class="number">1</span>, i - <span class="number">1</span>) == dp(K, N - i))</span><br><span class="line">        <span class="keyword">return</span> dp(K, N - i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>熟悉二分搜索的同学肯定敏感地想到了，这不就是相当于求 Valley（山谷）值嘛，可以用二分查找来快速寻找这个点的，直接看代码吧，整体的思路还是一样，只是加快了搜索速度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">superEggDrop</span><span class="params">(self, K: <span class="type">int</span>, N: <span class="type">int</span>)</span> -&gt; <span class="type">int</span>:</span><br><span class="line"></span><br><span class="line">    memo = dict()</span><br><span class="line">    def <span class="title function_">dp</span><span class="params">(K, N)</span>:</span><br><span class="line">        <span class="type">if</span> <span class="variable">K</span> <span class="operator">=</span>= <span class="number">1</span>: <span class="keyword">return</span> N</span><br><span class="line">        <span class="type">if</span> <span class="variable">N</span> <span class="operator">=</span>= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">if</span> (K, N) in memo:</span><br><span class="line">            <span class="keyword">return</span> memo[(K, N)]</span><br><span class="line"></span><br><span class="line">        # <span class="keyword">for</span> <span class="number">1</span> &lt;= i &lt;= N:</span><br><span class="line">        #     res = min(res, </span><br><span class="line">        #             max( </span><br><span class="line">        #                 dp(K - <span class="number">1</span>, i - <span class="number">1</span>), </span><br><span class="line">        #                 dp(K, N - i)      </span><br><span class="line">        #                 ) + <span class="number">1</span> </span><br><span class="line">        #             )</span><br><span class="line"></span><br><span class="line">        res = <span class="type">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        # 用二分搜索代替线性搜索</span><br><span class="line">        lo, hi = <span class="number">1</span>, N</span><br><span class="line">        <span class="keyword">while</span> lo &lt;= hi:</span><br><span class="line">            mid = (lo + hi) <span class="comment">// 2</span></span><br><span class="line">            broken = dp(K - <span class="number">1</span>, mid - <span class="number">1</span>) # 碎</span><br><span class="line">            not_broken = dp(K, N - mid) # 没碎</span><br><span class="line">            # res = min(max(碎，没碎) + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> broken &gt; not_broken:</span><br><span class="line">                hi = mid - <span class="number">1</span></span><br><span class="line">                res = min(res, broken + <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                lo = mid + <span class="number">1</span></span><br><span class="line">                res = min(res, not_broken + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        memo[(K, N)] = res</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp(K, N)</span><br></pre></td></tr></table></figure>

<p>这个算法的时间复杂度是多少呢？<strong>动态规划算法的时间复杂度就是子问题个数 × 函数本身的复杂度</strong>。</p>
<p>函数本身的复杂度就是忽略递归部分的复杂度，这里<code>dp</code>函数中用了一个二分搜索，所以函数本身的复杂度是 O(logN)。</p>
<p>子问题个数也就是不同状态组合的总数，显然是两个状态的乘积，也就是 O(KN)。</p>
<p>所以算法的总时间复杂度是 O(K<em>N</em>logN), 空间复杂度 O(KN)。效率上比之前的算法 O(KN^2) 要高效不少。</p>
<h2 id="二、重写状态转移"><a href="#二、重写状态转移" class="headerlink" title="二、重写状态转移"></a>二、重写状态转移</h2><p>前文 <a href="http://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247484469&idx=1&sn=e8d321c8ad62483874a997e9dd72da8f&chksm=9bd7fa3daca0732b316aa0afa58e70357e1cb7ab1fe0855d06bc4a852abb1b434c01c7dd19d6&scene=21#wechat_redirect">动态规划：不同的定义产生不同的解法</a> 就提过，找动态规划的状态转移本就是见仁见智，比较玄学的事情。不同的状态定义可以衍生出不同的解法，其解法和复杂程度都可能有巨大差异。这里就是一个很好的例子。</p>
<p>再回顾一下我们之前定义的<code>dp</code>数组含义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">dp</span><span class="params">(k, n)</span> -&gt; <span class="type">int</span></span><br><span class="line"># 当前状态为 k 个鸡蛋，面对 n 层楼</span><br><span class="line"># 返回这个状态下最少的扔鸡蛋次数</span><br></pre></td></tr></table></figure>

<p>用 dp 数组表示的话也是一样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[k][n] = m</span><br><span class="line"># 当前状态为 k 个鸡蛋，面对 n 层楼</span><br><span class="line"># 这个状态下最少的扔鸡蛋次数为 m</span><br></pre></td></tr></table></figure>

<p>按照这个定义，就是<strong>确定当前的鸡蛋个数和面对的楼层数，就知道最小扔鸡蛋次数</strong>。最终我们想要的答案就是<code>dp(K, N)</code>的结果。</p>
<p>这种思路下，肯定要穷举所有可能的扔法的，用二分搜索优化也只是做了「剪枝」，减小了搜索空间，但本质思路没有变，只不过是更聪明的穷举。</p>
<p>现在，我们稍微修改<code>dp</code>数组的定义，<strong>确定当前的鸡蛋个数和最多允许的扔鸡蛋次数，就知道能够确定<code>F</code>的最高楼层数</strong>。</p>
<p>有点绕口，具体来说是这个意思：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[k][m] = n</span><br><span class="line"># 当前有 k 个鸡蛋，可以尝试扔 m 次鸡蛋</span><br><span class="line"># 这个状态下，最坏情况下最多能确切测试一栋 n 层的楼</span><br><span class="line"></span><br><span class="line"># 比如说 dp[<span class="number">1</span>][<span class="number">7</span>] = <span class="number">7</span> 表示：</span><br><span class="line"># 现在有 <span class="number">1</span> 个鸡蛋，允许你扔 <span class="number">7</span> 次;</span><br><span class="line"># 这个状态下最多给你 <span class="number">7</span> 层楼，</span><br><span class="line"># 使得你可以确定楼层 F 使得鸡蛋恰好摔不碎</span><br><span class="line"># （一层一层线性探查嘛）</span><br></pre></td></tr></table></figure>

<p>这其实就是我们原始思路的一个「反向」版本，我们先不管这种思路的状态转移怎么写，先来思考一下这种定义之下，最终想求的答案是什么？</p>
<p>我们最终要求的其实是扔鸡蛋次数<code>m</code>，但是这时候<code>m</code>在状态之中而不是<code>dp</code>数组的结果，可以这样处理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">superEggDrop</span><span class="params">(<span class="type">int</span> K, <span class="type">int</span> N)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dp[K][m] &lt; N) &#123;</span><br><span class="line">        m++;</span><br><span class="line">        <span class="comment">// 状态转移...</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>题目不是<strong>给你<code>K</code>鸡蛋，<code>N</code>层楼，让你求最坏情况下最少的测试次数<code>m</code></strong> 吗？<code>while</code>循环结束的条件是<code>dp[K][m] == N</code>，也就是<strong>给你<code>K</code>个鸡蛋，允许测试<code>m</code>次，最坏情况下最多能测试<code>N</code>层楼</strong>。</p>
<p>注意看这两段描述，是完全一样的！所以说这样组织代码是正确的，关键就是状态转移方程怎么找呢？还得从我们原始的思路开始讲。之前的解法配了这样图帮助大家理解状态转移思路：</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/image-20210429195434229_20210429195434.png" alt="图片"></p>
<p>这个图描述的仅仅是某一个楼层<code>i</code>，原始解法还得线性或者二分扫描所有楼层，要求最大值、最小值。但是现在这种<code>dp</code>定义根本不需要这些了，基于下面两个事实：</p>
<p><strong>1、无论你在哪层楼扔鸡蛋，鸡蛋只可能摔碎或者没摔碎，碎了的话就测楼下，没碎的话就测楼上</strong>。</p>
<p><strong>2、无论你上楼还是下楼，总的楼层数 &#x3D; 楼上的楼层数 + 楼下的楼层数 + 1（当前这层楼）</strong>。</p>
<p>根据这个特点，可以写出下面的状态转移方程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dp[k][m] = dp[k][m-<span class="number">1</span>] + dp[k-<span class="number">1</span>][m-<span class="number">1</span>] + <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p><strong><code>dp[k][m - 1]</code>就是楼上的楼层数</strong>，因为鸡蛋个数<code>k</code>不变，也就是鸡蛋没碎，扔鸡蛋次数<code>m</code>减一；</p>
<p><strong><code>dp[k - 1][m - 1]</code>就是楼下的楼层数</strong>，因为鸡蛋个数<code>k</code>减一，也就是鸡蛋碎了，同时扔鸡蛋次数<code>m</code>减一。</p>
<p>PS：这个<code>m</code>为什么要减一而不是加一？之前定义得很清楚，这个<code>m</code>是一个允许的次数上界，而不是扔了几次。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/72KWkN_20210429195454.png" alt="图片"></p>
<p>至此，整个思路就完成了，只要把状态转移方程填进框架即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">superEggDrop</span><span class="params">(<span class="type">int</span> K, <span class="type">int</span> N)</span> &#123;</span><br><span class="line">    <span class="comment">// m 最多不会超过 N 次（线性扫描）</span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[K + <span class="number">1</span>][N + <span class="number">1</span>];</span><br><span class="line">    <span class="comment">// base case:</span></span><br><span class="line">    <span class="comment">// dp[0][..] = 0</span></span><br><span class="line">    <span class="comment">// dp[..][0] = 0</span></span><br><span class="line">    <span class="comment">// Java 默认初始化数组都为 0</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (dp[K][m] &lt; N) &#123;</span><br><span class="line">        m++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= K; k++)</span><br><span class="line">            dp[k][m] = dp[k][m - <span class="number">1</span>] + dp[k - <span class="number">1</span>][m - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果你还觉得这段代码有点难以理解，其实它就等同于这样写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> <span class="number">1</span>; dp[K][m] &lt; N; m++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= K; k++)</span><br><span class="line">        dp[k][m] = dp[k][m - <span class="number">1</span>] + dp[k - <span class="number">1</span>][m - <span class="number">1</span>] + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>看到这种代码形式就熟悉多了吧，因为我们要求的不是<code>dp</code>数组里的值，而是某个符合条件的索引<code>m</code>，所以用<code>while</code>循环来找到这个<code>m</code>而已。</p>
<p>这个算法的时间复杂度是多少？很明显就是两个嵌套循环的复杂度 O(KN)。</p>
<p>另外注意到<code>dp[m][k]</code>转移只和左边和左上的两个状态有关，所以很容易优化成一维<code>dp</code>数组，这里就不写了。</p>
<h2 id="三、进一步思考"><a href="#三、进一步思考" class="headerlink" title="三、进一步思考"></a>三、进一步思考</h2><p>再往下就要用一些数学方法了，不具体展开，就简单提一下思路吧。</p>
<p>在刚才的思路之上，<strong>注意函数<code>dp(m, k)</code>是随着<code>m</code>单增的，因为鸡蛋个数<code>k</code>不变时，允许的测试次数越多，可测试的楼层就越高。</strong></p>
<p>这里又可以借助二分搜索算法快速逼近<code>dp[K][m] == N</code>这个终止条件，时间复杂度进一步下降为 O(KlogN)，我们可以设<code>g(k,m)</code>等于……</p>
<p>算了算了，打住吧。我觉得我们能够写出 O(K<em>N</em>logN) 的二分优化算法就行了，后面的这些解法呢，听个响鼓个掌就行了，把欲望限制在能力的范围之内才能拥有快乐！</p>
<p>不过可以肯定的是，根据二分搜索代替线性扫描 m 的取值，代码的大致框架肯定是修改穷举 m 的 for 循环：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 把线性搜索改成二分搜索</span></span><br><span class="line"><span class="comment">// for (int m = 1; dp[K][m] &lt; N; m++)</span></span><br><span class="line"><span class="type">int</span> <span class="variable">lo</span> <span class="operator">=</span> <span class="number">1</span>, hi = N;</span><br><span class="line"><span class="keyword">while</span> (lo &lt; hi) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (lo + hi) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (... &lt; N) &#123;</span><br><span class="line">        lo = ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        hi = ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>; k &lt;= K; k++)</span><br><span class="line">        <span class="comment">// 状态转移方程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>简单总结一下吧，<strong>第一个二分优化是利用了<code>dp</code>函数的单调性</strong>，用二分查找技巧快速搜索答案；<strong>第二种优化是巧妙地修改了状态转移方程</strong>，简化了求解了流程，但相应的，解题逻辑比较难以想到；后续还可以用一些数学方法和二分搜索进一步优化第二种解法，不过看了看镜子中的发量，算了。</p>
<p>本文终，希望对你有一点启发。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>经典动态规划：高楼扔鸡蛋</title>
    <url>/posts/e7520fcc/</url>
    <content><![CDATA[<h1 id="经典动态规划：高楼扔鸡蛋"><a href="#经典动态规划：高楼扔鸡蛋" class="headerlink" title="经典动态规划：高楼扔鸡蛋"></a>经典动态规划：高楼扔鸡蛋</h1><p><a href="https://mp.weixin.qq.com/mp/appmsgalbum?__biz=MzAxODQxMDM0Mw==&action=getalbum&album_id=1318881141113536512&scene=173&from_msgid=2247484675&from_itemidx=1&count=3&nolastread=1#wechat_redirect">手把手刷动态规划 25个</a></p>
<h2 id="预计阅读时间：7-分钟"><a href="#预计阅读时间：7-分钟" class="headerlink" title="预计阅读时间：7 分钟"></a>预计阅读时间：7 分钟</h2><p>今天要聊一个很经典的算法问题，若干层楼，若干个鸡蛋，让你算出最少的尝试次数，找到鸡蛋恰好摔不碎的那层楼。国内大厂以及谷歌脸书面试都经常考察这道题，只不过他们觉得扔鸡蛋太浪费，改成扔杯子，扔破碗什么的。</p>
<p>具体的问题等会再说，但是这道题的解法技巧很多，光动态规划就好几种效率不同的思路，最后还有一种极其高效数学解法。秉承咱们号一贯的作风，拒绝奇技淫巧，拒绝过于诡异的技巧，因为这些技巧无法举一反三，学了不太划算。</p>
<p>下面就来用我们一直强调的动态规划通用思路来研究一下这道题。</p>
<h2 id="一、解析题目"><a href="#一、解析题目" class="headerlink" title="一、解析题目"></a>一、解析题目</h2><p>题目是这样：你面前有一栋从 1 到<code>N</code>共<code>N</code>层的楼，然后给你<code>K</code>个鸡蛋（<code>K</code>至少为 1）。现在确定这栋楼存在楼层<code>0 &lt;= F &lt;= N</code>，在这层楼将鸡蛋扔下去，鸡蛋<strong>恰好没摔碎</strong>（高于<code>F</code>的楼层都会碎，低于<code>F</code>的楼层都不会碎）。现在问你，<strong>最坏</strong>情况下，你<strong>至少</strong>要扔几次鸡蛋，才能<strong>确定</strong>这个楼层<code>F</code>呢？</p>
<p>PS：F 可以为 0，比如说鸡蛋在 1 层都能摔碎，那么 F &#x3D; 0。</p>
<p>也就是让你找摔不碎鸡蛋的最高楼层<code>F</code>，但什么叫「最坏情况」下「至少」要扔几次呢？我们分别举个例子就明白了。</p>
<p>比方说<strong>现在先不管鸡蛋个数的限制</strong>，有 7 层楼，你怎么去找鸡蛋恰好摔碎的那层楼？</p>
<p>最原始的方式就是线性扫描：我先在 1 楼扔一下，没碎，我再去 2 楼扔一下，没碎，我再去 3 楼……</p>
<p>以这种策略，<strong>最坏</strong>情况应该就是我试到第 7 层鸡蛋也没碎（<code>F = 7</code>），也就是我扔了 7 次鸡蛋。</p>
<p>现在你应该理解什么叫做「最坏情况」下了，<strong>鸡蛋破碎一定发生在搜索区间穷尽时</strong>，不会说你在第 1 层摔一下鸡蛋就碎了，这是你运气好，不是最坏情况。</p>
<p>现在再来理解一下什么叫「至少」要扔几次。依然不考虑鸡蛋个数限制，同样是 7 层楼，我们可以优化策略。</p>
<p>最好的策略是使用二分查找思路，我先去第<code>(1 + 7) / 2 = 4</code>层扔一下：</p>
<p>如果碎了说明<code>F</code>小于 4，我就去第<code>(1 + 3) / 2 = 2</code>层试……</p>
<p>如果没碎说明<code>F</code>大于等于 4，我就去第<code>(5 + 7) / 2 = 6</code>层试……</p>
<p>以这种策略，<strong>最坏</strong>情况应该是试到第 7 层鸡蛋还没碎（<code>F = 7</code>），或者鸡蛋一直碎到第 1 层（<code>F = 0</code>）。然而无论那种最坏情况，只需要试<code>log7</code>向上取整等于 3 次，比刚才的 7 次要少，这就是所谓的<strong>至少</strong>要扔几次。</p>
<p>PS：这有点像 Big O 表示法计算算法的复杂度。</p>
<p>实际上，如果不限制鸡蛋个数的话，二分思路显然可以得到最少尝试的次数，但问题是，<strong>现在给你了鸡蛋个数的限制<code>K</code>，直接使用二分思路就不行了</strong>。</p>
<p>比如说只给你 1 个鸡蛋，7 层楼，你敢用二分吗？你直接去第 4 层扔一下，如果鸡蛋没碎还好，但如果碎了你就没有鸡蛋继续测试了，无法确定鸡蛋恰好摔不碎的楼层<code>F</code>了。这种情况下只能用线性扫描的方法，算法返回结果应该是 7。</p>
<p>有的读者也许会有这种想法：二分查找排除楼层的速度无疑是最快的，那干脆先用二分查找，等到只剩 1 个鸡蛋的时候再执行线性扫描，这样得到的结果是不是就是最少的扔鸡蛋次数呢？</p>
<p>很遗憾，并不是，比如说把楼层变高一些，100 层，给你 2 个鸡蛋，你在 50 层扔一下，碎了，那就只能线性扫描 1～49 层了，最坏情况下要扔 50 次。</p>
<p>如果不要「二分」，变成「五分」「十分」都会大幅减少最坏情况下的尝试次数。比方说第一个鸡蛋每隔十层楼扔，在哪里碎了第二个鸡蛋一个个线性扫描，总共不会超过 20 次。</p>
<p>最优解其实是 14 次。最优策略非常多，而且并没有什么规律可言。</p>
<p>说了这么多废话，就是确保大家理解了题目的意思，而且认识到这个题目确实复杂，就连我们手算都不容易，如何用算法解决呢？</p>
<h2 id="二、思路分析"><a href="#二、思路分析" class="headerlink" title="二、思路分析"></a>二、思路分析</h2><p>对动态规划问题，直接套我们以前多次强调的框架即可：这个问题有什么「状态」，有什么「选择」，然后穷举。</p>
<p>**「状态」很明显，就是当前拥有的鸡蛋数<code>K</code>和需要测试的楼层数<code>N</code>**。随着测试的进行，鸡蛋个数可能减少，楼层的搜索范围会减小，这就是状态的变化。</p>
<p><strong>「选择」其实就是去选择哪层楼扔鸡蛋</strong>。回顾刚才的线性扫描和二分思路，二分查找每次选择到楼层区间的中间去扔鸡蛋，而线性扫描选择一层层向上测试。不同的选择会造成状态的转移。</p>
<p>现在明确了「状态」和「选择」，<strong>动态规划的基本思路就形成了</strong>：肯定是个二维的<code>dp</code>数组或者带有两个状态参数的<code>dp</code>函数来表示状态转移；外加一个 for 循环来遍历所有选择，择最优的选择更新结果 ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 当前状态为 (K 个鸡蛋，N 层楼)</span><br><span class="line"># 返回这个状态下的最优结果</span><br><span class="line">def <span class="title function_">dp</span><span class="params">(K, N)</span>:</span><br><span class="line">    <span class="type">int</span> res</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= i &lt;= N:</span><br><span class="line">        res = min(res, 这次在第 i 层楼扔鸡蛋)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>这段伪码还没有展示递归和状态转移，不过大致的算法框架已经完成了。</p>
<p>我们在第<code>i</code>层楼扔了鸡蛋之后，可能出现两种情况：鸡蛋碎了，鸡蛋没碎。<strong>注意，这时候状态转移就来了</strong>：</p>
<p><strong>如果鸡蛋碎了</strong>，那么鸡蛋的个数<code>K</code>应该减一，搜索的楼层区间应该从<code>[1..N]</code>变为<code>[1..i-1]</code>共<code>i-1</code>层楼；</p>
<p><strong>如果鸡蛋没碎</strong>，那么鸡蛋的个数<code>K</code>不变，搜索的楼层区间应该从 <code>[1..N]</code>变为<code>[i+1..N]</code>共<code>N-i</code>层楼。</p>
<p><img src="https://cdn.jsdelivr.net/gh/swimminghao/picture@main/img/CvIp2u_20210429194724.png" alt="图片"></p>
<p>PS：细心的读者可能会问，在第<code>i</code>层楼扔鸡蛋如果没碎，楼层的搜索区间缩小至上面的楼层，是不是应该包含第<code>i</code>层楼呀？不必，因为已经包含了。开头说了 F 是可以等于 0 的，向上递归后，第<code>i</code>层楼其实就相当于第 0 层，可以被取到，所以说并没有错误。</p>
<p>因为我们要求的是<strong>最坏情况</strong>下扔鸡蛋的次数，所以鸡蛋在第<code>i</code>层楼碎没碎，取决于那种情况的结果<strong>更大</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">dp</span><span class="params">(K, N)</span>:</span><br><span class="line">    <span class="keyword">for</span> <span class="number">1</span> &lt;= i &lt;= N:</span><br><span class="line">        # 最坏情况下的最少扔鸡蛋次数</span><br><span class="line">        res = min(res, </span><br><span class="line">                  max( </span><br><span class="line">                        dp(K - <span class="number">1</span>, i - <span class="number">1</span>), # 碎</span><br><span class="line">                        dp(K, N - i)      # 没碎</span><br><span class="line">                     ) + <span class="number">1</span> # 在第 i 楼扔了一次</span><br><span class="line">                 )</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<p>递归的 base case 很容易理解：当楼层数<code>N</code>等于 0 时，显然不需要扔鸡蛋；当鸡蛋数<code>K</code>为 1 时，显然只能线性扫描所有楼层：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">dp</span><span class="params">(K, N)</span>:</span><br><span class="line">    <span class="type">if</span> <span class="variable">K</span> <span class="operator">=</span>= <span class="number">1</span>: <span class="keyword">return</span> N</span><br><span class="line">    <span class="type">if</span> <span class="variable">N</span> <span class="operator">=</span>= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>

<p>至此，其实这道题就解决了！只要添加一个备忘录消除重叠子问题即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">def <span class="title function_">superEggDrop</span><span class="params">(K: <span class="type">int</span>, N: <span class="type">int</span>)</span>:</span><br><span class="line"></span><br><span class="line">    memo = dict()</span><br><span class="line">    def <span class="title function_">dp</span><span class="params">(K, N)</span> -&gt; <span class="type">int</span>:</span><br><span class="line">        # base <span class="keyword">case</span></span><br><span class="line">        <span class="type">if</span> <span class="variable">K</span> <span class="operator">=</span>= <span class="number">1</span>: <span class="keyword">return</span> N</span><br><span class="line">        <span class="type">if</span> <span class="variable">N</span> <span class="operator">=</span>= <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        # 避免重复计算</span><br><span class="line">        <span class="keyword">if</span> (K, N) in memo:</span><br><span class="line">            <span class="keyword">return</span> memo[(K, N)]</span><br><span class="line"></span><br><span class="line">        res = <span class="type">float</span>(<span class="string">&#x27;INF&#x27;</span>)</span><br><span class="line">        # 穷举所有可能的选择</span><br><span class="line">        <span class="keyword">for</span> i in <span class="title function_">range</span><span class="params">(<span class="number">1</span>, N + <span class="number">1</span>)</span>:</span><br><span class="line">            res = min(res, </span><br><span class="line">                      max(</span><br><span class="line">                            dp(K, N - i), </span><br><span class="line">                            dp(K - <span class="number">1</span>, i - <span class="number">1</span>)</span><br><span class="line">                         ) + <span class="number">1</span></span><br><span class="line">                  )</span><br><span class="line">        # 记入备忘录</span><br><span class="line">        memo[(K, N)] = res</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp(K, N)</span><br></pre></td></tr></table></figure>

<p>这个算法的时间复杂度是多少呢？<strong>动态规划算法的时间复杂度就是子问题个数 × 函数本身的复杂度</strong>。</p>
<p>函数本身的复杂度就是忽略递归部分的复杂度，这里<code>dp</code>函数中有一个 for 循环，所以函数本身的复杂度是 O(N)。</p>
<p>子问题个数也就是不同状态组合的总数，显然是两个状态的乘积，也就是 O(KN)。</p>
<p>所以算法的总时间复杂度是 O(K*N^2), 空间复杂度为子问题个数，即 O(KN)。</p>
<h2 id="三、疑难解答"><a href="#三、疑难解答" class="headerlink" title="三、疑难解答"></a>三、疑难解答</h2><p>这个问题很复杂，但是算法代码却十分简洁，这就是动态规划的特性，穷举加备忘录&#x2F;DP table 优化，真的没啥新意。</p>
<p>首先，有读者可能不理解代码中为什么用一个 for 循环遍历楼层<code>[1..N]</code>，也许会把这个逻辑和之前探讨的线性扫描混为一谈。其实不是的，<strong>这只是在做一次「选择」</strong>。</p>
<p>比方说你有 2 个鸡蛋，面对 10 层楼，你得拿一个鸡蛋去某一层楼扔对吧？那选择去哪一层楼扔呢？不知道，那就把这 10 层楼全试一遍。至于鸡蛋碎没碎，下次怎么选择不用你操心，有正确的状态转移，递归会算出每个选择的代价，我们取最优的那个就是最优解。</p>
<p>其实，这个问题还有更好的解法，比如修改代码中的 for 循环为二分搜索，可以将时间复杂度降为 O(K<em>N</em>logN)；再改进动态规划解法可以进一步降为 O(KN)；使用数学方法解决，时间复杂度达到最优 O(K*logN)，空间复杂度达到 O(1)。</p>
<p>二分的解法也有点误导性，你很可能以为它跟我们之前讨论的二分思路扔鸡蛋有关系，实际上没有半毛钱关系。能用二分搜索是因为状态转移方程的函数图像具有单调性，可以快速找到最小值。</p>
<p>这里就不展开以上解法了，有兴趣的读者可以点击「阅读原文」查看。</p>
<p>我觉得吧，我们这种解法就够了：<strong>找状态，做选择</strong>，足够清晰易懂，可流程化，可举一反三。掌握这套框架学有余力的话，二分查找的优化应该可以看懂，之后的优化也就随缘吧。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>感悟</tag>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
